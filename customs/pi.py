#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue May  7 19:47:53 2024 by generateDS.py version 2.43.3.
# Python 3.12.3 (tags/v3.12.3:f6650f9, Apr  9 2024, 14:05:25) [MSC v.1938 64 bit (AMD64)]
#
# Command line options:
#   ('-o', './customs/pi.py')
#   ('-s', './customs/pisub.py')
#
# Command line arguments:
#   ./customs/ESADout_CU.xsd
#
# Command line:
#   C:\Users\1\PythonApp\generateDS-2.43.3\generateDS.py -o "./customs/pi.py" -s "./customs/pisub.py" ./customs/ESADout_CU.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.43.3
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            value = ('%.15f' % float(input_data)).rstrip('0')
            if value.endswith('.'):
                value += '0'
            return value
    
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)


#
# Start enum classes
#
class TransportCategoryCodeType(str, Enum):
    """TransportCategoryCodeType -- К
    а
    т
    е
    г
    о
    р
    и
    я
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    .
    Д
    о
    п
    у
    с
    т
    и
    м
    ы
    е
    з
    н
    а
    ч
    е
    н
    и
    я
    : A,B,C,D,E (
    л
    а
    т
    и
    н
    с
    к
    и
    е
    с
    и
    м
    в
    о
    л
    ы
    ). 1
    с
    и
    м
    в
    о
    л
    
    """
    A='A'
    B='B'
    C='C'
    D='D'
    E='E'


#
# Start data representation classes
#
class AuthoriziedOperatorDetailsType(GeneratedsSuper):
    """AuthoriziedOperatorDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    м
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    м
    о
    п
    е
    р
    а
    т
    о
    р
    е
    OperatorRegistryDoc -- Н
    о
    м
    е
    р
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    OperatorAddress -- А
    д
    р
    е
    с
    п
    о
    м
    е
    щ
    е
    н
    и
    й
    ,
    о
    т
    к
    р
    ы
    т
    ы
    х
    п
    л
    о
    щ
    а
    д
    о
    к
    и
    л
    и
    и
    н
    ы
    х
    т
    е
    р
    р
    и
    т
    о
    р
    и
    й
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    п
    е
    р
    а
    т
    о
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OperatorRegistryDoc=None, OperatorAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        self.OperatorRegistryDoc = OperatorRegistryDoc
        self.OperatorRegistryDoc_nsprefix_ = "catESAD_cu"
        self.OperatorAddress = OperatorAddress
        self.OperatorAddress_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AuthoriziedOperatorDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AuthoriziedOperatorDetailsType.subclass:
            return AuthoriziedOperatorDetailsType.subclass(*args_, **kwargs_)
        else:
            return AuthoriziedOperatorDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OperatorRegistryDoc(self):
        return self.OperatorRegistryDoc
    def set_OperatorRegistryDoc(self, OperatorRegistryDoc):
        self.OperatorRegistryDoc = OperatorRegistryDoc
    def get_OperatorAddress(self):
        return self.OperatorAddress
    def set_OperatorAddress(self, OperatorAddress):
        self.OperatorAddress = OperatorAddress
    def has__content(self):
        if (
            self.OperatorRegistryDoc is not None or
            self.OperatorAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='AuthoriziedOperatorDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AuthoriziedOperatorDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AuthoriziedOperatorDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AuthoriziedOperatorDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AuthoriziedOperatorDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='AuthoriziedOperatorDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='AuthoriziedOperatorDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OperatorRegistryDoc is not None:
            namespaceprefix_ = self.OperatorRegistryDoc_nsprefix_ + ':' if (UseCapturedNS_ and self.OperatorRegistryDoc_nsprefix_) else ''
            self.OperatorRegistryDoc.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperatorRegistryDoc', pretty_print=pretty_print)
        if self.OperatorAddress is not None:
            namespaceprefix_ = self.OperatorAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.OperatorAddress_nsprefix_) else ''
            self.OperatorAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperatorAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OperatorRegistryDoc':
            obj_ = AEORegistryIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperatorRegistryDoc = obj_
            obj_.original_tagname_ = 'OperatorRegistryDoc'
        elif nodeName_ == 'OperatorAddress':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperatorAddress = obj_
            obj_.original_tagname_ = 'OperatorAddress'
# end class AuthoriziedOperatorDetailsType


class ESADout_CUGoodsLocationType(GeneratedsSuper):
    """ESADout_CUGoodsLocationType -- М
    е
    с
    т
    о
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 30
    InformationTypeCode -- К
    о
    д
    м
    е
    с
    т
    а
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    c
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    м
    е
    с
    т
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    CustomsOffice -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    м
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    о
    р
    г
    а
    н
    о
    в
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    и
    в
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    х
    -
    ч
    л
    е
    н
    а
    х
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    CustomsCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    LocationName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    ж
    е
    л
    е
    з
    н
    о
    д
    о
    р
    о
    ж
    н
    о
    й
    с
    т
    а
    н
    ц
    и
    и
    /
    м
    о
    р
    с
    к
    о
    г
    о
    (
    р
    е
    ч
    н
    о
    г
    о
    )
    п
    о
    р
    т
    а
    GoodsLocationPlace -- С
    в
    е
    д
    е
    н
    и
    я
    о
    м
    е
    с
    т
    о
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    и
    т
    о
    в
    а
    р
    о
    в
    GoodsLocationWarehouse -- Р
    а
    з
    р
    е
    ш
    е
    н
    и
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    н
    а
    :
    в
    р
    е
    м
    е
    н
    н
    о
    е
    х
    р
    а
    н
    е
    н
    и
    е
    т
    о
    в
    а
    р
    о
    в
    ,
    с
    к
    л
    а
    д
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    х
    р
    а
    н
    е
    н
    и
    я
    ,
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    с
    к
    л
    а
    д
    ,
    с
    в
    о
    б
    о
    д
    н
    ы
    й
    с
    к
    л
    а
    д
    ,
    м
    а
    г
    а
    з
    и
    н
    б
    е
    с
    п
    о
    ш
    л
    и
    н
    н
    о
    й
    т
    о
    р
    г
    о
    в
    л
    и
    ,
    п
    о
    м
    е
    щ
    е
    н
    и
    е
    ,
    о
    т
    к
    р
    ы
    т
    ы
    е
    п
    л
    о
    щ
    а
    д
    к
    и
    и
    и
    н
    ы
    е
    т
    е
    р
    р
    и
    т
    о
    р
    и
    и
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    п
    е
    р
    а
    т
    о
    р
    а
    ,
    с
    к
    л
    а
    д
    х
    р
    а
    н
    е
    н
    и
    я
    с
    о
    б
    с
    т
    в
    е
    н
    н
    ы
    х
    т
    о
    в
    а
    р
    о
    в
    RegisterDocumentIdDetails -- С
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    о
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    ,
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    о
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    в
    л
    а
    д
    е
    л
    ь
    ц
    е
    в
    с
    к
    л
    а
    д
    о
    в
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    х
    р
    а
    н
    е
    н
    и
    я
    ,
    д
    о
    к
    у
    м
    е
    н
    т
    (
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    о
    ),
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    ю
    л
    и
    ц
    а
    в
    к
    а
    ч
    е
    с
    т
    в
    е
    р
    е
    з
    и
    д
    е
    н
    т
    а
    (
    у
    ч
    а
    с
    т
    н
    и
    к
    а
    )
    с
    в
    о
    б
    о
    д
    н
    о
    й
    (
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    о
    й
    ,
    о
    с
    о
    б
    о
    й
    )
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    й
    з
    о
    н
    ы
    Transport -- С
    в
    е
    д
    е
    н
    и
    я
    о
    м
    е
    с
    т
    о
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    и
    т
    о
    в
    а
    р
    о
    в
    -
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    Address -- А
    д
    р
    е
    с
    м
    е
    с
    т
    о
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformationTypeCode=None, CustomsOffice=None, CustomsCountryCode=None, LocationName=None, GoodsLocationPlace=None, GoodsLocationWarehouse=None, RegisterDocumentIdDetails=None, Transport=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        self.InformationTypeCode = InformationTypeCode
        self.validate_Code2Type(self.InformationTypeCode)
        self.InformationTypeCode_nsprefix_ = "clt_ru"
        self.CustomsOffice = CustomsOffice
        self.validate_CustomsCodeType(self.CustomsOffice)
        self.CustomsOffice_nsprefix_ = "clt_ru"
        self.CustomsCountryCode = CustomsCountryCode
        self.validate_CountryA2CodeType(self.CustomsCountryCode)
        self.CustomsCountryCode_nsprefix_ = "clt_ru"
        self.LocationName = LocationName
        self.validate_NameType(self.LocationName)
        self.LocationName_nsprefix_ = "clt_ru"
        self.GoodsLocationPlace = GoodsLocationPlace
        self.GoodsLocationPlace_nsprefix_ = "catESAD_cu"
        self.GoodsLocationWarehouse = GoodsLocationWarehouse
        self.GoodsLocationWarehouse_nsprefix_ = "ESADout_CU"
        self.RegisterDocumentIdDetails = RegisterDocumentIdDetails
        self.RegisterDocumentIdDetails_nsprefix_ = "catESAD_cu"
        self.Transport = Transport
        self.Transport_nsprefix_ = "catESAD_cu"
        self.Address = Address
        self.Address_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUGoodsLocationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUGoodsLocationType.subclass:
            return ESADout_CUGoodsLocationType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUGoodsLocationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformationTypeCode(self):
        return self.InformationTypeCode
    def set_InformationTypeCode(self, InformationTypeCode):
        self.InformationTypeCode = InformationTypeCode
    def get_CustomsOffice(self):
        return self.CustomsOffice
    def set_CustomsOffice(self, CustomsOffice):
        self.CustomsOffice = CustomsOffice
    def get_CustomsCountryCode(self):
        return self.CustomsCountryCode
    def set_CustomsCountryCode(self, CustomsCountryCode):
        self.CustomsCountryCode = CustomsCountryCode
    def get_LocationName(self):
        return self.LocationName
    def set_LocationName(self, LocationName):
        self.LocationName = LocationName
    def get_GoodsLocationPlace(self):
        return self.GoodsLocationPlace
    def set_GoodsLocationPlace(self, GoodsLocationPlace):
        self.GoodsLocationPlace = GoodsLocationPlace
    def get_GoodsLocationWarehouse(self):
        return self.GoodsLocationWarehouse
    def set_GoodsLocationWarehouse(self, GoodsLocationWarehouse):
        self.GoodsLocationWarehouse = GoodsLocationWarehouse
    def get_RegisterDocumentIdDetails(self):
        return self.RegisterDocumentIdDetails
    def set_RegisterDocumentIdDetails(self, RegisterDocumentIdDetails):
        self.RegisterDocumentIdDetails = RegisterDocumentIdDetails
    def get_Transport(self):
        return self.Transport
    def set_Transport(self, Transport):
        self.Transport = Transport
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.InformationTypeCode is not None or
            self.CustomsOffice is not None or
            self.CustomsCountryCode is not None or
            self.LocationName is not None or
            self.GoodsLocationPlace is not None or
            self.GoodsLocationWarehouse is not None or
            self.RegisterDocumentIdDetails is not None or
            self.Transport is not None or
            self.Address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='ESADout_CUGoodsLocationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUGoodsLocationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUGoodsLocationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUGoodsLocationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUGoodsLocationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUGoodsLocationType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='ESADout_CUGoodsLocationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformationTypeCode is not None:
            namespaceprefix_ = self.InformationTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InformationTypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformationTypeCode>%s</%sInformationTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformationTypeCode), input_name='InformationTypeCode')), namespaceprefix_ , eol_))
        if self.CustomsOffice is not None:
            namespaceprefix_ = self.CustomsOffice_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsOffice_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsOffice>%s</%sCustomsOffice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsOffice), input_name='CustomsOffice')), namespaceprefix_ , eol_))
        if self.CustomsCountryCode is not None:
            namespaceprefix_ = self.CustomsCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCountryCode>%s</%sCustomsCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCountryCode), input_name='CustomsCountryCode')), namespaceprefix_ , eol_))
        if self.LocationName is not None:
            namespaceprefix_ = self.LocationName_nsprefix_ + ':' if (UseCapturedNS_ and self.LocationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocationName>%s</%sLocationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocationName), input_name='LocationName')), namespaceprefix_ , eol_))
        if self.GoodsLocationPlace is not None:
            namespaceprefix_ = self.GoodsLocationPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsLocationPlace_nsprefix_) else ''
            self.GoodsLocationPlace.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsLocationPlace', pretty_print=pretty_print)
        if self.GoodsLocationWarehouse is not None:
            namespaceprefix_ = self.GoodsLocationWarehouse_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsLocationWarehouse_nsprefix_) else ''
            self.GoodsLocationWarehouse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsLocationWarehouse', pretty_print=pretty_print)
        if self.RegisterDocumentIdDetails is not None:
            namespaceprefix_ = self.RegisterDocumentIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RegisterDocumentIdDetails_nsprefix_) else ''
            self.RegisterDocumentIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RegisterDocumentIdDetails', pretty_print=pretty_print)
        if self.Transport is not None:
            namespaceprefix_ = self.Transport_nsprefix_ + ':' if (UseCapturedNS_ and self.Transport_nsprefix_) else ''
            self.Transport.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Transport', pretty_print=pretty_print)
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformationTypeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InformationTypeCode')
            value_ = self.gds_validate_string(value_, node, 'InformationTypeCode')
            self.InformationTypeCode = value_
            self.InformationTypeCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.InformationTypeCode)
        elif nodeName_ == 'CustomsOffice':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsOffice')
            value_ = self.gds_validate_string(value_, node, 'CustomsOffice')
            self.CustomsOffice = value_
            self.CustomsOffice_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsOffice)
        elif nodeName_ == 'CustomsCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCountryCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCountryCode')
            self.CustomsCountryCode = value_
            self.CustomsCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CustomsCountryCode)
        elif nodeName_ == 'LocationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocationName')
            value_ = self.gds_validate_string(value_, node, 'LocationName')
            self.LocationName = value_
            self.LocationName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.LocationName)
        elif nodeName_ == 'GoodsLocationPlace':
            obj_ = CUGoodsLocationPlaceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsLocationPlace = obj_
            obj_.original_tagname_ = 'GoodsLocationPlace'
        elif nodeName_ == 'GoodsLocationWarehouse':
            obj_ = CUWarehousePlaceType29.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsLocationWarehouse = obj_
            obj_.original_tagname_ = 'GoodsLocationWarehouse'
        elif nodeName_ == 'RegisterDocumentIdDetails':
            obj_ = AEORegistryIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RegisterDocumentIdDetails = obj_
            obj_.original_tagname_ = 'RegisterDocumentIdDetails'
        elif nodeName_ == 'Transport':
            obj_ = CUTransportType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transport = obj_
            obj_.original_tagname_ = 'Transport'
        elif nodeName_ == 'Address':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
# end class ESADout_CUGoodsLocationType


class ESADout_CUPaymentsType(GeneratedsSuper):
    """ESADout_CUPaymentsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    п
    л
    а
    ч
    и
    в
    а
    е
    м
    ы
    х
    п
    л
    а
    т
    е
    ж
    а
    х
    ,
    п
    л
    а
    т
    е
    ж
    н
    ы
    х
    п
    о
    р
    у
    ч
    е
    н
    и
    я
    х
    ,
    о
    т
    с
    р
    о
    ч
    к
    е
    п
    л
    а
    т
    е
    ж
    е
    й
    .
    Г
    р
    . 48,
    В
    ESADout_CUCustomsPayment -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    п
    л
    а
    т
    е
    .
    Г
    р
    .
    В
    CUDelayPayments -- О
    т
    с
    р
    о
    ч
    к
    а
    п
    л
    а
    т
    е
    ж
    е
    й
    г
    р
    .48
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ESADout_CUCustomsPayment=None, CUDelayPayments=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        if ESADout_CUCustomsPayment is None:
            self.ESADout_CUCustomsPayment = []
        else:
            self.ESADout_CUCustomsPayment = ESADout_CUCustomsPayment
        self.ESADout_CUCustomsPayment_nsprefix_ = "ESADout_CU"
        if CUDelayPayments is None:
            self.CUDelayPayments = []
        else:
            self.CUDelayPayments = CUDelayPayments
        self.CUDelayPayments_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUPaymentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUPaymentsType.subclass:
            return ESADout_CUPaymentsType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUPaymentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ESADout_CUCustomsPayment(self):
        return self.ESADout_CUCustomsPayment
    def set_ESADout_CUCustomsPayment(self, ESADout_CUCustomsPayment):
        self.ESADout_CUCustomsPayment = ESADout_CUCustomsPayment
    def add_ESADout_CUCustomsPayment(self, value):
        self.ESADout_CUCustomsPayment.append(value)
    def insert_ESADout_CUCustomsPayment_at(self, index, value):
        self.ESADout_CUCustomsPayment.insert(index, value)
    def replace_ESADout_CUCustomsPayment_at(self, index, value):
        self.ESADout_CUCustomsPayment[index] = value
    def get_CUDelayPayments(self):
        return self.CUDelayPayments
    def set_CUDelayPayments(self, CUDelayPayments):
        self.CUDelayPayments = CUDelayPayments
    def add_CUDelayPayments(self, value):
        self.CUDelayPayments.append(value)
    def insert_CUDelayPayments_at(self, index, value):
        self.CUDelayPayments.insert(index, value)
    def replace_CUDelayPayments_at(self, index, value):
        self.CUDelayPayments[index] = value
    def has__content(self):
        if (
            self.ESADout_CUCustomsPayment or
            self.CUDelayPayments
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='ESADout_CUPaymentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUPaymentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUPaymentsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUPaymentsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUPaymentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUPaymentsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='ESADout_CUPaymentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ESADout_CUCustomsPayment_ in self.ESADout_CUCustomsPayment:
            namespaceprefix_ = self.ESADout_CUCustomsPayment_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUCustomsPayment_nsprefix_) else ''
            ESADout_CUCustomsPayment_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUCustomsPayment', pretty_print=pretty_print)
        for CUDelayPayments_ in self.CUDelayPayments:
            namespaceprefix_ = self.CUDelayPayments_nsprefix_ + ':' if (UseCapturedNS_ and self.CUDelayPayments_nsprefix_) else ''
            CUDelayPayments_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CUDelayPayments', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ESADout_CUCustomsPayment':
            obj_ = CustomsPaymentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUCustomsPayment.append(obj_)
            obj_.original_tagname_ = 'ESADout_CUCustomsPayment'
        elif nodeName_ == 'CUDelayPayments':
            obj_ = CUDelayPaymentsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CUDelayPayments.append(obj_)
            obj_.original_tagname_ = 'CUDelayPayments'
# end class ESADout_CUPaymentsType


class TDDeliveryPlaceType(GeneratedsSuper):
    """TDDeliveryPlaceType -- М
    е
    с
    т
    о
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    п
    р
    и
    т
    р
    а
    н
    з
    и
    т
    е
    .
    г
    р
    53
    Т
    Д
    NumberCustomsZone -- Н
    о
    м
    е
    р
    (
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    )
    з
    о
    н
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    к
    о
    н
    т
    р
    о
    л
    я
    DeliveryCustomsOffice -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    п
    р
    и
    т
    р
    а
    н
    з
    и
    т
    е
    .
    г
    р
    .53
    Т
    Д
    AuthoriziedOperatorDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    м
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    м
    о
    п
    е
    р
    а
    т
    о
    р
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NumberCustomsZone=None, DeliveryCustomsOffice=None, AuthoriziedOperatorDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        self.NumberCustomsZone = NumberCustomsZone
        self.validate_DocumentNumberType(self.NumberCustomsZone)
        self.NumberCustomsZone_nsprefix_ = "clt_ru"
        self.DeliveryCustomsOffice = DeliveryCustomsOffice
        self.DeliveryCustomsOffice_nsprefix_ = "cat_ru"
        self.AuthoriziedOperatorDetails = AuthoriziedOperatorDetails
        self.AuthoriziedOperatorDetails_nsprefix_ = "ESADout_CU"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TDDeliveryPlaceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TDDeliveryPlaceType.subclass:
            return TDDeliveryPlaceType.subclass(*args_, **kwargs_)
        else:
            return TDDeliveryPlaceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NumberCustomsZone(self):
        return self.NumberCustomsZone
    def set_NumberCustomsZone(self, NumberCustomsZone):
        self.NumberCustomsZone = NumberCustomsZone
    def get_DeliveryCustomsOffice(self):
        return self.DeliveryCustomsOffice
    def set_DeliveryCustomsOffice(self, DeliveryCustomsOffice):
        self.DeliveryCustomsOffice = DeliveryCustomsOffice
    def get_AuthoriziedOperatorDetails(self):
        return self.AuthoriziedOperatorDetails
    def set_AuthoriziedOperatorDetails(self, AuthoriziedOperatorDetails):
        self.AuthoriziedOperatorDetails = AuthoriziedOperatorDetails
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.NumberCustomsZone is not None or
            self.DeliveryCustomsOffice is not None or
            self.AuthoriziedOperatorDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='TDDeliveryPlaceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TDDeliveryPlaceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TDDeliveryPlaceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TDDeliveryPlaceType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TDDeliveryPlaceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TDDeliveryPlaceType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='TDDeliveryPlaceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberCustomsZone is not None:
            namespaceprefix_ = self.NumberCustomsZone_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberCustomsZone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberCustomsZone>%s</%sNumberCustomsZone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberCustomsZone), input_name='NumberCustomsZone')), namespaceprefix_ , eol_))
        if self.DeliveryCustomsOffice is not None:
            namespaceprefix_ = self.DeliveryCustomsOffice_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryCustomsOffice_nsprefix_) else ''
            self.DeliveryCustomsOffice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryCustomsOffice', pretty_print=pretty_print)
        if self.AuthoriziedOperatorDetails is not None:
            namespaceprefix_ = self.AuthoriziedOperatorDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthoriziedOperatorDetails_nsprefix_) else ''
            self.AuthoriziedOperatorDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AuthoriziedOperatorDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NumberCustomsZone':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'NumberCustomsZone')
            value_ = self.gds_validate_string(value_, node, 'NumberCustomsZone')
            self.NumberCustomsZone = value_
            self.NumberCustomsZone_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.NumberCustomsZone)
        elif nodeName_ == 'DeliveryCustomsOffice':
            obj_ = CUCustomsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryCustomsOffice = obj_
            obj_.original_tagname_ = 'DeliveryCustomsOffice'
        elif nodeName_ == 'AuthoriziedOperatorDetails':
            obj_ = AuthoriziedOperatorDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AuthoriziedOperatorDetails = obj_
            obj_.original_tagname_ = 'AuthoriziedOperatorDetails'
# end class TDDeliveryPlaceType


class AddressType(GeneratedsSuper):
    """AddressType -- А
    д
    р
    е
    с
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    /
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    PostalCode -- П
    о
    ч
    т
    о
    в
    ы
    й
    и
    н
    д
    е
    к
    с
    CountryCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    CounryName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    з
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    Region -- О
    б
    л
    а
    с
    т
    ь
    (
    р
    е
    г
    и
    о
    н
    ,
    ш
    т
    а
    т
    ,
    п
    р
    о
    в
    и
    н
    ц
    и
    я
    и
    т
    .
    п
    .)
    City -- Н
    а
    с
    е
    л
    е
    н
    н
    ы
    й
    п
    у
    н
    к
    т
    StreetHouse -- У
    л
    и
    ц
    а
    ,
    н
    о
    м
    е
    р
    д
    о
    м
    а
    ,
    н
    о
    м
    е
    р
    о
    ф
    и
    с
    а
    TerritoryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    й
    е
    д
    и
    н
    и
    ц
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    Г
    К
    С
    О
    А
    Т
    Е
    (
    д
    л
    я
    К
    ы
    р
    г
    ы
    з
    с
    к
    о
    й
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PostalCode=None, CountryCode=None, CounryName=None, Region=None, City=None, StreetHouse=None, TerritoryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.PostalCode = PostalCode
        self.validate_PostalCodeType(self.PostalCode)
        self.PostalCode_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.CounryName = CounryName
        self.validate_CountryNameType(self.CounryName)
        self.CounryName_nsprefix_ = "clt_ru"
        self.Region = Region
        self.validate_RegionType(self.Region)
        self.Region_nsprefix_ = "clt_ru"
        self.City = City
        self.validate_CityNameType(self.City)
        self.City_nsprefix_ = "clt_ru"
        self.StreetHouse = StreetHouse
        self.validate_StreetHouseType(self.StreetHouse)
        self.StreetHouse_nsprefix_ = "clt_ru"
        self.TerritoryCode = TerritoryCode
        self.validate_TerritoryCodeType(self.TerritoryCode)
        self.TerritoryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddressType.subclass:
            return AddressType.subclass(*args_, **kwargs_)
        else:
            return AddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CounryName(self):
        return self.CounryName
    def set_CounryName(self, CounryName):
        self.CounryName = CounryName
    def get_Region(self):
        return self.Region
    def set_Region(self, Region):
        self.Region = Region
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StreetHouse(self):
        return self.StreetHouse
    def set_StreetHouse(self, StreetHouse):
        self.StreetHouse = StreetHouse
    def get_TerritoryCode(self):
        return self.TerritoryCode
    def set_TerritoryCode(self, TerritoryCode):
        self.TerritoryCode = TerritoryCode
    def validate_PostalCodeType(self, value):
        result = True
        # Validate type PostalCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PostalCodeType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PostalCodeType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_RegionType(self, value):
        result = True
        # Validate type RegionType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on RegionType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on RegionType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CityNameType(self, value):
        result = True
        # Validate type CityNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CityNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CityNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_StreetHouseType(self, value):
        result = True
        # Validate type StreetHouseType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on StreetHouseType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on StreetHouseType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_TerritoryCodeType(self, value):
        result = True
        # Validate type TerritoryCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TerritoryCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TerritoryCodeType_patterns_, ))
                result = False
        return result
    validate_TerritoryCodeType_patterns_ = [['^(\\d{8,17})$']]
    def has__content(self):
        if (
            self.PostalCode is not None or
            self.CountryCode is not None or
            self.CounryName is not None or
            self.Region is not None or
            self.City is not None or
            self.StreetHouse is not None or
            self.TerritoryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddressType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='AddressType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CounryName is not None:
            namespaceprefix_ = self.CounryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CounryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounryName>%s</%sCounryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounryName), input_name='CounryName')), namespaceprefix_ , eol_))
        if self.Region is not None:
            namespaceprefix_ = self.Region_nsprefix_ + ':' if (UseCapturedNS_ and self.Region_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegion>%s</%sRegion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Region), input_name='Region')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StreetHouse is not None:
            namespaceprefix_ = self.StreetHouse_nsprefix_ + ':' if (UseCapturedNS_ and self.StreetHouse_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStreetHouse>%s</%sStreetHouse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StreetHouse), input_name='StreetHouse')), namespaceprefix_ , eol_))
        if self.TerritoryCode is not None:
            namespaceprefix_ = self.TerritoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TerritoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTerritoryCode>%s</%sTerritoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TerritoryCode), input_name='TerritoryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PostalCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
            # validate type PostalCodeType
            self.validate_PostalCodeType(self.PostalCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'CounryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CounryName')
            value_ = self.gds_validate_string(value_, node, 'CounryName')
            self.CounryName = value_
            self.CounryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.CounryName)
        elif nodeName_ == 'Region':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Region')
            value_ = self.gds_validate_string(value_, node, 'Region')
            self.Region = value_
            self.Region_nsprefix_ = child_.prefix
            # validate type RegionType
            self.validate_RegionType(self.Region)
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
            # validate type CityNameType
            self.validate_CityNameType(self.City)
        elif nodeName_ == 'StreetHouse':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StreetHouse')
            value_ = self.gds_validate_string(value_, node, 'StreetHouse')
            self.StreetHouse = value_
            self.StreetHouse_nsprefix_ = child_.prefix
            # validate type StreetHouseType
            self.validate_StreetHouseType(self.StreetHouse)
        elif nodeName_ == 'TerritoryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TerritoryCode')
            value_ = self.gds_validate_string(value_, node, 'TerritoryCode')
            self.TerritoryCode = value_
            self.TerritoryCode_nsprefix_ = child_.prefix
            # validate type TerritoryCodeType
            self.validate_TerritoryCodeType(self.TerritoryCode)
# end class AddressType


class AutomobileBaseType(GeneratedsSuper):
    """AutomobileBaseType -- Д
    а
    н
    н
    ы
    е
    о
    б
    а
    в
    т
    о
    м
    о
    б
    и
    л
    я
    х
    .
    Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    д
    л
    я
    31
    й
    г
    р
    .
    и
    К
    а
    р
    т
    о
    ч
    к
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    Model -- М
    а
    р
    к
    а
    ,
    м
    о
    д
    е
    л
    ь
    Mark -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    а
    р
    к
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    м
    а
    р
    о
    к
    д
    о
    р
    о
    ж
    н
    ы
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    MarkCode -- К
    о
    д
    м
    а
    р
    к
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    м
    а
    р
    о
    к
    д
    о
    р
    о
    ж
    н
    ы
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    OfftakeYear -- Г
    о
    д
    и
    з
    г
    о
    т
    о
    в
    л
    е
    н
    и
    я
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    EngineVolumeQuanity -- Р
    а
    б
    о
    ч
    и
    й
    о
    б
    ъ
    е
    м
    д
    в
    и
    г
    а
    т
    е
    л
    я
    ,
    к
    у
    б
    .
    с
    м
    VINID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (VIN)
    BodyID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    у
    з
    о
    в
    а
    (
    п
    р
    и
    ц
    е
    п
    а
    ),
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    и
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    й
    н
    а
    н
    е
    г
    о
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    е
    й
    -
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    е
    м
    EngineID -- П
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    е
    й
    -
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    е
    м
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    в
    и
    г
    а
    т
    е
    л
    я
    ,
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    й
    н
    а
    б
    л
    о
    к
    е
    д
    в
    и
    г
    а
    т
    е
    л
    я
    .
    И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    м
    о
    ж
    е
    т
    с
    о
    с
    т
    о
    я
    т
    ь
    и
    з
    г
    р
    у
    п
    п
    р
    а
    з
    д
    е
    л
    ь
    н
    ы
    х
    ц
    и
    ф
    р
    ,
    и
    з
    к
    о
    т
    о
    р
    ы
    х
    п
    о
    с
    л
    е
    д
    н
    я
    я
    г
    р
    у
    п
    п
    а
    ,
    с
    о
    с
    т
    о
    я
    щ
    а
    я
    и
    з
    д
    в
    у
    х
    ц
    и
    ф
    р
    ,
    у
    к
    а
    з
    ы
    в
    а
    е
    т
    г
    о
    д
    в
    ы
    п
    у
    с
    к
    а
    д
    в
    и
    г
    а
    т
    е
    л
    я
    ChassisID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    ш
    а
    с
    с
    и
    (
    р
    а
    м
    ы
    ),
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    е
    и
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    е
    н
    а
    н
    и
    х
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    е
    й
    -
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    е
    м
    CabID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    а
    б
    и
    н
    ы
    EmergencyDeviceID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    у
    с
    т
    р
    о
    й
    с
    т
    в
    а
    и
    л
    и
    с
    и
    с
    т
    е
    м
    ы
    в
    ы
    з
    о
    в
    а
    э
    к
    с
    т
    р
    е
    н
    н
    ы
    х
    о
    п
    е
    р
    а
    т
    и
    в
    н
    ы
    х
    с
    л
    у
    ж
    б
    ,
    к
    о
    т
    о
    р
    ы
    м
    и
    о
    б
    о
    р
    у
    д
    о
    в
    а
    н
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    .
    Д
    л
    я
    Р
    Ф
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Model=None, Mark=None, MarkCode=None, OfftakeYear=None, EngineVolumeQuanity=None, VINID=None, BodyID=None, EngineID=None, ChassisID=None, CabID=None, EmergencyDeviceID=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.Model = Model
        self.validate_TransportNameType(self.Model)
        self.Model_nsprefix_ = "clt_ru"
        self.Mark = Mark
        self.validate_MarkCarNameType(self.Mark)
        self.Mark_nsprefix_ = "clt_ru"
        self.MarkCode = MarkCode
        self.validate_MarkCarCodeType(self.MarkCode)
        self.MarkCode_nsprefix_ = "clt_ru"
        self.OfftakeYear = OfftakeYear
        self.validate_DateYearCustType(self.OfftakeYear)
        self.OfftakeYear_nsprefix_ = "clt_ru"
        self.EngineVolumeQuanity = EngineVolumeQuanity
        self.validate_EngineVolumeType(self.EngineVolumeQuanity)
        self.EngineVolumeQuanity_nsprefix_ = "clt_ru"
        self.VINID = VINID
        self.validate_VINIDType(self.VINID)
        self.VINID_nsprefix_ = "clt_ru"
        self.BodyID = BodyID
        self.validate_VINIDType(self.BodyID)
        self.BodyID_nsprefix_ = "clt_ru"
        self.EngineID = EngineID
        self.validate_EngineIDType(self.EngineID)
        self.EngineID_nsprefix_ = "clt_ru"
        self.ChassisID = ChassisID
        self.validate_VINIDType(self.ChassisID)
        self.ChassisID_nsprefix_ = "clt_ru"
        self.CabID = CabID
        self.validate_VINIDType(self.CabID)
        self.CabID_nsprefix_ = "clt_ru"
        self.EmergencyDeviceID = EmergencyDeviceID
        self.validate_Text50Type(self.EmergencyDeviceID)
        self.EmergencyDeviceID_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AutomobileBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AutomobileBaseType.subclass:
            return AutomobileBaseType.subclass(*args_, **kwargs_)
        else:
            return AutomobileBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Model(self):
        return self.Model
    def set_Model(self, Model):
        self.Model = Model
    def get_Mark(self):
        return self.Mark
    def set_Mark(self, Mark):
        self.Mark = Mark
    def get_MarkCode(self):
        return self.MarkCode
    def set_MarkCode(self, MarkCode):
        self.MarkCode = MarkCode
    def get_OfftakeYear(self):
        return self.OfftakeYear
    def set_OfftakeYear(self, OfftakeYear):
        self.OfftakeYear = OfftakeYear
    def get_EngineVolumeQuanity(self):
        return self.EngineVolumeQuanity
    def set_EngineVolumeQuanity(self, EngineVolumeQuanity):
        self.EngineVolumeQuanity = EngineVolumeQuanity
    def get_VINID(self):
        return self.VINID
    def set_VINID(self, VINID):
        self.VINID = VINID
    def get_BodyID(self):
        return self.BodyID
    def set_BodyID(self, BodyID):
        self.BodyID = BodyID
    def get_EngineID(self):
        return self.EngineID
    def set_EngineID(self, EngineID):
        self.EngineID = EngineID
    def get_ChassisID(self):
        return self.ChassisID
    def set_ChassisID(self, ChassisID):
        self.ChassisID = ChassisID
    def get_CabID(self):
        return self.CabID
    def set_CabID(self, CabID):
        self.CabID = CabID
    def get_EmergencyDeviceID(self):
        return self.EmergencyDeviceID
    def set_EmergencyDeviceID(self, EmergencyDeviceID):
        self.EmergencyDeviceID = EmergencyDeviceID
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_TransportNameType(self, value):
        result = True
        # Validate type TransportNameType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TransportNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TransportNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MarkCarNameType(self, value):
        result = True
        # Validate type MarkCarNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on MarkCarNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on MarkCarNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MarkCarCodeType(self, value):
        result = True
        # Validate type MarkCarCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MarkCarCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateYearCustType(self, value):
        result = True
        # Validate type DateYearCustType, a restriction on CategoryCust:YearCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_EngineVolumeType(self, value):
        result = True
        # Validate type EngineVolumeType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on EngineVolumeType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on EngineVolumeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_VINIDType(self, value):
        result = True
        # Validate type VINIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on VINIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on VINIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_EngineIDType(self, value):
        result = True
        # Validate type EngineIDType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on EngineIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on EngineIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Model is not None or
            self.Mark is not None or
            self.MarkCode is not None or
            self.OfftakeYear is not None or
            self.EngineVolumeQuanity is not None or
            self.VINID is not None or
            self.BodyID is not None or
            self.EngineID is not None or
            self.ChassisID is not None or
            self.CabID is not None or
            self.EmergencyDeviceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AutomobileBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AutomobileBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AutomobileBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AutomobileBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AutomobileBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='AutomobileBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AutomobileBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Model is not None:
            namespaceprefix_ = self.Model_nsprefix_ + ':' if (UseCapturedNS_ and self.Model_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModel>%s</%sModel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Model), input_name='Model')), namespaceprefix_ , eol_))
        if self.Mark is not None:
            namespaceprefix_ = self.Mark_nsprefix_ + ':' if (UseCapturedNS_ and self.Mark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMark>%s</%sMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mark), input_name='Mark')), namespaceprefix_ , eol_))
        if self.MarkCode is not None:
            namespaceprefix_ = self.MarkCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkCode>%s</%sMarkCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkCode), input_name='MarkCode')), namespaceprefix_ , eol_))
        if self.OfftakeYear is not None:
            namespaceprefix_ = self.OfftakeYear_nsprefix_ + ':' if (UseCapturedNS_ and self.OfftakeYear_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOfftakeYear>%s</%sOfftakeYear>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OfftakeYear), input_name='OfftakeYear')), namespaceprefix_ , eol_))
        if self.EngineVolumeQuanity is not None:
            namespaceprefix_ = self.EngineVolumeQuanity_nsprefix_ + ':' if (UseCapturedNS_ and self.EngineVolumeQuanity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEngineVolumeQuanity>%s</%sEngineVolumeQuanity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.EngineVolumeQuanity, input_name='EngineVolumeQuanity'), namespaceprefix_ , eol_))
        if self.VINID is not None:
            namespaceprefix_ = self.VINID_nsprefix_ + ':' if (UseCapturedNS_ and self.VINID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVINID>%s</%sVINID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VINID), input_name='VINID')), namespaceprefix_ , eol_))
        if self.BodyID is not None:
            namespaceprefix_ = self.BodyID_nsprefix_ + ':' if (UseCapturedNS_ and self.BodyID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBodyID>%s</%sBodyID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BodyID), input_name='BodyID')), namespaceprefix_ , eol_))
        if self.EngineID is not None:
            namespaceprefix_ = self.EngineID_nsprefix_ + ':' if (UseCapturedNS_ and self.EngineID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEngineID>%s</%sEngineID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EngineID), input_name='EngineID')), namespaceprefix_ , eol_))
        if self.ChassisID is not None:
            namespaceprefix_ = self.ChassisID_nsprefix_ + ':' if (UseCapturedNS_ and self.ChassisID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChassisID>%s</%sChassisID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChassisID), input_name='ChassisID')), namespaceprefix_ , eol_))
        if self.CabID is not None:
            namespaceprefix_ = self.CabID_nsprefix_ + ':' if (UseCapturedNS_ and self.CabID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCabID>%s</%sCabID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CabID), input_name='CabID')), namespaceprefix_ , eol_))
        if self.EmergencyDeviceID is not None:
            namespaceprefix_ = self.EmergencyDeviceID_nsprefix_ + ':' if (UseCapturedNS_ and self.EmergencyDeviceID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmergencyDeviceID>%s</%sEmergencyDeviceID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyDeviceID), input_name='EmergencyDeviceID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Model':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Model')
            value_ = self.gds_validate_string(value_, node, 'Model')
            self.Model = value_
            self.Model_nsprefix_ = child_.prefix
            # validate type TransportNameType
            self.validate_TransportNameType(self.Model)
        elif nodeName_ == 'Mark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Mark')
            value_ = self.gds_validate_string(value_, node, 'Mark')
            self.Mark = value_
            self.Mark_nsprefix_ = child_.prefix
            # validate type MarkCarNameType
            self.validate_MarkCarNameType(self.Mark)
        elif nodeName_ == 'MarkCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkCode')
            value_ = self.gds_validate_string(value_, node, 'MarkCode')
            self.MarkCode = value_
            self.MarkCode_nsprefix_ = child_.prefix
            # validate type MarkCarCodeType
            self.validate_MarkCarCodeType(self.MarkCode)
        elif nodeName_ == 'OfftakeYear':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OfftakeYear')
            value_ = self.gds_validate_string(value_, node, 'OfftakeYear')
            self.OfftakeYear = value_
            self.OfftakeYear_nsprefix_ = child_.prefix
            # validate type DateYearCustType
            self.validate_DateYearCustType(self.OfftakeYear)
        elif nodeName_ == 'EngineVolumeQuanity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'EngineVolumeQuanity')
            fval_ = self.gds_validate_decimal(fval_, node, 'EngineVolumeQuanity')
            self.EngineVolumeQuanity = fval_
            self.EngineVolumeQuanity_nsprefix_ = child_.prefix
            # validate type EngineVolumeType
            self.validate_EngineVolumeType(self.EngineVolumeQuanity)
        elif nodeName_ == 'VINID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'VINID')
            value_ = self.gds_validate_string(value_, node, 'VINID')
            self.VINID = value_
            self.VINID_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.VINID)
        elif nodeName_ == 'BodyID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BodyID')
            value_ = self.gds_validate_string(value_, node, 'BodyID')
            self.BodyID = value_
            self.BodyID_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.BodyID)
        elif nodeName_ == 'EngineID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EngineID')
            value_ = self.gds_validate_string(value_, node, 'EngineID')
            self.EngineID = value_
            self.EngineID_nsprefix_ = child_.prefix
            # validate type EngineIDType
            self.validate_EngineIDType(self.EngineID)
        elif nodeName_ == 'ChassisID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ChassisID')
            value_ = self.gds_validate_string(value_, node, 'ChassisID')
            self.ChassisID = value_
            self.ChassisID_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.ChassisID)
        elif nodeName_ == 'CabID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CabID')
            value_ = self.gds_validate_string(value_, node, 'CabID')
            self.CabID = value_
            self.CabID_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.CabID)
        elif nodeName_ == 'EmergencyDeviceID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmergencyDeviceID')
            value_ = self.gds_validate_string(value_, node, 'EmergencyDeviceID')
            self.EmergencyDeviceID = value_
            self.EmergencyDeviceID_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.EmergencyDeviceID)
# end class AutomobileBaseType


class BankInformationType(GeneratedsSuper):
    """BankInformationType -- И
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    о
    б
    а
    н
    к
    о
    в
    с
    к
    и
    х
    с
    ч
    е
    т
    а
    х
    BankAccount -- Н
    о
    м
    е
    р
    б
    а
    н
    к
    о
    в
    с
    к
    о
    г
    о
    с
    ч
    е
    т
    а
    BankAccountDescription -- О
    п
    и
    с
    а
    н
    и
    е
    т
    и
    п
    а
    с
    ч
    е
    т
    а
    :
    р
    а
    с
    ч
    е
    т
    н
    ы
    й
    ,
    в
    а
    л
    ю
    т
    н
    ы
    й
    BankName -- Н
    а
    з
    в
    а
    н
    и
    е
    б
    а
    н
    к
    а
    BankMFO -- М
    Ф
    О
    б
    а
    н
    к
    а
    OKPOID -- К
    о
    д
    б
    а
    н
    к
    а
    п
    о
    О
    К
    П
    О
    BICID -- Б
    И
    К
    б
    а
    н
    к
    а
    SWIFTID -- SWIFT
    к
    о
    д
    б
    а
    н
    к
    а
    CorrAccount -- Н
    о
    м
    е
    р
    к
    о
    р
    р
    е
    с
    п
    о
    н
    д
    е
    н
    т
    с
    к
    о
    г
    о
    с
    ч
    е
    т
    а
    б
    а
    н
    к
    а
    TransitCurrencyAccount -- В
    а
    л
    ю
    т
    н
    ы
    й
    с
    ч
    е
    т
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    (
    т
    р
    а
    н
    з
    и
    т
    н
    ы
    й
    )
    SpecialTransitCurrencyAccount -- В
    а
    л
    ю
    т
    н
    ы
    й
    с
    ч
    е
    т
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    (
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    ы
    й
    т
    р
    а
    н
    з
    и
    т
    н
    ы
    й
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BankAccount=None, BankAccountDescription=None, BankName=None, BankMFO=None, OKPOID=None, BICID=None, SWIFTID=None, CorrAccount=None, TransitCurrencyAccount=None, SpecialTransitCurrencyAccount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        if BankAccount is None:
            self.BankAccount = []
        else:
            self.BankAccount = BankAccount
        self.BankAccount_nsprefix_ = "clt_ru"
        if BankAccountDescription is None:
            self.BankAccountDescription = []
        else:
            self.BankAccountDescription = BankAccountDescription
        self.BankAccountDescription_nsprefix_ = "clt_ru"
        self.BankName = BankName
        self.validate_NameType(self.BankName)
        self.BankName_nsprefix_ = "clt_ru"
        self.BankMFO = BankMFO
        self.validate_BankMFOType(self.BankMFO)
        self.BankMFO_nsprefix_ = "clt_ru"
        self.OKPOID = OKPOID
        self.validate_OKPOIDType(self.OKPOID)
        self.OKPOID_nsprefix_ = "clt_ru"
        self.BICID = BICID
        self.validate_BICIDType(self.BICID)
        self.BICID_nsprefix_ = "clt_ru"
        self.SWIFTID = SWIFTID
        self.validate_SWIFTIDType(self.SWIFTID)
        self.SWIFTID_nsprefix_ = "clt_ru"
        self.CorrAccount = CorrAccount
        self.validate_ForeignAccountType(self.CorrAccount)
        self.CorrAccount_nsprefix_ = "clt_ru"
        if TransitCurrencyAccount is None:
            self.TransitCurrencyAccount = []
        else:
            self.TransitCurrencyAccount = TransitCurrencyAccount
        self.TransitCurrencyAccount_nsprefix_ = "clt_ru"
        if SpecialTransitCurrencyAccount is None:
            self.SpecialTransitCurrencyAccount = []
        else:
            self.SpecialTransitCurrencyAccount = SpecialTransitCurrencyAccount
        self.SpecialTransitCurrencyAccount_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BankInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BankInformationType.subclass:
            return BankInformationType.subclass(*args_, **kwargs_)
        else:
            return BankInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BankAccount(self):
        return self.BankAccount
    def set_BankAccount(self, BankAccount):
        self.BankAccount = BankAccount
    def add_BankAccount(self, value):
        self.BankAccount.append(value)
    def insert_BankAccount_at(self, index, value):
        self.BankAccount.insert(index, value)
    def replace_BankAccount_at(self, index, value):
        self.BankAccount[index] = value
    def get_BankAccountDescription(self):
        return self.BankAccountDescription
    def set_BankAccountDescription(self, BankAccountDescription):
        self.BankAccountDescription = BankAccountDescription
    def add_BankAccountDescription(self, value):
        self.BankAccountDescription.append(value)
    def insert_BankAccountDescription_at(self, index, value):
        self.BankAccountDescription.insert(index, value)
    def replace_BankAccountDescription_at(self, index, value):
        self.BankAccountDescription[index] = value
    def get_BankName(self):
        return self.BankName
    def set_BankName(self, BankName):
        self.BankName = BankName
    def get_BankMFO(self):
        return self.BankMFO
    def set_BankMFO(self, BankMFO):
        self.BankMFO = BankMFO
    def get_OKPOID(self):
        return self.OKPOID
    def set_OKPOID(self, OKPOID):
        self.OKPOID = OKPOID
    def get_BICID(self):
        return self.BICID
    def set_BICID(self, BICID):
        self.BICID = BICID
    def get_SWIFTID(self):
        return self.SWIFTID
    def set_SWIFTID(self, SWIFTID):
        self.SWIFTID = SWIFTID
    def get_CorrAccount(self):
        return self.CorrAccount
    def set_CorrAccount(self, CorrAccount):
        self.CorrAccount = CorrAccount
    def get_TransitCurrencyAccount(self):
        return self.TransitCurrencyAccount
    def set_TransitCurrencyAccount(self, TransitCurrencyAccount):
        self.TransitCurrencyAccount = TransitCurrencyAccount
    def add_TransitCurrencyAccount(self, value):
        self.TransitCurrencyAccount.append(value)
    def insert_TransitCurrencyAccount_at(self, index, value):
        self.TransitCurrencyAccount.insert(index, value)
    def replace_TransitCurrencyAccount_at(self, index, value):
        self.TransitCurrencyAccount[index] = value
    def get_SpecialTransitCurrencyAccount(self):
        return self.SpecialTransitCurrencyAccount
    def set_SpecialTransitCurrencyAccount(self, SpecialTransitCurrencyAccount):
        self.SpecialTransitCurrencyAccount = SpecialTransitCurrencyAccount
    def add_SpecialTransitCurrencyAccount(self, value):
        self.SpecialTransitCurrencyAccount.append(value)
    def insert_SpecialTransitCurrencyAccount_at(self, index, value):
        self.SpecialTransitCurrencyAccount.insert(index, value)
    def replace_SpecialTransitCurrencyAccount_at(self, index, value):
        self.SpecialTransitCurrencyAccount[index] = value
    def validate_ForeignAccountType(self, value):
        result = True
        # Validate type ForeignAccountType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ForeignAccountType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ForeignAccountType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_BankMFOType(self, value):
        result = True
        # Validate type BankMFOType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 30:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on BankMFOType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on BankMFOType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_OKPOIDType(self, value):
        result = True
        # Validate type OKPOIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on OKPOIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on OKPOIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_BICIDType(self, value):
        result = True
        # Validate type BICIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_BICIDType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_BICIDType_patterns_, ))
                result = False
        return result
    validate_BICIDType_patterns_ = [['^(\\d{9})$']]
    def validate_SWIFTIDType(self, value):
        result = True
        # Validate type SWIFTIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on SWIFTIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on SWIFTIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.BankAccount or
            self.BankAccountDescription or
            self.BankName is not None or
            self.BankMFO is not None or
            self.OKPOID is not None or
            self.BICID is not None or
            self.SWIFTID is not None or
            self.CorrAccount is not None or
            self.TransitCurrencyAccount or
            self.SpecialTransitCurrencyAccount
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='BankInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BankInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BankInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BankInformationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BankInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='BankInformationType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='BankInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BankAccount_ in self.BankAccount:
            namespaceprefix_ = self.BankAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.BankAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankAccount>%s</%sBankAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(BankAccount_), input_name='BankAccount')), namespaceprefix_ , eol_))
        for BankAccountDescription_ in self.BankAccountDescription:
            namespaceprefix_ = self.BankAccountDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.BankAccountDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankAccountDescription>%s</%sBankAccountDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(BankAccountDescription_), input_name='BankAccountDescription')), namespaceprefix_ , eol_))
        if self.BankName is not None:
            namespaceprefix_ = self.BankName_nsprefix_ + ':' if (UseCapturedNS_ and self.BankName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankName>%s</%sBankName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BankName), input_name='BankName')), namespaceprefix_ , eol_))
        if self.BankMFO is not None:
            namespaceprefix_ = self.BankMFO_nsprefix_ + ':' if (UseCapturedNS_ and self.BankMFO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankMFO>%s</%sBankMFO>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BankMFO), input_name='BankMFO')), namespaceprefix_ , eol_))
        if self.OKPOID is not None:
            namespaceprefix_ = self.OKPOID_nsprefix_ + ':' if (UseCapturedNS_ and self.OKPOID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOKPOID>%s</%sOKPOID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OKPOID), input_name='OKPOID')), namespaceprefix_ , eol_))
        if self.BICID is not None:
            namespaceprefix_ = self.BICID_nsprefix_ + ':' if (UseCapturedNS_ and self.BICID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBICID>%s</%sBICID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BICID), input_name='BICID')), namespaceprefix_ , eol_))
        if self.SWIFTID is not None:
            namespaceprefix_ = self.SWIFTID_nsprefix_ + ':' if (UseCapturedNS_ and self.SWIFTID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSWIFTID>%s</%sSWIFTID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SWIFTID), input_name='SWIFTID')), namespaceprefix_ , eol_))
        if self.CorrAccount is not None:
            namespaceprefix_ = self.CorrAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.CorrAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCorrAccount>%s</%sCorrAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CorrAccount), input_name='CorrAccount')), namespaceprefix_ , eol_))
        for TransitCurrencyAccount_ in self.TransitCurrencyAccount:
            namespaceprefix_ = self.TransitCurrencyAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.TransitCurrencyAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitCurrencyAccount>%s</%sTransitCurrencyAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(TransitCurrencyAccount_), input_name='TransitCurrencyAccount')), namespaceprefix_ , eol_))
        for SpecialTransitCurrencyAccount_ in self.SpecialTransitCurrencyAccount:
            namespaceprefix_ = self.SpecialTransitCurrencyAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecialTransitCurrencyAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecialTransitCurrencyAccount>%s</%sSpecialTransitCurrencyAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SpecialTransitCurrencyAccount_), input_name='SpecialTransitCurrencyAccount')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BankAccount':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BankAccount')
            value_ = self.gds_validate_string(value_, node, 'BankAccount')
            self.BankAccount.append(value_)
            self.BankAccount_nsprefix_ = child_.prefix
            # validate type ForeignAccountType
            self.validate_ForeignAccountType(self.BankAccount[-1])
        elif nodeName_ == 'BankAccountDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BankAccountDescription')
            value_ = self.gds_validate_string(value_, node, 'BankAccountDescription')
            self.BankAccountDescription.append(value_)
            self.BankAccountDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.BankAccountDescription[-1])
        elif nodeName_ == 'BankName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BankName')
            value_ = self.gds_validate_string(value_, node, 'BankName')
            self.BankName = value_
            self.BankName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.BankName)
        elif nodeName_ == 'BankMFO':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BankMFO')
            value_ = self.gds_validate_string(value_, node, 'BankMFO')
            self.BankMFO = value_
            self.BankMFO_nsprefix_ = child_.prefix
            # validate type BankMFOType
            self.validate_BankMFOType(self.BankMFO)
        elif nodeName_ == 'OKPOID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OKPOID')
            value_ = self.gds_validate_string(value_, node, 'OKPOID')
            self.OKPOID = value_
            self.OKPOID_nsprefix_ = child_.prefix
            # validate type OKPOIDType
            self.validate_OKPOIDType(self.OKPOID)
        elif nodeName_ == 'BICID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BICID')
            value_ = self.gds_validate_string(value_, node, 'BICID')
            self.BICID = value_
            self.BICID_nsprefix_ = child_.prefix
            # validate type BICIDType
            self.validate_BICIDType(self.BICID)
        elif nodeName_ == 'SWIFTID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SWIFTID')
            value_ = self.gds_validate_string(value_, node, 'SWIFTID')
            self.SWIFTID = value_
            self.SWIFTID_nsprefix_ = child_.prefix
            # validate type SWIFTIDType
            self.validate_SWIFTIDType(self.SWIFTID)
        elif nodeName_ == 'CorrAccount':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CorrAccount')
            value_ = self.gds_validate_string(value_, node, 'CorrAccount')
            self.CorrAccount = value_
            self.CorrAccount_nsprefix_ = child_.prefix
            # validate type ForeignAccountType
            self.validate_ForeignAccountType(self.CorrAccount)
        elif nodeName_ == 'TransitCurrencyAccount':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransitCurrencyAccount')
            value_ = self.gds_validate_string(value_, node, 'TransitCurrencyAccount')
            self.TransitCurrencyAccount.append(value_)
            self.TransitCurrencyAccount_nsprefix_ = child_.prefix
            # validate type ForeignAccountType
            self.validate_ForeignAccountType(self.TransitCurrencyAccount[-1])
        elif nodeName_ == 'SpecialTransitCurrencyAccount':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SpecialTransitCurrencyAccount')
            value_ = self.gds_validate_string(value_, node, 'SpecialTransitCurrencyAccount')
            self.SpecialTransitCurrencyAccount.append(value_)
            self.SpecialTransitCurrencyAccount_nsprefix_ = child_.prefix
            # validate type ForeignAccountType
            self.validate_ForeignAccountType(self.SpecialTransitCurrencyAccount[-1])
# end class BankInformationType


class BaseDocType(GeneratedsSuper):
    """BaseDocType -- Б
    а
    з
    о
    в
    ы
    й
    т
    и
    п
    д
    л
    я
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocumentID -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    RefDocumentID -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    и
    с
    х
    о
    д
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    INNSign -- И
    Н
    Н
    в
    л
    а
    д
    е
    л
    ь
    ц
    а
    М
    Ч
    Д
    MCD_ID -- Е
    д
    и
    н
    ы
    й
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    о
    в
    е
    р
    е
    н
    н
    о
    с
    т
    и
    в
    ф
    о
    р
    м
    а
    т
    е
    М
    Ч
    Д
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentID=None, RefDocumentID=None, INNSign=None, MCD_ID=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.DocumentID = DocumentID
        self.validate_DocumentIDType(self.DocumentID)
        self.DocumentID_nsprefix_ = "clt_ru"
        self.RefDocumentID = RefDocumentID
        self.validate_DocumentIDType(self.RefDocumentID)
        self.RefDocumentID_nsprefix_ = "clt_ru"
        self.INNSign = INNSign
        self.validate_INNIDType(self.INNSign)
        self.INNSign_nsprefix_ = "clt_ru"
        self.MCD_ID = MCD_ID
        self.validate_DocumentIDType(self.MCD_ID)
        self.MCD_ID_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BaseDocType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BaseDocType.subclass:
            return BaseDocType.subclass(*args_, **kwargs_)
        else:
            return BaseDocType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentID(self):
        return self.DocumentID
    def set_DocumentID(self, DocumentID):
        self.DocumentID = DocumentID
    def get_RefDocumentID(self):
        return self.RefDocumentID
    def set_RefDocumentID(self, RefDocumentID):
        self.RefDocumentID = RefDocumentID
    def get_INNSign(self):
        return self.INNSign
    def set_INNSign(self, INNSign):
        self.INNSign = INNSign
    def get_MCD_ID(self):
        return self.MCD_ID
    def set_MCD_ID(self, MCD_ID):
        self.MCD_ID = MCD_ID
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_DocumentIDType(self, value):
        result = True
        # Validate type DocumentIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 36:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_INNIDType(self, value):
        result = True
        # Validate type INNIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on INNIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on INNIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocumentID is not None or
            self.RefDocumentID is not None or
            self.INNSign is not None or
            self.MCD_ID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='BaseDocType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BaseDocType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BaseDocType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BaseDocType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BaseDocType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='BaseDocType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='BaseDocType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentID is not None:
            namespaceprefix_ = self.DocumentID_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentID>%s</%sDocumentID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentID), input_name='DocumentID')), namespaceprefix_ , eol_))
        if self.RefDocumentID is not None:
            namespaceprefix_ = self.RefDocumentID_nsprefix_ + ':' if (UseCapturedNS_ and self.RefDocumentID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefDocumentID>%s</%sRefDocumentID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RefDocumentID), input_name='RefDocumentID')), namespaceprefix_ , eol_))
        if self.INNSign is not None:
            namespaceprefix_ = self.INNSign_nsprefix_ + ':' if (UseCapturedNS_ and self.INNSign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINNSign>%s</%sINNSign>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INNSign), input_name='INNSign')), namespaceprefix_ , eol_))
        if self.MCD_ID is not None:
            namespaceprefix_ = self.MCD_ID_nsprefix_ + ':' if (UseCapturedNS_ and self.MCD_ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMCD_ID>%s</%sMCD_ID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MCD_ID), input_name='MCD_ID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentID')
            value_ = self.gds_validate_string(value_, node, 'DocumentID')
            self.DocumentID = value_
            self.DocumentID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.DocumentID)
        elif nodeName_ == 'RefDocumentID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RefDocumentID')
            value_ = self.gds_validate_string(value_, node, 'RefDocumentID')
            self.RefDocumentID = value_
            self.RefDocumentID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.RefDocumentID)
        elif nodeName_ == 'INNSign':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'INNSign')
            value_ = self.gds_validate_string(value_, node, 'INNSign')
            self.INNSign = value_
            self.INNSign_nsprefix_ = child_.prefix
            # validate type INNIDType
            self.validate_INNIDType(self.INNSign)
        elif nodeName_ == 'MCD_ID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MCD_ID')
            value_ = self.gds_validate_string(value_, node, 'MCD_ID')
            self.MCD_ID = value_
            self.MCD_ID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.MCD_ID)
# end class BaseDocType


class CUBranchDescriptionType(GeneratedsSuper):
    """CUBranchDescriptionType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    б
    о
    с
    о
    б
    л
    е
    н
    н
    о
    м
    п
    о
    д
    р
    а
    з
    д
    е
    л
    е
    н
    и
    и
    OrganizationName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    б
    о
    с
    о
    б
    л
    е
    н
    н
    о
    г
    о
    п
    о
    д
    р
    а
    з
    д
    е
    л
    е
    н
    и
    я
    Address -- А
    д
    р
    е
    с
    о
    б
    о
    с
    о
    б
    л
    е
    н
    н
    о
    г
    о
    п
    о
    д
    р
    а
    з
    д
    е
    л
    е
    н
    и
    я
    RFOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    о
    с
    с
    и
    й
    с
    к
    о
    й
    Ф
    е
    д
    е
    р
    а
    ц
    и
    и
    RKOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    К
    а
    з
    а
    х
    с
    т
    а
    н
    RBOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    Б
    е
    л
    а
    р
    у
    с
    ь
    RAOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    А
    р
    м
    е
    н
    и
    я
    KGOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    К
    ы
    р
    г
    ы
    з
    с
    к
    о
    й
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OrganizationName=None, Address=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.OrganizationName = OrganizationName
        self.validate_ShortNameType(self.OrganizationName)
        self.OrganizationName_nsprefix_ = "clt_ru"
        self.Address = Address
        self.Address_nsprefix_ = "cat_ru"
        self.RFOrganizationFeatures = RFOrganizationFeatures
        self.RFOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RKOrganizationFeatures = RKOrganizationFeatures
        self.RKOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RBOrganizationFeatures = RBOrganizationFeatures
        self.RBOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RAOrganizationFeatures = RAOrganizationFeatures
        self.RAOrganizationFeatures_nsprefix_ = "cat_ru"
        self.KGOrganizationFeatures = KGOrganizationFeatures
        self.KGOrganizationFeatures_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUBranchDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUBranchDescriptionType.subclass:
            return CUBranchDescriptionType.subclass(*args_, **kwargs_)
        else:
            return CUBranchDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OrganizationName(self):
        return self.OrganizationName
    def set_OrganizationName(self, OrganizationName):
        self.OrganizationName = OrganizationName
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_RFOrganizationFeatures(self):
        return self.RFOrganizationFeatures
    def set_RFOrganizationFeatures(self, RFOrganizationFeatures):
        self.RFOrganizationFeatures = RFOrganizationFeatures
    def get_RKOrganizationFeatures(self):
        return self.RKOrganizationFeatures
    def set_RKOrganizationFeatures(self, RKOrganizationFeatures):
        self.RKOrganizationFeatures = RKOrganizationFeatures
    def get_RBOrganizationFeatures(self):
        return self.RBOrganizationFeatures
    def set_RBOrganizationFeatures(self, RBOrganizationFeatures):
        self.RBOrganizationFeatures = RBOrganizationFeatures
    def get_RAOrganizationFeatures(self):
        return self.RAOrganizationFeatures
    def set_RAOrganizationFeatures(self, RAOrganizationFeatures):
        self.RAOrganizationFeatures = RAOrganizationFeatures
    def get_KGOrganizationFeatures(self):
        return self.KGOrganizationFeatures
    def set_KGOrganizationFeatures(self, KGOrganizationFeatures):
        self.KGOrganizationFeatures = KGOrganizationFeatures
    def validate_ShortNameType(self, value):
        result = True
        # Validate type ShortNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ShortNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ShortNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.OrganizationName is not None or
            self.Address is not None or
            self.RFOrganizationFeatures is not None or
            self.RKOrganizationFeatures is not None or
            self.RBOrganizationFeatures is not None or
            self.RAOrganizationFeatures is not None or
            self.KGOrganizationFeatures is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUBranchDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUBranchDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUBranchDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUBranchDescriptionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUBranchDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='CUBranchDescriptionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUBranchDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrganizationName is not None:
            namespaceprefix_ = self.OrganizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationName>%s</%sOrganizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationName), input_name='OrganizationName')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.RFOrganizationFeatures is not None:
            namespaceprefix_ = self.RFOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RFOrganizationFeatures_nsprefix_) else ''
            self.RFOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFOrganizationFeatures', pretty_print=pretty_print)
        if self.RKOrganizationFeatures is not None:
            namespaceprefix_ = self.RKOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RKOrganizationFeatures_nsprefix_) else ''
            self.RKOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RKOrganizationFeatures', pretty_print=pretty_print)
        if self.RBOrganizationFeatures is not None:
            namespaceprefix_ = self.RBOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RBOrganizationFeatures_nsprefix_) else ''
            self.RBOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RBOrganizationFeatures', pretty_print=pretty_print)
        if self.RAOrganizationFeatures is not None:
            namespaceprefix_ = self.RAOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RAOrganizationFeatures_nsprefix_) else ''
            self.RAOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RAOrganizationFeatures', pretty_print=pretty_print)
        if self.KGOrganizationFeatures is not None:
            namespaceprefix_ = self.KGOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.KGOrganizationFeatures_nsprefix_) else ''
            self.KGOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='KGOrganizationFeatures', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OrganizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationName')
            value_ = self.gds_validate_string(value_, node, 'OrganizationName')
            self.OrganizationName = value_
            self.OrganizationName_nsprefix_ = child_.prefix
            # validate type ShortNameType
            self.validate_ShortNameType(self.OrganizationName)
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'RFOrganizationFeatures':
            obj_ = RFOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RFOrganizationFeatures'
        elif nodeName_ == 'RKOrganizationFeatures':
            obj_ = RKOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RKOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RKOrganizationFeatures'
        elif nodeName_ == 'RBOrganizationFeatures':
            obj_ = RBOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RBOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RBOrganizationFeatures'
        elif nodeName_ == 'RAOrganizationFeatures':
            obj_ = RAOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RAOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RAOrganizationFeatures'
        elif nodeName_ == 'KGOrganizationFeatures':
            obj_ = KGOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.KGOrganizationFeatures = obj_
            obj_.original_tagname_ = 'KGOrganizationFeatures'
# end class CUBranchDescriptionType


class CUTransportMeansType(GeneratedsSuper):
    """CUTransportMeansType -- Т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    е
    с
    р
    е
    д
    с
    т
    в
    а
    н
    а
    г
    р
    а
    н
    и
    ц
    е
    /
    в
    н
    у
    т
    р
    и
    с
    т
    р
    а
    н
    ы
    TransportModeCode -- К
    о
    д
    в
    и
    д
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    т
    р
    а
    н
    с
    п
    о
    р
    т
    а
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    и
    р
    о
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    TransportNationalityCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    п
    р
    и
    н
    а
    д
    л
    е
    ж
    н
    о
    с
    т
    и
    (
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    )
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    с
    т
    р
    а
    н
    м
    и
    р
    а
    . 99-
    р
    а
    з
    н
    ы
    е
    , 00-
    н
    е
    и
    з
    в
    е
    с
    т
    н
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransportModeCode=None, TransportNationalityCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.TransportModeCode = TransportModeCode
        self.validate_TransportModeCodeType(self.TransportModeCode)
        self.TransportModeCode_nsprefix_ = "clt_ru"
        self.TransportNationalityCode = TransportNationalityCode
        self.validate_CountryA2CodeType(self.TransportNationalityCode)
        self.TransportNationalityCode_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUTransportMeansType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUTransportMeansType.subclass:
            return CUTransportMeansType.subclass(*args_, **kwargs_)
        else:
            return CUTransportMeansType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportModeCode(self):
        return self.TransportModeCode
    def set_TransportModeCode(self, TransportModeCode):
        self.TransportModeCode = TransportModeCode
    def get_TransportNationalityCode(self):
        return self.TransportNationalityCode
    def set_TransportNationalityCode(self, TransportNationalityCode):
        self.TransportNationalityCode = TransportNationalityCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_TransportModeCodeType(self, value):
        result = True
        # Validate type TransportModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TransportModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.TransportModeCode is not None or
            self.TransportNationalityCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUTransportMeansType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUTransportMeansType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUTransportMeansType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUTransportMeansType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUTransportMeansType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='CUTransportMeansType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUTransportMeansType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportModeCode is not None:
            namespaceprefix_ = self.TransportModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportModeCode>%s</%sTransportModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportModeCode), input_name='TransportModeCode')), namespaceprefix_ , eol_))
        if self.TransportNationalityCode is not None:
            namespaceprefix_ = self.TransportNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportNationalityCode>%s</%sTransportNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportNationalityCode), input_name='TransportNationalityCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportModeCode')
            value_ = self.gds_validate_string(value_, node, 'TransportModeCode')
            self.TransportModeCode = value_
            self.TransportModeCode_nsprefix_ = child_.prefix
            # validate type TransportModeCodeType
            self.validate_TransportModeCodeType(self.TransportModeCode)
        elif nodeName_ == 'TransportNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'TransportNationalityCode')
            self.TransportNationalityCode = value_
            self.TransportNationalityCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.TransportNationalityCode)
# end class CUTransportMeansType


class CargoBaseType(GeneratedsSuper):
    """CargoBaseType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    г
    р
    у
    з
    е
    CargoDescription -- О
    п
    и
    с
    а
    н
    и
    е
    г
    р
    у
    з
    а
    GrossWeightQuantity -- В
    е
    с
    т
    о
    в
    а
    р
    а
    б
    р
    у
    т
    т
    о
    (
    к
    г
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CargoDescription=None, GrossWeightQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        if CargoDescription is None:
            self.CargoDescription = []
        else:
            self.CargoDescription = CargoDescription
        self.CargoDescription_nsprefix_ = "clt_ru"
        self.GrossWeightQuantity = GrossWeightQuantity
        self.validate_QuantityBasisType(self.GrossWeightQuantity)
        self.GrossWeightQuantity_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CargoBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CargoBaseType.subclass:
            return CargoBaseType.subclass(*args_, **kwargs_)
        else:
            return CargoBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CargoDescription(self):
        return self.CargoDescription
    def set_CargoDescription(self, CargoDescription):
        self.CargoDescription = CargoDescription
    def add_CargoDescription(self, value):
        self.CargoDescription.append(value)
    def insert_CargoDescription_at(self, index, value):
        self.CargoDescription.insert(index, value)
    def replace_CargoDescription_at(self, index, value):
        self.CargoDescription[index] = value
    def get_GrossWeightQuantity(self):
        return self.GrossWeightQuantity
    def set_GrossWeightQuantity(self, GrossWeightQuantity):
        self.GrossWeightQuantity = GrossWeightQuantity
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CargoDescription or
            self.GrossWeightQuantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CargoBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CargoBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CargoBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CargoBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CargoBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='CargoBaseType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CargoBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CargoDescription_ in self.CargoDescription:
            namespaceprefix_ = self.CargoDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.CargoDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCargoDescription>%s</%sCargoDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CargoDescription_), input_name='CargoDescription')), namespaceprefix_ , eol_))
        if self.GrossWeightQuantity is not None:
            namespaceprefix_ = self.GrossWeightQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GrossWeightQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrossWeightQuantity>%s</%sGrossWeightQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.GrossWeightQuantity, input_name='GrossWeightQuantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CargoDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CargoDescription')
            value_ = self.gds_validate_string(value_, node, 'CargoDescription')
            self.CargoDescription.append(value_)
            self.CargoDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.CargoDescription[-1])
        elif nodeName_ == 'GrossWeightQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'GrossWeightQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'GrossWeightQuantity')
            self.GrossWeightQuantity = fval_
            self.GrossWeightQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.GrossWeightQuantity)
# end class CargoBaseType


class ContactType(GeneratedsSuper):
    """ContactType -- К
    о
    н
    т
    а
    к
    т
    н
    а
    я
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    Phone -- Н
    о
    м
    е
    р
    т
    е
    л
    е
    ф
    о
    н
    а
    Fax -- Н
    о
    м
    е
    р
    ф
    а
    к
    с
    а
    Telex -- Н
    о
    м
    е
    р
    т
    е
    л
    е
    к
    с
    а
    E_mail -- А
    д
    р
    е
    с
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    й
    п
    о
    ч
    т
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Phone=None, Fax=None, Telex=None, E_mail=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        if Phone is None:
            self.Phone = []
        else:
            self.Phone = Phone
        self.Phone_nsprefix_ = "clt_ru"
        self.Fax = Fax
        self.validate_PhoneNumberType(self.Fax)
        self.Fax_nsprefix_ = "clt_ru"
        self.Telex = Telex
        self.validate_PhoneNumberType(self.Telex)
        self.Telex_nsprefix_ = "clt_ru"
        if E_mail is None:
            self.E_mail = []
        else:
            self.E_mail = E_mail
        self.E_mail_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContactType.subclass:
            return ContactType.subclass(*args_, **kwargs_)
        else:
            return ContactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Phone(self):
        return self.Phone
    def set_Phone(self, Phone):
        self.Phone = Phone
    def add_Phone(self, value):
        self.Phone.append(value)
    def insert_Phone_at(self, index, value):
        self.Phone.insert(index, value)
    def replace_Phone_at(self, index, value):
        self.Phone[index] = value
    def get_Fax(self):
        return self.Fax
    def set_Fax(self, Fax):
        self.Fax = Fax
    def get_Telex(self):
        return self.Telex
    def set_Telex(self, Telex):
        self.Telex = Telex
    def get_E_mail(self):
        return self.E_mail
    def set_E_mail(self, E_mail):
        self.E_mail = E_mail
    def add_E_mail(self, value):
        self.E_mail.append(value)
    def insert_E_mail_at(self, index, value):
        self.E_mail.insert(index, value)
    def replace_E_mail_at(self, index, value):
        self.E_mail[index] = value
    def validate_PhoneNumberType(self, value):
        result = True
        # Validate type PhoneNumberType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PhoneNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PhoneNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Phone or
            self.Fax is not None or
            self.Telex is not None or
            self.E_mail
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ContactType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContactType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContactType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContactType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='ContactType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ContactType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Phone_ in self.Phone:
            namespaceprefix_ = self.Phone_nsprefix_ + ':' if (UseCapturedNS_ and self.Phone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhone>%s</%sPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Phone_), input_name='Phone')), namespaceprefix_ , eol_))
        if self.Fax is not None:
            namespaceprefix_ = self.Fax_nsprefix_ + ':' if (UseCapturedNS_ and self.Fax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFax>%s</%sFax>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Fax), input_name='Fax')), namespaceprefix_ , eol_))
        if self.Telex is not None:
            namespaceprefix_ = self.Telex_nsprefix_ + ':' if (UseCapturedNS_ and self.Telex_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTelex>%s</%sTelex>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Telex), input_name='Telex')), namespaceprefix_ , eol_))
        for E_mail_ in self.E_mail:
            namespaceprefix_ = self.E_mail_nsprefix_ + ':' if (UseCapturedNS_ and self.E_mail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sE_mail>%s</%sE_mail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(E_mail_), input_name='E_mail')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Phone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Phone')
            value_ = self.gds_validate_string(value_, node, 'Phone')
            self.Phone.append(value_)
            self.Phone_nsprefix_ = child_.prefix
            # validate type PhoneNumberType
            self.validate_PhoneNumberType(self.Phone[-1])
        elif nodeName_ == 'Fax':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Fax')
            value_ = self.gds_validate_string(value_, node, 'Fax')
            self.Fax = value_
            self.Fax_nsprefix_ = child_.prefix
            # validate type PhoneNumberType
            self.validate_PhoneNumberType(self.Fax)
        elif nodeName_ == 'Telex':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Telex')
            value_ = self.gds_validate_string(value_, node, 'Telex')
            self.Telex = value_
            self.Telex_nsprefix_ = child_.prefix
            # validate type PhoneNumberType
            self.validate_PhoneNumberType(self.Telex)
        elif nodeName_ == 'E_mail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'E_mail')
            value_ = self.gds_validate_string(value_, node, 'E_mail')
            self.E_mail.append(value_)
            self.E_mail_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.E_mail[-1])
# end class ContactType


class CustomsPersonType(GeneratedsSuper):
    """CustomsPersonType -- Д
    о
    л
    ж
    н
    о
    с
    т
    н
    о
    е
    л
    и
    ц
    о
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    PersonName -- Ф
    И
    О
    д
    о
    л
    ж
    н
    о
    с
    т
    н
    о
    г
    о
    л
    и
    ц
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    LNP -- Л
    Н
    П
    д
    о
    л
    ж
    н
    о
    с
    т
    н
    о
    г
    о
    л
    и
    ц
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    CustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    ,
    у
    к
    а
    з
    а
    н
    н
    ы
    й
    н
    а
    о
    т
    т
    и
    с
    к
    е
    Л
    Н
    П
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PersonName=None, LNP=None, CustomsCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.PersonName = PersonName
        self.validate_NameType(self.PersonName)
        self.PersonName_nsprefix_ = "clt_ru"
        self.LNP = LNP
        self.validate_LNPIDType(self.LNP)
        self.LNP_nsprefix_ = "clt_ru"
        self.CustomsCode = CustomsCode
        self.validate_CustomsCodeType(self.CustomsCode)
        self.CustomsCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsPersonType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsPersonType.subclass:
            return CustomsPersonType.subclass(*args_, **kwargs_)
        else:
            return CustomsPersonType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PersonName(self):
        return self.PersonName
    def set_PersonName(self, PersonName):
        self.PersonName = PersonName
    def get_LNP(self):
        return self.LNP
    def set_LNP(self, LNP):
        self.LNP = LNP
    def get_CustomsCode(self):
        return self.CustomsCode
    def set_CustomsCode(self, CustomsCode):
        self.CustomsCode = CustomsCode
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LNPIDType(self, value):
        result = True
        # Validate type LNPIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on LNPIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on LNPIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def has__content(self):
        if (
            self.PersonName is not None or
            self.LNP is not None or
            self.CustomsCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CustomsPersonType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsPersonType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsPersonType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsPersonType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsPersonType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='CustomsPersonType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CustomsPersonType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonName is not None:
            namespaceprefix_ = self.PersonName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonName>%s</%sPersonName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), namespaceprefix_ , eol_))
        if self.LNP is not None:
            namespaceprefix_ = self.LNP_nsprefix_ + ':' if (UseCapturedNS_ and self.LNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLNP>%s</%sLNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LNP), input_name='LNP')), namespaceprefix_ , eol_))
        if self.CustomsCode is not None:
            namespaceprefix_ = self.CustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCode>%s</%sCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCode), input_name='CustomsCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PersonName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonName')
            value_ = self.gds_validate_string(value_, node, 'PersonName')
            self.PersonName = value_
            self.PersonName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.PersonName)
        elif nodeName_ == 'LNP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LNP')
            value_ = self.gds_validate_string(value_, node, 'LNP')
            self.LNP = value_
            self.LNP_nsprefix_ = child_.prefix
            # validate type LNPIDType
            self.validate_LNPIDType(self.LNP)
        elif nodeName_ == 'CustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCode')
            self.CustomsCode = value_
            self.CustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsCode)
# end class CustomsPersonType


class CustomsType(GeneratedsSuper):
    """CustomsType -- К
    о
    д
    и
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    Code -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    OfficeName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, OfficeName=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.Code = Code
        self.validate_CustomsCodeType(self.Code)
        self.Code_nsprefix_ = "clt_ru"
        self.OfficeName = OfficeName
        self.validate_CustomsOfficeNameType(self.OfficeName)
        self.OfficeName_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsType.subclass:
            return CustomsType.subclass(*args_, **kwargs_)
        else:
            return CustomsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_OfficeName(self):
        return self.OfficeName
    def set_OfficeName(self, OfficeName):
        self.OfficeName = OfficeName
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_CustomsOfficeNameType(self, value):
        result = True
        # Validate type CustomsOfficeNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CustomsOfficeNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CustomsOfficeNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Code is not None or
            self.OfficeName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CustomsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='CustomsType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CustomsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.OfficeName is not None:
            namespaceprefix_ = self.OfficeName_nsprefix_ + ':' if (UseCapturedNS_ and self.OfficeName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOfficeName>%s</%sOfficeName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OfficeName), input_name='OfficeName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.Code)
        elif nodeName_ == 'OfficeName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OfficeName')
            value_ = self.gds_validate_string(value_, node, 'OfficeName')
            self.OfficeName = value_
            self.OfficeName_nsprefix_ = child_.prefix
            # validate type CustomsOfficeNameType
            self.validate_CustomsOfficeNameType(self.OfficeName)
# end class CustomsType


class DeliveryTermsRUType(GeneratedsSuper):
    """DeliveryTermsRUType -- У
    с
    л
    о
    в
    и
    е
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    .
    Д
    л
    я
    Р
    о
    с
    с
    и
    и
    DeliveryPlace -- О
    п
    и
    с
    а
    н
    и
    е
    /
    Н
    а
    з
    в
    а
    н
    и
    е
    г
    е
    о
    г
    р
    а
    ф
    и
    ч
    е
    с
    к
    о
    г
    о
    п
    у
    н
    к
    т
    а
    DeliveryTermsStringCode -- К
    о
    д
    у
    с
    л
    о
    в
    и
    й
    п
    о
    с
    т
    а
    в
    к
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    у
    с
    л
    о
    в
    и
    й
    п
    о
    с
    т
    а
    в
    к
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DeliveryPlace=None, DeliveryTermsStringCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.DeliveryPlace = DeliveryPlace
        self.validate_Text50Type(self.DeliveryPlace)
        self.DeliveryPlace_nsprefix_ = "clt_ru"
        self.DeliveryTermsStringCode = DeliveryTermsStringCode
        self.validate_IncotermsDeliveryStringCodeType(self.DeliveryTermsStringCode)
        self.DeliveryTermsStringCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryTermsRUType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryTermsRUType.subclass:
            return DeliveryTermsRUType.subclass(*args_, **kwargs_)
        else:
            return DeliveryTermsRUType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DeliveryPlace(self):
        return self.DeliveryPlace
    def set_DeliveryPlace(self, DeliveryPlace):
        self.DeliveryPlace = DeliveryPlace
    def get_DeliveryTermsStringCode(self):
        return self.DeliveryTermsStringCode
    def set_DeliveryTermsStringCode(self, DeliveryTermsStringCode):
        self.DeliveryTermsStringCode = DeliveryTermsStringCode
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IncotermsDeliveryStringCodeType(self, value):
        result = True
        # Validate type IncotermsDeliveryStringCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_IncotermsDeliveryStringCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_IncotermsDeliveryStringCodeType_patterns_, ))
                result = False
        return result
    validate_IncotermsDeliveryStringCodeType_patterns_ = [['^(\\D{3})$']]
    def has__content(self):
        if (
            self.DeliveryPlace is not None or
            self.DeliveryTermsStringCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DeliveryTermsRUType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryTermsRUType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryTermsRUType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryTermsRUType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryTermsRUType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='DeliveryTermsRUType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DeliveryTermsRUType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeliveryPlace is not None:
            namespaceprefix_ = self.DeliveryPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryPlace_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryPlace>%s</%sDeliveryPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryPlace), input_name='DeliveryPlace')), namespaceprefix_ , eol_))
        if self.DeliveryTermsStringCode is not None:
            namespaceprefix_ = self.DeliveryTermsStringCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTermsStringCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTermsStringCode>%s</%sDeliveryTermsStringCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryTermsStringCode), input_name='DeliveryTermsStringCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DeliveryPlace':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryPlace')
            value_ = self.gds_validate_string(value_, node, 'DeliveryPlace')
            self.DeliveryPlace = value_
            self.DeliveryPlace_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.DeliveryPlace)
        elif nodeName_ == 'DeliveryTermsStringCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DeliveryTermsStringCode')
            value_ = self.gds_validate_string(value_, node, 'DeliveryTermsStringCode')
            self.DeliveryTermsStringCode = value_
            self.DeliveryTermsStringCode_nsprefix_ = child_.prefix
            # validate type IncotermsDeliveryStringCodeType
            self.validate_IncotermsDeliveryStringCodeType(self.DeliveryTermsStringCode)
# end class DeliveryTermsRUType


class DeliveryTermsType(GeneratedsSuper):
    """DeliveryTermsType -- У
    с
    л
    о
    в
    и
    е
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    DeliveryPlace -- О
    п
    и
    с
    а
    н
    и
    е
    /
    Н
    а
    з
    в
    а
    н
    и
    е
    г
    е
    о
    г
    р
    а
    ф
    и
    ч
    е
    с
    к
    о
    г
    о
    п
    у
    н
    к
    т
    а
    DeliveryTermsStringCode -- К
    о
    д
    у
    с
    л
    о
    в
    и
    й
    п
    о
    с
    т
    а
    в
    к
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    у
    с
    л
    о
    в
    и
    й
    п
    о
    с
    т
    а
    в
    к
    и
    DeliveryTermsRBCode -- К
    о
    д
    в
    и
    д
    а
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    п
    о
    с
    т
    а
    в
    о
    к
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    о
    д
    л
    е
    ж
    а
    щ
    и
    х
    у
    ч
    е
    т
    у
    п
    р
    и
    о
    с
    у
    щ
    е
    с
    т
    в
    л
    е
    н
    и
    и
    э
    к
    с
    п
    о
    р
    т
    н
    ы
    х
    о
    п
    е
    р
    а
    ц
    и
    й
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    TransferPlace -- М
    е
    с
    т
    о
    п
    е
    р
    е
    д
    а
    ч
    и
    т
    о
    в
    а
    р
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    у
    с
    л
    о
    в
    и
    я
    м
    и
    д
    о
    г
    о
    в
    о
    р
    а
    (
    к
    о
    н
    т
    р
    а
    к
    т
    а
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DeliveryPlace=None, DeliveryTermsStringCode=None, DeliveryTermsRBCode=None, TransferPlace=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.DeliveryPlace = DeliveryPlace
        self.validate_Text50Type(self.DeliveryPlace)
        self.DeliveryPlace_nsprefix_ = "clt_ru"
        self.DeliveryTermsStringCode = DeliveryTermsStringCode
        self.validate_IncotermsDeliveryStringCodeType(self.DeliveryTermsStringCode)
        self.DeliveryTermsStringCode_nsprefix_ = "clt_ru"
        self.DeliveryTermsRBCode = DeliveryTermsRBCode
        self.validate_Code2Type(self.DeliveryTermsRBCode)
        self.DeliveryTermsRBCode_nsprefix_ = "clt_ru"
        self.TransferPlace = TransferPlace
        self.validate_FreeText250Type(self.TransferPlace)
        self.TransferPlace_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryTermsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryTermsType.subclass:
            return DeliveryTermsType.subclass(*args_, **kwargs_)
        else:
            return DeliveryTermsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DeliveryPlace(self):
        return self.DeliveryPlace
    def set_DeliveryPlace(self, DeliveryPlace):
        self.DeliveryPlace = DeliveryPlace
    def get_DeliveryTermsStringCode(self):
        return self.DeliveryTermsStringCode
    def set_DeliveryTermsStringCode(self, DeliveryTermsStringCode):
        self.DeliveryTermsStringCode = DeliveryTermsStringCode
    def get_DeliveryTermsRBCode(self):
        return self.DeliveryTermsRBCode
    def set_DeliveryTermsRBCode(self, DeliveryTermsRBCode):
        self.DeliveryTermsRBCode = DeliveryTermsRBCode
    def get_TransferPlace(self):
        return self.TransferPlace
    def set_TransferPlace(self, TransferPlace):
        self.TransferPlace = TransferPlace
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IncotermsDeliveryStringCodeType(self, value):
        result = True
        # Validate type IncotermsDeliveryStringCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_IncotermsDeliveryStringCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_IncotermsDeliveryStringCodeType_patterns_, ))
                result = False
        return result
    validate_IncotermsDeliveryStringCodeType_patterns_ = [['^(\\D{3})$']]
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DeliveryPlace is not None or
            self.DeliveryTermsStringCode is not None or
            self.DeliveryTermsRBCode is not None or
            self.TransferPlace is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DeliveryTermsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryTermsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryTermsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryTermsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryTermsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='DeliveryTermsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DeliveryTermsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeliveryPlace is not None:
            namespaceprefix_ = self.DeliveryPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryPlace_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryPlace>%s</%sDeliveryPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryPlace), input_name='DeliveryPlace')), namespaceprefix_ , eol_))
        if self.DeliveryTermsStringCode is not None:
            namespaceprefix_ = self.DeliveryTermsStringCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTermsStringCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTermsStringCode>%s</%sDeliveryTermsStringCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryTermsStringCode), input_name='DeliveryTermsStringCode')), namespaceprefix_ , eol_))
        if self.DeliveryTermsRBCode is not None:
            namespaceprefix_ = self.DeliveryTermsRBCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTermsRBCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTermsRBCode>%s</%sDeliveryTermsRBCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryTermsRBCode), input_name='DeliveryTermsRBCode')), namespaceprefix_ , eol_))
        if self.TransferPlace is not None:
            namespaceprefix_ = self.TransferPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.TransferPlace_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransferPlace>%s</%sTransferPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransferPlace), input_name='TransferPlace')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DeliveryPlace':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryPlace')
            value_ = self.gds_validate_string(value_, node, 'DeliveryPlace')
            self.DeliveryPlace = value_
            self.DeliveryPlace_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.DeliveryPlace)
        elif nodeName_ == 'DeliveryTermsStringCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DeliveryTermsStringCode')
            value_ = self.gds_validate_string(value_, node, 'DeliveryTermsStringCode')
            self.DeliveryTermsStringCode = value_
            self.DeliveryTermsStringCode_nsprefix_ = child_.prefix
            # validate type IncotermsDeliveryStringCodeType
            self.validate_IncotermsDeliveryStringCodeType(self.DeliveryTermsStringCode)
        elif nodeName_ == 'DeliveryTermsRBCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DeliveryTermsRBCode')
            value_ = self.gds_validate_string(value_, node, 'DeliveryTermsRBCode')
            self.DeliveryTermsRBCode = value_
            self.DeliveryTermsRBCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.DeliveryTermsRBCode)
        elif nodeName_ == 'TransferPlace':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransferPlace')
            value_ = self.gds_validate_string(value_, node, 'TransferPlace')
            self.TransferPlace = value_
            self.TransferPlace_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.TransferPlace)
# end class DeliveryTermsType


class DimensionsType(GeneratedsSuper):
    """DimensionsType -- Г
    а
    б
    а
    р
    и
    т
    ы
    DimensionsCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
      
    * Lenght -- Д
      л
      и
      н
      а
    * Wight -- Ш
      и
      р
      и
      н
      а
    * Height -- В
      ы
      с
      о
      т
      а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DimensionsCode=None, Lenght=None, Wight=None, Height=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.DimensionsCode = DimensionsCode
        self.validate_CodeVariable3Type(self.DimensionsCode)
        self.DimensionsCode_nsprefix_ = "clt_ru"
        self.Lenght = Lenght
        self.validate_Quantity5Type(self.Lenght)
        self.Lenght_nsprefix_ = "clt_ru"
        self.Wight = Wight
        self.validate_Quantity5Type(self.Wight)
        self.Wight_nsprefix_ = "clt_ru"
        self.Height = Height
        self.validate_Quantity5Type(self.Height)
        self.Height_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionsType.subclass:
            return DimensionsType.subclass(*args_, **kwargs_)
        else:
            return DimensionsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DimensionsCode(self):
        return self.DimensionsCode
    def set_DimensionsCode(self, DimensionsCode):
        self.DimensionsCode = DimensionsCode
    def get_Lenght(self):
        return self.Lenght
    def set_Lenght(self, Lenght):
        self.Lenght = Lenght
    def get_Wight(self):
        return self.Wight
    def set_Wight(self, Wight):
        self.Wight = Wight
    def get_Height(self):
        return self.Height
    def set_Height(self, Height):
        self.Height = Height
    def validate_CodeVariable3Type(self, value):
        result = True
        # Validate type CodeVariable3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable3Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Quantity5Type(self, value):
        result = True
        # Validate type Quantity5Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DimensionsCode is not None or
            self.Lenght is not None or
            self.Wight is not None or
            self.Height is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DimensionsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DimensionsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DimensionsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DimensionsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='DimensionsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DimensionsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DimensionsCode is not None:
            namespaceprefix_ = self.DimensionsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DimensionsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDimensionsCode>%s</%sDimensionsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DimensionsCode), input_name='DimensionsCode')), namespaceprefix_ , eol_))
        if self.Lenght is not None:
            namespaceprefix_ = self.Lenght_nsprefix_ + ':' if (UseCapturedNS_ and self.Lenght_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLenght>%s</%sLenght>%s' % (namespaceprefix_ , self.gds_format_integer(self.Lenght, input_name='Lenght'), namespaceprefix_ , eol_))
        if self.Wight is not None:
            namespaceprefix_ = self.Wight_nsprefix_ + ':' if (UseCapturedNS_ and self.Wight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWight>%s</%sWight>%s' % (namespaceprefix_ , self.gds_format_integer(self.Wight, input_name='Wight'), namespaceprefix_ , eol_))
        if self.Height is not None:
            namespaceprefix_ = self.Height_nsprefix_ + ':' if (UseCapturedNS_ and self.Height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHeight>%s</%sHeight>%s' % (namespaceprefix_ , self.gds_format_integer(self.Height, input_name='Height'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DimensionsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DimensionsCode')
            value_ = self.gds_validate_string(value_, node, 'DimensionsCode')
            self.DimensionsCode = value_
            self.DimensionsCode_nsprefix_ = child_.prefix
            # validate type CodeVariable3Type
            self.validate_CodeVariable3Type(self.DimensionsCode)
        elif nodeName_ == 'Lenght' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Lenght')
            ival_ = self.gds_validate_integer(ival_, node, 'Lenght')
            self.Lenght = ival_
            self.Lenght_nsprefix_ = child_.prefix
            # validate type Quantity5Type
            self.validate_Quantity5Type(self.Lenght)
        elif nodeName_ == 'Wight' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Wight')
            ival_ = self.gds_validate_integer(ival_, node, 'Wight')
            self.Wight = ival_
            self.Wight_nsprefix_ = child_.prefix
            # validate type Quantity5Type
            self.validate_Quantity5Type(self.Wight)
        elif nodeName_ == 'Height' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Height')
            ival_ = self.gds_validate_integer(ival_, node, 'Height')
            self.Height = ival_
            self.Height_nsprefix_ = child_.prefix
            # validate type Quantity5Type
            self.validate_Quantity5Type(self.Height)
# end class DimensionsType


class DocumentBaseType(GeneratedsSuper):
    """DocumentBaseType -- Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    д
    л
    я
    у
    к
    а
    з
    а
    н
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    .
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    ,
    н
    о
    м
    е
    р
    ,
    д
    а
    т
    а
    PrDocumentName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrDocumentNumber -- Н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrDocumentDate -- Д
    а
    т
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.PrDocumentName = PrDocumentName
        self.validate_DocumentNameType(self.PrDocumentName)
        self.PrDocumentName_nsprefix_ = "clt_ru"
        self.PrDocumentNumber = PrDocumentNumber
        self.validate_DocumentNumberType(self.PrDocumentNumber)
        self.PrDocumentNumber_nsprefix_ = "clt_ru"
        if isinstance(PrDocumentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PrDocumentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PrDocumentDate
        self.PrDocumentDate = initvalue_
        self.PrDocumentDate_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentBaseType.subclass:
            return DocumentBaseType.subclass(*args_, **kwargs_)
        else:
            return DocumentBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrDocumentName(self):
        return self.PrDocumentName
    def set_PrDocumentName(self, PrDocumentName):
        self.PrDocumentName = PrDocumentName
    def get_PrDocumentNumber(self):
        return self.PrDocumentNumber
    def set_PrDocumentNumber(self, PrDocumentNumber):
        self.PrDocumentNumber = PrDocumentNumber
    def get_PrDocumentDate(self):
        return self.PrDocumentDate
    def set_PrDocumentDate(self, PrDocumentDate):
        self.PrDocumentDate = PrDocumentDate
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_DocumentNameType(self, value):
        result = True
        # Validate type DocumentNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.PrDocumentName is not None or
            self.PrDocumentNumber is not None or
            self.PrDocumentDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocumentBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='DocumentBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocumentBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrDocumentName is not None:
            namespaceprefix_ = self.PrDocumentName_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentName>%s</%sPrDocumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrDocumentName), input_name='PrDocumentName')), namespaceprefix_ , eol_))
        if self.PrDocumentNumber is not None:
            namespaceprefix_ = self.PrDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentNumber>%s</%sPrDocumentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrDocumentNumber), input_name='PrDocumentNumber')), namespaceprefix_ , eol_))
        if self.PrDocumentDate is not None:
            namespaceprefix_ = self.PrDocumentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentDate>%s</%sPrDocumentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PrDocumentDate, input_name='PrDocumentDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrDocumentName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrDocumentName')
            value_ = self.gds_validate_string(value_, node, 'PrDocumentName')
            self.PrDocumentName = value_
            self.PrDocumentName_nsprefix_ = child_.prefix
            # validate type DocumentNameType
            self.validate_DocumentNameType(self.PrDocumentName)
        elif nodeName_ == 'PrDocumentNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrDocumentNumber')
            value_ = self.gds_validate_string(value_, node, 'PrDocumentNumber')
            self.PrDocumentNumber = value_
            self.PrDocumentNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.PrDocumentNumber)
        elif nodeName_ == 'PrDocumentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PrDocumentDate = dval_
            self.PrDocumentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.PrDocumentDate)
# end class DocumentBaseType


class GTDID5Type(GeneratedsSuper):
    """GTDID5Type -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    .
    П
    р
    и
    м
    е
    н
    я
    е
    т
    с
    я
    д
    л
    я
    в
    с
    е
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    ,
    и
    м
    е
    ю
    щ
    и
    х
    с
    т
    р
    у
    к
    т
    у
    р
    у
    н
    о
    м
    е
    р
    а
    ,
    а
    н
    а
    л
    о
    г
    и
    ч
    н
    у
    ю
    с
    т
    р
    у
    к
    т
    у
    р
    е
    н
    о
    м
    е
    р
    а
    Д
    Т
    .
    П
    о
    с
    л
    е
    д
    н
    и
    й
    э
    л
    е
    м
    е
    н
    т
    5
    з
    н
    а
    к
    о
    в
    CustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    ,
    з
    а
    р
    е
    г
    и
    с
    т
    р
    и
    р
    о
    в
    а
    в
    ш
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    RegistrationDate -- Д
    а
    т
    а
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    SerialNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    п
    о
    ж
    у
    р
    н
    а
    л
    у
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomsCode=None, RegistrationDate=None, SerialNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.CustomsCode = CustomsCode
        self.validate_CustomsCodeType(self.CustomsCode)
        self.CustomsCode_nsprefix_ = "clt_ru"
        if isinstance(RegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RegistrationDate
        self.RegistrationDate = initvalue_
        self.RegistrationDate_nsprefix_ = "clt_ru"
        self.SerialNumber = SerialNumber
        self.validate_Code5Type(self.SerialNumber)
        self.SerialNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GTDID5Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GTDID5Type.subclass:
            return GTDID5Type.subclass(*args_, **kwargs_)
        else:
            return GTDID5Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomsCode(self):
        return self.CustomsCode
    def set_CustomsCode(self, CustomsCode):
        self.CustomsCode = CustomsCode
    def get_RegistrationDate(self):
        return self.RegistrationDate
    def set_RegistrationDate(self, RegistrationDate):
        self.RegistrationDate = RegistrationDate
    def get_SerialNumber(self):
        return self.SerialNumber
    def set_SerialNumber(self, SerialNumber):
        self.SerialNumber = SerialNumber
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_Code5Type(self, value):
        result = True
        # Validate type Code5Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CustomsCode is not None or
            self.RegistrationDate is not None or
            self.SerialNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GTDID5Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GTDID5Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GTDID5Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GTDID5Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GTDID5Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='GTDID5Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GTDID5Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomsCode is not None:
            namespaceprefix_ = self.CustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCode>%s</%sCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCode), input_name='CustomsCode')), namespaceprefix_ , eol_))
        if self.RegistrationDate is not None:
            namespaceprefix_ = self.RegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationDate>%s</%sRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RegistrationDate, input_name='RegistrationDate'), namespaceprefix_ , eol_))
        if self.SerialNumber is not None:
            namespaceprefix_ = self.SerialNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SerialNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SerialNumber), input_name='SerialNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCode')
            self.CustomsCode = value_
            self.CustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsCode)
        elif nodeName_ == 'RegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RegistrationDate = dval_
            self.RegistrationDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.RegistrationDate)
        elif nodeName_ == 'SerialNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SerialNumber')
            value_ = self.gds_validate_string(value_, node, 'SerialNumber')
            self.SerialNumber = value_
            self.SerialNumber_nsprefix_ = child_.prefix
            # validate type Code5Type
            self.validate_Code5Type(self.SerialNumber)
# end class GTDID5Type


class GTDID6Type(GeneratedsSuper):
    """GTDID6Type -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    .
    П
    р
    и
    м
    е
    н
    я
    е
    т
    с
    я
    д
    л
    я
    в
    с
    е
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    ,
    и
    м
    е
    ю
    щ
    и
    х
    с
    т
    р
    у
    к
    т
    у
    р
    у
    н
    о
    м
    е
    р
    а
    ,
    а
    н
    а
    л
    о
    г
    и
    ч
    н
    у
    ю
    с
    т
    р
    у
    к
    т
    у
    р
    е
    н
    о
    м
    е
    р
    а
    Д
    Т
    .
    П
    о
    с
    л
    е
    д
    н
    и
    й
    э
    л
    е
    м
    е
    н
    т
    6
    з
    н
    а
    к
    о
    в
    CustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    ,
    з
    а
    р
    е
    г
    и
    с
    т
    р
    и
    р
    о
    в
    а
    в
    ш
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    RegistrationDate -- Д
    а
    т
    а
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    SerialNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    п
    о
    ж
    у
    р
    н
    а
    л
    у
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomsCode=None, RegistrationDate=None, SerialNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.CustomsCode = CustomsCode
        self.validate_CustomsCodeType(self.CustomsCode)
        self.CustomsCode_nsprefix_ = "clt_ru"
        if isinstance(RegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RegistrationDate
        self.RegistrationDate = initvalue_
        self.RegistrationDate_nsprefix_ = "clt_ru"
        self.SerialNumber = SerialNumber
        self.validate_Code6Type(self.SerialNumber)
        self.SerialNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GTDID6Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GTDID6Type.subclass:
            return GTDID6Type.subclass(*args_, **kwargs_)
        else:
            return GTDID6Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomsCode(self):
        return self.CustomsCode
    def set_CustomsCode(self, CustomsCode):
        self.CustomsCode = CustomsCode
    def get_RegistrationDate(self):
        return self.RegistrationDate
    def set_RegistrationDate(self, RegistrationDate):
        self.RegistrationDate = RegistrationDate
    def get_SerialNumber(self):
        return self.SerialNumber
    def set_SerialNumber(self, SerialNumber):
        self.SerialNumber = SerialNumber
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_Code6Type(self, value):
        result = True
        # Validate type Code6Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code6Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CustomsCode is not None or
            self.RegistrationDate is not None or
            self.SerialNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GTDID6Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GTDID6Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GTDID6Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GTDID6Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GTDID6Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='GTDID6Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GTDID6Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomsCode is not None:
            namespaceprefix_ = self.CustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCode>%s</%sCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCode), input_name='CustomsCode')), namespaceprefix_ , eol_))
        if self.RegistrationDate is not None:
            namespaceprefix_ = self.RegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationDate>%s</%sRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RegistrationDate, input_name='RegistrationDate'), namespaceprefix_ , eol_))
        if self.SerialNumber is not None:
            namespaceprefix_ = self.SerialNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SerialNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SerialNumber), input_name='SerialNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCode')
            self.CustomsCode = value_
            self.CustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsCode)
        elif nodeName_ == 'RegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RegistrationDate = dval_
            self.RegistrationDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.RegistrationDate)
        elif nodeName_ == 'SerialNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SerialNumber')
            value_ = self.gds_validate_string(value_, node, 'SerialNumber')
            self.SerialNumber = value_
            self.SerialNumber_nsprefix_ = child_.prefix
            # validate type Code6Type
            self.validate_Code6Type(self.SerialNumber)
# end class GTDID6Type


class GTDIDType1(GeneratedsSuper):
    """GTDIDType1 -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    .
    П
    р
    и
    м
    е
    н
    я
    е
    т
    с
    я
    д
    л
    я
    в
    с
    е
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    ,
    и
    м
    е
    ю
    щ
    и
    х
    с
    т
    р
    у
    к
    т
    у
    р
    у
    н
    о
    м
    е
    р
    а
    ,
    с
    о
    в
    п
    а
    д
    а
    ю
    щ
    у
    ю
    с
    о
    с
    т
    р
    у
    к
    т
    у
    р
    о
    й
    н
    о
    м
    е
    р
    а
    Д
    Т
    CustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    ,
    з
    а
    р
    е
    г
    и
    с
    т
    р
    и
    р
    о
    в
    а
    в
    ш
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    RegistrationDate -- Д
    а
    т
    а
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    GTDNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    п
    о
    ж
    у
    р
    н
    а
    л
    у
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomsCode=None, RegistrationDate=None, GTDNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.CustomsCode = CustomsCode
        self.validate_CustomsCodeType(self.CustomsCode)
        self.CustomsCode_nsprefix_ = "clt_ru"
        if isinstance(RegistrationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RegistrationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RegistrationDate
        self.RegistrationDate = initvalue_
        self.RegistrationDate_nsprefix_ = "clt_ru"
        self.GTDNumber = GTDNumber
        self.validate_GTDIDType(self.GTDNumber)
        self.GTDNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GTDIDType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GTDIDType1.subclass:
            return GTDIDType1.subclass(*args_, **kwargs_)
        else:
            return GTDIDType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomsCode(self):
        return self.CustomsCode
    def set_CustomsCode(self, CustomsCode):
        self.CustomsCode = CustomsCode
    def get_RegistrationDate(self):
        return self.RegistrationDate
    def set_RegistrationDate(self, RegistrationDate):
        self.RegistrationDate = RegistrationDate
    def get_GTDNumber(self):
        return self.GTDNumber
    def set_GTDNumber(self, GTDNumber):
        self.GTDNumber = GTDNumber
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_GTDIDType(self, value):
        result = True
        # Validate type GTDIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on GTDIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on GTDIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CustomsCode is not None or
            self.RegistrationDate is not None or
            self.GTDNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GTDIDType1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GTDIDType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GTDIDType1':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GTDIDType1')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GTDIDType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='GTDIDType1'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GTDIDType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomsCode is not None:
            namespaceprefix_ = self.CustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCode>%s</%sCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCode), input_name='CustomsCode')), namespaceprefix_ , eol_))
        if self.RegistrationDate is not None:
            namespaceprefix_ = self.RegistrationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationDate>%s</%sRegistrationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RegistrationDate, input_name='RegistrationDate'), namespaceprefix_ , eol_))
        if self.GTDNumber is not None:
            namespaceprefix_ = self.GTDNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GTDNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTDNumber>%s</%sGTDNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GTDNumber), input_name='GTDNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCode')
            self.CustomsCode = value_
            self.CustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsCode)
        elif nodeName_ == 'RegistrationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RegistrationDate = dval_
            self.RegistrationDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.RegistrationDate)
        elif nodeName_ == 'GTDNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GTDNumber')
            value_ = self.gds_validate_string(value_, node, 'GTDNumber')
            self.GTDNumber = value_
            self.GTDNumber_nsprefix_ = child_.prefix
            # validate type GTDIDType
            self.validate_GTDIDType(self.GTDNumber)
# end class GTDIDType1


class GoodsBaseType(GeneratedsSuper):
    """GoodsBaseType -- Б
    а
    з
    о
    в
    ы
    й
    т
    и
    п
    о
    п
    и
    с
    а
    н
    и
    я
    т
    о
    в
    а
    р
    а
    GoodsNumeric -- Н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    п
    о
    п
    о
    р
    я
    д
    к
    у
    GoodsTNVEDCode -- К
    о
    д
    т
    о
    в
    а
    р
    а
    п
    о
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    GoodsDescription -- О
    п
    и
    с
    а
    н
    и
    е
    т
    о
    в
    а
    р
    а
    GrossWeightQuantity -- В
    е
    с
    т
    о
    в
    а
    р
    а
    б
    р
    у
    т
    т
    о
    (
    к
    г
    )
    NetWeightQuantity -- В
    е
    с
    т
    о
    в
    а
    р
    а
    н
    е
    т
    т
    о
    (
    к
    г
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsNumeric=None, GoodsTNVEDCode=None, GoodsDescription=None, GrossWeightQuantity=None, NetWeightQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.GoodsNumeric = GoodsNumeric
        self.validate_Count5Type(self.GoodsNumeric)
        self.GoodsNumeric_nsprefix_ = "clt_ru"
        self.GoodsTNVEDCode = GoodsTNVEDCode
        self.validate_GoodsNomenclatureCodeType(self.GoodsTNVEDCode)
        self.GoodsTNVEDCode_nsprefix_ = "clt_ru"
        if GoodsDescription is None:
            self.GoodsDescription = []
        else:
            self.GoodsDescription = GoodsDescription
        self.GoodsDescription_nsprefix_ = "clt_ru"
        self.GrossWeightQuantity = GrossWeightQuantity
        self.validate_QuantityBasisType(self.GrossWeightQuantity)
        self.GrossWeightQuantity_nsprefix_ = "clt_ru"
        self.NetWeightQuantity = NetWeightQuantity
        self.validate_QuantityBasisType(self.NetWeightQuantity)
        self.NetWeightQuantity_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsBaseType.subclass:
            return GoodsBaseType.subclass(*args_, **kwargs_)
        else:
            return GoodsBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsNumeric(self):
        return self.GoodsNumeric
    def set_GoodsNumeric(self, GoodsNumeric):
        self.GoodsNumeric = GoodsNumeric
    def get_GoodsTNVEDCode(self):
        return self.GoodsTNVEDCode
    def set_GoodsTNVEDCode(self, GoodsTNVEDCode):
        self.GoodsTNVEDCode = GoodsTNVEDCode
    def get_GoodsDescription(self):
        return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription):
        self.GoodsDescription = GoodsDescription
    def add_GoodsDescription(self, value):
        self.GoodsDescription.append(value)
    def insert_GoodsDescription_at(self, index, value):
        self.GoodsDescription.insert(index, value)
    def replace_GoodsDescription_at(self, index, value):
        self.GoodsDescription[index] = value
    def get_GrossWeightQuantity(self):
        return self.GrossWeightQuantity
    def set_GrossWeightQuantity(self, GrossWeightQuantity):
        self.GrossWeightQuantity = GrossWeightQuantity
    def get_NetWeightQuantity(self):
        return self.NetWeightQuantity
    def set_NetWeightQuantity(self, NetWeightQuantity):
        self.NetWeightQuantity = NetWeightQuantity
    def validate_Count5Type(self, value):
        result = True
        # Validate type Count5Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_GoodsNomenclatureCodeType(self, value):
        result = True
        # Validate type GoodsNomenclatureCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_GoodsNomenclatureCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_GoodsNomenclatureCodeType_patterns_, ))
                result = False
        return result
    validate_GoodsNomenclatureCodeType_patterns_ = [['^(\\d{4,10})$']]
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsNumeric is not None or
            self.GoodsTNVEDCode is not None or
            self.GoodsDescription or
            self.GrossWeightQuantity is not None or
            self.NetWeightQuantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='GoodsBaseType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsNumeric is not None:
            namespaceprefix_ = self.GoodsNumeric_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsNumeric_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsNumeric>%s</%sGoodsNumeric>%s' % (namespaceprefix_ , self.gds_format_integer(self.GoodsNumeric, input_name='GoodsNumeric'), namespaceprefix_ , eol_))
        if self.GoodsTNVEDCode is not None:
            namespaceprefix_ = self.GoodsTNVEDCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsTNVEDCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsTNVEDCode>%s</%sGoodsTNVEDCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsTNVEDCode), input_name='GoodsTNVEDCode')), namespaceprefix_ , eol_))
        for GoodsDescription_ in self.GoodsDescription:
            namespaceprefix_ = self.GoodsDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDescription>%s</%sGoodsDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsDescription_), input_name='GoodsDescription')), namespaceprefix_ , eol_))
        if self.GrossWeightQuantity is not None:
            namespaceprefix_ = self.GrossWeightQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GrossWeightQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrossWeightQuantity>%s</%sGrossWeightQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.GrossWeightQuantity, input_name='GrossWeightQuantity'), namespaceprefix_ , eol_))
        if self.NetWeightQuantity is not None:
            namespaceprefix_ = self.NetWeightQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.NetWeightQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetWeightQuantity>%s</%sNetWeightQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.NetWeightQuantity, input_name='NetWeightQuantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsNumeric' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GoodsNumeric')
            ival_ = self.gds_validate_integer(ival_, node, 'GoodsNumeric')
            self.GoodsNumeric = ival_
            self.GoodsNumeric_nsprefix_ = child_.prefix
            # validate type Count5Type
            self.validate_Count5Type(self.GoodsNumeric)
        elif nodeName_ == 'GoodsTNVEDCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsTNVEDCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsTNVEDCode')
            self.GoodsTNVEDCode = value_
            self.GoodsTNVEDCode_nsprefix_ = child_.prefix
            # validate type GoodsNomenclatureCodeType
            self.validate_GoodsNomenclatureCodeType(self.GoodsTNVEDCode)
        elif nodeName_ == 'GoodsDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsDescription')
            value_ = self.gds_validate_string(value_, node, 'GoodsDescription')
            self.GoodsDescription.append(value_)
            self.GoodsDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsDescription[-1])
        elif nodeName_ == 'GrossWeightQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'GrossWeightQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'GrossWeightQuantity')
            self.GrossWeightQuantity = fval_
            self.GrossWeightQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.GrossWeightQuantity)
        elif nodeName_ == 'NetWeightQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'NetWeightQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'NetWeightQuantity')
            self.NetWeightQuantity = fval_
            self.NetWeightQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.NetWeightQuantity)
# end class GoodsBaseType


class ITNKZType(GeneratedsSuper):
    """ITNKZType -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (
    И
    Т
    Н
    )
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    а
    К
    а
    з
    а
    х
    с
    т
    а
    н
    CategoryCode -- К
    а
    т
    е
    г
    о
    р
    и
    я
    л
    и
    ц
    а
    .
    Д
    в
    у
    х
    з
    н
    а
    ч
    н
    ы
    й
    ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    к
    а
    т
    е
    г
    о
    р
    и
    и
    л
    и
    ц
    а
    с
    о
    г
    л
    а
    с
    н
    о
    у
    ч
    р
    е
    д
    и
    т
    е
    л
    ь
    н
    ы
    м
    д
    о
    к
    у
    м
    е
    н
    т
    а
    м
    и
    л
    и
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    у
    о
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    в
    к
    а
    ч
    е
    с
    т
    в
    е
    и
    н
    д
    и
    в
    и
    д
    у
    а
    л
    ь
    н
    о
    г
    о
    п
    р
    е
    д
    п
    р
    и
    н
    и
    м
    а
    т
    е
    л
    я
    KATOCode -- К
    о
    д
    К
    А
    Т
    О
    .
    Д
    в
    у
    х
    з
    н
    а
    ч
    н
    ы
    й
    к
    о
    д
    К
    А
    Т
    О
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    к
    о
    д
    о
    в
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    ы
    х
    о
    б
    ъ
    е
    к
    т
    о
    в
    RNN -- Р
    Н
    Н
    .
    Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    а
    л
    о
    г
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    ,
    п
    р
    и
    с
    в
    а
    и
    в
    а
    е
    м
    ы
    й
    н
    а
    л
    о
    г
    о
    в
    ы
    м
    и
    о
    р
    г
    а
    н
    а
    м
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    К
    а
    з
    а
    х
    с
    т
    а
    н
    ITNReserv -- Р
    е
    з
    е
    р
    в
    д
    л
    я
    И
    Т
    Н
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CategoryCode=None, KATOCode=None, RNN=None, ITNReserv=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.CategoryCode = CategoryCode
        self.validate_Code2Type(self.CategoryCode)
        self.CategoryCode_nsprefix_ = "clt_ru"
        self.KATOCode = KATOCode
        self.validate_Code2Type(self.KATOCode)
        self.KATOCode_nsprefix_ = "clt_ru"
        self.RNN = RNN
        self.validate_RNNIDType(self.RNN)
        self.RNN_nsprefix_ = "clt_ru"
        self.ITNReserv = ITNReserv
        self.validate_ITNReservType(self.ITNReserv)
        self.ITNReserv_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ITNKZType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ITNKZType.subclass:
            return ITNKZType.subclass(*args_, **kwargs_)
        else:
            return ITNKZType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CategoryCode(self):
        return self.CategoryCode
    def set_CategoryCode(self, CategoryCode):
        self.CategoryCode = CategoryCode
    def get_KATOCode(self):
        return self.KATOCode
    def set_KATOCode(self, KATOCode):
        self.KATOCode = KATOCode
    def get_RNN(self):
        return self.RNN
    def set_RNN(self, RNN):
        self.RNN = RNN
    def get_ITNReserv(self):
        return self.ITNReserv
    def set_ITNReserv(self, ITNReserv):
        self.ITNReserv = ITNReserv
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_RNNIDType(self, value):
        result = True
        # Validate type RNNIDType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on RNNIDType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_ITNReservType(self, value):
        result = True
        # Validate type ITNReservType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 36:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ITNReservType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ITNReservType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CategoryCode is not None or
            self.KATOCode is not None or
            self.RNN is not None or
            self.ITNReserv is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ITNKZType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ITNKZType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ITNKZType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ITNKZType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ITNKZType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='ITNKZType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ITNKZType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CategoryCode is not None:
            namespaceprefix_ = self.CategoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CategoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCategoryCode>%s</%sCategoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CategoryCode), input_name='CategoryCode')), namespaceprefix_ , eol_))
        if self.KATOCode is not None:
            namespaceprefix_ = self.KATOCode_nsprefix_ + ':' if (UseCapturedNS_ and self.KATOCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKATOCode>%s</%sKATOCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KATOCode), input_name='KATOCode')), namespaceprefix_ , eol_))
        if self.RNN is not None:
            namespaceprefix_ = self.RNN_nsprefix_ + ':' if (UseCapturedNS_ and self.RNN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRNN>%s</%sRNN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RNN), input_name='RNN')), namespaceprefix_ , eol_))
        if self.ITNReserv is not None:
            namespaceprefix_ = self.ITNReserv_nsprefix_ + ':' if (UseCapturedNS_ and self.ITNReserv_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sITNReserv>%s</%sITNReserv>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ITNReserv), input_name='ITNReserv')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CategoryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CategoryCode')
            value_ = self.gds_validate_string(value_, node, 'CategoryCode')
            self.CategoryCode = value_
            self.CategoryCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.CategoryCode)
        elif nodeName_ == 'KATOCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'KATOCode')
            value_ = self.gds_validate_string(value_, node, 'KATOCode')
            self.KATOCode = value_
            self.KATOCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.KATOCode)
        elif nodeName_ == 'RNN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RNN')
            value_ = self.gds_validate_string(value_, node, 'RNN')
            self.RNN = value_
            self.RNN_nsprefix_ = child_.prefix
            # validate type RNNIDType
            self.validate_RNNIDType(self.RNN)
        elif nodeName_ == 'ITNReserv':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ITNReserv')
            value_ = self.gds_validate_string(value_, node, 'ITNReserv')
            self.ITNReserv = value_
            self.ITNReserv_nsprefix_ = child_.prefix
            # validate type ITNReservType
            self.validate_ITNReservType(self.ITNReserv)
# end class ITNKZType


class IdentityCardType(GeneratedsSuper):
    """IdentityCardType -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    (
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    т
    с
    я
    д
    о
    в
    е
    р
    с
    и
    и
    А
    Ф
    5.14.3)
    IdentityCardCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    .
    Д
    л
    я
    Р
    Ф
    IdentityCardName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardSeries -- С
    е
    р
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardNumber -- Н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardDate -- Д
    а
    т
    а
    в
    ы
    д
    а
    ч
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    OrganizationName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ,
    в
    ы
    д
    а
    в
    ш
    е
    й
    д
    о
    к
    у
    м
    е
    н
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IdentityCardCode=None, IdentityCardName=None, IdentityCardSeries=None, IdentityCardNumber=None, IdentityCardDate=None, OrganizationName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.IdentityCardCode = IdentityCardCode
        self.validate_IdentityCardCodeType(self.IdentityCardCode)
        self.IdentityCardCode_nsprefix_ = "clt_ru"
        self.IdentityCardName = IdentityCardName
        self.validate_IdentityCardNameType(self.IdentityCardName)
        self.IdentityCardName_nsprefix_ = "clt_ru"
        self.IdentityCardSeries = IdentityCardSeries
        self.validate_IdentityCardSeriesType(self.IdentityCardSeries)
        self.IdentityCardSeries_nsprefix_ = "clt_ru"
        self.IdentityCardNumber = IdentityCardNumber
        self.validate_IdentityCardNumberType(self.IdentityCardNumber)
        self.IdentityCardNumber_nsprefix_ = "clt_ru"
        if isinstance(IdentityCardDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(IdentityCardDate, '%Y-%m-%d').date()
        else:
            initvalue_ = IdentityCardDate
        self.IdentityCardDate = initvalue_
        self.IdentityCardDate_nsprefix_ = "clt_ru"
        self.OrganizationName = OrganizationName
        self.validate_NameType(self.OrganizationName)
        self.OrganizationName_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentityCardType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentityCardType.subclass:
            return IdentityCardType.subclass(*args_, **kwargs_)
        else:
            return IdentityCardType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IdentityCardCode(self):
        return self.IdentityCardCode
    def set_IdentityCardCode(self, IdentityCardCode):
        self.IdentityCardCode = IdentityCardCode
    def get_IdentityCardName(self):
        return self.IdentityCardName
    def set_IdentityCardName(self, IdentityCardName):
        self.IdentityCardName = IdentityCardName
    def get_IdentityCardSeries(self):
        return self.IdentityCardSeries
    def set_IdentityCardSeries(self, IdentityCardSeries):
        self.IdentityCardSeries = IdentityCardSeries
    def get_IdentityCardNumber(self):
        return self.IdentityCardNumber
    def set_IdentityCardNumber(self, IdentityCardNumber):
        self.IdentityCardNumber = IdentityCardNumber
    def get_IdentityCardDate(self):
        return self.IdentityCardDate
    def set_IdentityCardDate(self, IdentityCardDate):
        self.IdentityCardDate = IdentityCardDate
    def get_OrganizationName(self):
        return self.OrganizationName
    def set_OrganizationName(self, OrganizationName):
        self.OrganizationName = OrganizationName
    def validate_IdentityCardCodeType(self, value):
        result = True
        # Validate type IdentityCardCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_IdentityCardCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_IdentityCardCodeType_patterns_, ))
                result = False
        return result
    validate_IdentityCardCodeType_patterns_ = [['^(\\d{2})$']]
    def validate_IdentityCardNameType(self, value):
        result = True
        # Validate type IdentityCardNameType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 15:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on IdentityCardNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on IdentityCardNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IdentityCardSeriesType(self, value):
        result = True
        # Validate type IdentityCardSeriesType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on IdentityCardSeriesType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on IdentityCardSeriesType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IdentityCardNumberType(self, value):
        result = True
        # Validate type IdentityCardNumberType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on IdentityCardNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on IdentityCardNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.IdentityCardCode is not None or
            self.IdentityCardName is not None or
            self.IdentityCardSeries is not None or
            self.IdentityCardNumber is not None or
            self.IdentityCardDate is not None or
            self.OrganizationName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='IdentityCardType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentityCardType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IdentityCardType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IdentityCardType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IdentityCardType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='IdentityCardType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='IdentityCardType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentityCardCode is not None:
            namespaceprefix_ = self.IdentityCardCode_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardCode>%s</%sIdentityCardCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardCode), input_name='IdentityCardCode')), namespaceprefix_ , eol_))
        if self.IdentityCardName is not None:
            namespaceprefix_ = self.IdentityCardName_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardName>%s</%sIdentityCardName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardName), input_name='IdentityCardName')), namespaceprefix_ , eol_))
        if self.IdentityCardSeries is not None:
            namespaceprefix_ = self.IdentityCardSeries_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardSeries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardSeries>%s</%sIdentityCardSeries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardSeries), input_name='IdentityCardSeries')), namespaceprefix_ , eol_))
        if self.IdentityCardNumber is not None:
            namespaceprefix_ = self.IdentityCardNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardNumber>%s</%sIdentityCardNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardNumber), input_name='IdentityCardNumber')), namespaceprefix_ , eol_))
        if self.IdentityCardDate is not None:
            namespaceprefix_ = self.IdentityCardDate_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardDate>%s</%sIdentityCardDate>%s' % (namespaceprefix_ , self.gds_format_date(self.IdentityCardDate, input_name='IdentityCardDate'), namespaceprefix_ , eol_))
        if self.OrganizationName is not None:
            namespaceprefix_ = self.OrganizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationName>%s</%sOrganizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationName), input_name='OrganizationName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IdentityCardCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardCode')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardCode')
            self.IdentityCardCode = value_
            self.IdentityCardCode_nsprefix_ = child_.prefix
            # validate type IdentityCardCodeType
            self.validate_IdentityCardCodeType(self.IdentityCardCode)
        elif nodeName_ == 'IdentityCardName':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardName')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardName')
            self.IdentityCardName = value_
            self.IdentityCardName_nsprefix_ = child_.prefix
            # validate type IdentityCardNameType
            self.validate_IdentityCardNameType(self.IdentityCardName)
        elif nodeName_ == 'IdentityCardSeries':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardSeries')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardSeries')
            self.IdentityCardSeries = value_
            self.IdentityCardSeries_nsprefix_ = child_.prefix
            # validate type IdentityCardSeriesType
            self.validate_IdentityCardSeriesType(self.IdentityCardSeries)
        elif nodeName_ == 'IdentityCardNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardNumber')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardNumber')
            self.IdentityCardNumber = value_
            self.IdentityCardNumber_nsprefix_ = child_.prefix
            # validate type IdentityCardNumberType
            self.validate_IdentityCardNumberType(self.IdentityCardNumber)
        elif nodeName_ == 'IdentityCardDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.IdentityCardDate = dval_
            self.IdentityCardDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.IdentityCardDate)
        elif nodeName_ == 'OrganizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationName')
            value_ = self.gds_validate_string(value_, node, 'OrganizationName')
            self.OrganizationName = value_
            self.OrganizationName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.OrganizationName)
# end class IdentityCardType


class KGOrganizationFeaturesType(GeneratedsSuper):
    """KGOrganizationFeaturesType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    К
    ы
    р
    г
    ы
    з
    с
    к
    о
    й
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    KGINN -- И
    Н
    Н
    -
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    а
    л
    о
    г
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    н
    а
    л
    о
    г
    о
    п
    л
    а
    т
    е
    л
    ь
    щ
    и
    к
    а
    ,
    П
    И
    Н
    -
    п
    е
    р
    с
    о
    н
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    KGOKPO -- К
    о
    д
    О
    б
    щ
    е
    р
    е
    с
    п
    у
    б
    л
    и
    к
    а
    н
    с
    к
    о
    г
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    п
    р
    е
    д
    п
    р
    и
    я
    т
    и
    й
    и
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    й
    (
    О
    К
    П
    О
    )
    д
    л
    я
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    и
    х
    л
    и
    ц
    и
    и
    н
    д
    и
    в
    и
    д
    у
    а
    л
    ь
    н
    ы
    х
    п
    р
    е
    д
    п
    р
    и
    н
    и
    м
    а
    т
    е
    л
    е
    й
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, KGINN=None, KGOKPO=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.KGINN = KGINN
        self.validate_KGINNIDType(self.KGINN)
        self.KGINN_nsprefix_ = "clt_ru"
        self.KGOKPO = KGOKPO
        self.validate_KGOKPOIDType(self.KGOKPO)
        self.KGOKPO_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KGOrganizationFeaturesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KGOrganizationFeaturesType.subclass:
            return KGOrganizationFeaturesType.subclass(*args_, **kwargs_)
        else:
            return KGOrganizationFeaturesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_KGINN(self):
        return self.KGINN
    def set_KGINN(self, KGINN):
        self.KGINN = KGINN
    def get_KGOKPO(self):
        return self.KGOKPO
    def set_KGOKPO(self, KGOKPO):
        self.KGOKPO = KGOKPO
    def validate_KGINNIDType(self, value):
        result = True
        # Validate type KGINNIDType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_KGINNIDType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_KGINNIDType_patterns_, ))
                result = False
        return result
    validate_KGINNIDType_patterns_ = [['^(\\d{14})$']]
    def validate_KGOKPOIDType(self, value):
        result = True
        # Validate type KGOKPOIDType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_KGOKPOIDType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_KGOKPOIDType_patterns_, ))
                result = False
        return result
    validate_KGOKPOIDType_patterns_ = [['^(\\d{8})$']]
    def has__content(self):
        if (
            self.KGINN is not None or
            self.KGOKPO is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='KGOrganizationFeaturesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KGOrganizationFeaturesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'KGOrganizationFeaturesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='KGOrganizationFeaturesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='KGOrganizationFeaturesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='KGOrganizationFeaturesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='KGOrganizationFeaturesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.KGINN is not None:
            namespaceprefix_ = self.KGINN_nsprefix_ + ':' if (UseCapturedNS_ and self.KGINN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKGINN>%s</%sKGINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KGINN), input_name='KGINN')), namespaceprefix_ , eol_))
        if self.KGOKPO is not None:
            namespaceprefix_ = self.KGOKPO_nsprefix_ + ':' if (UseCapturedNS_ and self.KGOKPO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKGOKPO>%s</%sKGOKPO>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KGOKPO), input_name='KGOKPO')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'KGINN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'KGINN')
            value_ = self.gds_validate_string(value_, node, 'KGINN')
            self.KGINN = value_
            self.KGINN_nsprefix_ = child_.prefix
            # validate type KGINNIDType
            self.validate_KGINNIDType(self.KGINN)
        elif nodeName_ == 'KGOKPO':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'KGOKPO')
            value_ = self.gds_validate_string(value_, node, 'KGOKPO')
            self.KGOKPO = value_
            self.KGOKPO_nsprefix_ = child_.prefix
            # validate type KGOKPOIDType
            self.validate_KGOKPOIDType(self.KGOKPO)
# end class KGOrganizationFeaturesType


class OrganizationBaseType(GeneratedsSuper):
    """OrganizationBaseType -- Р
    е
    к
    в
    и
    з
    и
    т
    ы
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    OrganizationName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    /
    Ф
    И
    О
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    ShortName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    OrganizationLanguage -- К
    о
    д
    я
    з
    ы
    к
    а
    д
    л
    я
    з
    а
    п
    о
    л
    н
    е
    н
    и
    я
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    я
      
    * RFOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      Р
      о
      с
      с
      и
      й
      с
      к
      о
      й
      Ф
      е
      д
      е
      р
      а
      ц
      и
      и
    * RKOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      Р
      е
      с
      п
      у
      б
      л
      и
      к
      и
      К
      а
      з
      а
      х
      с
      т
      а
      н
    * RBOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      Р
      е
      с
      п
      у
      б
      л
      и
      к
      и
      Б
      е
      л
      а
      р
      у
      с
      ь
    * RAOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      Р
      е
      с
      п
      у
      б
      л
      и
      к
      и
      А
      р
      м
      е
      н
      и
      я
    * KGOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      К
      ы
      р
      г
      ы
      з
      с
      к
      о
      й
      Р
      е
      с
      п
      у
      б
      л
      и
      к
      и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.OrganizationName = OrganizationName
        self.validate_NameType(self.OrganizationName)
        self.OrganizationName_nsprefix_ = "clt_ru"
        self.ShortName = ShortName
        self.validate_ShortNameType(self.ShortName)
        self.ShortName_nsprefix_ = "clt_ru"
        self.OrganizationLanguage = OrganizationLanguage
        self.validate_LanguageCodeType(self.OrganizationLanguage)
        self.OrganizationLanguage_nsprefix_ = "clt_ru"
        self.RFOrganizationFeatures = RFOrganizationFeatures
        self.RFOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RKOrganizationFeatures = RKOrganizationFeatures
        self.RKOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RBOrganizationFeatures = RBOrganizationFeatures
        self.RBOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RAOrganizationFeatures = RAOrganizationFeatures
        self.RAOrganizationFeatures_nsprefix_ = "cat_ru"
        self.KGOrganizationFeatures = KGOrganizationFeatures
        self.KGOrganizationFeatures_nsprefix_ = "cat_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrganizationBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrganizationBaseType.subclass:
            return OrganizationBaseType.subclass(*args_, **kwargs_)
        else:
            return OrganizationBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OrganizationName(self):
        return self.OrganizationName
    def set_OrganizationName(self, OrganizationName):
        self.OrganizationName = OrganizationName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_OrganizationLanguage(self):
        return self.OrganizationLanguage
    def set_OrganizationLanguage(self, OrganizationLanguage):
        self.OrganizationLanguage = OrganizationLanguage
    def get_RFOrganizationFeatures(self):
        return self.RFOrganizationFeatures
    def set_RFOrganizationFeatures(self, RFOrganizationFeatures):
        self.RFOrganizationFeatures = RFOrganizationFeatures
    def get_RKOrganizationFeatures(self):
        return self.RKOrganizationFeatures
    def set_RKOrganizationFeatures(self, RKOrganizationFeatures):
        self.RKOrganizationFeatures = RKOrganizationFeatures
    def get_RBOrganizationFeatures(self):
        return self.RBOrganizationFeatures
    def set_RBOrganizationFeatures(self, RBOrganizationFeatures):
        self.RBOrganizationFeatures = RBOrganizationFeatures
    def get_RAOrganizationFeatures(self):
        return self.RAOrganizationFeatures
    def set_RAOrganizationFeatures(self, RAOrganizationFeatures):
        self.RAOrganizationFeatures = RAOrganizationFeatures
    def get_KGOrganizationFeatures(self):
        return self.KGOrganizationFeatures
    def set_KGOrganizationFeatures(self, KGOrganizationFeatures):
        self.KGOrganizationFeatures = KGOrganizationFeatures
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_ShortNameType(self, value):
        result = True
        # Validate type ShortNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ShortNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ShortNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LanguageCodeType(self, value):
        result = True
        # Validate type LanguageCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_LanguageCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_LanguageCodeType_patterns_, ))
                result = False
        return result
    validate_LanguageCodeType_patterns_ = [['^([A-Z]{2})$']]
    def has__content(self):
        if (
            self.OrganizationName is not None or
            self.ShortName is not None or
            self.OrganizationLanguage is not None or
            self.RFOrganizationFeatures is not None or
            self.RKOrganizationFeatures is not None or
            self.RBOrganizationFeatures is not None or
            self.RAOrganizationFeatures is not None or
            self.KGOrganizationFeatures is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='OrganizationBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrganizationBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrganizationBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrganizationBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='OrganizationBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='OrganizationBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OrganizationName is not None:
            namespaceprefix_ = self.OrganizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationName>%s</%sOrganizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationName), input_name='OrganizationName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.OrganizationLanguage is not None:
            namespaceprefix_ = self.OrganizationLanguage_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationLanguage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationLanguage>%s</%sOrganizationLanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationLanguage), input_name='OrganizationLanguage')), namespaceprefix_ , eol_))
        if self.RFOrganizationFeatures is not None:
            namespaceprefix_ = self.RFOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RFOrganizationFeatures_nsprefix_) else ''
            self.RFOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFOrganizationFeatures', pretty_print=pretty_print)
        if self.RKOrganizationFeatures is not None:
            namespaceprefix_ = self.RKOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RKOrganizationFeatures_nsprefix_) else ''
            self.RKOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RKOrganizationFeatures', pretty_print=pretty_print)
        if self.RBOrganizationFeatures is not None:
            namespaceprefix_ = self.RBOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RBOrganizationFeatures_nsprefix_) else ''
            self.RBOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RBOrganizationFeatures', pretty_print=pretty_print)
        if self.RAOrganizationFeatures is not None:
            namespaceprefix_ = self.RAOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RAOrganizationFeatures_nsprefix_) else ''
            self.RAOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RAOrganizationFeatures', pretty_print=pretty_print)
        if self.KGOrganizationFeatures is not None:
            namespaceprefix_ = self.KGOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.KGOrganizationFeatures_nsprefix_) else ''
            self.KGOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='KGOrganizationFeatures', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OrganizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationName')
            value_ = self.gds_validate_string(value_, node, 'OrganizationName')
            self.OrganizationName = value_
            self.OrganizationName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.OrganizationName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType
            self.validate_ShortNameType(self.ShortName)
        elif nodeName_ == 'OrganizationLanguage':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OrganizationLanguage')
            value_ = self.gds_validate_string(value_, node, 'OrganizationLanguage')
            self.OrganizationLanguage = value_
            self.OrganizationLanguage_nsprefix_ = child_.prefix
            # validate type LanguageCodeType
            self.validate_LanguageCodeType(self.OrganizationLanguage)
        elif nodeName_ == 'RFOrganizationFeatures':
            obj_ = RFOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RFOrganizationFeatures'
        elif nodeName_ == 'RKOrganizationFeatures':
            obj_ = RKOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RKOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RKOrganizationFeatures'
        elif nodeName_ == 'RBOrganizationFeatures':
            obj_ = RBOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RBOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RBOrganizationFeatures'
        elif nodeName_ == 'RAOrganizationFeatures':
            obj_ = RAOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RAOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RAOrganizationFeatures'
        elif nodeName_ == 'KGOrganizationFeatures':
            obj_ = KGOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.KGOrganizationFeatures = obj_
            obj_.original_tagname_ = 'KGOrganizationFeatures'
# end class OrganizationBaseType


class OrganizationType(OrganizationBaseType):
    """OrganizationType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    OKPOID -- К
    о
    д
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    п
    о
    О
    К
    П
    О
    OKATOCode -- К
    о
    д
    О
    К
    А
    Т
    О
    Address -- А
    д
    р
    е
    с
      
    * Contact -- К
      о
      н
      т
      а
      к
      т
      н
      а
      я
      и
      н
      ф
      о
      р
      м
      а
      ц
      и
      я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = OrganizationBaseType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, OKPOID=None, OKATOCode=None, Address=None, Contact=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        super(globals().get("OrganizationType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, extensiontype_,  **kwargs_)
        self.OKPOID = OKPOID
        self.validate_OKPOIDType(self.OKPOID)
        self.OKPOID_nsprefix_ = "clt_ru"
        self.OKATOCode = OKATOCode
        self.validate_OKATOCodeType(self.OKATOCode)
        self.OKATOCode_nsprefix_ = "clt_ru"
        self.Address = Address
        self.Address_nsprefix_ = "cat_ru"
        self.Contact = Contact
        self.Contact_nsprefix_ = "cat_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrganizationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrganizationType.subclass:
            return OrganizationType.subclass(*args_, **kwargs_)
        else:
            return OrganizationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OKPOID(self):
        return self.OKPOID
    def set_OKPOID(self, OKPOID):
        self.OKPOID = OKPOID
    def get_OKATOCode(self):
        return self.OKATOCode
    def set_OKATOCode(self, OKATOCode):
        self.OKATOCode = OKATOCode
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_OKPOIDType(self, value):
        result = True
        # Validate type OKPOIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on OKPOIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on OKPOIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_OKATOCodeType(self, value):
        result = True
        # Validate type OKATOCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_OKATOCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_OKATOCodeType_patterns_, ))
                result = False
        return result
    validate_OKATOCodeType_patterns_ = [['^(\\d{5,11})$']]
    def has__content(self):
        if (
            self.OKPOID is not None or
            self.OKATOCode is not None or
            self.Address is not None or
            self.Contact is not None or
            super(OrganizationType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='OrganizationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrganizationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrganizationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrganizationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='OrganizationType'):
        super(OrganizationType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='OrganizationType', fromsubclass_=False, pretty_print=True):
        super(OrganizationType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OKPOID is not None:
            namespaceprefix_ = self.OKPOID_nsprefix_ + ':' if (UseCapturedNS_ and self.OKPOID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOKPOID>%s</%sOKPOID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OKPOID), input_name='OKPOID')), namespaceprefix_ , eol_))
        if self.OKATOCode is not None:
            namespaceprefix_ = self.OKATOCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OKATOCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOKATOCode>%s</%sOKATOCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OKATOCode), input_name='OKATOCode')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(OrganizationType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OKPOID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OKPOID')
            value_ = self.gds_validate_string(value_, node, 'OKPOID')
            self.OKPOID = value_
            self.OKPOID_nsprefix_ = child_.prefix
            # validate type OKPOIDType
            self.validate_OKPOIDType(self.OKPOID)
        elif nodeName_ == 'OKATOCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OKATOCode')
            value_ = self.gds_validate_string(value_, node, 'OKATOCode')
            self.OKATOCode = value_
            self.OKATOCode_nsprefix_ = child_.prefix
            # validate type OKATOCodeType
            self.validate_OKATOCodeType(self.OKATOCode)
        elif nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'Contact':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        super(OrganizationType, self)._buildChildren(child_, node, nodeName_, True)
# end class OrganizationType


class OrganizationWBankType(OrganizationType):
    """OrganizationWBankType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ,
    в
    к
    л
    ю
    ч
    а
    я
    б
    а
    н
    к
    о
    в
    с
    к
    и
    е
    с
    ч
    е
    т
    а
    BankInformation -- И
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    о
    б
    а
    н
    к
    о
    в
    с
    к
    и
    х
    с
    ч
    е
    т
    а
    х
    .
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = OrganizationType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, OKPOID=None, OKATOCode=None, Address=None, Contact=None, BankInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        super(globals().get("OrganizationWBankType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, OKPOID, OKATOCode, Address, Contact,  **kwargs_)
        if BankInformation is None:
            self.BankInformation = []
        else:
            self.BankInformation = BankInformation
        self.BankInformation_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrganizationWBankType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrganizationWBankType.subclass:
            return OrganizationWBankType.subclass(*args_, **kwargs_)
        else:
            return OrganizationWBankType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BankInformation(self):
        return self.BankInformation
    def set_BankInformation(self, BankInformation):
        self.BankInformation = BankInformation
    def add_BankInformation(self, value):
        self.BankInformation.append(value)
    def insert_BankInformation_at(self, index, value):
        self.BankInformation.insert(index, value)
    def replace_BankInformation_at(self, index, value):
        self.BankInformation[index] = value
    def has__content(self):
        if (
            self.BankInformation or
            super(OrganizationWBankType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"', name_='OrganizationWBankType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrganizationWBankType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrganizationWBankType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationWBankType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrganizationWBankType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='OrganizationWBankType'):
        super(OrganizationWBankType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationWBankType')
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"', name_='OrganizationWBankType', fromsubclass_=False, pretty_print=True):
        super(OrganizationWBankType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BankInformation_ in self.BankInformation:
            namespaceprefix_ = self.BankInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.BankInformation_nsprefix_) else ''
            BankInformation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BankInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(OrganizationWBankType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BankInformation':
            obj_ = BankInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankInformation.append(obj_)
            obj_.original_tagname_ = 'BankInformation'
        super(OrganizationWBankType, self)._buildChildren(child_, node, nodeName_, True)
# end class OrganizationWBankType


class PersonBaseType(GeneratedsSuper):
    """PersonBaseType -- Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    д
    л
    я
    у
    к
    а
    з
    а
    н
    и
    я
    с
    в
    е
    д
    е
    н
    и
    й
    о
    д
    о
    л
    ж
    н
    о
    с
    т
    н
    о
    м
    л
    и
    ц
    е
    .
    Ф
    И
    О
    ,
    д
    о
    л
    ж
    н
    о
    с
    т
    ь
    PersonSurname -- Ф
    а
    м
    и
    л
    и
    я
    PersonName -- И
    м
    я
    PersonMiddleName -- О
    т
    ч
    е
    с
    т
    в
    о
    PersonPost -- Д
    о
    л
    ж
    н
    о
    с
    т
    ь
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.PersonSurname = PersonSurname
        self.validate_NameType(self.PersonSurname)
        self.PersonSurname_nsprefix_ = "clt_ru"
        self.PersonName = PersonName
        self.validate_NameType(self.PersonName)
        self.PersonName_nsprefix_ = "clt_ru"
        self.PersonMiddleName = PersonMiddleName
        self.validate_NameType(self.PersonMiddleName)
        self.PersonMiddleName_nsprefix_ = "clt_ru"
        self.PersonPost = PersonPost
        self.validate_PostType(self.PersonPost)
        self.PersonPost_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PersonBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PersonBaseType.subclass:
            return PersonBaseType.subclass(*args_, **kwargs_)
        else:
            return PersonBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PersonSurname(self):
        return self.PersonSurname
    def set_PersonSurname(self, PersonSurname):
        self.PersonSurname = PersonSurname
    def get_PersonName(self):
        return self.PersonName
    def set_PersonName(self, PersonName):
        self.PersonName = PersonName
    def get_PersonMiddleName(self):
        return self.PersonMiddleName
    def set_PersonMiddleName(self, PersonMiddleName):
        self.PersonMiddleName = PersonMiddleName
    def get_PersonPost(self):
        return self.PersonPost
    def set_PersonPost(self, PersonPost):
        self.PersonPost = PersonPost
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_PostType(self, value):
        result = True
        # Validate type PostType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PostType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PostType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PersonSurname is not None or
            self.PersonName is not None or
            self.PersonMiddleName is not None or
            self.PersonPost is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PersonBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PersonBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PersonBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PersonBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PersonBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='PersonBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PersonBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonSurname is not None:
            namespaceprefix_ = self.PersonSurname_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonSurname_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonSurname>%s</%sPersonSurname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonSurname), input_name='PersonSurname')), namespaceprefix_ , eol_))
        if self.PersonName is not None:
            namespaceprefix_ = self.PersonName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonName>%s</%sPersonName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), namespaceprefix_ , eol_))
        if self.PersonMiddleName is not None:
            namespaceprefix_ = self.PersonMiddleName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonMiddleName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonMiddleName>%s</%sPersonMiddleName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonMiddleName), input_name='PersonMiddleName')), namespaceprefix_ , eol_))
        if self.PersonPost is not None:
            namespaceprefix_ = self.PersonPost_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonPost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonPost>%s</%sPersonPost>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonPost), input_name='PersonPost')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PersonSurname':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonSurname')
            value_ = self.gds_validate_string(value_, node, 'PersonSurname')
            self.PersonSurname = value_
            self.PersonSurname_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.PersonSurname)
        elif nodeName_ == 'PersonName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonName')
            value_ = self.gds_validate_string(value_, node, 'PersonName')
            self.PersonName = value_
            self.PersonName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.PersonName)
        elif nodeName_ == 'PersonMiddleName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonMiddleName')
            value_ = self.gds_validate_string(value_, node, 'PersonMiddleName')
            self.PersonMiddleName = value_
            self.PersonMiddleName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.PersonMiddleName)
        elif nodeName_ == 'PersonPost':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonPost')
            value_ = self.gds_validate_string(value_, node, 'PersonPost')
            self.PersonPost = value_
            self.PersonPost_nsprefix_ = child_.prefix
            # validate type PostType
            self.validate_PostType(self.PersonPost)
# end class PersonBaseType


class PersonSignatureType(PersonBaseType):
    """PersonSignatureType -- П
    о
    д
    п
    и
    с
    ь
    IssueDate -- Д
    а
    т
    а
    п
    о
    д
    п
    и
    с
    а
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PersonBaseType
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, IssueDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        super(globals().get("PersonSignatureType"), self).__init__(PersonSurname, PersonName, PersonMiddleName, PersonPost,  **kwargs_)
        if isinstance(IssueDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(IssueDate, '%Y-%m-%d').date()
        else:
            initvalue_ = IssueDate
        self.IssueDate = initvalue_
        self.IssueDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PersonSignatureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PersonSignatureType.subclass:
            return PersonSignatureType.subclass(*args_, **kwargs_)
        else:
            return PersonSignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IssueDate(self):
        return self.IssueDate
    def set_IssueDate(self, IssueDate):
        self.IssueDate = IssueDate
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.IssueDate is not None or
            super(PersonSignatureType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PersonSignatureType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PersonSignatureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PersonSignatureType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PersonSignatureType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PersonSignatureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='PersonSignatureType'):
        super(PersonSignatureType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PersonSignatureType')
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PersonSignatureType', fromsubclass_=False, pretty_print=True):
        super(PersonSignatureType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IssueDate is not None:
            namespaceprefix_ = self.IssueDate_nsprefix_ + ':' if (UseCapturedNS_ and self.IssueDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIssueDate>%s</%sIssueDate>%s' % (namespaceprefix_ , self.gds_format_date(self.IssueDate, input_name='IssueDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(PersonSignatureType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IssueDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.IssueDate = dval_
            self.IssueDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.IssueDate)
        super(PersonSignatureType, self)._buildChildren(child_, node, nodeName_, True)
# end class PersonSignatureType


class RAOrganizationFeaturesType(GeneratedsSuper):
    """RAOrganizationFeaturesType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    А
    р
    м
    е
    н
    и
    я
    UNN -- У
    ч
    е
    т
    н
    ы
    й
    н
    о
    м
    е
    р
    н
    а
    л
    о
    г
    о
    п
    л
    а
    т
    е
    л
    ь
    щ
    и
    к
    а
    (
    У
    Н
    Н
    )
    SocialServiceNumber -- Н
    о
    м
    е
    р
    н
    о
    й
    з
    н
    а
    к
    о
    б
    щ
    е
    с
    т
    в
    е
    н
    н
    ы
    х
    у
    с
    л
    у
    г
    (
    Н
    З
    О
    У
    )
    SocialServiceCertificate -- Н
    о
    м
    е
    р
    с
    п
    р
    а
    в
    к
    и
    о
    б
    о
    т
    с
    у
    т
    с
    т
    в
    и
    и
    н
    о
    м
    е
    р
    н
    о
    г
    о
    з
    н
    а
    к
    а
    о
    б
    щ
    е
    с
    т
    в
    е
    н
    н
    ы
    х
    у
    с
    л
    у
    г
    (
    Н
    З
    О
    У
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UNN=None, SocialServiceNumber=None, SocialServiceCertificate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.UNN = UNN
        self.validate_UNNType(self.UNN)
        self.UNN_nsprefix_ = "clt_ru"
        self.SocialServiceNumber = SocialServiceNumber
        self.validate_SocialServiceNumberType(self.SocialServiceNumber)
        self.SocialServiceNumber_nsprefix_ = "clt_ru"
        self.SocialServiceCertificate = SocialServiceCertificate
        self.validate_SocialServiceCertificateType(self.SocialServiceCertificate)
        self.SocialServiceCertificate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RAOrganizationFeaturesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RAOrganizationFeaturesType.subclass:
            return RAOrganizationFeaturesType.subclass(*args_, **kwargs_)
        else:
            return RAOrganizationFeaturesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UNN(self):
        return self.UNN
    def set_UNN(self, UNN):
        self.UNN = UNN
    def get_SocialServiceNumber(self):
        return self.SocialServiceNumber
    def set_SocialServiceNumber(self, SocialServiceNumber):
        self.SocialServiceNumber = SocialServiceNumber
    def get_SocialServiceCertificate(self):
        return self.SocialServiceCertificate
    def set_SocialServiceCertificate(self, SocialServiceCertificate):
        self.SocialServiceCertificate = SocialServiceCertificate
    def validate_UNNType(self, value):
        result = True
        # Validate type UNNType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_UNNType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_UNNType_patterns_, ))
                result = False
        return result
    validate_UNNType_patterns_ = [['^(\\d{8})$']]
    def validate_SocialServiceNumberType(self, value):
        result = True
        # Validate type SocialServiceNumberType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_SocialServiceNumberType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_SocialServiceNumberType_patterns_, ))
                result = False
        return result
    validate_SocialServiceNumberType_patterns_ = [['^(\\d{10})$']]
    def validate_SocialServiceCertificateType(self, value):
        result = True
        # Validate type SocialServiceCertificateType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on SocialServiceCertificateType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.UNN is not None or
            self.SocialServiceNumber is not None or
            self.SocialServiceCertificate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RAOrganizationFeaturesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RAOrganizationFeaturesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RAOrganizationFeaturesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RAOrganizationFeaturesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RAOrganizationFeaturesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='RAOrganizationFeaturesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RAOrganizationFeaturesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UNN is not None:
            namespaceprefix_ = self.UNN_nsprefix_ + ':' if (UseCapturedNS_ and self.UNN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUNN>%s</%sUNN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UNN), input_name='UNN')), namespaceprefix_ , eol_))
        if self.SocialServiceNumber is not None:
            namespaceprefix_ = self.SocialServiceNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SocialServiceNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSocialServiceNumber>%s</%sSocialServiceNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SocialServiceNumber), input_name='SocialServiceNumber')), namespaceprefix_ , eol_))
        if self.SocialServiceCertificate is not None:
            namespaceprefix_ = self.SocialServiceCertificate_nsprefix_ + ':' if (UseCapturedNS_ and self.SocialServiceCertificate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSocialServiceCertificate>%s</%sSocialServiceCertificate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SocialServiceCertificate), input_name='SocialServiceCertificate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UNN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'UNN')
            value_ = self.gds_validate_string(value_, node, 'UNN')
            self.UNN = value_
            self.UNN_nsprefix_ = child_.prefix
            # validate type UNNType
            self.validate_UNNType(self.UNN)
        elif nodeName_ == 'SocialServiceNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SocialServiceNumber')
            value_ = self.gds_validate_string(value_, node, 'SocialServiceNumber')
            self.SocialServiceNumber = value_
            self.SocialServiceNumber_nsprefix_ = child_.prefix
            # validate type SocialServiceNumberType
            self.validate_SocialServiceNumberType(self.SocialServiceNumber)
        elif nodeName_ == 'SocialServiceCertificate':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SocialServiceCertificate')
            value_ = self.gds_validate_string(value_, node, 'SocialServiceCertificate')
            self.SocialServiceCertificate = value_
            self.SocialServiceCertificate_nsprefix_ = child_.prefix
            # validate type SocialServiceCertificateType
            self.validate_SocialServiceCertificateType(self.SocialServiceCertificate)
# end class RAOrganizationFeaturesType


class RBOrganizationFeaturesType(GeneratedsSuper):
    """RBOrganizationFeaturesType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    Б
    е
    л
    а
    р
    у
    с
    ь
    UNP -- У
    ч
    е
    т
    н
    ы
    й
    н
    о
    м
    е
    р
    п
    л
    а
    т
    е
    л
    ь
    щ
    и
    к
    а
    (
    У
    Н
    П
    )
    RBIdentificationNumber -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UNP=None, RBIdentificationNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.UNP = UNP
        self.validate_UNPTtype(self.UNP)
        self.UNP_nsprefix_ = "clt_ru"
        self.RBIdentificationNumber = RBIdentificationNumber
        self.validate_CodeVariable14Type(self.RBIdentificationNumber)
        self.RBIdentificationNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RBOrganizationFeaturesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RBOrganizationFeaturesType.subclass:
            return RBOrganizationFeaturesType.subclass(*args_, **kwargs_)
        else:
            return RBOrganizationFeaturesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UNP(self):
        return self.UNP
    def set_UNP(self, UNP):
        self.UNP = UNP
    def get_RBIdentificationNumber(self):
        return self.RBIdentificationNumber
    def set_RBIdentificationNumber(self, RBIdentificationNumber):
        self.RBIdentificationNumber = RBIdentificationNumber
    def validate_UNPTtype(self, value):
        result = True
        # Validate type UNPTtype, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_UNPTtype_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_UNPTtype_patterns_, ))
                result = False
        return result
    validate_UNPTtype_patterns_ = [['^(\\d{9})$']]
    def validate_CodeVariable14Type(self, value):
        result = True
        # Validate type CodeVariable14Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable14Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable14Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.UNP is not None or
            self.RBIdentificationNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RBOrganizationFeaturesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RBOrganizationFeaturesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RBOrganizationFeaturesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RBOrganizationFeaturesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RBOrganizationFeaturesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='RBOrganizationFeaturesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RBOrganizationFeaturesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UNP is not None:
            namespaceprefix_ = self.UNP_nsprefix_ + ':' if (UseCapturedNS_ and self.UNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUNP>%s</%sUNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UNP), input_name='UNP')), namespaceprefix_ , eol_))
        if self.RBIdentificationNumber is not None:
            namespaceprefix_ = self.RBIdentificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RBIdentificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBIdentificationNumber>%s</%sRBIdentificationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBIdentificationNumber), input_name='RBIdentificationNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UNP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'UNP')
            value_ = self.gds_validate_string(value_, node, 'UNP')
            self.UNP = value_
            self.UNP_nsprefix_ = child_.prefix
            # validate type UNPTtype
            self.validate_UNPTtype(self.UNP)
        elif nodeName_ == 'RBIdentificationNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBIdentificationNumber')
            value_ = self.gds_validate_string(value_, node, 'RBIdentificationNumber')
            self.RBIdentificationNumber = value_
            self.RBIdentificationNumber_nsprefix_ = child_.prefix
            # validate type CodeVariable14Type
            self.validate_CodeVariable14Type(self.RBIdentificationNumber)
# end class RBOrganizationFeaturesType


class RFOrganizationFeaturesType(GeneratedsSuper):
    """RFOrganizationFeaturesType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    о
    с
    с
    и
    й
    с
    к
    о
    й
    Ф
    е
    д
    е
    р
    а
    ц
    и
    и
    OGRN -- О
    Г
    Р
    Н
    /
    О
    Г
    Р
    Н
    И
    П
    .
    О
    с
    н
    о
    в
    н
    о
    й
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    ы
    й
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    INN -- И
    Н
    Н
    -
    И
    н
    д
    и
    в
    и
    д
    у
    а
    л
    ь
    н
    ы
    й
    н
    о
    м
    е
    р
    н
    а
    л
    о
    г
    о
    п
    л
    а
    т
    е
    л
    ь
    щ
    и
    к
    а
    KPP -- К
    П
    П
    -
    К
    о
    д
    п
    р
    и
    ч
    и
    н
    ы
    п
    о
    с
    т
    а
    н
    о
    в
    к
    и
    н
    а
    у
    ч
    е
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OGRN=None, INN=None, KPP=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.OGRN = OGRN
        self.validate_OGRNIDType(self.OGRN)
        self.OGRN_nsprefix_ = "clt_ru"
        self.INN = INN
        self.validate_INNIDType(self.INN)
        self.INN_nsprefix_ = "clt_ru"
        self.KPP = KPP
        self.validate_KPPCodeType(self.KPP)
        self.KPP_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RFOrganizationFeaturesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RFOrganizationFeaturesType.subclass:
            return RFOrganizationFeaturesType.subclass(*args_, **kwargs_)
        else:
            return RFOrganizationFeaturesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OGRN(self):
        return self.OGRN
    def set_OGRN(self, OGRN):
        self.OGRN = OGRN
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_KPP(self):
        return self.KPP
    def set_KPP(self, KPP):
        self.KPP = KPP
    def validate_OGRNIDType(self, value):
        result = True
        # Validate type OGRNIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_OGRNIDType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_OGRNIDType_patterns_, ))
                result = False
        return result
    validate_OGRNIDType_patterns_ = [['^((\\d{15})|(\\d{13}))$']]
    def validate_INNIDType(self, value):
        result = True
        # Validate type INNIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on INNIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on INNIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_KPPCodeType(self, value):
        result = True
        # Validate type KPPCodeType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_KPPCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_KPPCodeType_patterns_, ))
                result = False
        return result
    validate_KPPCodeType_patterns_ = [['^(\\d{9})$']]
    def has__content(self):
        if (
            self.OGRN is not None or
            self.INN is not None or
            self.KPP is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RFOrganizationFeaturesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RFOrganizationFeaturesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RFOrganizationFeaturesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RFOrganizationFeaturesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RFOrganizationFeaturesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='RFOrganizationFeaturesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RFOrganizationFeaturesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OGRN is not None:
            namespaceprefix_ = self.OGRN_nsprefix_ + ':' if (UseCapturedNS_ and self.OGRN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOGRN>%s</%sOGRN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OGRN), input_name='OGRN')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.KPP is not None:
            namespaceprefix_ = self.KPP_nsprefix_ + ':' if (UseCapturedNS_ and self.KPP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKPP>%s</%sKPP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KPP), input_name='KPP')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OGRN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OGRN')
            value_ = self.gds_validate_string(value_, node, 'OGRN')
            self.OGRN = value_
            self.OGRN_nsprefix_ = child_.prefix
            # validate type OGRNIDType
            self.validate_OGRNIDType(self.OGRN)
        elif nodeName_ == 'INN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INNIDType
            self.validate_INNIDType(self.INN)
        elif nodeName_ == 'KPP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'KPP')
            value_ = self.gds_validate_string(value_, node, 'KPP')
            self.KPP = value_
            self.KPP_nsprefix_ = child_.prefix
            # validate type KPPCodeType
            self.validate_KPPCodeType(self.KPP)
# end class RFOrganizationFeaturesType


class RKOrganizationFeaturesType(GeneratedsSuper):
    """RKOrganizationFeaturesType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    К
    а
    з
    а
    х
    с
    т
    а
    н
    BIN -- Б
    и
    з
    н
    е
    с
    -
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (
    Б
    И
    Н
    )
    IIN -- И
    н
    д
    и
    в
    и
    д
    у
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (
    И
    И
    Н
    )
    ITN -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (
    И
    Т
    Н
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BIN=None, IIN=None, ITN=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.BIN = BIN
        self.validate_BINType(self.BIN)
        self.BIN_nsprefix_ = "clt_ru"
        self.IIN = IIN
        self.validate_IINType(self.IIN)
        self.IIN_nsprefix_ = "clt_ru"
        self.ITN = ITN
        self.ITN_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RKOrganizationFeaturesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RKOrganizationFeaturesType.subclass:
            return RKOrganizationFeaturesType.subclass(*args_, **kwargs_)
        else:
            return RKOrganizationFeaturesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BIN(self):
        return self.BIN
    def set_BIN(self, BIN):
        self.BIN = BIN
    def get_IIN(self):
        return self.IIN
    def set_IIN(self, IIN):
        self.IIN = IIN
    def get_ITN(self):
        return self.ITN
    def set_ITN(self, ITN):
        self.ITN = ITN
    def validate_BINType(self, value):
        result = True
        # Validate type BINType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_BINType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_BINType_patterns_, ))
                result = False
        return result
    validate_BINType_patterns_ = [['^(\\d{12})$']]
    def validate_IINType(self, value):
        result = True
        # Validate type IINType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_IINType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_IINType_patterns_, ))
                result = False
        return result
    validate_IINType_patterns_ = [['^(\\d{12})$']]
    def has__content(self):
        if (
            self.BIN is not None or
            self.IIN is not None or
            self.ITN is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RKOrganizationFeaturesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RKOrganizationFeaturesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RKOrganizationFeaturesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RKOrganizationFeaturesType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RKOrganizationFeaturesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='RKOrganizationFeaturesType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RKOrganizationFeaturesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BIN is not None:
            namespaceprefix_ = self.BIN_nsprefix_ + ':' if (UseCapturedNS_ and self.BIN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBIN>%s</%sBIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BIN), input_name='BIN')), namespaceprefix_ , eol_))
        if self.IIN is not None:
            namespaceprefix_ = self.IIN_nsprefix_ + ':' if (UseCapturedNS_ and self.IIN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIIN>%s</%sIIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IIN), input_name='IIN')), namespaceprefix_ , eol_))
        if self.ITN is not None:
            namespaceprefix_ = self.ITN_nsprefix_ + ':' if (UseCapturedNS_ and self.ITN_nsprefix_) else ''
            self.ITN.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ITN', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BIN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BIN')
            value_ = self.gds_validate_string(value_, node, 'BIN')
            self.BIN = value_
            self.BIN_nsprefix_ = child_.prefix
            # validate type BINType
            self.validate_BINType(self.BIN)
        elif nodeName_ == 'IIN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IIN')
            value_ = self.gds_validate_string(value_, node, 'IIN')
            self.IIN = value_
            self.IIN_nsprefix_ = child_.prefix
            # validate type IINType
            self.validate_IINType(self.IIN)
        elif nodeName_ == 'ITN':
            obj_ = ITNKZType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ITN = obj_
            obj_.original_tagname_ = 'ITN'
# end class RKOrganizationFeaturesType


class SupplementaryQuantityType(GeneratedsSuper):
    """SupplementaryQuantityType -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    в
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    GoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierName -- У
    с
    л
    о
    в
    н
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    е
    д
    и
    н
    и
    ц
    а
    м
    и
    и
    з
    м
    е
    р
    е
    н
    и
    я
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    и
    в
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsQuantity=None, MeasureUnitQualifierName=None, MeasureUnitQualifierCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.GoodsQuantity = GoodsQuantity
        self.validate_QuantityBasisType(self.GoodsQuantity)
        self.GoodsQuantity_nsprefix_ = "clt_ru"
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
        self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        self.MeasureUnitQualifierName_nsprefix_ = "clt_ru"
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
        self.MeasureUnitQualifierCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SupplementaryQuantityType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplementaryQuantityType.subclass:
            return SupplementaryQuantityType.subclass(*args_, **kwargs_)
        else:
            return SupplementaryQuantityType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsQuantity(self):
        return self.GoodsQuantity
    def set_GoodsQuantity(self, GoodsQuantity):
        self.GoodsQuantity = GoodsQuantity
    def get_MeasureUnitQualifierName(self):
        return self.MeasureUnitQualifierName
    def set_MeasureUnitQualifierName(self, MeasureUnitQualifierName):
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
    def get_MeasureUnitQualifierCode(self):
        return self.MeasureUnitQualifierCode
    def set_MeasureUnitQualifierCode(self, MeasureUnitQualifierCode):
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierNameType(self, value):
        result = True
        # Validate type MeasureUnitQualifierNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 13:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on MeasureUnitQualifierNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on MeasureUnitQualifierNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsQuantity is not None or
            self.MeasureUnitQualifierName is not None or
            self.MeasureUnitQualifierCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SupplementaryQuantityType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SupplementaryQuantityType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SupplementaryQuantityType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SupplementaryQuantityType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SupplementaryQuantityType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='SupplementaryQuantityType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SupplementaryQuantityType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsQuantity is not None:
            namespaceprefix_ = self.GoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsQuantity>%s</%sGoodsQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.GoodsQuantity, input_name='GoodsQuantity'), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierName is not None:
            namespaceprefix_ = self.MeasureUnitQualifierName_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierName>%s</%sMeasureUnitQualifierName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierName), input_name='MeasureUnitQualifierName')), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierCode is not None:
            namespaceprefix_ = self.MeasureUnitQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierCode>%s</%sMeasureUnitQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierCode), input_name='MeasureUnitQualifierCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'GoodsQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'GoodsQuantity')
            self.GoodsQuantity = fval_
            self.GoodsQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.GoodsQuantity)
        elif nodeName_ == 'MeasureUnitQualifierName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierName')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierName')
            self.MeasureUnitQualifierName = value_
            self.MeasureUnitQualifierName_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierNameType
            self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        elif nodeName_ == 'MeasureUnitQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierCode')
            self.MeasureUnitQualifierCode = value_
            self.MeasureUnitQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
# end class SupplementaryQuantityType


class TransportGoodsBaseType(GeneratedsSuper):
    """TransportGoodsBaseType -- О
    п
    и
    с
    а
    н
    и
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Б
    а
    з
    о
    в
    ы
    й
    GoodsMarking -- Н
    о
    м
    е
    р
    и
    м
    а
    р
    к
    а
    г
    р
    у
    з
    а
    GoodsDescription -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    г
    р
    у
    з
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsMarking=None, GoodsDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.GoodsMarking = GoodsMarking
        self.validate_GoodMarkingType(self.GoodsMarking)
        self.GoodsMarking_nsprefix_ = "clt_ru"
        if GoodsDescription is None:
            self.GoodsDescription = []
        else:
            self.GoodsDescription = GoodsDescription
        self.GoodsDescription_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportGoodsBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportGoodsBaseType.subclass:
            return TransportGoodsBaseType.subclass(*args_, **kwargs_)
        else:
            return TransportGoodsBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsMarking(self):
        return self.GoodsMarking
    def set_GoodsMarking(self, GoodsMarking):
        self.GoodsMarking = GoodsMarking
    def get_GoodsDescription(self):
        return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription):
        self.GoodsDescription = GoodsDescription
    def add_GoodsDescription(self, value):
        self.GoodsDescription.append(value)
    def insert_GoodsDescription_at(self, index, value):
        self.GoodsDescription.insert(index, value)
    def replace_GoodsDescription_at(self, index, value):
        self.GoodsDescription[index] = value
    def validate_GoodMarkingType(self, value):
        result = True
        # Validate type GoodMarkingType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 30:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on GoodMarkingType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on GoodMarkingType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsMarking is not None or
            self.GoodsDescription
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportGoodsBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportGoodsBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportGoodsBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportGoodsBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportGoodsBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='TransportGoodsBaseType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportGoodsBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsMarking is not None:
            namespaceprefix_ = self.GoodsMarking_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsMarking_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsMarking>%s</%sGoodsMarking>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsMarking), input_name='GoodsMarking')), namespaceprefix_ , eol_))
        for GoodsDescription_ in self.GoodsDescription:
            namespaceprefix_ = self.GoodsDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDescription>%s</%sGoodsDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsDescription_), input_name='GoodsDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsMarking':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsMarking')
            value_ = self.gds_validate_string(value_, node, 'GoodsMarking')
            self.GoodsMarking = value_
            self.GoodsMarking_nsprefix_ = child_.prefix
            # validate type GoodMarkingType
            self.validate_GoodMarkingType(self.GoodsMarking)
        elif nodeName_ == 'GoodsDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsDescription')
            value_ = self.gds_validate_string(value_, node, 'GoodsDescription')
            self.GoodsDescription.append(value_)
            self.GoodsDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsDescription[-1])
# end class TransportGoodsBaseType


class TransportMeansBaseType(GeneratedsSuper):
    """TransportMeansBaseType -- Б
    а
    з
    о
    в
    ы
    й
    т
    и
    п
    д
    л
    я
    о
    п
    и
    с
    а
    н
    и
    я
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    а
    х
    VIN -- Н
    о
    м
    е
    р
    ш
    а
    с
    с
    и
    (VIN)
    TransportKindCode -- К
    о
    д
    т
    и
    п
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    TransportTypeName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    т
    и
    п
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    TransportMarkCode -- К
    о
    д
    м
    а
    р
    к
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    TransportIdentifier -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    .
    Н
    о
    м
    е
    р
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    ,
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    у
    д
    н
    а
    ,
    н
    о
    м
    е
    р
    а
    в
    и
    а
    р
    е
    й
    с
    а
    ,
    н
    о
    м
    е
    р
    п
    о
    е
    з
    д
    а
    ,
    н
    о
    м
    е
    р
    ж
    е
    л
    е
    з
    н
    о
    д
    о
    р
    о
    ж
    н
    о
    г
    о
    в
    а
    г
    о
    н
    а
    (
    п
    л
    а
    т
    ф
    о
    р
    м
    ,
    ц
    и
    с
    т
    е
    р
    н
    и
    т
    .
    п
    .)
    TransportMeansNationalityCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    п
    р
    и
    н
    а
    д
    л
    е
    ж
    н
    о
    с
    т
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    с
    т
    р
    а
    н
    м
    и
    р
    а
    ActiveTransportIdentifier -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    к
    т
    и
    в
    н
    о
    г
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    д
    л
    я
    п
    р
    и
    ц
    е
    п
    о
    в
    ,
    п
    о
    л
    у
    п
    р
    и
    ц
    е
    п
    о
    в
    и
    д
    р
    . (
    Р
    е
    з
    е
    р
    в
    )
    TransportRegNumber -- Н
    о
    м
    е
    р
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    о
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    д
    л
    я
    Р
    Б
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, VIN=None, TransportKindCode=None, TransportTypeName=None, TransportMarkCode=None, TransportIdentifier=None, TransportMeansNationalityCode=None, ActiveTransportIdentifier=None, TransportRegNumber=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.VIN = VIN
        self.validate_VINIDType(self.VIN)
        self.VIN_nsprefix_ = "clt_ru"
        self.TransportKindCode = TransportKindCode
        self.validate_Code3Type(self.TransportKindCode)
        self.TransportKindCode_nsprefix_ = "clt_ru"
        self.TransportTypeName = TransportTypeName
        self.validate_Text150Type(self.TransportTypeName)
        self.TransportTypeName_nsprefix_ = "clt_ru"
        self.TransportMarkCode = TransportMarkCode
        self.validate_Code3Type(self.TransportMarkCode)
        self.TransportMarkCode_nsprefix_ = "clt_ru"
        self.TransportIdentifier = TransportIdentifier
        self.validate_TransportMeansIDType(self.TransportIdentifier)
        self.TransportIdentifier_nsprefix_ = "clt_ru"
        self.TransportMeansNationalityCode = TransportMeansNationalityCode
        self.validate_CountryA2CodeType(self.TransportMeansNationalityCode)
        self.TransportMeansNationalityCode_nsprefix_ = "clt_ru"
        self.ActiveTransportIdentifier = ActiveTransportIdentifier
        self.validate_TransportMeansIDType(self.ActiveTransportIdentifier)
        self.ActiveTransportIdentifier_nsprefix_ = "clt_ru"
        self.TransportRegNumber = TransportRegNumber
        self.validate_CodeVariable20Type(self.TransportRegNumber)
        self.TransportRegNumber_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportMeansBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportMeansBaseType.subclass:
            return TransportMeansBaseType.subclass(*args_, **kwargs_)
        else:
            return TransportMeansBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_VIN(self):
        return self.VIN
    def set_VIN(self, VIN):
        self.VIN = VIN
    def get_TransportKindCode(self):
        return self.TransportKindCode
    def set_TransportKindCode(self, TransportKindCode):
        self.TransportKindCode = TransportKindCode
    def get_TransportTypeName(self):
        return self.TransportTypeName
    def set_TransportTypeName(self, TransportTypeName):
        self.TransportTypeName = TransportTypeName
    def get_TransportMarkCode(self):
        return self.TransportMarkCode
    def set_TransportMarkCode(self, TransportMarkCode):
        self.TransportMarkCode = TransportMarkCode
    def get_TransportIdentifier(self):
        return self.TransportIdentifier
    def set_TransportIdentifier(self, TransportIdentifier):
        self.TransportIdentifier = TransportIdentifier
    def get_TransportMeansNationalityCode(self):
        return self.TransportMeansNationalityCode
    def set_TransportMeansNationalityCode(self, TransportMeansNationalityCode):
        self.TransportMeansNationalityCode = TransportMeansNationalityCode
    def get_ActiveTransportIdentifier(self):
        return self.ActiveTransportIdentifier
    def set_ActiveTransportIdentifier(self, ActiveTransportIdentifier):
        self.ActiveTransportIdentifier = ActiveTransportIdentifier
    def get_TransportRegNumber(self):
        return self.TransportRegNumber
    def set_TransportRegNumber(self, TransportRegNumber):
        self.TransportRegNumber = TransportRegNumber
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_VINIDType(self, value):
        result = True
        # Validate type VINIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on VINIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on VINIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Text150Type(self, value):
        result = True
        # Validate type Text150Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text150Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text150Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_TransportMeansIDType(self, value):
        result = True
        # Validate type TransportMeansIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TransportMeansIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TransportMeansIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.VIN is not None or
            self.TransportKindCode is not None or
            self.TransportTypeName is not None or
            self.TransportMarkCode is not None or
            self.TransportIdentifier is not None or
            self.TransportMeansNationalityCode is not None or
            self.ActiveTransportIdentifier is not None or
            self.TransportRegNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportMeansBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportMeansBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportMeansBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportMeansBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportMeansBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='TransportMeansBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportMeansBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.VIN is not None:
            namespaceprefix_ = self.VIN_nsprefix_ + ':' if (UseCapturedNS_ and self.VIN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVIN>%s</%sVIN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VIN), input_name='VIN')), namespaceprefix_ , eol_))
        if self.TransportKindCode is not None:
            namespaceprefix_ = self.TransportKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportKindCode>%s</%sTransportKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportKindCode), input_name='TransportKindCode')), namespaceprefix_ , eol_))
        if self.TransportTypeName is not None:
            namespaceprefix_ = self.TransportTypeName_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportTypeName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportTypeName>%s</%sTransportTypeName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportTypeName), input_name='TransportTypeName')), namespaceprefix_ , eol_))
        if self.TransportMarkCode is not None:
            namespaceprefix_ = self.TransportMarkCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportMarkCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportMarkCode>%s</%sTransportMarkCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportMarkCode), input_name='TransportMarkCode')), namespaceprefix_ , eol_))
        if self.TransportIdentifier is not None:
            namespaceprefix_ = self.TransportIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportIdentifier>%s</%sTransportIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportIdentifier), input_name='TransportIdentifier')), namespaceprefix_ , eol_))
        if self.TransportMeansNationalityCode is not None:
            namespaceprefix_ = self.TransportMeansNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportMeansNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportMeansNationalityCode>%s</%sTransportMeansNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportMeansNationalityCode), input_name='TransportMeansNationalityCode')), namespaceprefix_ , eol_))
        if self.ActiveTransportIdentifier is not None:
            namespaceprefix_ = self.ActiveTransportIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.ActiveTransportIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveTransportIdentifier>%s</%sActiveTransportIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActiveTransportIdentifier), input_name='ActiveTransportIdentifier')), namespaceprefix_ , eol_))
        if self.TransportRegNumber is not None:
            namespaceprefix_ = self.TransportRegNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportRegNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportRegNumber>%s</%sTransportRegNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportRegNumber), input_name='TransportRegNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'VIN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'VIN')
            value_ = self.gds_validate_string(value_, node, 'VIN')
            self.VIN = value_
            self.VIN_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.VIN)
        elif nodeName_ == 'TransportKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportKindCode')
            value_ = self.gds_validate_string(value_, node, 'TransportKindCode')
            self.TransportKindCode = value_
            self.TransportKindCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.TransportKindCode)
        elif nodeName_ == 'TransportTypeName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransportTypeName')
            value_ = self.gds_validate_string(value_, node, 'TransportTypeName')
            self.TransportTypeName = value_
            self.TransportTypeName_nsprefix_ = child_.prefix
            # validate type Text150Type
            self.validate_Text150Type(self.TransportTypeName)
        elif nodeName_ == 'TransportMarkCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportMarkCode')
            value_ = self.gds_validate_string(value_, node, 'TransportMarkCode')
            self.TransportMarkCode = value_
            self.TransportMarkCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.TransportMarkCode)
        elif nodeName_ == 'TransportIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportIdentifier')
            value_ = self.gds_validate_string(value_, node, 'TransportIdentifier')
            self.TransportIdentifier = value_
            self.TransportIdentifier_nsprefix_ = child_.prefix
            # validate type TransportMeansIDType
            self.validate_TransportMeansIDType(self.TransportIdentifier)
        elif nodeName_ == 'TransportMeansNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportMeansNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'TransportMeansNationalityCode')
            self.TransportMeansNationalityCode = value_
            self.TransportMeansNationalityCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.TransportMeansNationalityCode)
        elif nodeName_ == 'ActiveTransportIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ActiveTransportIdentifier')
            value_ = self.gds_validate_string(value_, node, 'ActiveTransportIdentifier')
            self.ActiveTransportIdentifier = value_
            self.ActiveTransportIdentifier_nsprefix_ = child_.prefix
            # validate type TransportMeansIDType
            self.validate_TransportMeansIDType(self.ActiveTransportIdentifier)
        elif nodeName_ == 'TransportRegNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportRegNumber')
            value_ = self.gds_validate_string(value_, node, 'TransportRegNumber')
            self.TransportRegNumber = value_
            self.TransportRegNumber_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.TransportRegNumber)
# end class TransportMeansBaseType


class TransportMeansPassportType(GeneratedsSuper):
    """TransportMeansPassportType -- С
    е
    р
    и
    я
    и
    н
    о
    м
    е
    р
    П
    а
    с
    п
    о
    р
    т
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    Series -- С
    е
    р
    и
    я
    П
    а
    с
    п
    о
    р
    т
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    PTSNumber -- Н
    о
    м
    е
    р
    П
    а
    с
    п
    о
    р
    т
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    RegionCode -- К
    о
    д
    р
    е
    г
    и
    о
    н
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Series=None, PTSNumber=None, RegionCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        self.Series = Series
        self.validate_SeriesCodeType(self.Series)
        self.Series_nsprefix_ = "clt_ru"
        self.PTSNumber = PTSNumber
        self.validate_TransportPassportIDType(self.PTSNumber)
        self.PTSNumber_nsprefix_ = "clt_ru"
        self.RegionCode = RegionCode
        self.validate_RegionCodeType(self.RegionCode)
        self.RegionCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportMeansPassportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportMeansPassportType.subclass:
            return TransportMeansPassportType.subclass(*args_, **kwargs_)
        else:
            return TransportMeansPassportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Series(self):
        return self.Series
    def set_Series(self, Series):
        self.Series = Series
    def get_PTSNumber(self):
        return self.PTSNumber
    def set_PTSNumber(self, PTSNumber):
        self.PTSNumber = PTSNumber
    def get_RegionCode(self):
        return self.RegionCode
    def set_RegionCode(self, RegionCode):
        self.RegionCode = RegionCode
    def validate_SeriesCodeType(self, value):
        result = True
        # Validate type SeriesCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_SeriesCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_SeriesCodeType_patterns_, ))
                result = False
        return result
    validate_SeriesCodeType_patterns_ = [['^(([А-Я]{2}))$']]
    def validate_TransportPassportIDType(self, value):
        result = True
        # Validate type TransportPassportIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TransportPassportIDType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TransportPassportIDType_patterns_, ))
                result = False
        return result
    validate_TransportPassportIDType_patterns_ = [['^([0-9]{6}|[0-9]{7})$']]
    def validate_RegionCodeType(self, value):
        result = True
        # Validate type RegionCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RegionCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RegionCodeType_patterns_, ))
                result = False
        return result
    validate_RegionCodeType_patterns_ = [['^((\\d{3})|(\\d{2}))$']]
    def has__content(self):
        if (
            self.Series is not None or
            self.PTSNumber is not None or
            self.RegionCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportMeansPassportType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportMeansPassportType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportMeansPassportType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportMeansPassportType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportMeansPassportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='TransportMeansPassportType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportMeansPassportType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Series is not None:
            namespaceprefix_ = self.Series_nsprefix_ + ':' if (UseCapturedNS_ and self.Series_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeries>%s</%sSeries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Series), input_name='Series')), namespaceprefix_ , eol_))
        if self.PTSNumber is not None:
            namespaceprefix_ = self.PTSNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PTSNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPTSNumber>%s</%sPTSNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PTSNumber), input_name='PTSNumber')), namespaceprefix_ , eol_))
        if self.RegionCode is not None:
            namespaceprefix_ = self.RegionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegionCode>%s</%sRegionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegionCode), input_name='RegionCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Series':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Series')
            value_ = self.gds_validate_string(value_, node, 'Series')
            self.Series = value_
            self.Series_nsprefix_ = child_.prefix
            # validate type SeriesCodeType
            self.validate_SeriesCodeType(self.Series)
        elif nodeName_ == 'PTSNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PTSNumber')
            value_ = self.gds_validate_string(value_, node, 'PTSNumber')
            self.PTSNumber = value_
            self.PTSNumber_nsprefix_ = child_.prefix
            # validate type TransportPassportIDType
            self.validate_TransportPassportIDType(self.PTSNumber)
        elif nodeName_ == 'RegionCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegionCode')
            value_ = self.gds_validate_string(value_, node, 'RegionCode')
            self.RegionCode = value_
            self.RegionCode_nsprefix_ = child_.prefix
            # validate type RegionCodeType
            self.validate_RegionCodeType(self.RegionCode)
# end class TransportMeansPassportType


class AEORegistryIdDetailsType(GeneratedsSuper):
    """AEORegistryIdDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    е
    м
    в
    к
    л
    ю
    ч
    е
    н
    и
    е
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    е
    р
    е
    в
    о
    з
    ч
    и
    к
    о
    в
    и
    л
    и
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    RegistryOwnerCode -- К
    о
    д
    т
    и
    п
    а
    р
    е
    е
    с
    т
    р
    а
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    CountryA2Code -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    DocId -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    л
    и
    ц
    а
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    е
    м
    у
    п
    р
    и
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    ,
    и
    л
    и
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    AEORegistryKindCode -- К
    о
    д
    т
    и
    п
    а
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    п
    е
    р
    а
    т
    о
    р
    а
    ReregistrationCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    п
    р
    и
    з
    н
    а
    к
    а
    п
    е
    р
    е
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocKindCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegistryOwnerCode=None, CountryA2Code=None, DocId=None, AEORegistryKindCode=None, ReregistrationCode=None, DocKindCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.RegistryOwnerCode = RegistryOwnerCode
        self.validate_LetterIndicatorType(self.RegistryOwnerCode)
        self.RegistryOwnerCode_nsprefix_ = "clt_ru"
        self.CountryA2Code = CountryA2Code
        self.validate_CountryA2CodeType(self.CountryA2Code)
        self.CountryA2Code_nsprefix_ = "clt_ru"
        self.DocId = DocId
        self.validate_DocumentNumberType(self.DocId)
        self.DocId_nsprefix_ = "clt_ru"
        self.AEORegistryKindCode = AEORegistryKindCode
        self.validate_LetterIndicatorType(self.AEORegistryKindCode)
        self.AEORegistryKindCode_nsprefix_ = "clt_ru"
        self.ReregistrationCode = ReregistrationCode
        self.validate_CodeVariable3Type(self.ReregistrationCode)
        self.ReregistrationCode_nsprefix_ = "clt_ru"
        self.DocKindCode = DocKindCode
        self.validate_CustomsDocumentCodeType(self.DocKindCode)
        self.DocKindCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AEORegistryIdDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AEORegistryIdDetailsType.subclass:
            return AEORegistryIdDetailsType.subclass(*args_, **kwargs_)
        else:
            return AEORegistryIdDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegistryOwnerCode(self):
        return self.RegistryOwnerCode
    def set_RegistryOwnerCode(self, RegistryOwnerCode):
        self.RegistryOwnerCode = RegistryOwnerCode
    def get_CountryA2Code(self):
        return self.CountryA2Code
    def set_CountryA2Code(self, CountryA2Code):
        self.CountryA2Code = CountryA2Code
    def get_DocId(self):
        return self.DocId
    def set_DocId(self, DocId):
        self.DocId = DocId
    def get_AEORegistryKindCode(self):
        return self.AEORegistryKindCode
    def set_AEORegistryKindCode(self, AEORegistryKindCode):
        self.AEORegistryKindCode = AEORegistryKindCode
    def get_ReregistrationCode(self):
        return self.ReregistrationCode
    def set_ReregistrationCode(self, ReregistrationCode):
        self.ReregistrationCode = ReregistrationCode
    def get_DocKindCode(self):
        return self.DocKindCode
    def set_DocKindCode(self, DocKindCode):
        self.DocKindCode = DocKindCode
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable3Type(self, value):
        result = True
        # Validate type CodeVariable3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable3Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.RegistryOwnerCode is not None or
            self.CountryA2Code is not None or
            self.DocId is not None or
            self.AEORegistryKindCode is not None or
            self.ReregistrationCode is not None or
            self.DocKindCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AEORegistryIdDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AEORegistryIdDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AEORegistryIdDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AEORegistryIdDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AEORegistryIdDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='AEORegistryIdDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AEORegistryIdDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegistryOwnerCode is not None:
            namespaceprefix_ = self.RegistryOwnerCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistryOwnerCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistryOwnerCode>%s</%sRegistryOwnerCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistryOwnerCode), input_name='RegistryOwnerCode')), namespaceprefix_ , eol_))
        if self.CountryA2Code is not None:
            namespaceprefix_ = self.CountryA2Code_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryA2Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryA2Code>%s</%sCountryA2Code>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryA2Code), input_name='CountryA2Code')), namespaceprefix_ , eol_))
        if self.DocId is not None:
            namespaceprefix_ = self.DocId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocId>%s</%sDocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocId), input_name='DocId')), namespaceprefix_ , eol_))
        if self.AEORegistryKindCode is not None:
            namespaceprefix_ = self.AEORegistryKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AEORegistryKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAEORegistryKindCode>%s</%sAEORegistryKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AEORegistryKindCode), input_name='AEORegistryKindCode')), namespaceprefix_ , eol_))
        if self.ReregistrationCode is not None:
            namespaceprefix_ = self.ReregistrationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReregistrationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReregistrationCode>%s</%sReregistrationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReregistrationCode), input_name='ReregistrationCode')), namespaceprefix_ , eol_))
        if self.DocKindCode is not None:
            namespaceprefix_ = self.DocKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocKindCode>%s</%sDocKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocKindCode), input_name='DocKindCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegistryOwnerCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegistryOwnerCode')
            value_ = self.gds_validate_string(value_, node, 'RegistryOwnerCode')
            self.RegistryOwnerCode = value_
            self.RegistryOwnerCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.RegistryOwnerCode)
        elif nodeName_ == 'CountryA2Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryA2Code')
            value_ = self.gds_validate_string(value_, node, 'CountryA2Code')
            self.CountryA2Code = value_
            self.CountryA2Code_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryA2Code)
        elif nodeName_ == 'DocId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocId')
            value_ = self.gds_validate_string(value_, node, 'DocId')
            self.DocId = value_
            self.DocId_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.DocId)
        elif nodeName_ == 'AEORegistryKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AEORegistryKindCode')
            value_ = self.gds_validate_string(value_, node, 'AEORegistryKindCode')
            self.AEORegistryKindCode = value_
            self.AEORegistryKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.AEORegistryKindCode)
        elif nodeName_ == 'ReregistrationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ReregistrationCode')
            value_ = self.gds_validate_string(value_, node, 'ReregistrationCode')
            self.ReregistrationCode = value_
            self.ReregistrationCode_nsprefix_ = child_.prefix
            # validate type CodeVariable3Type
            self.validate_CodeVariable3Type(self.ReregistrationCode)
        elif nodeName_ == 'DocKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocKindCode')
            value_ = self.gds_validate_string(value_, node, 'DocKindCode')
            self.DocKindCode = value_
            self.DocKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocKindCode)
# end class AEORegistryIdDetailsType


class AutomobileBaseType2(GeneratedsSuper):
    """AutomobileBaseType2 -- Д
    а
    н
    н
    ы
    е
    о
    б
    а
    в
    т
    о
    м
    о
    б
    и
    л
    я
    х
    .
    Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    д
    л
    я
    31
    й
    г
    р
    .
    и
    К
    а
    р
    т
    о
    ч
    к
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    RecNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    р
    а
    м
    к
    а
    х
    т
    о
    в
    а
    р
    а
    Model -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    о
    д
    е
    л
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    Mark -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    а
    р
    к
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    м
    а
    р
    о
    к
    д
    о
    р
    о
    ж
    н
    ы
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    MarkCode -- К
    о
    д
    м
    а
    р
    к
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    м
    а
    р
    о
    к
    д
    о
    р
    о
    ж
    н
    ы
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    OfftakeYear -- Г
    о
    д
    и
    з
    г
    о
    т
    о
    в
    л
    е
    н
    и
    я
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    EngineVolumeQuanity -- Р
    а
    б
    о
    ч
    и
    й
    о
    б
    ъ
    е
    м
    д
    в
    и
    г
    а
    т
    е
    л
    я
    VINID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (VIN)
    BodyID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    у
    з
    о
    в
    а
    (
    п
    р
    и
    ц
    е
    п
    а
    ),
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    и
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    й
    н
    а
    н
    е
    г
    о
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    е
    й
    -
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    е
    м
    EngineID -- П
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    е
    й
    -
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    е
    м
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    в
    и
    г
    а
    т
    е
    л
    я
    ,
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    й
    н
    а
    б
    л
    о
    к
    е
    д
    в
    и
    г
    а
    т
    е
    л
    я
    .
    И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    м
    о
    ж
    е
    т
    с
    о
    с
    т
    о
    я
    т
    ь
    и
    з
    г
    р
    у
    п
    п
    р
    а
    з
    д
    е
    л
    ь
    н
    ы
    х
    ц
    и
    ф
    р
    ,
    и
    з
    к
    о
    т
    о
    р
    ы
    х
    п
    о
    с
    л
    е
    д
    н
    я
    я
    г
    р
    у
    п
    п
    а
    ,
    с
    о
    с
    т
    о
    я
    щ
    а
    я
    и
    з
    д
    в
    у
    х
    ц
    и
    ф
    р
    ,
    у
    к
    а
    з
    ы
    в
    а
    е
    т
    г
    о
    д
    в
    ы
    п
    у
    с
    к
    а
    д
    в
    и
    г
    а
    т
    е
    л
    я
    ChassisID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    ш
    а
    с
    с
    и
    (
    р
    а
    м
    ы
    ),
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    е
    и
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    е
    н
    а
    н
    и
    х
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    е
    й
    -
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    е
    м
    CabID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    а
    б
    и
    н
    ы
    EmergencyDeviceID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    у
    с
    т
    р
    о
    й
    с
    т
    в
    а
    и
    л
    и
    с
    и
    с
    т
    е
    м
    ы
    в
    ы
    з
    о
    в
    а
    э
    к
    с
    т
    р
    е
    н
    н
    ы
    х
    о
    п
    е
    р
    а
    т
    и
    в
    н
    ы
    х
    с
    л
    у
    ж
    б
    ,
    к
    о
    т
    о
    р
    ы
    м
    и
    о
    б
    о
    р
    у
    д
    о
    в
    а
    н
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    .
    Д
    л
    я
    Р
    Ф
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RecNumber=None, Model=None, Mark=None, MarkCode=None, OfftakeYear=None, EngineVolumeQuanity=None, VINID=None, BodyID=None, EngineID=None, ChassisID=None, CabID=None, EmergencyDeviceID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.RecNumber = RecNumber
        self.validate_Count3Type(self.RecNumber)
        self.RecNumber_nsprefix_ = "clt_ru"
        self.Model = Model
        self.validate_TransportNameType(self.Model)
        self.Model_nsprefix_ = "clt_ru"
        self.Mark = Mark
        self.validate_MarkCarNameType(self.Mark)
        self.Mark_nsprefix_ = "clt_ru"
        self.MarkCode = MarkCode
        self.validate_MarkCarCodeType(self.MarkCode)
        self.MarkCode_nsprefix_ = "clt_ru"
        self.OfftakeYear = OfftakeYear
        self.validate_DateYearCustType(self.OfftakeYear)
        self.OfftakeYear_nsprefix_ = "clt_ru"
        self.EngineVolumeQuanity = EngineVolumeQuanity
        self.EngineVolumeQuanity_nsprefix_ = "catESAD_cu"
        self.VINID = VINID
        self.validate_VINIDType(self.VINID)
        self.VINID_nsprefix_ = "clt_ru"
        self.BodyID = BodyID
        self.validate_VINIDType(self.BodyID)
        self.BodyID_nsprefix_ = "clt_ru"
        self.EngineID = EngineID
        self.validate_EngineIDType(self.EngineID)
        self.EngineID_nsprefix_ = "clt_ru"
        self.ChassisID = ChassisID
        self.validate_VINIDType(self.ChassisID)
        self.ChassisID_nsprefix_ = "clt_ru"
        self.CabID = CabID
        self.validate_VINIDType(self.CabID)
        self.CabID_nsprefix_ = "clt_ru"
        self.EmergencyDeviceID = EmergencyDeviceID
        self.validate_Text50Type(self.EmergencyDeviceID)
        self.EmergencyDeviceID_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AutomobileBaseType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AutomobileBaseType2.subclass:
            return AutomobileBaseType2.subclass(*args_, **kwargs_)
        else:
            return AutomobileBaseType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RecNumber(self):
        return self.RecNumber
    def set_RecNumber(self, RecNumber):
        self.RecNumber = RecNumber
    def get_Model(self):
        return self.Model
    def set_Model(self, Model):
        self.Model = Model
    def get_Mark(self):
        return self.Mark
    def set_Mark(self, Mark):
        self.Mark = Mark
    def get_MarkCode(self):
        return self.MarkCode
    def set_MarkCode(self, MarkCode):
        self.MarkCode = MarkCode
    def get_OfftakeYear(self):
        return self.OfftakeYear
    def set_OfftakeYear(self, OfftakeYear):
        self.OfftakeYear = OfftakeYear
    def get_EngineVolumeQuanity(self):
        return self.EngineVolumeQuanity
    def set_EngineVolumeQuanity(self, EngineVolumeQuanity):
        self.EngineVolumeQuanity = EngineVolumeQuanity
    def get_VINID(self):
        return self.VINID
    def set_VINID(self, VINID):
        self.VINID = VINID
    def get_BodyID(self):
        return self.BodyID
    def set_BodyID(self, BodyID):
        self.BodyID = BodyID
    def get_EngineID(self):
        return self.EngineID
    def set_EngineID(self, EngineID):
        self.EngineID = EngineID
    def get_ChassisID(self):
        return self.ChassisID
    def set_ChassisID(self, ChassisID):
        self.ChassisID = ChassisID
    def get_CabID(self):
        return self.CabID
    def set_CabID(self, CabID):
        self.CabID = CabID
    def get_EmergencyDeviceID(self):
        return self.EmergencyDeviceID
    def set_EmergencyDeviceID(self, EmergencyDeviceID):
        self.EmergencyDeviceID = EmergencyDeviceID
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_TransportNameType(self, value):
        result = True
        # Validate type TransportNameType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TransportNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TransportNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MarkCarNameType(self, value):
        result = True
        # Validate type MarkCarNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on MarkCarNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on MarkCarNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MarkCarCodeType(self, value):
        result = True
        # Validate type MarkCarCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MarkCarCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateYearCustType(self, value):
        result = True
        # Validate type DateYearCustType, a restriction on CategoryCust:YearCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_VINIDType(self, value):
        result = True
        # Validate type VINIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on VINIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on VINIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_EngineIDType(self, value):
        result = True
        # Validate type EngineIDType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on EngineIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on EngineIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.RecNumber is not None or
            self.Model is not None or
            self.Mark is not None or
            self.MarkCode is not None or
            self.OfftakeYear is not None or
            self.EngineVolumeQuanity is not None or
            self.VINID is not None or
            self.BodyID is not None or
            self.EngineID is not None or
            self.ChassisID is not None or
            self.CabID is not None or
            self.EmergencyDeviceID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AutomobileBaseType2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AutomobileBaseType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AutomobileBaseType2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AutomobileBaseType2')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AutomobileBaseType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='AutomobileBaseType2'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AutomobileBaseType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RecNumber is not None:
            namespaceprefix_ = self.RecNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RecNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecNumber>%s</%sRecNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.RecNumber, input_name='RecNumber'), namespaceprefix_ , eol_))
        if self.Model is not None:
            namespaceprefix_ = self.Model_nsprefix_ + ':' if (UseCapturedNS_ and self.Model_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModel>%s</%sModel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Model), input_name='Model')), namespaceprefix_ , eol_))
        if self.Mark is not None:
            namespaceprefix_ = self.Mark_nsprefix_ + ':' if (UseCapturedNS_ and self.Mark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMark>%s</%sMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mark), input_name='Mark')), namespaceprefix_ , eol_))
        if self.MarkCode is not None:
            namespaceprefix_ = self.MarkCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkCode>%s</%sMarkCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkCode), input_name='MarkCode')), namespaceprefix_ , eol_))
        if self.OfftakeYear is not None:
            namespaceprefix_ = self.OfftakeYear_nsprefix_ + ':' if (UseCapturedNS_ and self.OfftakeYear_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOfftakeYear>%s</%sOfftakeYear>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OfftakeYear), input_name='OfftakeYear')), namespaceprefix_ , eol_))
        if self.EngineVolumeQuanity is not None:
            namespaceprefix_ = self.EngineVolumeQuanity_nsprefix_ + ':' if (UseCapturedNS_ and self.EngineVolumeQuanity_nsprefix_) else ''
            self.EngineVolumeQuanity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EngineVolumeQuanity', pretty_print=pretty_print)
        if self.VINID is not None:
            namespaceprefix_ = self.VINID_nsprefix_ + ':' if (UseCapturedNS_ and self.VINID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVINID>%s</%sVINID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VINID), input_name='VINID')), namespaceprefix_ , eol_))
        if self.BodyID is not None:
            namespaceprefix_ = self.BodyID_nsprefix_ + ':' if (UseCapturedNS_ and self.BodyID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBodyID>%s</%sBodyID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BodyID), input_name='BodyID')), namespaceprefix_ , eol_))
        if self.EngineID is not None:
            namespaceprefix_ = self.EngineID_nsprefix_ + ':' if (UseCapturedNS_ and self.EngineID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEngineID>%s</%sEngineID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EngineID), input_name='EngineID')), namespaceprefix_ , eol_))
        if self.ChassisID is not None:
            namespaceprefix_ = self.ChassisID_nsprefix_ + ':' if (UseCapturedNS_ and self.ChassisID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChassisID>%s</%sChassisID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChassisID), input_name='ChassisID')), namespaceprefix_ , eol_))
        if self.CabID is not None:
            namespaceprefix_ = self.CabID_nsprefix_ + ':' if (UseCapturedNS_ and self.CabID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCabID>%s</%sCabID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CabID), input_name='CabID')), namespaceprefix_ , eol_))
        if self.EmergencyDeviceID is not None:
            namespaceprefix_ = self.EmergencyDeviceID_nsprefix_ + ':' if (UseCapturedNS_ and self.EmergencyDeviceID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmergencyDeviceID>%s</%sEmergencyDeviceID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EmergencyDeviceID), input_name='EmergencyDeviceID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RecNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'RecNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'RecNumber')
            self.RecNumber = ival_
            self.RecNumber_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.RecNumber)
        elif nodeName_ == 'Model':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Model')
            value_ = self.gds_validate_string(value_, node, 'Model')
            self.Model = value_
            self.Model_nsprefix_ = child_.prefix
            # validate type TransportNameType
            self.validate_TransportNameType(self.Model)
        elif nodeName_ == 'Mark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Mark')
            value_ = self.gds_validate_string(value_, node, 'Mark')
            self.Mark = value_
            self.Mark_nsprefix_ = child_.prefix
            # validate type MarkCarNameType
            self.validate_MarkCarNameType(self.Mark)
        elif nodeName_ == 'MarkCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MarkCode')
            value_ = self.gds_validate_string(value_, node, 'MarkCode')
            self.MarkCode = value_
            self.MarkCode_nsprefix_ = child_.prefix
            # validate type MarkCarCodeType
            self.validate_MarkCarCodeType(self.MarkCode)
        elif nodeName_ == 'OfftakeYear':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OfftakeYear')
            value_ = self.gds_validate_string(value_, node, 'OfftakeYear')
            self.OfftakeYear = value_
            self.OfftakeYear_nsprefix_ = child_.prefix
            # validate type DateYearCustType
            self.validate_DateYearCustType(self.OfftakeYear)
        elif nodeName_ == 'EngineVolumeQuanity':
            obj_ = UnifiedPhysicalMeasureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EngineVolumeQuanity = obj_
            obj_.original_tagname_ = 'EngineVolumeQuanity'
        elif nodeName_ == 'VINID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'VINID')
            value_ = self.gds_validate_string(value_, node, 'VINID')
            self.VINID = value_
            self.VINID_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.VINID)
        elif nodeName_ == 'BodyID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BodyID')
            value_ = self.gds_validate_string(value_, node, 'BodyID')
            self.BodyID = value_
            self.BodyID_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.BodyID)
        elif nodeName_ == 'EngineID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EngineID')
            value_ = self.gds_validate_string(value_, node, 'EngineID')
            self.EngineID = value_
            self.EngineID_nsprefix_ = child_.prefix
            # validate type EngineIDType
            self.validate_EngineIDType(self.EngineID)
        elif nodeName_ == 'ChassisID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ChassisID')
            value_ = self.gds_validate_string(value_, node, 'ChassisID')
            self.ChassisID = value_
            self.ChassisID_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.ChassisID)
        elif nodeName_ == 'CabID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CabID')
            value_ = self.gds_validate_string(value_, node, 'CabID')
            self.CabID = value_
            self.CabID_nsprefix_ = child_.prefix
            # validate type VINIDType
            self.validate_VINIDType(self.CabID)
        elif nodeName_ == 'EmergencyDeviceID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EmergencyDeviceID')
            value_ = self.gds_validate_string(value_, node, 'EmergencyDeviceID')
            self.EmergencyDeviceID = value_
            self.EmergencyDeviceID_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.EmergencyDeviceID)
# end class AutomobileBaseType2


class AutomobileType(AutomobileBaseType):
    """AutomobileType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    а
    в
    т
    о
    м
    о
    б
    и
    л
    я
    х
    .
    Г
    р
    . 31
    IdentityCardNumber -- Н
    о
    м
    е
    р
    у
    д
    о
    с
    т
    о
    в
    е
    р
    е
    н
    и
    я
    CarCostInfo -- С
    в
    е
    д
    е
    н
    и
    я
    о
    c
    т
    о
    и
    м
    о
    с
    т
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    EngineMaxPowerMeasure -- М
    а
    к
    с
    и
    м
    а
    л
    ь
    н
    а
    я
    м
    о
    щ
    н
    о
    с
    т
    ь
    д
    в
    и
    г
    а
    т
    е
    л
    я
    PassedKilometerQuantity -- П
    р
    о
    б
    е
    г
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = AutomobileBaseType
    def __init__(self, Model=None, Mark=None, MarkCode=None, OfftakeYear=None, EngineVolumeQuanity=None, VINID=None, BodyID=None, EngineID=None, ChassisID=None, CabID=None, EmergencyDeviceID=None, IdentityCardNumber=None, CarCostInfo=None, EngineMaxPowerMeasure=None, PassedKilometerQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("AutomobileType"), self).__init__(Model, Mark, MarkCode, OfftakeYear, EngineVolumeQuanity, VINID, BodyID, EngineID, ChassisID, CabID, EmergencyDeviceID,  **kwargs_)
        self.IdentityCardNumber = IdentityCardNumber
        self.validate_DocumentNumberType(self.IdentityCardNumber)
        self.IdentityCardNumber_nsprefix_ = "clt_ru"
        self.CarCostInfo = CarCostInfo
        self.CarCostInfo_nsprefix_ = "catESAD_cu"
        if EngineMaxPowerMeasure is None:
            self.EngineMaxPowerMeasure = []
        else:
            self.EngineMaxPowerMeasure = EngineMaxPowerMeasure
        self.EngineMaxPowerMeasure_nsprefix_ = "catESAD_cu"
        self.PassedKilometerQuantity = PassedKilometerQuantity
        self.PassedKilometerQuantity_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AutomobileType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AutomobileType.subclass:
            return AutomobileType.subclass(*args_, **kwargs_)
        else:
            return AutomobileType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IdentityCardNumber(self):
        return self.IdentityCardNumber
    def set_IdentityCardNumber(self, IdentityCardNumber):
        self.IdentityCardNumber = IdentityCardNumber
    def get_CarCostInfo(self):
        return self.CarCostInfo
    def set_CarCostInfo(self, CarCostInfo):
        self.CarCostInfo = CarCostInfo
    def get_EngineMaxPowerMeasure(self):
        return self.EngineMaxPowerMeasure
    def set_EngineMaxPowerMeasure(self, EngineMaxPowerMeasure):
        self.EngineMaxPowerMeasure = EngineMaxPowerMeasure
    def add_EngineMaxPowerMeasure(self, value):
        self.EngineMaxPowerMeasure.append(value)
    def insert_EngineMaxPowerMeasure_at(self, index, value):
        self.EngineMaxPowerMeasure.insert(index, value)
    def replace_EngineMaxPowerMeasure_at(self, index, value):
        self.EngineMaxPowerMeasure[index] = value
    def get_PassedKilometerQuantity(self):
        return self.PassedKilometerQuantity
    def set_PassedKilometerQuantity(self, PassedKilometerQuantity):
        self.PassedKilometerQuantity = PassedKilometerQuantity
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.IdentityCardNumber is not None or
            self.CarCostInfo is not None or
            self.EngineMaxPowerMeasure or
            self.PassedKilometerQuantity is not None or
            super(AutomobileType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AutomobileType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AutomobileType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AutomobileType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AutomobileType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AutomobileType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='AutomobileType'):
        super(AutomobileType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AutomobileType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AutomobileType', fromsubclass_=False, pretty_print=True):
        super(AutomobileType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentityCardNumber is not None:
            namespaceprefix_ = self.IdentityCardNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardNumber>%s</%sIdentityCardNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardNumber), input_name='IdentityCardNumber')), namespaceprefix_ , eol_))
        if self.CarCostInfo is not None:
            namespaceprefix_ = self.CarCostInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.CarCostInfo_nsprefix_) else ''
            self.CarCostInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CarCostInfo', pretty_print=pretty_print)
        for EngineMaxPowerMeasure_ in self.EngineMaxPowerMeasure:
            namespaceprefix_ = self.EngineMaxPowerMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.EngineMaxPowerMeasure_nsprefix_) else ''
            EngineMaxPowerMeasure_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EngineMaxPowerMeasure', pretty_print=pretty_print)
        if self.PassedKilometerQuantity is not None:
            namespaceprefix_ = self.PassedKilometerQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.PassedKilometerQuantity_nsprefix_) else ''
            self.PassedKilometerQuantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PassedKilometerQuantity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(AutomobileType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IdentityCardNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardNumber')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardNumber')
            self.IdentityCardNumber = value_
            self.IdentityCardNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.IdentityCardNumber)
        elif nodeName_ == 'CarCostInfo':
            obj_ = CarCostInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CarCostInfo = obj_
            obj_.original_tagname_ = 'CarCostInfo'
        elif nodeName_ == 'EngineMaxPowerMeasure':
            obj_ = UnifiedPhysicalMeasureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EngineMaxPowerMeasure.append(obj_)
            obj_.original_tagname_ = 'EngineMaxPowerMeasure'
        elif nodeName_ == 'PassedKilometerQuantity':
            obj_ = UnifiedPhysicalMeasureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PassedKilometerQuantity = obj_
            obj_.original_tagname_ = 'PassedKilometerQuantity'
        super(AutomobileType, self)._buildChildren(child_, node, nodeName_, True)
# end class AutomobileType


class CarCostInfoType(GeneratedsSuper):
    """CarCostInfoType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    c
    т
    о
    и
    м
    о
    с
    т
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    CarCost -- С
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    CarCostCurrencyCode -- Т
    р
    е
    х
    з
    н
    а
    ч
    н
    ы
    й
    б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    т
    о
    и
    м
    о
    с
    т
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    К
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    а
    л
    ю
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CarCost=None, CarCostCurrencyCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.CarCost = CarCost
        self.validate_AmountType(self.CarCost)
        self.CarCost_nsprefix_ = "clt_ru"
        self.CarCostCurrencyCode = CarCostCurrencyCode
        self.validate_CurrencyA3CodeType(self.CarCostCurrencyCode)
        self.CarCostCurrencyCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarCostInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarCostInfoType.subclass:
            return CarCostInfoType.subclass(*args_, **kwargs_)
        else:
            return CarCostInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CarCost(self):
        return self.CarCost
    def set_CarCost(self, CarCost):
        self.CarCost = CarCost
    def get_CarCostCurrencyCode(self):
        return self.CarCostCurrencyCode
    def set_CarCostCurrencyCode(self, CarCostCurrencyCode):
        self.CarCostCurrencyCode = CarCostCurrencyCode
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CarCost is not None or
            self.CarCostCurrencyCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CarCostInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CarCostInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CarCostInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CarCostInfoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CarCostInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CarCostInfoType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CarCostInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CarCost is not None:
            namespaceprefix_ = self.CarCost_nsprefix_ + ':' if (UseCapturedNS_ and self.CarCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarCost>%s</%sCarCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CarCost, input_name='CarCost'), namespaceprefix_ , eol_))
        if self.CarCostCurrencyCode is not None:
            namespaceprefix_ = self.CarCostCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CarCostCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarCostCurrencyCode>%s</%sCarCostCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CarCostCurrencyCode), input_name='CarCostCurrencyCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CarCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CarCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'CarCost')
            self.CarCost = fval_
            self.CarCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.CarCost)
        elif nodeName_ == 'CarCostCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CarCostCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CarCostCurrencyCode')
            self.CarCostCurrencyCode = value_
            self.CarCostCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.CarCostCurrencyCode)
# end class CarCostInfoType


class CIMIdDetailsType(GeneratedsSuper):
    """CIMIdDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    н
    о
    м
    е
    р
    а
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    х
    )
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    х
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    CIMMarkingFlag -- П
    р
    и
    з
    н
    а
    к
    н
    а
    н
    е
    с
    е
    н
    и
    я
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    п
    о
    с
    л
    е
    в
    ы
    п
    у
    с
    к
    а
    т
    о
    в
    а
    р
    о
    в
    «
    П
    В
    »
    CIMQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    х
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    CIMList -- П
    е
    р
    е
    ч
    е
    н
    ь
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    н
    о
    м
    е
    р
    о
    в
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    в
    )
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    CIMRange -- Д
    и
    а
    п
    а
    з
    о
    н
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    н
    о
    м
    е
    р
    о
    в
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    в
    )
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CIMMarkingFlag=None, CIMQuantity=None, CIMList=None, CIMRange=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.CIMMarkingFlag = CIMMarkingFlag
        self.validate_Code2Type(self.CIMMarkingFlag)
        self.CIMMarkingFlag_nsprefix_ = "clt_ru"
        self.CIMQuantity = CIMQuantity
        self.validate_Quantity10Type(self.CIMQuantity)
        self.CIMQuantity_nsprefix_ = "cltESAD_cu"
        self.CIMList = CIMList
        self.CIMList_nsprefix_ = "catESAD_cu"
        if CIMRange is None:
            self.CIMRange = []
        else:
            self.CIMRange = CIMRange
        self.CIMRange_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CIMIdDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CIMIdDetailsType.subclass:
            return CIMIdDetailsType.subclass(*args_, **kwargs_)
        else:
            return CIMIdDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CIMMarkingFlag(self):
        return self.CIMMarkingFlag
    def set_CIMMarkingFlag(self, CIMMarkingFlag):
        self.CIMMarkingFlag = CIMMarkingFlag
    def get_CIMQuantity(self):
        return self.CIMQuantity
    def set_CIMQuantity(self, CIMQuantity):
        self.CIMQuantity = CIMQuantity
    def get_CIMList(self):
        return self.CIMList
    def set_CIMList(self, CIMList):
        self.CIMList = CIMList
    def get_CIMRange(self):
        return self.CIMRange
    def set_CIMRange(self, CIMRange):
        self.CIMRange = CIMRange
    def add_CIMRange(self, value):
        self.CIMRange.append(value)
    def insert_CIMRange_at(self, index, value):
        self.CIMRange.insert(index, value)
    def replace_CIMRange_at(self, index, value):
        self.CIMRange[index] = value
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Quantity10Type(self, value):
        result = True
        # Validate type Quantity10Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity10Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity10Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CIMMarkingFlag is not None or
            self.CIMQuantity is not None or
            self.CIMList is not None or
            self.CIMRange
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='CIMIdDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CIMIdDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CIMIdDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CIMIdDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CIMIdDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CIMIdDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='CIMIdDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CIMMarkingFlag is not None:
            namespaceprefix_ = self.CIMMarkingFlag_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMMarkingFlag_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMMarkingFlag>%s</%sCIMMarkingFlag>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CIMMarkingFlag), input_name='CIMMarkingFlag')), namespaceprefix_ , eol_))
        if self.CIMQuantity is not None:
            namespaceprefix_ = self.CIMQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMQuantity>%s</%sCIMQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.CIMQuantity, input_name='CIMQuantity'), namespaceprefix_ , eol_))
        if self.CIMList is not None:
            namespaceprefix_ = self.CIMList_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMList_nsprefix_) else ''
            self.CIMList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CIMList', pretty_print=pretty_print)
        for CIMRange_ in self.CIMRange:
            namespaceprefix_ = self.CIMRange_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMRange_nsprefix_) else ''
            CIMRange_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CIMRange', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CIMMarkingFlag':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CIMMarkingFlag')
            value_ = self.gds_validate_string(value_, node, 'CIMMarkingFlag')
            self.CIMMarkingFlag = value_
            self.CIMMarkingFlag_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.CIMMarkingFlag)
        elif nodeName_ == 'CIMQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CIMQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'CIMQuantity')
            self.CIMQuantity = ival_
            self.CIMQuantity_nsprefix_ = child_.prefix
            # validate type Quantity10Type
            self.validate_Quantity10Type(self.CIMQuantity)
        elif nodeName_ == 'CIMList':
            obj_ = CIMListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CIMList = obj_
            obj_.original_tagname_ = 'CIMList'
        elif nodeName_ == 'CIMRange':
            obj_ = CIMRangeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CIMRange.append(obj_)
            obj_.original_tagname_ = 'CIMRange'
# end class CIMIdDetailsType


class CIMListType(GeneratedsSuper):
    """CIMListType -- П
    е
    р
    е
    ч
    е
    н
    ь
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    н
    о
    м
    е
    р
    о
    в
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    в
    )
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    CIMID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    о
    г
    о
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    г
    о
    )
    з
    н
    а
    к
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CIMID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if CIMID is None:
            self.CIMID = []
        else:
            self.CIMID = CIMID
        self.CIMID_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CIMListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CIMListType.subclass:
            return CIMListType.subclass(*args_, **kwargs_)
        else:
            return CIMListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CIMID(self):
        return self.CIMID
    def set_CIMID(self, CIMID):
        self.CIMID = CIMID
    def add_CIMID(self, value):
        self.CIMID.append(value)
    def insert_CIMID_at(self, index, value):
        self.CIMID.insert(index, value)
    def replace_CIMID_at(self, index, value):
        self.CIMID[index] = value
    def validate_VisualIdentifierCIMType(self, value):
        result = True
        # Validate type VisualIdentifierCIMType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_VisualIdentifierCIMType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_VisualIdentifierCIMType_patterns_, ))
                result = False
        return result
    validate_VisualIdentifierCIMType_patterns_ = [['^([A-Z]{2}-[A-Z0-9]{6}-[A-Z0-9]{10})$']]
    def has__content(self):
        if (
            self.CIMID
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CIMListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CIMListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CIMListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CIMListType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CIMListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CIMListType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CIMListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CIMID_ in self.CIMID:
            namespaceprefix_ = self.CIMID_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMID>%s</%sCIMID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CIMID_), input_name='CIMID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CIMID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CIMID')
            value_ = self.gds_validate_string(value_, node, 'CIMID')
            self.CIMID.append(value_)
            self.CIMID_nsprefix_ = child_.prefix
            # validate type VisualIdentifierCIMType
            self.validate_VisualIdentifierCIMType(self.CIMID[-1])
# end class CIMListType


class CIMRangeType(GeneratedsSuper):
    """CIMRangeType -- Д
    и
    а
    п
    а
    з
    о
    н
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    н
    о
    м
    е
    р
    о
    в
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    в
    )
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    FirstCIMID -- П
    е
    р
    в
    ы
    й
    н
    о
    м
    е
    р
    д
    и
    а
    п
    а
    з
    о
    н
    а
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    н
    о
    м
    е
    р
    о
    в
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    в
    )
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    LastCIMID -- П
    о
    с
    л
    е
    д
    н
    и
    й
    н
    о
    м
    е
    р
    д
    и
    а
    п
    а
    з
    о
    н
    а
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    н
    о
    м
    е
    р
    о
    в
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    в
    )
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FirstCIMID=None, LastCIMID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.FirstCIMID = FirstCIMID
        self.validate_VisualIdentifierCIMType(self.FirstCIMID)
        self.FirstCIMID_nsprefix_ = "clt_ru"
        self.LastCIMID = LastCIMID
        self.validate_VisualIdentifierCIMType(self.LastCIMID)
        self.LastCIMID_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CIMRangeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CIMRangeType.subclass:
            return CIMRangeType.subclass(*args_, **kwargs_)
        else:
            return CIMRangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FirstCIMID(self):
        return self.FirstCIMID
    def set_FirstCIMID(self, FirstCIMID):
        self.FirstCIMID = FirstCIMID
    def get_LastCIMID(self):
        return self.LastCIMID
    def set_LastCIMID(self, LastCIMID):
        self.LastCIMID = LastCIMID
    def validate_VisualIdentifierCIMType(self, value):
        result = True
        # Validate type VisualIdentifierCIMType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_VisualIdentifierCIMType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_VisualIdentifierCIMType_patterns_, ))
                result = False
        return result
    validate_VisualIdentifierCIMType_patterns_ = [['^([A-Z]{2}-[A-Z0-9]{6}-[A-Z0-9]{10})$']]
    def has__content(self):
        if (
            self.FirstCIMID is not None or
            self.LastCIMID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CIMRangeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CIMRangeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CIMRangeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CIMRangeType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CIMRangeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CIMRangeType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CIMRangeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FirstCIMID is not None:
            namespaceprefix_ = self.FirstCIMID_nsprefix_ + ':' if (UseCapturedNS_ and self.FirstCIMID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstCIMID>%s</%sFirstCIMID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FirstCIMID), input_name='FirstCIMID')), namespaceprefix_ , eol_))
        if self.LastCIMID is not None:
            namespaceprefix_ = self.LastCIMID_nsprefix_ + ':' if (UseCapturedNS_ and self.LastCIMID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastCIMID>%s</%sLastCIMID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LastCIMID), input_name='LastCIMID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FirstCIMID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'FirstCIMID')
            value_ = self.gds_validate_string(value_, node, 'FirstCIMID')
            self.FirstCIMID = value_
            self.FirstCIMID_nsprefix_ = child_.prefix
            # validate type VisualIdentifierCIMType
            self.validate_VisualIdentifierCIMType(self.FirstCIMID)
        elif nodeName_ == 'LastCIMID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LastCIMID')
            value_ = self.gds_validate_string(value_, node, 'LastCIMID')
            self.LastCIMID = value_
            self.LastCIMID_nsprefix_ = child_.prefix
            # validate type VisualIdentifierCIMType
            self.validate_VisualIdentifierCIMType(self.LastCIMID)
# end class CIMRangeType


class ComponentDescriptionType(GeneratedsSuper):
    """ComponentDescriptionType -- О
    п
    и
    с
    а
    н
    и
    е
    ф
    у
    н
    к
    ц
    и
    о
    н
    а
    л
    ь
    н
    о
    г
    о
    б
    л
    о
    к
    а
    и
    л
    и
    к
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    GoodsTNVEDCode -- К
    о
    д
    п
    о
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    KGWeight -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    в
    к
    г
    InvoicedCost --
    Ц
    е
    н
    а
    т
    о
    в
    а
    р
    а
    /
    Ф
    а
    к
    т
    у
    р
    н
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    InvoiceCurrencyCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    ф
    а
    к
    т
    у
    р
    н
    о
    й
    с
    т
    о
    и
    м
    о
    с
    т
    и
    SupplementaryQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    в
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsTNVEDCode=None, KGWeight=None, InvoicedCost=None, InvoiceCurrencyCode=None, SupplementaryQuantity=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.GoodsTNVEDCode = GoodsTNVEDCode
        self.validate_GoodsNomenclatureCodeType(self.GoodsTNVEDCode)
        self.GoodsTNVEDCode_nsprefix_ = "clt_ru"
        self.KGWeight = KGWeight
        self.validate_QuantityBasisType(self.KGWeight)
        self.KGWeight_nsprefix_ = "clt_ru"
        self.InvoicedCost = InvoicedCost
        self.validate_AmountType(self.InvoicedCost)
        self.InvoicedCost_nsprefix_ = "clt_ru"
        self.InvoiceCurrencyCode = InvoiceCurrencyCode
        self.validate_CurrencyA3CodeType(self.InvoiceCurrencyCode)
        self.InvoiceCurrencyCode_nsprefix_ = "clt_ru"
        self.SupplementaryQuantity = SupplementaryQuantity
        self.SupplementaryQuantity_nsprefix_ = "catESAD_cu"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ComponentDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ComponentDescriptionType.subclass:
            return ComponentDescriptionType.subclass(*args_, **kwargs_)
        else:
            return ComponentDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsTNVEDCode(self):
        return self.GoodsTNVEDCode
    def set_GoodsTNVEDCode(self, GoodsTNVEDCode):
        self.GoodsTNVEDCode = GoodsTNVEDCode
    def get_KGWeight(self):
        return self.KGWeight
    def set_KGWeight(self, KGWeight):
        self.KGWeight = KGWeight
    def get_InvoicedCost(self):
        return self.InvoicedCost
    def set_InvoicedCost(self, InvoicedCost):
        self.InvoicedCost = InvoicedCost
    def get_InvoiceCurrencyCode(self):
        return self.InvoiceCurrencyCode
    def set_InvoiceCurrencyCode(self, InvoiceCurrencyCode):
        self.InvoiceCurrencyCode = InvoiceCurrencyCode
    def get_SupplementaryQuantity(self):
        return self.SupplementaryQuantity
    def set_SupplementaryQuantity(self, SupplementaryQuantity):
        self.SupplementaryQuantity = SupplementaryQuantity
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_GoodsNomenclatureCodeType(self, value):
        result = True
        # Validate type GoodsNomenclatureCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_GoodsNomenclatureCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_GoodsNomenclatureCodeType_patterns_, ))
                result = False
        return result
    validate_GoodsNomenclatureCodeType_patterns_ = [['^(\\d{4,10})$']]
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsTNVEDCode is not None or
            self.KGWeight is not None or
            self.InvoicedCost is not None or
            self.InvoiceCurrencyCode is not None or
            self.SupplementaryQuantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ComponentDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ComponentDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ComponentDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ComponentDescriptionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ComponentDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ComponentDescriptionType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ComponentDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsTNVEDCode is not None:
            namespaceprefix_ = self.GoodsTNVEDCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsTNVEDCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsTNVEDCode>%s</%sGoodsTNVEDCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsTNVEDCode), input_name='GoodsTNVEDCode')), namespaceprefix_ , eol_))
        if self.KGWeight is not None:
            namespaceprefix_ = self.KGWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.KGWeight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKGWeight>%s</%sKGWeight>%s' % (namespaceprefix_ , self.gds_format_decimal(self.KGWeight, input_name='KGWeight'), namespaceprefix_ , eol_))
        if self.InvoicedCost is not None:
            namespaceprefix_ = self.InvoicedCost_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoicedCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoicedCost>%s</%sInvoicedCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.InvoicedCost, input_name='InvoicedCost'), namespaceprefix_ , eol_))
        if self.InvoiceCurrencyCode is not None:
            namespaceprefix_ = self.InvoiceCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoiceCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoiceCurrencyCode>%s</%sInvoiceCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceCurrencyCode), input_name='InvoiceCurrencyCode')), namespaceprefix_ , eol_))
        if self.SupplementaryQuantity is not None:
            namespaceprefix_ = self.SupplementaryQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplementaryQuantity_nsprefix_) else ''
            self.SupplementaryQuantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplementaryQuantity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsTNVEDCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsTNVEDCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsTNVEDCode')
            self.GoodsTNVEDCode = value_
            self.GoodsTNVEDCode_nsprefix_ = child_.prefix
            # validate type GoodsNomenclatureCodeType
            self.validate_GoodsNomenclatureCodeType(self.GoodsTNVEDCode)
        elif nodeName_ == 'KGWeight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'KGWeight')
            fval_ = self.gds_validate_decimal(fval_, node, 'KGWeight')
            self.KGWeight = fval_
            self.KGWeight_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.KGWeight)
        elif nodeName_ == 'InvoicedCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'InvoicedCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'InvoicedCost')
            self.InvoicedCost = fval_
            self.InvoicedCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.InvoicedCost)
        elif nodeName_ == 'InvoiceCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InvoiceCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'InvoiceCurrencyCode')
            self.InvoiceCurrencyCode = value_
            self.InvoiceCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.InvoiceCurrencyCode)
        elif nodeName_ == 'SupplementaryQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplementaryQuantity = obj_
            obj_.original_tagname_ = 'SupplementaryQuantity'
# end class ComponentDescriptionType


class ComponentsListType(GeneratedsSuper):
    """ComponentsListType -- П
    о
    с
    т
    а
    в
    к
    а
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    м
    и
    -
    С
    п
    и
    с
    о
    к
    к
    о
    м
    п
    о
    н
    е
    н
    т
    о
    в
    MechanismUnit -- С
    в
    е
    д
    е
    н
    и
    я
    о
    ф
    у
    н
    к
    ц
    и
    о
    н
    а
    л
    ь
    н
    о
    м
    б
    л
    о
    к
    е
    и
    л
    и
    к
    о
    м
    п
    о
    н
    е
    н
    т
    е
    т
    о
    в
    а
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MechanismUnit=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if MechanismUnit is None:
            self.MechanismUnit = []
        else:
            self.MechanismUnit = MechanismUnit
        self.MechanismUnit_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ComponentsListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ComponentsListType.subclass:
            return ComponentsListType.subclass(*args_, **kwargs_)
        else:
            return ComponentsListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MechanismUnit(self):
        return self.MechanismUnit
    def set_MechanismUnit(self, MechanismUnit):
        self.MechanismUnit = MechanismUnit
    def add_MechanismUnit(self, value):
        self.MechanismUnit.append(value)
    def insert_MechanismUnit_at(self, index, value):
        self.MechanismUnit.insert(index, value)
    def replace_MechanismUnit_at(self, index, value):
        self.MechanismUnit[index] = value
    def has__content(self):
        if (
            self.MechanismUnit
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='ComponentsListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ComponentsListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ComponentsListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ComponentsListType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ComponentsListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ComponentsListType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='ComponentsListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MechanismUnit_ in self.MechanismUnit:
            namespaceprefix_ = self.MechanismUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.MechanismUnit_nsprefix_) else ''
            MechanismUnit_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MechanismUnit', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MechanismUnit':
            obj_ = MechanismUnitType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MechanismUnit.append(obj_)
            obj_.original_tagname_ = 'MechanismUnit'
# end class ComponentsListType


class ContainerNumberType(GeneratedsSuper):
    """ContainerNumberType -- Н
    о
    м
    е
    р
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    ContainerIdentificaror -- Н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    FullIndicator -- П
    р
    и
    з
    н
    а
    к
    з
    а
    п
    о
    л
    н
    е
    н
    и
    я
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    . 1 -
    т
    о
    в
    а
    р
    з
    а
    н
    и
    м
    а
    е
    т
    в
    е
    с
    ь
    к
    о
    н
    т
    е
    й
    н
    е
    р
    , 2-
    т
    о
    в
    а
    р
    з
    а
    н
    и
    м
    а
    е
    т
    ч
    а
    с
    т
    ь
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContainerIdentificaror=None, FullIndicator=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ContainerIdentificaror = ContainerIdentificaror
        self.validate_ContainerIdentityType(self.ContainerIdentificaror)
        self.ContainerIdentificaror_nsprefix_ = "clt_ru"
        self.FullIndicator = FullIndicator
        self.validate_LetterIndicatorType(self.FullIndicator)
        self.FullIndicator_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContainerNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContainerNumberType.subclass:
            return ContainerNumberType.subclass(*args_, **kwargs_)
        else:
            return ContainerNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContainerIdentificaror(self):
        return self.ContainerIdentificaror
    def set_ContainerIdentificaror(self, ContainerIdentificaror):
        self.ContainerIdentificaror = ContainerIdentificaror
    def get_FullIndicator(self):
        return self.FullIndicator
    def set_FullIndicator(self, FullIndicator):
        self.FullIndicator = FullIndicator
    def validate_ContainerIdentityType(self, value):
        result = True
        # Validate type ContainerIdentityType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 17:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ContainerIdentityType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ContainerIdentityType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ContainerIdentificaror is not None or
            self.FullIndicator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ContainerNumberType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContainerNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContainerNumberType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContainerNumberType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContainerNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ContainerNumberType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ContainerNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContainerIdentificaror is not None:
            namespaceprefix_ = self.ContainerIdentificaror_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerIdentificaror_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerIdentificaror>%s</%sContainerIdentificaror>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContainerIdentificaror), input_name='ContainerIdentificaror')), namespaceprefix_ , eol_))
        if self.FullIndicator is not None:
            namespaceprefix_ = self.FullIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.FullIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullIndicator>%s</%sFullIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullIndicator), input_name='FullIndicator')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContainerIdentificaror':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ContainerIdentificaror')
            value_ = self.gds_validate_string(value_, node, 'ContainerIdentificaror')
            self.ContainerIdentificaror = value_
            self.ContainerIdentificaror_nsprefix_ = child_.prefix
            # validate type ContainerIdentityType
            self.validate_ContainerIdentityType(self.ContainerIdentificaror)
        elif nodeName_ == 'FullIndicator':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'FullIndicator')
            value_ = self.gds_validate_string(value_, node, 'FullIndicator')
            self.FullIndicator = value_
            self.FullIndicator_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.FullIndicator)
# end class ContainerNumberType


class ContractCostType(GeneratedsSuper):
    """ContractCostType -- В
    а
    л
    ю
    т
    а
    и
    о
    б
    щ
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    п
    о
    с
    ч
    е
    т
    у
    .
    Г
    р
    . 22, 23
    ContractCurrencyCode -- Т
    р
    е
    х
    з
    н
    а
    ч
    н
    ы
    й
    б
    у
    к
    в
    е
    н
    н
    ы
    й
    в
    г
    р
    а
    ф
    е
    22
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    ц
    е
    н
    ы
    д
    о
    г
    о
    в
    о
    р
    а
    /
    п
    л
    а
    т
    е
    ж
    а
    (
    о
    ц
    е
    н
    к
    и
    ).
    П
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    а
    л
    ю
    т
    CurrencyQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    е
    д
    и
    н
    и
    ц
    в
    а
    л
    ю
    т
    ы
    ,
    д
    л
    я
    к
    о
    т
    о
    р
    о
    й
    у
    к
    а
    з
    а
    н
    к
    у
    р
    с
    д
    л
    я
    Р
    Б
    ContractCurrencyRate -- К
    у
    р
    с
    в
    а
    л
    ю
    т
    ы
    ц
    е
    н
    ы
    д
    о
    г
    о
    в
    о
    р
    а
    (
    к
    о
    н
    т
    р
    а
    к
    т
    а
    )
    и
    л
    и
    в
    а
    л
    ю
    т
    ы
    п
    л
    а
    т
    е
    ж
    а
    (
    о
    ц
    е
    н
    к
    и
    )
    TotalInvoiceAmount -- О
    б
    щ
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    22
    п
    о
    д
    р
    а
    з
    д
    е
    л
    2
    TotalAmount -- О
    б
    щ
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    о
    в
    а
    р
    а
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    о
    г
    о
    ч
    е
    р
    е
    з
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    г
    р
    а
    н
    и
    ц
    у
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    т
    о
    м
    ч
    и
    с
    л
    е
    н
    е
    к
    о
    м
    п
    л
    е
    к
    т
    н
    о
    м
    и
    л
    и
    н
    е
    з
    а
    в
    е
    р
    ш
    е
    н
    н
    о
    м
    в
    и
    д
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContractCurrencyCode=None, CurrencyQuantity=None, ContractCurrencyRate=None, TotalInvoiceAmount=None, TotalAmount=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ContractCurrencyCode = ContractCurrencyCode
        self.validate_CurrencyA3CodeType(self.ContractCurrencyCode)
        self.ContractCurrencyCode_nsprefix_ = "clt_ru"
        self.CurrencyQuantity = CurrencyQuantity
        self.validate_Count6Type(self.CurrencyQuantity)
        self.CurrencyQuantity_nsprefix_ = "clt_ru"
        self.ContractCurrencyRate = ContractCurrencyRate
        self.validate_CurrencyRateType(self.ContractCurrencyRate)
        self.ContractCurrencyRate_nsprefix_ = "clt_ru"
        self.TotalInvoiceAmount = TotalInvoiceAmount
        self.validate_AmountType(self.TotalInvoiceAmount)
        self.TotalInvoiceAmount_nsprefix_ = "clt_ru"
        self.TotalAmount = TotalAmount
        self.validate_AmountType(self.TotalAmount)
        self.TotalAmount_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContractCostType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContractCostType.subclass:
            return ContractCostType.subclass(*args_, **kwargs_)
        else:
            return ContractCostType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContractCurrencyCode(self):
        return self.ContractCurrencyCode
    def set_ContractCurrencyCode(self, ContractCurrencyCode):
        self.ContractCurrencyCode = ContractCurrencyCode
    def get_CurrencyQuantity(self):
        return self.CurrencyQuantity
    def set_CurrencyQuantity(self, CurrencyQuantity):
        self.CurrencyQuantity = CurrencyQuantity
    def get_ContractCurrencyRate(self):
        return self.ContractCurrencyRate
    def set_ContractCurrencyRate(self, ContractCurrencyRate):
        self.ContractCurrencyRate = ContractCurrencyRate
    def get_TotalInvoiceAmount(self):
        return self.TotalInvoiceAmount
    def set_TotalInvoiceAmount(self, TotalInvoiceAmount):
        self.TotalInvoiceAmount = TotalInvoiceAmount
    def get_TotalAmount(self):
        return self.TotalAmount
    def set_TotalAmount(self, TotalAmount):
        self.TotalAmount = TotalAmount
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count6Type(self, value):
        result = True
        # Validate type Count6Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count6Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count6Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyRateType(self, value):
        result = True
        # Validate type CurrencyRateType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on CurrencyRateType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on CurrencyRateType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ContractCurrencyCode is not None or
            self.CurrencyQuantity is not None or
            self.ContractCurrencyRate is not None or
            self.TotalInvoiceAmount is not None or
            self.TotalAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ContractCostType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContractCostType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContractCostType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContractCostType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContractCostType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ContractCostType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ContractCostType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContractCurrencyCode is not None:
            namespaceprefix_ = self.ContractCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractCurrencyCode>%s</%sContractCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContractCurrencyCode), input_name='ContractCurrencyCode')), namespaceprefix_ , eol_))
        if self.CurrencyQuantity is not None:
            namespaceprefix_ = self.CurrencyQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyQuantity>%s</%sCurrencyQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.CurrencyQuantity, input_name='CurrencyQuantity'), namespaceprefix_ , eol_))
        if self.ContractCurrencyRate is not None:
            namespaceprefix_ = self.ContractCurrencyRate_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractCurrencyRate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractCurrencyRate>%s</%sContractCurrencyRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ContractCurrencyRate, input_name='ContractCurrencyRate'), namespaceprefix_ , eol_))
        if self.TotalInvoiceAmount is not None:
            namespaceprefix_ = self.TotalInvoiceAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalInvoiceAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalInvoiceAmount>%s</%sTotalInvoiceAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TotalInvoiceAmount, input_name='TotalInvoiceAmount'), namespaceprefix_ , eol_))
        if self.TotalAmount is not None:
            namespaceprefix_ = self.TotalAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalAmount>%s</%sTotalAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TotalAmount, input_name='TotalAmount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContractCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ContractCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'ContractCurrencyCode')
            self.ContractCurrencyCode = value_
            self.ContractCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.ContractCurrencyCode)
        elif nodeName_ == 'CurrencyQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CurrencyQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'CurrencyQuantity')
            self.CurrencyQuantity = ival_
            self.CurrencyQuantity_nsprefix_ = child_.prefix
            # validate type Count6Type
            self.validate_Count6Type(self.CurrencyQuantity)
        elif nodeName_ == 'ContractCurrencyRate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ContractCurrencyRate')
            fval_ = self.gds_validate_decimal(fval_, node, 'ContractCurrencyRate')
            self.ContractCurrencyRate = fval_
            self.ContractCurrencyRate_nsprefix_ = child_.prefix
            # validate type CurrencyRateType
            self.validate_CurrencyRateType(self.ContractCurrencyRate)
        elif nodeName_ == 'TotalInvoiceAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TotalInvoiceAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'TotalInvoiceAmount')
            self.TotalInvoiceAmount = fval_
            self.TotalInvoiceAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.TotalInvoiceAmount)
        elif nodeName_ == 'TotalAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TotalAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'TotalAmount')
            self.TotalAmount = fval_
            self.TotalAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.TotalAmount)
# end class ContractCostType


class CountryDetailsType(GeneratedsSuper):
    """CountryDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    р
    а
    н
    е
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    CountryName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    RBCountryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ы
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, CountryName=None, RBCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.CountryName = CountryName
        self.validate_CountryNameType(self.CountryName)
        self.CountryName_nsprefix_ = "clt_ru"
        self.RBCountryCode = RBCountryCode
        self.validate_Code3Type(self.RBCountryCode)
        self.RBCountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountryDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountryDetailsType.subclass:
            return CountryDetailsType.subclass(*args_, **kwargs_)
        else:
            return CountryDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CountryName(self):
        return self.CountryName
    def set_CountryName(self, CountryName):
        self.CountryName = CountryName
    def get_RBCountryCode(self):
        return self.RBCountryCode
    def set_RBCountryCode(self, RBCountryCode):
        self.RBCountryCode = RBCountryCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CountryCode is not None or
            self.CountryName is not None or
            self.RBCountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CountryDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountryDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CountryDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CountryDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CountryDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CountryDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CountryDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CountryName is not None:
            namespaceprefix_ = self.CountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryName>%s</%sCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), namespaceprefix_ , eol_))
        if self.RBCountryCode is not None:
            namespaceprefix_ = self.RBCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RBCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBCountryCode>%s</%sRBCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBCountryCode), input_name='RBCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'CountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryName')
            value_ = self.gds_validate_string(value_, node, 'CountryName')
            self.CountryName = value_
            self.CountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.CountryName)
        elif nodeName_ == 'RBCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RBCountryCode')
            self.RBCountryCode = value_
            self.RBCountryCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.RBCountryCode)
# end class CountryDetailsType


class CU_ElectricalEnergyType(GeneratedsSuper):
    """CU_ElectricalEnergyType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    е
    п
    р
    и
    н
    я
    т
    о
    й
    и
    п
    е
    р
    е
    д
    а
    н
    н
    о
    й
    э
    л
    е
    к
    т
    р
    о
    э
    н
    е
    р
    г
    и
    и
    з
    а
    о
    т
    ч
    е
    т
    н
    ы
    й
    п
    е
    р
    и
    о
    д
    ElectricalEnergyQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    э
    л
    е
    к
    т
    р
    о
    э
    н
    е
    р
    г
    и
    и
    QualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ElectricalEnergyQuantity=None, QualifierCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ElectricalEnergyQuantity = ElectricalEnergyQuantity
        self.validate_QuantityBasisType(self.ElectricalEnergyQuantity)
        self.ElectricalEnergyQuantity_nsprefix_ = "clt_ru"
        self.QualifierCode = QualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.QualifierCode)
        self.QualifierCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CU_ElectricalEnergyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CU_ElectricalEnergyType.subclass:
            return CU_ElectricalEnergyType.subclass(*args_, **kwargs_)
        else:
            return CU_ElectricalEnergyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ElectricalEnergyQuantity(self):
        return self.ElectricalEnergyQuantity
    def set_ElectricalEnergyQuantity(self, ElectricalEnergyQuantity):
        self.ElectricalEnergyQuantity = ElectricalEnergyQuantity
    def get_QualifierCode(self):
        return self.QualifierCode
    def set_QualifierCode(self, QualifierCode):
        self.QualifierCode = QualifierCode
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ElectricalEnergyQuantity is not None or
            self.QualifierCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CU_ElectricalEnergyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CU_ElectricalEnergyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CU_ElectricalEnergyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CU_ElectricalEnergyType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CU_ElectricalEnergyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CU_ElectricalEnergyType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CU_ElectricalEnergyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ElectricalEnergyQuantity is not None:
            namespaceprefix_ = self.ElectricalEnergyQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ElectricalEnergyQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sElectricalEnergyQuantity>%s</%sElectricalEnergyQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ElectricalEnergyQuantity, input_name='ElectricalEnergyQuantity'), namespaceprefix_ , eol_))
        if self.QualifierCode is not None:
            namespaceprefix_ = self.QualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.QualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQualifierCode>%s</%sQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QualifierCode), input_name='QualifierCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ElectricalEnergyQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ElectricalEnergyQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'ElectricalEnergyQuantity')
            self.ElectricalEnergyQuantity = fval_
            self.ElectricalEnergyQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.ElectricalEnergyQuantity)
        elif nodeName_ == 'QualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'QualifierCode')
            value_ = self.gds_validate_string(value_, node, 'QualifierCode')
            self.QualifierCode = value_
            self.QualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.QualifierCode)
# end class CU_ElectricalEnergyType


class CUConsigmentType(GeneratedsSuper):
    """CUConsigmentType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    е
    р
    е
    в
    о
    з
    к
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 15, 15
    а
    , 17,17
    а
    , 18, 19, 21, 25, 26, 29  -
    Д
    Т
    /
    Г
    р
    . 15, 17, 18, 19, 21, 25, 26, 29 , 53, 55-
    Т
    Д
    ContainerIndicator -- П
    р
    и
    з
    н
    а
    к
    к
    о
    н
    т
    е
    й
    н
    е
    р
    н
    ы
    х
    п
    е
    р
    е
    в
    о
    з
    о
    к
    .
    Г
    р
    .19
    DispatchCountryCode -- С
    т
    р
    а
    н
    а
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    я
    .
    Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    .
    Г
    р
    15,
    п
    о
    д
    р
    а
    з
    д
    е
    л
    a
    RBDispatchCountryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ы
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    .
    Г
    р
    .15,
    п
    о
    д
    р
    а
    з
    д
    е
    л
    b
    DispatchCountryName -- С
    т
    р
    а
    н
    а
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    я
    .
    К
    р
    а
    т
    к
    о
    е
    н
    а
    з
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    .
    Г
    р
    .15
    DestinationCountryCode -- С
    т
    р
    а
    н
    а
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    .
    Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    / 00 (
    н
    е
    и
    з
    в
    е
    с
    т
    н
    а
    ).
    Г
    р
    17,
    п
    о
    д
    р
    а
    з
    д
    е
    л
    a
    DestinationCountryName -- С
    т
    р
    а
    н
    а
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    .
    К
    р
    а
    т
    к
    о
    е
    н
    а
    з
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    /
    Н
    Е
    И
    З
    В
    Е
    С
    Т
    Н
    А
    .
    Г
    р
    17
    RBDestinationCountryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ы
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    .
    Г
    р
    .17,
    п
    о
    д
    р
    а
    з
    д
    е
    л
    b
    BorderCustomsOffice -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    в
    ъ
    е
    з
    д
    а
    и
    л
    и
    в
    ы
    е
    з
    д
    а
    .
    Г
    р
    .29
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContainerIndicator=None, DispatchCountryCode=None, RBDispatchCountryCode=None, DispatchCountryName=None, DestinationCountryCode=None, DestinationCountryName=None, RBDestinationCountryCode=None, BorderCustomsOffice=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ContainerIndicator = ContainerIndicator
        self.validate_IndicatorType(self.ContainerIndicator)
        self.ContainerIndicator_nsprefix_ = "clt_ru"
        self.DispatchCountryCode = DispatchCountryCode
        self.validate_CountryA2CodeType(self.DispatchCountryCode)
        self.DispatchCountryCode_nsprefix_ = "clt_ru"
        self.RBDispatchCountryCode = RBDispatchCountryCode
        self.validate_Code3Type(self.RBDispatchCountryCode)
        self.RBDispatchCountryCode_nsprefix_ = "clt_ru"
        self.DispatchCountryName = DispatchCountryName
        self.validate_CountryNameType(self.DispatchCountryName)
        self.DispatchCountryName_nsprefix_ = "clt_ru"
        self.DestinationCountryCode = DestinationCountryCode
        self.validate_CountryA2CodeType(self.DestinationCountryCode)
        self.DestinationCountryCode_nsprefix_ = "clt_ru"
        self.DestinationCountryName = DestinationCountryName
        self.validate_CountryNameType(self.DestinationCountryName)
        self.DestinationCountryName_nsprefix_ = "clt_ru"
        self.RBDestinationCountryCode = RBDestinationCountryCode
        self.validate_Code3Type(self.RBDestinationCountryCode)
        self.RBDestinationCountryCode_nsprefix_ = "clt_ru"
        if BorderCustomsOffice is None:
            self.BorderCustomsOffice = []
        else:
            self.BorderCustomsOffice = BorderCustomsOffice
        self.BorderCustomsOffice_nsprefix_ = "cat_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUConsigmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUConsigmentType.subclass:
            return CUConsigmentType.subclass(*args_, **kwargs_)
        else:
            return CUConsigmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContainerIndicator(self):
        return self.ContainerIndicator
    def set_ContainerIndicator(self, ContainerIndicator):
        self.ContainerIndicator = ContainerIndicator
    def get_DispatchCountryCode(self):
        return self.DispatchCountryCode
    def set_DispatchCountryCode(self, DispatchCountryCode):
        self.DispatchCountryCode = DispatchCountryCode
    def get_RBDispatchCountryCode(self):
        return self.RBDispatchCountryCode
    def set_RBDispatchCountryCode(self, RBDispatchCountryCode):
        self.RBDispatchCountryCode = RBDispatchCountryCode
    def get_DispatchCountryName(self):
        return self.DispatchCountryName
    def set_DispatchCountryName(self, DispatchCountryName):
        self.DispatchCountryName = DispatchCountryName
    def get_DestinationCountryCode(self):
        return self.DestinationCountryCode
    def set_DestinationCountryCode(self, DestinationCountryCode):
        self.DestinationCountryCode = DestinationCountryCode
    def get_DestinationCountryName(self):
        return self.DestinationCountryName
    def set_DestinationCountryName(self, DestinationCountryName):
        self.DestinationCountryName = DestinationCountryName
    def get_RBDestinationCountryCode(self):
        return self.RBDestinationCountryCode
    def set_RBDestinationCountryCode(self, RBDestinationCountryCode):
        self.RBDestinationCountryCode = RBDestinationCountryCode
    def get_BorderCustomsOffice(self):
        return self.BorderCustomsOffice
    def set_BorderCustomsOffice(self, BorderCustomsOffice):
        self.BorderCustomsOffice = BorderCustomsOffice
    def add_BorderCustomsOffice(self, value):
        self.BorderCustomsOffice.append(value)
    def insert_BorderCustomsOffice_at(self, index, value):
        self.BorderCustomsOffice.insert(index, value)
    def replace_BorderCustomsOffice_at(self, index, value):
        self.BorderCustomsOffice[index] = value
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_IndicatorType(self, value):
        result = True
        # Validate type IndicatorType, a restriction on CategoryCust:IndicatorCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ContainerIndicator is not None or
            self.DispatchCountryCode is not None or
            self.RBDispatchCountryCode is not None or
            self.DispatchCountryName is not None or
            self.DestinationCountryCode is not None or
            self.DestinationCountryName is not None or
            self.RBDestinationCountryCode is not None or
            self.BorderCustomsOffice
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUConsigmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUConsigmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUConsigmentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUConsigmentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUConsigmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUConsigmentType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUConsigmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContainerIndicator is not None:
            namespaceprefix_ = self.ContainerIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerIndicator>%s</%sContainerIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ContainerIndicator, input_name='ContainerIndicator'), namespaceprefix_ , eol_))
        if self.DispatchCountryCode is not None:
            namespaceprefix_ = self.DispatchCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DispatchCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispatchCountryCode>%s</%sDispatchCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DispatchCountryCode), input_name='DispatchCountryCode')), namespaceprefix_ , eol_))
        if self.RBDispatchCountryCode is not None:
            namespaceprefix_ = self.RBDispatchCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RBDispatchCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBDispatchCountryCode>%s</%sRBDispatchCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBDispatchCountryCode), input_name='RBDispatchCountryCode')), namespaceprefix_ , eol_))
        if self.DispatchCountryName is not None:
            namespaceprefix_ = self.DispatchCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.DispatchCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispatchCountryName>%s</%sDispatchCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DispatchCountryName), input_name='DispatchCountryName')), namespaceprefix_ , eol_))
        if self.DestinationCountryCode is not None:
            namespaceprefix_ = self.DestinationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCountryCode>%s</%sDestinationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCountryCode), input_name='DestinationCountryCode')), namespaceprefix_ , eol_))
        if self.DestinationCountryName is not None:
            namespaceprefix_ = self.DestinationCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCountryName>%s</%sDestinationCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCountryName), input_name='DestinationCountryName')), namespaceprefix_ , eol_))
        if self.RBDestinationCountryCode is not None:
            namespaceprefix_ = self.RBDestinationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RBDestinationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBDestinationCountryCode>%s</%sRBDestinationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBDestinationCountryCode), input_name='RBDestinationCountryCode')), namespaceprefix_ , eol_))
        for BorderCustomsOffice_ in self.BorderCustomsOffice:
            namespaceprefix_ = self.BorderCustomsOffice_nsprefix_ + ':' if (UseCapturedNS_ and self.BorderCustomsOffice_nsprefix_) else ''
            BorderCustomsOffice_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BorderCustomsOffice', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContainerIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ContainerIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'ContainerIndicator')
            self.ContainerIndicator = ival_
            self.ContainerIndicator_nsprefix_ = child_.prefix
            # validate type IndicatorType
            self.validate_IndicatorType(self.ContainerIndicator)
        elif nodeName_ == 'DispatchCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DispatchCountryCode')
            value_ = self.gds_validate_string(value_, node, 'DispatchCountryCode')
            self.DispatchCountryCode = value_
            self.DispatchCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.DispatchCountryCode)
        elif nodeName_ == 'RBDispatchCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBDispatchCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RBDispatchCountryCode')
            self.RBDispatchCountryCode = value_
            self.RBDispatchCountryCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.RBDispatchCountryCode)
        elif nodeName_ == 'DispatchCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DispatchCountryName')
            value_ = self.gds_validate_string(value_, node, 'DispatchCountryName')
            self.DispatchCountryName = value_
            self.DispatchCountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.DispatchCountryName)
        elif nodeName_ == 'DestinationCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DestinationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationCountryCode')
            self.DestinationCountryCode = value_
            self.DestinationCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.DestinationCountryCode)
        elif nodeName_ == 'DestinationCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationCountryName')
            value_ = self.gds_validate_string(value_, node, 'DestinationCountryName')
            self.DestinationCountryName = value_
            self.DestinationCountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.DestinationCountryName)
        elif nodeName_ == 'RBDestinationCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBDestinationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RBDestinationCountryCode')
            self.RBDestinationCountryCode = value_
            self.RBDestinationCountryCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.RBDestinationCountryCode)
        elif nodeName_ == 'BorderCustomsOffice':
            obj_ = CUCustomsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BorderCustomsOffice.append(obj_)
            obj_.original_tagname_ = 'BorderCustomsOffice'
# end class CUConsigmentType


class CUCustomsPaymentCalculationType(GeneratedsSuper):
    """CUCustomsPaymentCalculationType -- И
    с
    ч
    и
    с
    л
    е
    н
    и
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    PaymentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    л
    а
    т
    е
    ж
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    н
    а
    л
    о
    г
    о
    в
    ,
    с
    б
    о
    р
    о
    в
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    в
    з
    и
    м
    а
    н
    и
    е
    к
    о
    т
    о
    р
    ы
    х
    в
    о
    з
    л
    о
    ж
    е
    н
    о
    н
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    о
    р
    г
    а
    н
    ы
    PaymentAmount -- С
    у
    м
    м
    а
    п
    л
    а
    т
    е
    ж
    а
    PaymentCurrencyCode -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    у
    м
    м
    ы
    п
    л
    а
    т
    е
    ж
    а
    TaxBase -- О
    с
    н
    о
    в
    а
    н
    а
    ч
    и
    с
    л
    е
    н
    и
    я
    TaxBaseCurrencyCode -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    о
    с
    н
    о
    в
    ы
    н
    а
    ч
    и
    с
    л
    е
    н
    и
    я
    (
    а
    д
    в
    а
    л
    о
    р
    н
    а
    я
    с
    т
    а
    в
    к
    а
    )
    TaxBaseTNVEDQualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    о
    с
    н
    о
    в
    ы
    н
    а
    ч
    и
    с
    л
    е
    н
    и
    я
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    Rate -- С
    т
    а
    в
    к
    а
    /
    с
    т
    а
    в
    к
    а
    р
    е
    ф
    и
    н
    а
    н
    с
    и
    р
    о
    в
    а
    н
    и
    я
    RateTypeCode -- В
    и
    д
    с
    т
    а
    в
    к
    и
    (
    а
    д
    в
    а
    л
    о
    р
    н
    а
    я
    -
    «
    %
    »
    ,
    п
    р
    и
    з
    н
    а
    к
    с
    б
    о
    р
    о
    в
    д
    л
    я
    Р
    К
    -
    «
    S
    »
    ,
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    -
    «
    *
    »
    )
    RateCurrencyCode -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    т
    а
    в
    к
    и
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    RateTNVEDQualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    с
    т
    а
    в
    к
    и
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    WeightingFactor -- В
    е
    с
    о
    в
    о
    й
    к
    о
    э
    ф
    ф
    и
    ц
    и
    е
    н
    т
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    ComparisonOperationsSign -- З
    н
    а
    к
    о
    п
    е
    р
    а
    ц
    и
    и
    с
    р
    а
    в
    н
    е
    н
    и
    я
    (1 -
    м
    е
    н
    ь
    ш
    е
    , 2 -
    б
    о
    л
    ь
    ш
    е
    )
    Rate2 -- С
    т
    а
    в
    к
    а
    RateTypeCode2 -- В
    и
    д
    с
    т
    а
    в
    к
    и
    (
    а
    д
    в
    а
    л
    о
    р
    н
    а
    я
    -
    «
    %
    »
    ,
    п
    р
    и
    з
    н
    а
    к
    с
    б
    о
    р
    о
    в
    д
    л
    я
    Р
    К
    -
    «
    S
    »
    ,
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    -
    «
    *
    »
    )
    RateCurrencyCode2 -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    т
    а
    в
    к
    и
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    RateTNVEDQualifierCode2 -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    с
    т
    а
    в
    к
    и
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    WeightingFactor2 -- В
    е
    с
    о
    в
    о
    й
    к
    о
    э
    ф
    ф
    и
    ц
    и
    е
    н
    т
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    OperationsSign -- З
    н
    а
    к
    о
    п
    е
    р
    а
    ц
    и
    и
    Rate3 -- С
    т
    а
    в
    к
    а
    RateTypeCode3 -- В
    и
    д
    с
    т
    а
    в
    к
    и
    (
    а
    д
    в
    а
    л
    о
    р
    н
    а
    я
    -
    «
    %
    »
    ,
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    -
    «
    *
    »
    )
    RateCurrencyCode3 -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    т
    а
    в
    к
    и
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    RateTNVEDQualifierCode3 -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    с
    т
    а
    в
    к
    и
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    WeightingFactor3 -- В
    е
    с
    о
    в
    о
    й
    к
    о
    э
    ф
    ф
    и
    ц
    и
    е
    н
    т
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    ComparisonResult -- Р
    е
    з
    у
    л
    ь
    т
    а
    т
    в
    ы
    п
    о
    л
    н
    е
    н
    и
    я
    о
    п
    е
    р
    а
    ц
    и
    и
    с
    р
    а
    в
    н
    е
    н
    и
    я
    : 1 -
    и
    с
    т
    и
    н
    а
    ; 0 -
    л
    о
    ж
    ь
    RateUseDate -- Д
    а
    т
    а
    п
    р
    и
    м
    е
    н
    е
    н
    и
    я
    с
    т
    а
    в
    к
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    л
    а
    т
    е
    ж
    а
    PaymentCode -- К
    о
    д
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    е
    й
    у
    п
    л
    а
    т
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    в
    з
    и
    м
    а
    н
    и
    е
    к
    о
    т
    о
    р
    ы
    х
    в
    о
    з
    л
    о
    ж
    е
    н
    о
    н
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    о
    р
    г
    а
    н
    ы
    NumberDays -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    д
    н
    е
    й
    NumberStages -- Ч
    и
    с
    л
    о
    э
    т
    а
    п
    о
    в
    NumberMonths -- Ч
    и
    с
    л
    о
    п
    о
    л
    н
    ы
    х
    и
    н
    е
    п
    о
    л
    н
    ы
    х
    к
    а
    л
    е
    н
    д
    а
    р
    н
    ы
    х
    м
    е
    с
    я
    ц
    е
    в
    TariffRate -- Т
    а
    р
    и
    ф
    н
    ы
    й
    к
    о
    э
    ф
    ф
    и
    ц
    и
    е
    н
    т
    LineNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    с
    т
    р
    о
    к
    и
    и
    з
    г
    р
    .40
    NumberGroup -- Н
    о
    м
    е
    р
    г
    р
    у
    п
    п
    ы
    .
    Д
    л
    я
    Р
    Ф
    PrecedingDocumentGoodsNumeric -- Н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    в
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentModeCode=None, PaymentAmount=None, PaymentCurrencyCode=None, TaxBase=None, TaxBaseCurrencyCode=None, TaxBaseTNVEDQualifierCode=None, Rate=None, RateTypeCode=None, RateCurrencyCode=None, RateTNVEDQualifierCode=None, WeightingFactor=None, ComparisonOperationsSign=None, Rate2=None, RateTypeCode2=None, RateCurrencyCode2=None, RateTNVEDQualifierCode2=None, WeightingFactor2=None, OperationsSign=None, Rate3=None, RateTypeCode3=None, RateCurrencyCode3=None, RateTNVEDQualifierCode3=None, WeightingFactor3=None, ComparisonResult=None, RateUseDate=None, PaymentCode=None, NumberDays=None, NumberStages=None, NumberMonths=None, TariffRate=None, LineNumber=None, NumberGroup=None, PrecedingDocumentGoodsNumeric=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.PaymentModeCode = PaymentModeCode
        self.validate_CUCustomsPaymentCodeType(self.PaymentModeCode)
        self.PaymentModeCode_nsprefix_ = "clt_ru"
        self.PaymentAmount = PaymentAmount
        self.validate_AmountType(self.PaymentAmount)
        self.PaymentAmount_nsprefix_ = "clt_ru"
        self.PaymentCurrencyCode = PaymentCurrencyCode
        self.validate_CurrencyN3CodeType(self.PaymentCurrencyCode)
        self.PaymentCurrencyCode_nsprefix_ = "clt_ru"
        self.TaxBase = TaxBase
        self.validate_QuantityBasisType(self.TaxBase)
        self.TaxBase_nsprefix_ = "clt_ru"
        self.TaxBaseCurrencyCode = TaxBaseCurrencyCode
        self.validate_CurrencyN3CodeType(self.TaxBaseCurrencyCode)
        self.TaxBaseCurrencyCode_nsprefix_ = "clt_ru"
        self.TaxBaseTNVEDQualifierCode = TaxBaseTNVEDQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.TaxBaseTNVEDQualifierCode)
        self.TaxBaseTNVEDQualifierCode_nsprefix_ = "clt_ru"
        self.Rate = Rate
        self.validate_RateType(self.Rate)
        self.Rate_nsprefix_ = "cltESAD_cu"
        self.RateTypeCode = RateTypeCode
        self.validate_LetterIndicatorType(self.RateTypeCode)
        self.RateTypeCode_nsprefix_ = "clt_ru"
        self.RateCurrencyCode = RateCurrencyCode
        self.validate_CurrencyN3CodeType(self.RateCurrencyCode)
        self.RateCurrencyCode_nsprefix_ = "clt_ru"
        self.RateTNVEDQualifierCode = RateTNVEDQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.RateTNVEDQualifierCode)
        self.RateTNVEDQualifierCode_nsprefix_ = "clt_ru"
        self.WeightingFactor = WeightingFactor
        self.validate_WeightingFactorType(self.WeightingFactor)
        self.WeightingFactor_nsprefix_ = "cltESAD_cu"
        self.ComparisonOperationsSign = ComparisonOperationsSign
        self.validate_Numeric1Type(self.ComparisonOperationsSign)
        self.ComparisonOperationsSign_nsprefix_ = "clt_ru"
        self.Rate2 = Rate2
        self.validate_RateType(self.Rate2)
        self.Rate2_nsprefix_ = "cltESAD_cu"
        self.RateTypeCode2 = RateTypeCode2
        self.validate_LetterIndicatorType(self.RateTypeCode2)
        self.RateTypeCode2_nsprefix_ = "clt_ru"
        self.RateCurrencyCode2 = RateCurrencyCode2
        self.validate_CurrencyN3CodeType(self.RateCurrencyCode2)
        self.RateCurrencyCode2_nsprefix_ = "clt_ru"
        self.RateTNVEDQualifierCode2 = RateTNVEDQualifierCode2
        self.validate_MeasureUnitQualifierCodeType(self.RateTNVEDQualifierCode2)
        self.RateTNVEDQualifierCode2_nsprefix_ = "clt_ru"
        self.WeightingFactor2 = WeightingFactor2
        self.validate_WeightingFactorType(self.WeightingFactor2)
        self.WeightingFactor2_nsprefix_ = "cltESAD_cu"
        self.OperationsSign = OperationsSign
        self.validate_LetterIndicatorType(self.OperationsSign)
        self.OperationsSign_nsprefix_ = "clt_ru"
        self.Rate3 = Rate3
        self.validate_RateType(self.Rate3)
        self.Rate3_nsprefix_ = "cltESAD_cu"
        self.RateTypeCode3 = RateTypeCode3
        self.validate_LetterIndicatorType(self.RateTypeCode3)
        self.RateTypeCode3_nsprefix_ = "clt_ru"
        self.RateCurrencyCode3 = RateCurrencyCode3
        self.validate_CurrencyN3CodeType(self.RateCurrencyCode3)
        self.RateCurrencyCode3_nsprefix_ = "clt_ru"
        self.RateTNVEDQualifierCode3 = RateTNVEDQualifierCode3
        self.validate_MeasureUnitQualifierCodeType(self.RateTNVEDQualifierCode3)
        self.RateTNVEDQualifierCode3_nsprefix_ = "clt_ru"
        self.WeightingFactor3 = WeightingFactor3
        self.validate_WeightingFactorType(self.WeightingFactor3)
        self.WeightingFactor3_nsprefix_ = "cltESAD_cu"
        self.ComparisonResult = ComparisonResult
        self.validate_IndicatorType(self.ComparisonResult)
        self.ComparisonResult_nsprefix_ = "clt_ru"
        if isinstance(RateUseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RateUseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RateUseDate
        self.RateUseDate = initvalue_
        self.RateUseDate_nsprefix_ = "clt_ru"
        self.PaymentCode = PaymentCode
        self.validate_Code2Type(self.PaymentCode)
        self.PaymentCode_nsprefix_ = "clt_ru"
        self.NumberDays = NumberDays
        self.validate_Count4Type(self.NumberDays)
        self.NumberDays_nsprefix_ = "clt_ru"
        self.NumberStages = NumberStages
        self.validate_Count3Type(self.NumberStages)
        self.NumberStages_nsprefix_ = "clt_ru"
        self.NumberMonths = NumberMonths
        self.validate_Count3Type(self.NumberMonths)
        self.NumberMonths_nsprefix_ = "clt_ru"
        self.TariffRate = TariffRate
        self.validate_Quantity4point2Type(self.TariffRate)
        self.TariffRate_nsprefix_ = "clt_ru"
        self.LineNumber = LineNumber
        self.validate_SheetNumberType(self.LineNumber)
        self.LineNumber_nsprefix_ = "clt_ru"
        self.NumberGroup = NumberGroup
        self.validate_Text50Type(self.NumberGroup)
        self.NumberGroup_nsprefix_ = "clt_ru"
        self.PrecedingDocumentGoodsNumeric = PrecedingDocumentGoodsNumeric
        self.validate_Count3Type(self.PrecedingDocumentGoodsNumeric)
        self.PrecedingDocumentGoodsNumeric_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUCustomsPaymentCalculationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUCustomsPaymentCalculationType.subclass:
            return CUCustomsPaymentCalculationType.subclass(*args_, **kwargs_)
        else:
            return CUCustomsPaymentCalculationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentModeCode(self):
        return self.PaymentModeCode
    def set_PaymentModeCode(self, PaymentModeCode):
        self.PaymentModeCode = PaymentModeCode
    def get_PaymentAmount(self):
        return self.PaymentAmount
    def set_PaymentAmount(self, PaymentAmount):
        self.PaymentAmount = PaymentAmount
    def get_PaymentCurrencyCode(self):
        return self.PaymentCurrencyCode
    def set_PaymentCurrencyCode(self, PaymentCurrencyCode):
        self.PaymentCurrencyCode = PaymentCurrencyCode
    def get_TaxBase(self):
        return self.TaxBase
    def set_TaxBase(self, TaxBase):
        self.TaxBase = TaxBase
    def get_TaxBaseCurrencyCode(self):
        return self.TaxBaseCurrencyCode
    def set_TaxBaseCurrencyCode(self, TaxBaseCurrencyCode):
        self.TaxBaseCurrencyCode = TaxBaseCurrencyCode
    def get_TaxBaseTNVEDQualifierCode(self):
        return self.TaxBaseTNVEDQualifierCode
    def set_TaxBaseTNVEDQualifierCode(self, TaxBaseTNVEDQualifierCode):
        self.TaxBaseTNVEDQualifierCode = TaxBaseTNVEDQualifierCode
    def get_Rate(self):
        return self.Rate
    def set_Rate(self, Rate):
        self.Rate = Rate
    def get_RateTypeCode(self):
        return self.RateTypeCode
    def set_RateTypeCode(self, RateTypeCode):
        self.RateTypeCode = RateTypeCode
    def get_RateCurrencyCode(self):
        return self.RateCurrencyCode
    def set_RateCurrencyCode(self, RateCurrencyCode):
        self.RateCurrencyCode = RateCurrencyCode
    def get_RateTNVEDQualifierCode(self):
        return self.RateTNVEDQualifierCode
    def set_RateTNVEDQualifierCode(self, RateTNVEDQualifierCode):
        self.RateTNVEDQualifierCode = RateTNVEDQualifierCode
    def get_WeightingFactor(self):
        return self.WeightingFactor
    def set_WeightingFactor(self, WeightingFactor):
        self.WeightingFactor = WeightingFactor
    def get_ComparisonOperationsSign(self):
        return self.ComparisonOperationsSign
    def set_ComparisonOperationsSign(self, ComparisonOperationsSign):
        self.ComparisonOperationsSign = ComparisonOperationsSign
    def get_Rate2(self):
        return self.Rate2
    def set_Rate2(self, Rate2):
        self.Rate2 = Rate2
    def get_RateTypeCode2(self):
        return self.RateTypeCode2
    def set_RateTypeCode2(self, RateTypeCode2):
        self.RateTypeCode2 = RateTypeCode2
    def get_RateCurrencyCode2(self):
        return self.RateCurrencyCode2
    def set_RateCurrencyCode2(self, RateCurrencyCode2):
        self.RateCurrencyCode2 = RateCurrencyCode2
    def get_RateTNVEDQualifierCode2(self):
        return self.RateTNVEDQualifierCode2
    def set_RateTNVEDQualifierCode2(self, RateTNVEDQualifierCode2):
        self.RateTNVEDQualifierCode2 = RateTNVEDQualifierCode2
    def get_WeightingFactor2(self):
        return self.WeightingFactor2
    def set_WeightingFactor2(self, WeightingFactor2):
        self.WeightingFactor2 = WeightingFactor2
    def get_OperationsSign(self):
        return self.OperationsSign
    def set_OperationsSign(self, OperationsSign):
        self.OperationsSign = OperationsSign
    def get_Rate3(self):
        return self.Rate3
    def set_Rate3(self, Rate3):
        self.Rate3 = Rate3
    def get_RateTypeCode3(self):
        return self.RateTypeCode3
    def set_RateTypeCode3(self, RateTypeCode3):
        self.RateTypeCode3 = RateTypeCode3
    def get_RateCurrencyCode3(self):
        return self.RateCurrencyCode3
    def set_RateCurrencyCode3(self, RateCurrencyCode3):
        self.RateCurrencyCode3 = RateCurrencyCode3
    def get_RateTNVEDQualifierCode3(self):
        return self.RateTNVEDQualifierCode3
    def set_RateTNVEDQualifierCode3(self, RateTNVEDQualifierCode3):
        self.RateTNVEDQualifierCode3 = RateTNVEDQualifierCode3
    def get_WeightingFactor3(self):
        return self.WeightingFactor3
    def set_WeightingFactor3(self, WeightingFactor3):
        self.WeightingFactor3 = WeightingFactor3
    def get_ComparisonResult(self):
        return self.ComparisonResult
    def set_ComparisonResult(self, ComparisonResult):
        self.ComparisonResult = ComparisonResult
    def get_RateUseDate(self):
        return self.RateUseDate
    def set_RateUseDate(self, RateUseDate):
        self.RateUseDate = RateUseDate
    def get_PaymentCode(self):
        return self.PaymentCode
    def set_PaymentCode(self, PaymentCode):
        self.PaymentCode = PaymentCode
    def get_NumberDays(self):
        return self.NumberDays
    def set_NumberDays(self, NumberDays):
        self.NumberDays = NumberDays
    def get_NumberStages(self):
        return self.NumberStages
    def set_NumberStages(self, NumberStages):
        self.NumberStages = NumberStages
    def get_NumberMonths(self):
        return self.NumberMonths
    def set_NumberMonths(self, NumberMonths):
        self.NumberMonths = NumberMonths
    def get_TariffRate(self):
        return self.TariffRate
    def set_TariffRate(self, TariffRate):
        self.TariffRate = TariffRate
    def get_LineNumber(self):
        return self.LineNumber
    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber
    def get_NumberGroup(self):
        return self.NumberGroup
    def set_NumberGroup(self, NumberGroup):
        self.NumberGroup = NumberGroup
    def get_PrecedingDocumentGoodsNumeric(self):
        return self.PrecedingDocumentGoodsNumeric
    def set_PrecedingDocumentGoodsNumeric(self, PrecedingDocumentGoodsNumeric):
        self.PrecedingDocumentGoodsNumeric = PrecedingDocumentGoodsNumeric
    def validate_CUCustomsPaymentCodeType(self, value):
        result = True
        # Validate type CUCustomsPaymentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CUCustomsPaymentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyN3CodeType(self, value):
        result = True
        # Validate type CurrencyN3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CurrencyN3CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CurrencyN3CodeType_patterns_, ))
                result = False
        return result
    validate_CurrencyN3CodeType_patterns_ = [['^(\\d{3})$']]
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_RateType(self, value):
        result = True
        # Validate type RateType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on RateType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_WeightingFactorType(self, value):
        result = True
        # Validate type WeightingFactorType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on WeightingFactorType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on WeightingFactorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Numeric1Type(self, value):
        result = True
        # Validate type Numeric1Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_IndicatorType(self, value):
        result = True
        # Validate type IndicatorType, a restriction on CategoryCust:IndicatorCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count4Type(self, value):
        result = True
        # Validate type Count4Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count4Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count4Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Quantity4point2Type(self, value):
        result = True
        # Validate type Quantity4point2Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity4point2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity4point2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_SheetNumberType(self, value):
        result = True
        # Validate type SheetNumberType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PaymentModeCode is not None or
            self.PaymentAmount is not None or
            self.PaymentCurrencyCode is not None or
            self.TaxBase is not None or
            self.TaxBaseCurrencyCode is not None or
            self.TaxBaseTNVEDQualifierCode is not None or
            self.Rate is not None or
            self.RateTypeCode is not None or
            self.RateCurrencyCode is not None or
            self.RateTNVEDQualifierCode is not None or
            self.WeightingFactor is not None or
            self.ComparisonOperationsSign is not None or
            self.Rate2 is not None or
            self.RateTypeCode2 is not None or
            self.RateCurrencyCode2 is not None or
            self.RateTNVEDQualifierCode2 is not None or
            self.WeightingFactor2 is not None or
            self.OperationsSign is not None or
            self.Rate3 is not None or
            self.RateTypeCode3 is not None or
            self.RateCurrencyCode3 is not None or
            self.RateTNVEDQualifierCode3 is not None or
            self.WeightingFactor3 is not None or
            self.ComparisonResult is not None or
            self.RateUseDate is not None or
            self.PaymentCode is not None or
            self.NumberDays is not None or
            self.NumberStages is not None or
            self.NumberMonths is not None or
            self.TariffRate is not None or
            self.LineNumber is not None or
            self.NumberGroup is not None or
            self.PrecedingDocumentGoodsNumeric is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='CUCustomsPaymentCalculationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUCustomsPaymentCalculationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUCustomsPaymentCalculationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUCustomsPaymentCalculationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUCustomsPaymentCalculationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUCustomsPaymentCalculationType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='CUCustomsPaymentCalculationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentModeCode is not None:
            namespaceprefix_ = self.PaymentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentModeCode>%s</%sPaymentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentModeCode), input_name='PaymentModeCode')), namespaceprefix_ , eol_))
        if self.PaymentAmount is not None:
            namespaceprefix_ = self.PaymentAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentAmount>%s</%sPaymentAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PaymentAmount, input_name='PaymentAmount'), namespaceprefix_ , eol_))
        if self.PaymentCurrencyCode is not None:
            namespaceprefix_ = self.PaymentCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentCurrencyCode>%s</%sPaymentCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentCurrencyCode), input_name='PaymentCurrencyCode')), namespaceprefix_ , eol_))
        if self.TaxBase is not None:
            namespaceprefix_ = self.TaxBase_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxBase_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxBase>%s</%sTaxBase>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TaxBase, input_name='TaxBase'), namespaceprefix_ , eol_))
        if self.TaxBaseCurrencyCode is not None:
            namespaceprefix_ = self.TaxBaseCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxBaseCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxBaseCurrencyCode>%s</%sTaxBaseCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxBaseCurrencyCode), input_name='TaxBaseCurrencyCode')), namespaceprefix_ , eol_))
        if self.TaxBaseTNVEDQualifierCode is not None:
            namespaceprefix_ = self.TaxBaseTNVEDQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxBaseTNVEDQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxBaseTNVEDQualifierCode>%s</%sTaxBaseTNVEDQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxBaseTNVEDQualifierCode), input_name='TaxBaseTNVEDQualifierCode')), namespaceprefix_ , eol_))
        if self.Rate is not None:
            namespaceprefix_ = self.Rate_nsprefix_ + ':' if (UseCapturedNS_ and self.Rate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate>%s</%sRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Rate, input_name='Rate'), namespaceprefix_ , eol_))
        if self.RateTypeCode is not None:
            namespaceprefix_ = self.RateTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeCode>%s</%sRateTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeCode), input_name='RateTypeCode')), namespaceprefix_ , eol_))
        if self.RateCurrencyCode is not None:
            namespaceprefix_ = self.RateCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RateCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateCurrencyCode>%s</%sRateCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateCurrencyCode), input_name='RateCurrencyCode')), namespaceprefix_ , eol_))
        if self.RateTNVEDQualifierCode is not None:
            namespaceprefix_ = self.RateTNVEDQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTNVEDQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTNVEDQualifierCode>%s</%sRateTNVEDQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTNVEDQualifierCode), input_name='RateTNVEDQualifierCode')), namespaceprefix_ , eol_))
        if self.WeightingFactor is not None:
            namespaceprefix_ = self.WeightingFactor_nsprefix_ + ':' if (UseCapturedNS_ and self.WeightingFactor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightingFactor>%s</%sWeightingFactor>%s' % (namespaceprefix_ , self.gds_format_decimal(self.WeightingFactor, input_name='WeightingFactor'), namespaceprefix_ , eol_))
        if self.ComparisonOperationsSign is not None:
            namespaceprefix_ = self.ComparisonOperationsSign_nsprefix_ + ':' if (UseCapturedNS_ and self.ComparisonOperationsSign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComparisonOperationsSign>%s</%sComparisonOperationsSign>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ComparisonOperationsSign, input_name='ComparisonOperationsSign'), namespaceprefix_ , eol_))
        if self.Rate2 is not None:
            namespaceprefix_ = self.Rate2_nsprefix_ + ':' if (UseCapturedNS_ and self.Rate2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate2>%s</%sRate2>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Rate2, input_name='Rate2'), namespaceprefix_ , eol_))
        if self.RateTypeCode2 is not None:
            namespaceprefix_ = self.RateTypeCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeCode2>%s</%sRateTypeCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeCode2), input_name='RateTypeCode2')), namespaceprefix_ , eol_))
        if self.RateCurrencyCode2 is not None:
            namespaceprefix_ = self.RateCurrencyCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.RateCurrencyCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateCurrencyCode2>%s</%sRateCurrencyCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateCurrencyCode2), input_name='RateCurrencyCode2')), namespaceprefix_ , eol_))
        if self.RateTNVEDQualifierCode2 is not None:
            namespaceprefix_ = self.RateTNVEDQualifierCode2_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTNVEDQualifierCode2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTNVEDQualifierCode2>%s</%sRateTNVEDQualifierCode2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTNVEDQualifierCode2), input_name='RateTNVEDQualifierCode2')), namespaceprefix_ , eol_))
        if self.WeightingFactor2 is not None:
            namespaceprefix_ = self.WeightingFactor2_nsprefix_ + ':' if (UseCapturedNS_ and self.WeightingFactor2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightingFactor2>%s</%sWeightingFactor2>%s' % (namespaceprefix_ , self.gds_format_decimal(self.WeightingFactor2, input_name='WeightingFactor2'), namespaceprefix_ , eol_))
        if self.OperationsSign is not None:
            namespaceprefix_ = self.OperationsSign_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationsSign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperationsSign>%s</%sOperationsSign>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperationsSign), input_name='OperationsSign')), namespaceprefix_ , eol_))
        if self.Rate3 is not None:
            namespaceprefix_ = self.Rate3_nsprefix_ + ':' if (UseCapturedNS_ and self.Rate3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate3>%s</%sRate3>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Rate3, input_name='Rate3'), namespaceprefix_ , eol_))
        if self.RateTypeCode3 is not None:
            namespaceprefix_ = self.RateTypeCode3_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeCode3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeCode3>%s</%sRateTypeCode3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeCode3), input_name='RateTypeCode3')), namespaceprefix_ , eol_))
        if self.RateCurrencyCode3 is not None:
            namespaceprefix_ = self.RateCurrencyCode3_nsprefix_ + ':' if (UseCapturedNS_ and self.RateCurrencyCode3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateCurrencyCode3>%s</%sRateCurrencyCode3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateCurrencyCode3), input_name='RateCurrencyCode3')), namespaceprefix_ , eol_))
        if self.RateTNVEDQualifierCode3 is not None:
            namespaceprefix_ = self.RateTNVEDQualifierCode3_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTNVEDQualifierCode3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTNVEDQualifierCode3>%s</%sRateTNVEDQualifierCode3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTNVEDQualifierCode3), input_name='RateTNVEDQualifierCode3')), namespaceprefix_ , eol_))
        if self.WeightingFactor3 is not None:
            namespaceprefix_ = self.WeightingFactor3_nsprefix_ + ':' if (UseCapturedNS_ and self.WeightingFactor3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightingFactor3>%s</%sWeightingFactor3>%s' % (namespaceprefix_ , self.gds_format_decimal(self.WeightingFactor3, input_name='WeightingFactor3'), namespaceprefix_ , eol_))
        if self.ComparisonResult is not None:
            namespaceprefix_ = self.ComparisonResult_nsprefix_ + ':' if (UseCapturedNS_ and self.ComparisonResult_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComparisonResult>%s</%sComparisonResult>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ComparisonResult, input_name='ComparisonResult'), namespaceprefix_ , eol_))
        if self.RateUseDate is not None:
            namespaceprefix_ = self.RateUseDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RateUseDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateUseDate>%s</%sRateUseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RateUseDate, input_name='RateUseDate'), namespaceprefix_ , eol_))
        if self.PaymentCode is not None:
            namespaceprefix_ = self.PaymentCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentCode>%s</%sPaymentCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentCode), input_name='PaymentCode')), namespaceprefix_ , eol_))
        if self.NumberDays is not None:
            namespaceprefix_ = self.NumberDays_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberDays>%s</%sNumberDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberDays, input_name='NumberDays'), namespaceprefix_ , eol_))
        if self.NumberStages is not None:
            namespaceprefix_ = self.NumberStages_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberStages_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberStages>%s</%sNumberStages>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberStages, input_name='NumberStages'), namespaceprefix_ , eol_))
        if self.NumberMonths is not None:
            namespaceprefix_ = self.NumberMonths_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberMonths_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberMonths>%s</%sNumberMonths>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberMonths, input_name='NumberMonths'), namespaceprefix_ , eol_))
        if self.TariffRate is not None:
            namespaceprefix_ = self.TariffRate_nsprefix_ + ':' if (UseCapturedNS_ and self.TariffRate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTariffRate>%s</%sTariffRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TariffRate, input_name='TariffRate'), namespaceprefix_ , eol_))
        if self.LineNumber is not None:
            namespaceprefix_ = self.LineNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LineNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineNumber>%s</%sLineNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(self.LineNumber, input_name='LineNumber'), namespaceprefix_ , eol_))
        if self.NumberGroup is not None:
            namespaceprefix_ = self.NumberGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberGroup>%s</%sNumberGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberGroup), input_name='NumberGroup')), namespaceprefix_ , eol_))
        if self.PrecedingDocumentGoodsNumeric is not None:
            namespaceprefix_ = self.PrecedingDocumentGoodsNumeric_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentGoodsNumeric_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentGoodsNumeric>%s</%sPrecedingDocumentGoodsNumeric>%s' % (namespaceprefix_ , self.gds_format_integer(self.PrecedingDocumentGoodsNumeric, input_name='PrecedingDocumentGoodsNumeric'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentModeCode')
            self.PaymentModeCode = value_
            self.PaymentModeCode_nsprefix_ = child_.prefix
            # validate type CUCustomsPaymentCodeType
            self.validate_CUCustomsPaymentCodeType(self.PaymentModeCode)
        elif nodeName_ == 'PaymentAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PaymentAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'PaymentAmount')
            self.PaymentAmount = fval_
            self.PaymentAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.PaymentAmount)
        elif nodeName_ == 'PaymentCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentCurrencyCode')
            self.PaymentCurrencyCode = value_
            self.PaymentCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.PaymentCurrencyCode)
        elif nodeName_ == 'TaxBase' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TaxBase')
            fval_ = self.gds_validate_decimal(fval_, node, 'TaxBase')
            self.TaxBase = fval_
            self.TaxBase_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.TaxBase)
        elif nodeName_ == 'TaxBaseCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TaxBaseCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'TaxBaseCurrencyCode')
            self.TaxBaseCurrencyCode = value_
            self.TaxBaseCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.TaxBaseCurrencyCode)
        elif nodeName_ == 'TaxBaseTNVEDQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TaxBaseTNVEDQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'TaxBaseTNVEDQualifierCode')
            self.TaxBaseTNVEDQualifierCode = value_
            self.TaxBaseTNVEDQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.TaxBaseTNVEDQualifierCode)
        elif nodeName_ == 'Rate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Rate')
            fval_ = self.gds_validate_decimal(fval_, node, 'Rate')
            self.Rate = fval_
            self.Rate_nsprefix_ = child_.prefix
            # validate type RateType
            self.validate_RateType(self.Rate)
        elif nodeName_ == 'RateTypeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateTypeCode')
            value_ = self.gds_validate_string(value_, node, 'RateTypeCode')
            self.RateTypeCode = value_
            self.RateTypeCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.RateTypeCode)
        elif nodeName_ == 'RateCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'RateCurrencyCode')
            self.RateCurrencyCode = value_
            self.RateCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.RateCurrencyCode)
        elif nodeName_ == 'RateTNVEDQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateTNVEDQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'RateTNVEDQualifierCode')
            self.RateTNVEDQualifierCode = value_
            self.RateTNVEDQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.RateTNVEDQualifierCode)
        elif nodeName_ == 'WeightingFactor' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'WeightingFactor')
            fval_ = self.gds_validate_decimal(fval_, node, 'WeightingFactor')
            self.WeightingFactor = fval_
            self.WeightingFactor_nsprefix_ = child_.prefix
            # validate type WeightingFactorType
            self.validate_WeightingFactorType(self.WeightingFactor)
        elif nodeName_ == 'ComparisonOperationsSign' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ComparisonOperationsSign')
            fval_ = self.gds_validate_decimal(fval_, node, 'ComparisonOperationsSign')
            self.ComparisonOperationsSign = fval_
            self.ComparisonOperationsSign_nsprefix_ = child_.prefix
            # validate type Numeric1Type
            self.validate_Numeric1Type(self.ComparisonOperationsSign)
        elif nodeName_ == 'Rate2' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Rate2')
            fval_ = self.gds_validate_decimal(fval_, node, 'Rate2')
            self.Rate2 = fval_
            self.Rate2_nsprefix_ = child_.prefix
            # validate type RateType
            self.validate_RateType(self.Rate2)
        elif nodeName_ == 'RateTypeCode2':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateTypeCode2')
            value_ = self.gds_validate_string(value_, node, 'RateTypeCode2')
            self.RateTypeCode2 = value_
            self.RateTypeCode2_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.RateTypeCode2)
        elif nodeName_ == 'RateCurrencyCode2':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateCurrencyCode2')
            value_ = self.gds_validate_string(value_, node, 'RateCurrencyCode2')
            self.RateCurrencyCode2 = value_
            self.RateCurrencyCode2_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.RateCurrencyCode2)
        elif nodeName_ == 'RateTNVEDQualifierCode2':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateTNVEDQualifierCode2')
            value_ = self.gds_validate_string(value_, node, 'RateTNVEDQualifierCode2')
            self.RateTNVEDQualifierCode2 = value_
            self.RateTNVEDQualifierCode2_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.RateTNVEDQualifierCode2)
        elif nodeName_ == 'WeightingFactor2' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'WeightingFactor2')
            fval_ = self.gds_validate_decimal(fval_, node, 'WeightingFactor2')
            self.WeightingFactor2 = fval_
            self.WeightingFactor2_nsprefix_ = child_.prefix
            # validate type WeightingFactorType
            self.validate_WeightingFactorType(self.WeightingFactor2)
        elif nodeName_ == 'OperationsSign':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OperationsSign')
            value_ = self.gds_validate_string(value_, node, 'OperationsSign')
            self.OperationsSign = value_
            self.OperationsSign_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.OperationsSign)
        elif nodeName_ == 'Rate3' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Rate3')
            fval_ = self.gds_validate_decimal(fval_, node, 'Rate3')
            self.Rate3 = fval_
            self.Rate3_nsprefix_ = child_.prefix
            # validate type RateType
            self.validate_RateType(self.Rate3)
        elif nodeName_ == 'RateTypeCode3':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateTypeCode3')
            value_ = self.gds_validate_string(value_, node, 'RateTypeCode3')
            self.RateTypeCode3 = value_
            self.RateTypeCode3_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.RateTypeCode3)
        elif nodeName_ == 'RateCurrencyCode3':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateCurrencyCode3')
            value_ = self.gds_validate_string(value_, node, 'RateCurrencyCode3')
            self.RateCurrencyCode3 = value_
            self.RateCurrencyCode3_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.RateCurrencyCode3)
        elif nodeName_ == 'RateTNVEDQualifierCode3':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateTNVEDQualifierCode3')
            value_ = self.gds_validate_string(value_, node, 'RateTNVEDQualifierCode3')
            self.RateTNVEDQualifierCode3 = value_
            self.RateTNVEDQualifierCode3_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.RateTNVEDQualifierCode3)
        elif nodeName_ == 'WeightingFactor3' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'WeightingFactor3')
            fval_ = self.gds_validate_decimal(fval_, node, 'WeightingFactor3')
            self.WeightingFactor3 = fval_
            self.WeightingFactor3_nsprefix_ = child_.prefix
            # validate type WeightingFactorType
            self.validate_WeightingFactorType(self.WeightingFactor3)
        elif nodeName_ == 'ComparisonResult':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ComparisonResult')
            ival_ = self.gds_validate_boolean(ival_, node, 'ComparisonResult')
            self.ComparisonResult = ival_
            self.ComparisonResult_nsprefix_ = child_.prefix
            # validate type IndicatorType
            self.validate_IndicatorType(self.ComparisonResult)
        elif nodeName_ == 'RateUseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RateUseDate = dval_
            self.RateUseDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.RateUseDate)
        elif nodeName_ == 'PaymentCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentCode')
            self.PaymentCode = value_
            self.PaymentCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.PaymentCode)
        elif nodeName_ == 'NumberDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberDays')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberDays')
            self.NumberDays = ival_
            self.NumberDays_nsprefix_ = child_.prefix
            # validate type Count4Type
            self.validate_Count4Type(self.NumberDays)
        elif nodeName_ == 'NumberStages' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberStages')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberStages')
            self.NumberStages = ival_
            self.NumberStages_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.NumberStages)
        elif nodeName_ == 'NumberMonths' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberMonths')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberMonths')
            self.NumberMonths = ival_
            self.NumberMonths_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.NumberMonths)
        elif nodeName_ == 'TariffRate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TariffRate')
            fval_ = self.gds_validate_decimal(fval_, node, 'TariffRate')
            self.TariffRate = fval_
            self.TariffRate_nsprefix_ = child_.prefix
            # validate type Quantity4point2Type
            self.validate_Quantity4point2Type(self.TariffRate)
        elif nodeName_ == 'LineNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'LineNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'LineNumber')
            self.LineNumber = fval_
            self.LineNumber_nsprefix_ = child_.prefix
            # validate type SheetNumberType
            self.validate_SheetNumberType(self.LineNumber)
        elif nodeName_ == 'NumberGroup':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NumberGroup')
            value_ = self.gds_validate_string(value_, node, 'NumberGroup')
            self.NumberGroup = value_
            self.NumberGroup_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.NumberGroup)
        elif nodeName_ == 'PrecedingDocumentGoodsNumeric' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PrecedingDocumentGoodsNumeric')
            ival_ = self.gds_validate_integer(ival_, node, 'PrecedingDocumentGoodsNumeric')
            self.PrecedingDocumentGoodsNumeric = ival_
            self.PrecedingDocumentGoodsNumeric_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.PrecedingDocumentGoodsNumeric)
# end class CUCustomsPaymentCalculationType


class CUDelayPaymentsType(GeneratedsSuper):
    """CUDelayPaymentsType -- О
    т
    с
    р
    о
    ч
    к
    а
    п
    л
    а
    т
    е
    ж
    е
    й
    г
    р
    .48
    PaymentModeCode -- К
    о
    д
    в
    и
    д
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    л
    а
    т
    е
    ж
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    н
    а
    л
    о
    г
    о
    в
    ,
    с
    б
    о
    р
    о
    в
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    в
    з
    и
    м
    а
    н
    и
    е
    к
    о
    т
    о
    р
    ы
    х
    в
    о
    з
    л
    о
    ж
    е
    н
    о
    н
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    о
    р
    г
    а
    н
    ы
    EndDate -- П
    о
    с
    л
    е
    д
    н
    и
    й
    д
    е
    н
    ь
    с
    р
    о
    к
    а
    о
    т
    с
    р
    о
    ч
    к
    и
    у
    п
    л
    а
    т
    ы
    п
    л
    а
    т
    е
    ж
    а
    PaymentSheduleDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    э
    т
    а
    п
    е
    р
    а
    с
    с
    р
    о
    ч
    к
    и
    у
    п
    л
    а
    т
    ы
    п
    л
    а
    т
    е
    ж
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentModeCode=None, EndDate=None, PaymentSheduleDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.PaymentModeCode = PaymentModeCode
        self.validate_CustomsPaymentCodeType(self.PaymentModeCode)
        self.PaymentModeCode_nsprefix_ = "clt_ru"
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.EndDate_nsprefix_ = "clt_ru"
        self.PaymentSheduleDetails = PaymentSheduleDetails
        self.PaymentSheduleDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUDelayPaymentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUDelayPaymentsType.subclass:
            return CUDelayPaymentsType.subclass(*args_, **kwargs_)
        else:
            return CUDelayPaymentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentModeCode(self):
        return self.PaymentModeCode
    def set_PaymentModeCode(self, PaymentModeCode):
        self.PaymentModeCode = PaymentModeCode
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def get_PaymentSheduleDetails(self):
        return self.PaymentSheduleDetails
    def set_PaymentSheduleDetails(self, PaymentSheduleDetails):
        self.PaymentSheduleDetails = PaymentSheduleDetails
    def validate_CustomsPaymentCodeType(self, value):
        result = True
        # Validate type CustomsPaymentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CustomsPaymentCodeType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CustomsPaymentCodeType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.PaymentModeCode is not None or
            self.EndDate is not None or
            self.PaymentSheduleDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUDelayPaymentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUDelayPaymentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUDelayPaymentsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUDelayPaymentsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUDelayPaymentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUDelayPaymentsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUDelayPaymentsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentModeCode is not None:
            namespaceprefix_ = self.PaymentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentModeCode>%s</%sPaymentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentModeCode), input_name='PaymentModeCode')), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            namespaceprefix_ = self.EndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EndDate, input_name='EndDate'), namespaceprefix_ , eol_))
        if self.PaymentSheduleDetails is not None:
            namespaceprefix_ = self.PaymentSheduleDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentSheduleDetails_nsprefix_) else ''
            self.PaymentSheduleDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PaymentSheduleDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentModeCode')
            self.PaymentModeCode = value_
            self.PaymentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsPaymentCodeType
            self.validate_CustomsPaymentCodeType(self.PaymentModeCode)
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
            self.EndDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.EndDate)
        elif nodeName_ == 'PaymentSheduleDetails':
            obj_ = PaymentSheduleDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentSheduleDetails = obj_
            obj_.original_tagname_ = 'PaymentSheduleDetails'
# end class CUDelayPaymentsType


class PaymentSheduleDetailsType(GeneratedsSuper):
    """PaymentSheduleDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    э
    т
    а
    п
    е
    у
    п
    л
    а
    т
    ы
    п
    л
    а
    т
    е
    ж
    а
    ObjectOrdinal -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    э
    т
    а
    п
    а
    EndDate -- П
    о
    с
    л
    е
    д
    н
    и
    й
    д
    е
    н
    ь
    э
    т
    а
    п
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ObjectOrdinal=None, EndDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ObjectOrdinal = ObjectOrdinal
        self.validate_Count3Type(self.ObjectOrdinal)
        self.ObjectOrdinal_nsprefix_ = "clt_ru"
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.EndDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentSheduleDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentSheduleDetailsType.subclass:
            return PaymentSheduleDetailsType.subclass(*args_, **kwargs_)
        else:
            return PaymentSheduleDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ObjectOrdinal(self):
        return self.ObjectOrdinal
    def set_ObjectOrdinal(self, ObjectOrdinal):
        self.ObjectOrdinal = ObjectOrdinal
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.ObjectOrdinal is not None or
            self.EndDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PaymentSheduleDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentSheduleDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentSheduleDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentSheduleDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentSheduleDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='PaymentSheduleDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PaymentSheduleDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ObjectOrdinal is not None:
            namespaceprefix_ = self.ObjectOrdinal_nsprefix_ + ':' if (UseCapturedNS_ and self.ObjectOrdinal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sObjectOrdinal>%s</%sObjectOrdinal>%s' % (namespaceprefix_ , self.gds_format_integer(self.ObjectOrdinal, input_name='ObjectOrdinal'), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            namespaceprefix_ = self.EndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EndDate, input_name='EndDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ObjectOrdinal' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ObjectOrdinal')
            ival_ = self.gds_validate_integer(ival_, node, 'ObjectOrdinal')
            self.ObjectOrdinal = ival_
            self.ObjectOrdinal_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.ObjectOrdinal)
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndDate = dval_
            self.EndDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.EndDate)
# end class PaymentSheduleDetailsType


class CUDriverInformationType(PersonBaseType):
    """CUDriverInformationType -- И
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    о
    в
    о
    д
    и
    т
    е
    л
    я
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    .
    З
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    п
    р
    и
    т
    р
    а
    н
    з
    и
    т
    е
    т
    о
    в
    а
    р
    о
    в
    а
    в
    т
    о
    м
    о
    б
    и
    л
    ь
    н
    ы
    м
    т
    р
    а
    н
    с
    п
    о
    р
    т
    о
    м
    RegCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    в
    о
    д
    и
    т
    е
    л
    я
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    IdentityCard -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PersonBaseType
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, RegCountryCode=None, IdentityCard=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("CUDriverInformationType"), self).__init__(PersonSurname, PersonName, PersonMiddleName, PersonPost,  **kwargs_)
        self.RegCountryCode = RegCountryCode
        self.validate_CountryA2CodeType(self.RegCountryCode)
        self.RegCountryCode_nsprefix_ = "clt_ru"
        self.IdentityCard = IdentityCard
        self.IdentityCard_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUDriverInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUDriverInformationType.subclass:
            return CUDriverInformationType.subclass(*args_, **kwargs_)
        else:
            return CUDriverInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegCountryCode(self):
        return self.RegCountryCode
    def set_RegCountryCode(self, RegCountryCode):
        self.RegCountryCode = RegCountryCode
    def get_IdentityCard(self):
        return self.IdentityCard
    def set_IdentityCard(self, IdentityCard):
        self.IdentityCard = IdentityCard
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.RegCountryCode is not None or
            self.IdentityCard is not None or
            super(CUDriverInformationType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUDriverInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUDriverInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUDriverInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUDriverInformationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUDriverInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUDriverInformationType'):
        super(CUDriverInformationType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUDriverInformationType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUDriverInformationType', fromsubclass_=False, pretty_print=True):
        super(CUDriverInformationType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegCountryCode is not None:
            namespaceprefix_ = self.RegCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegCountryCode>%s</%sRegCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegCountryCode), input_name='RegCountryCode')), namespaceprefix_ , eol_))
        if self.IdentityCard is not None:
            namespaceprefix_ = self.IdentityCard_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCard_nsprefix_) else ''
            self.IdentityCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentityCard', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUDriverInformationType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RegCountryCode')
            self.RegCountryCode = value_
            self.RegCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.RegCountryCode)
        elif nodeName_ == 'IdentityCard':
            obj_ = CUIdentityCardType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentityCard = obj_
            obj_.original_tagname_ = 'IdentityCard'
        super(CUDriverInformationType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUDriverInformationType


class CUESADCustomsRepresCertificateType(DocumentBaseType):
    """CUESADCustomsRepresCertificateType -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    у
    ю
    щ
    и
    й
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    Р
    е
    е
    с
    т
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    й
    DocumentModeCode -- Т
    и
    п
    д
    о
    к
    у
    м
    е
    н
    т
    а
    :2 -
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    о
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    я
    (
    б
    р
    о
    к
    е
    р
    а
    ); 3 -
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    о
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocumentModeCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("CUESADCustomsRepresCertificateType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate,  **kwargs_)
        self.DocumentModeCode = DocumentModeCode
        self.validate_LetterIndicatorType(self.DocumentModeCode)
        self.DocumentModeCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUESADCustomsRepresCertificateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUESADCustomsRepresCertificateType.subclass:
            return CUESADCustomsRepresCertificateType.subclass(*args_, **kwargs_)
        else:
            return CUESADCustomsRepresCertificateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentModeCode(self):
        return self.DocumentModeCode
    def set_DocumentModeCode(self, DocumentModeCode):
        self.DocumentModeCode = DocumentModeCode
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocumentModeCode is not None or
            super(CUESADCustomsRepresCertificateType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUESADCustomsRepresCertificateType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUESADCustomsRepresCertificateType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUESADCustomsRepresCertificateType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADCustomsRepresCertificateType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUESADCustomsRepresCertificateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUESADCustomsRepresCertificateType'):
        super(CUESADCustomsRepresCertificateType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADCustomsRepresCertificateType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUESADCustomsRepresCertificateType', fromsubclass_=False, pretty_print=True):
        super(CUESADCustomsRepresCertificateType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentModeCode is not None:
            namespaceprefix_ = self.DocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentModeCode>%s</%sDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentModeCode), input_name='DocumentModeCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUESADCustomsRepresCertificateType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'DocumentModeCode')
            self.DocumentModeCode = value_
            self.DocumentModeCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.DocumentModeCode)
        super(CUESADCustomsRepresCertificateType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUESADCustomsRepresCertificateType


class CUESADCustomsRepresentativeType(GeneratedsSuper):
    """CUESADCustomsRepresentativeType -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    ь
    ContractRepresDecl -- Д
    о
    г
    о
    в
    о
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    я
    с
    д
    е
    к
    л
    а
    р
    а
    н
    т
    о
    м
    CustomsRepresCertificate -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    у
    ю
    щ
    и
    й
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    Р
    е
    е
    с
    т
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    й
    RFOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    о
    с
    с
    и
    й
    с
    к
    о
    й
    Ф
    е
    д
    е
    р
    а
    ц
    и
    и
    RKOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    К
    а
    з
    а
    х
    с
    т
    а
    н
    RBOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    Б
    е
    л
    а
    р
    у
    с
    ь
    RAOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    А
    р
    м
    е
    н
    и
    я
    KGOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    К
    ы
    р
    г
    ы
    з
    с
    к
    о
    й
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContractRepresDecl=None, CustomsRepresCertificate=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ContractRepresDecl = ContractRepresDecl
        self.ContractRepresDecl_nsprefix_ = "cat_ru"
        self.CustomsRepresCertificate = CustomsRepresCertificate
        self.CustomsRepresCertificate_nsprefix_ = "catESAD_cu"
        self.RFOrganizationFeatures = RFOrganizationFeatures
        self.RFOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RKOrganizationFeatures = RKOrganizationFeatures
        self.RKOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RBOrganizationFeatures = RBOrganizationFeatures
        self.RBOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RAOrganizationFeatures = RAOrganizationFeatures
        self.RAOrganizationFeatures_nsprefix_ = "cat_ru"
        self.KGOrganizationFeatures = KGOrganizationFeatures
        self.KGOrganizationFeatures_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUESADCustomsRepresentativeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUESADCustomsRepresentativeType.subclass:
            return CUESADCustomsRepresentativeType.subclass(*args_, **kwargs_)
        else:
            return CUESADCustomsRepresentativeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContractRepresDecl(self):
        return self.ContractRepresDecl
    def set_ContractRepresDecl(self, ContractRepresDecl):
        self.ContractRepresDecl = ContractRepresDecl
    def get_CustomsRepresCertificate(self):
        return self.CustomsRepresCertificate
    def set_CustomsRepresCertificate(self, CustomsRepresCertificate):
        self.CustomsRepresCertificate = CustomsRepresCertificate
    def get_RFOrganizationFeatures(self):
        return self.RFOrganizationFeatures
    def set_RFOrganizationFeatures(self, RFOrganizationFeatures):
        self.RFOrganizationFeatures = RFOrganizationFeatures
    def get_RKOrganizationFeatures(self):
        return self.RKOrganizationFeatures
    def set_RKOrganizationFeatures(self, RKOrganizationFeatures):
        self.RKOrganizationFeatures = RKOrganizationFeatures
    def get_RBOrganizationFeatures(self):
        return self.RBOrganizationFeatures
    def set_RBOrganizationFeatures(self, RBOrganizationFeatures):
        self.RBOrganizationFeatures = RBOrganizationFeatures
    def get_RAOrganizationFeatures(self):
        return self.RAOrganizationFeatures
    def set_RAOrganizationFeatures(self, RAOrganizationFeatures):
        self.RAOrganizationFeatures = RAOrganizationFeatures
    def get_KGOrganizationFeatures(self):
        return self.KGOrganizationFeatures
    def set_KGOrganizationFeatures(self, KGOrganizationFeatures):
        self.KGOrganizationFeatures = KGOrganizationFeatures
    def has__content(self):
        if (
            self.ContractRepresDecl is not None or
            self.CustomsRepresCertificate is not None or
            self.RFOrganizationFeatures is not None or
            self.RKOrganizationFeatures is not None or
            self.RBOrganizationFeatures is not None or
            self.RAOrganizationFeatures is not None or
            self.KGOrganizationFeatures is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUESADCustomsRepresentativeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUESADCustomsRepresentativeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUESADCustomsRepresentativeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADCustomsRepresentativeType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUESADCustomsRepresentativeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUESADCustomsRepresentativeType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUESADCustomsRepresentativeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContractRepresDecl is not None:
            namespaceprefix_ = self.ContractRepresDecl_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractRepresDecl_nsprefix_) else ''
            self.ContractRepresDecl.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContractRepresDecl', pretty_print=pretty_print)
        if self.CustomsRepresCertificate is not None:
            namespaceprefix_ = self.CustomsRepresCertificate_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsRepresCertificate_nsprefix_) else ''
            self.CustomsRepresCertificate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsRepresCertificate', pretty_print=pretty_print)
        if self.RFOrganizationFeatures is not None:
            namespaceprefix_ = self.RFOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RFOrganizationFeatures_nsprefix_) else ''
            self.RFOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFOrganizationFeatures', pretty_print=pretty_print)
        if self.RKOrganizationFeatures is not None:
            namespaceprefix_ = self.RKOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RKOrganizationFeatures_nsprefix_) else ''
            self.RKOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RKOrganizationFeatures', pretty_print=pretty_print)
        if self.RBOrganizationFeatures is not None:
            namespaceprefix_ = self.RBOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RBOrganizationFeatures_nsprefix_) else ''
            self.RBOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RBOrganizationFeatures', pretty_print=pretty_print)
        if self.RAOrganizationFeatures is not None:
            namespaceprefix_ = self.RAOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RAOrganizationFeatures_nsprefix_) else ''
            self.RAOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RAOrganizationFeatures', pretty_print=pretty_print)
        if self.KGOrganizationFeatures is not None:
            namespaceprefix_ = self.KGOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.KGOrganizationFeatures_nsprefix_) else ''
            self.KGOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='KGOrganizationFeatures', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContractRepresDecl':
            class_obj_ = self.get_class_obj_(child_, DocumentBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContractRepresDecl = obj_
            obj_.original_tagname_ = 'ContractRepresDecl'
        elif nodeName_ == 'CustomsRepresCertificate':
            obj_ = CUESADCustomsRepresCertificateType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsRepresCertificate = obj_
            obj_.original_tagname_ = 'CustomsRepresCertificate'
        elif nodeName_ == 'RFOrganizationFeatures':
            obj_ = RFOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RFOrganizationFeatures'
        elif nodeName_ == 'RKOrganizationFeatures':
            obj_ = RKOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RKOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RKOrganizationFeatures'
        elif nodeName_ == 'RBOrganizationFeatures':
            obj_ = RBOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RBOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RBOrganizationFeatures'
        elif nodeName_ == 'RAOrganizationFeatures':
            obj_ = RAOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RAOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RAOrganizationFeatures'
        elif nodeName_ == 'KGOrganizationFeatures':
            obj_ = KGOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.KGOrganizationFeatures = obj_
            obj_.original_tagname_ = 'KGOrganizationFeatures'
# end class CUESADCustomsRepresentativeType


class CUESADGoodsShipmentType(GeneratedsSuper):
    """CUESADGoodsShipmentType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    н
    о
    й
    п
    а
    р
    т
    и
    и
    OriginCountryName -- С
    т
    р
    а
    н
    а
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    а
    .
    К
    р
    а
    т
    к
    о
    е
    н
    а
    з
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    /
    Р
    А
    З
    Н
    Ы
    Е
    /
    Н
    Е
    И
    З
    В
    Е
    С
    Т
    Н
    О
    /
    Е
    В
    Р
    О
    С
    О
    Ю
    З
    OriginCountryCode -- С
    т
    р
    а
    н
    а
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    .
    Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    .
    RBOriginCountryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ы
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    SpecificationNumber -- О
    б
    щ
    е
    е
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    х
    с
    п
    е
    ц
    и
    ф
    и
    к
    а
    ц
    и
    й
    SpecificationListNumber -- О
    б
    щ
    е
    е
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    л
    и
    с
    т
    о
    в
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    х
    с
    п
    е
    ц
    и
    ф
    и
    к
    а
    ц
    и
    й
    TotalGoodsNumber -- В
    с
    е
    г
    о
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    й
    т
    о
    в
    а
    р
    о
    в
    в
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    о
    в
    а
    р
    ы
    TotalPackageNumber -- О
    б
    щ
    е
    е
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    г
    р
    у
    з
    о
    в
    ы
    х
    м
    е
    с
    т
    TotalSheetNumber -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    л
    и
    с
    т
    о
    в
    TotalCustCost -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    о
    и
    м
    о
    с
    т
    и
    /
    о
    б
    щ
    а
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    ы
    х
    т
    о
    в
    а
    р
    о
    в
    TotalCustomsValueAmount -- О
    б
    щ
    а
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    о
    в
    а
    р
    а
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    о
    г
    о
    ч
    е
    р
    е
    з
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    г
    р
    а
    н
    и
    ц
    у
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    т
    о
    м
    ч
    и
    с
    л
    е
    н
    е
    к
    о
    м
    п
    л
    е
    к
    т
    н
    о
    м
    и
    л
    и
    н
    е
    з
    а
    в
    е
    р
    ш
    е
    н
    н
    о
    м
    в
    и
    д
    е
    CustCostCurrencyCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    с
    т
    о
    и
    м
    о
    с
    т
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    а
    л
    ю
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OriginCountryName=None, OriginCountryCode=None, RBOriginCountryCode=None, SpecificationNumber=None, SpecificationListNumber=None, TotalGoodsNumber=None, TotalPackageNumber=None, TotalSheetNumber=None, TotalCustCost=None, TotalCustomsValueAmount=None, CustCostCurrencyCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.OriginCountryName = OriginCountryName
        self.validate_CountryNameType(self.OriginCountryName)
        self.OriginCountryName_nsprefix_ = "clt_ru"
        self.OriginCountryCode = OriginCountryCode
        self.validate_CountryA2CodeType(self.OriginCountryCode)
        self.OriginCountryCode_nsprefix_ = "clt_ru"
        self.RBOriginCountryCode = RBOriginCountryCode
        self.validate_Code3Type(self.RBOriginCountryCode)
        self.RBOriginCountryCode_nsprefix_ = "clt_ru"
        self.SpecificationNumber = SpecificationNumber
        self.validate_SheetNumberType(self.SpecificationNumber)
        self.SpecificationNumber_nsprefix_ = "clt_ru"
        self.SpecificationListNumber = SpecificationListNumber
        self.validate_SheetNumberType(self.SpecificationListNumber)
        self.SpecificationListNumber_nsprefix_ = "clt_ru"
        self.TotalGoodsNumber = TotalGoodsNumber
        self.validate_Count3Type(self.TotalGoodsNumber)
        self.TotalGoodsNumber_nsprefix_ = "clt_ru"
        self.TotalPackageNumber = TotalPackageNumber
        self.validate_PakageNumberType(self.TotalPackageNumber)
        self.TotalPackageNumber_nsprefix_ = "clt_ru"
        self.TotalSheetNumber = TotalSheetNumber
        self.validate_Count3Type(self.TotalSheetNumber)
        self.TotalSheetNumber_nsprefix_ = "clt_ru"
        self.TotalCustCost = TotalCustCost
        self.validate_AmountType(self.TotalCustCost)
        self.TotalCustCost_nsprefix_ = "clt_ru"
        self.TotalCustomsValueAmount = TotalCustomsValueAmount
        self.validate_AmountType(self.TotalCustomsValueAmount)
        self.TotalCustomsValueAmount_nsprefix_ = "clt_ru"
        self.CustCostCurrencyCode = CustCostCurrencyCode
        self.validate_CurrencyA3CodeType(self.CustCostCurrencyCode)
        self.CustCostCurrencyCode_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUESADGoodsShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUESADGoodsShipmentType.subclass:
            return CUESADGoodsShipmentType.subclass(*args_, **kwargs_)
        else:
            return CUESADGoodsShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OriginCountryName(self):
        return self.OriginCountryName
    def set_OriginCountryName(self, OriginCountryName):
        self.OriginCountryName = OriginCountryName
    def get_OriginCountryCode(self):
        return self.OriginCountryCode
    def set_OriginCountryCode(self, OriginCountryCode):
        self.OriginCountryCode = OriginCountryCode
    def get_RBOriginCountryCode(self):
        return self.RBOriginCountryCode
    def set_RBOriginCountryCode(self, RBOriginCountryCode):
        self.RBOriginCountryCode = RBOriginCountryCode
    def get_SpecificationNumber(self):
        return self.SpecificationNumber
    def set_SpecificationNumber(self, SpecificationNumber):
        self.SpecificationNumber = SpecificationNumber
    def get_SpecificationListNumber(self):
        return self.SpecificationListNumber
    def set_SpecificationListNumber(self, SpecificationListNumber):
        self.SpecificationListNumber = SpecificationListNumber
    def get_TotalGoodsNumber(self):
        return self.TotalGoodsNumber
    def set_TotalGoodsNumber(self, TotalGoodsNumber):
        self.TotalGoodsNumber = TotalGoodsNumber
    def get_TotalPackageNumber(self):
        return self.TotalPackageNumber
    def set_TotalPackageNumber(self, TotalPackageNumber):
        self.TotalPackageNumber = TotalPackageNumber
    def get_TotalSheetNumber(self):
        return self.TotalSheetNumber
    def set_TotalSheetNumber(self, TotalSheetNumber):
        self.TotalSheetNumber = TotalSheetNumber
    def get_TotalCustCost(self):
        return self.TotalCustCost
    def set_TotalCustCost(self, TotalCustCost):
        self.TotalCustCost = TotalCustCost
    def get_TotalCustomsValueAmount(self):
        return self.TotalCustomsValueAmount
    def set_TotalCustomsValueAmount(self, TotalCustomsValueAmount):
        self.TotalCustomsValueAmount = TotalCustomsValueAmount
    def get_CustCostCurrencyCode(self):
        return self.CustCostCurrencyCode
    def set_CustCostCurrencyCode(self, CustCostCurrencyCode):
        self.CustCostCurrencyCode = CustCostCurrencyCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_SheetNumberType(self, value):
        result = True
        # Validate type SheetNumberType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_PakageNumberType(self, value):
        result = True
        # Validate type PakageNumberType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on PakageNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on PakageNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.OriginCountryName is not None or
            self.OriginCountryCode is not None or
            self.RBOriginCountryCode is not None or
            self.SpecificationNumber is not None or
            self.SpecificationListNumber is not None or
            self.TotalGoodsNumber is not None or
            self.TotalPackageNumber is not None or
            self.TotalSheetNumber is not None or
            self.TotalCustCost is not None or
            self.TotalCustomsValueAmount is not None or
            self.CustCostCurrencyCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUESADGoodsShipmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUESADGoodsShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUESADGoodsShipmentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADGoodsShipmentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUESADGoodsShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUESADGoodsShipmentType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUESADGoodsShipmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OriginCountryName is not None:
            namespaceprefix_ = self.OriginCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCountryName>%s</%sOriginCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryName), input_name='OriginCountryName')), namespaceprefix_ , eol_))
        if self.OriginCountryCode is not None:
            namespaceprefix_ = self.OriginCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCountryCode>%s</%sOriginCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryCode), input_name='OriginCountryCode')), namespaceprefix_ , eol_))
        if self.RBOriginCountryCode is not None:
            namespaceprefix_ = self.RBOriginCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RBOriginCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBOriginCountryCode>%s</%sRBOriginCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBOriginCountryCode), input_name='RBOriginCountryCode')), namespaceprefix_ , eol_))
        if self.SpecificationNumber is not None:
            namespaceprefix_ = self.SpecificationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecificationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecificationNumber>%s</%sSpecificationNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(self.SpecificationNumber, input_name='SpecificationNumber'), namespaceprefix_ , eol_))
        if self.SpecificationListNumber is not None:
            namespaceprefix_ = self.SpecificationListNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SpecificationListNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpecificationListNumber>%s</%sSpecificationListNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(self.SpecificationListNumber, input_name='SpecificationListNumber'), namespaceprefix_ , eol_))
        if self.TotalGoodsNumber is not None:
            namespaceprefix_ = self.TotalGoodsNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalGoodsNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalGoodsNumber>%s</%sTotalGoodsNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalGoodsNumber, input_name='TotalGoodsNumber'), namespaceprefix_ , eol_))
        if self.TotalPackageNumber is not None:
            namespaceprefix_ = self.TotalPackageNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalPackageNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalPackageNumber>%s</%sTotalPackageNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TotalPackageNumber, input_name='TotalPackageNumber'), namespaceprefix_ , eol_))
        if self.TotalSheetNumber is not None:
            namespaceprefix_ = self.TotalSheetNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalSheetNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalSheetNumber>%s</%sTotalSheetNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalSheetNumber, input_name='TotalSheetNumber'), namespaceprefix_ , eol_))
        if self.TotalCustCost is not None:
            namespaceprefix_ = self.TotalCustCost_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalCustCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalCustCost>%s</%sTotalCustCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TotalCustCost, input_name='TotalCustCost'), namespaceprefix_ , eol_))
        if self.TotalCustomsValueAmount is not None:
            namespaceprefix_ = self.TotalCustomsValueAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalCustomsValueAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalCustomsValueAmount>%s</%sTotalCustomsValueAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TotalCustomsValueAmount, input_name='TotalCustomsValueAmount'), namespaceprefix_ , eol_))
        if self.CustCostCurrencyCode is not None:
            namespaceprefix_ = self.CustCostCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustCostCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustCostCurrencyCode>%s</%sCustCostCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustCostCurrencyCode), input_name='CustCostCurrencyCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OriginCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginCountryName')
            value_ = self.gds_validate_string(value_, node, 'OriginCountryName')
            self.OriginCountryName = value_
            self.OriginCountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.OriginCountryName)
        elif nodeName_ == 'OriginCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OriginCountryCode')
            value_ = self.gds_validate_string(value_, node, 'OriginCountryCode')
            self.OriginCountryCode = value_
            self.OriginCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.OriginCountryCode)
        elif nodeName_ == 'RBOriginCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBOriginCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RBOriginCountryCode')
            self.RBOriginCountryCode = value_
            self.RBOriginCountryCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.RBOriginCountryCode)
        elif nodeName_ == 'SpecificationNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'SpecificationNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'SpecificationNumber')
            self.SpecificationNumber = fval_
            self.SpecificationNumber_nsprefix_ = child_.prefix
            # validate type SheetNumberType
            self.validate_SheetNumberType(self.SpecificationNumber)
        elif nodeName_ == 'SpecificationListNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'SpecificationListNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'SpecificationListNumber')
            self.SpecificationListNumber = fval_
            self.SpecificationListNumber_nsprefix_ = child_.prefix
            # validate type SheetNumberType
            self.validate_SheetNumberType(self.SpecificationListNumber)
        elif nodeName_ == 'TotalGoodsNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalGoodsNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalGoodsNumber')
            self.TotalGoodsNumber = ival_
            self.TotalGoodsNumber_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.TotalGoodsNumber)
        elif nodeName_ == 'TotalPackageNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TotalPackageNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'TotalPackageNumber')
            self.TotalPackageNumber = fval_
            self.TotalPackageNumber_nsprefix_ = child_.prefix
            # validate type PakageNumberType
            self.validate_PakageNumberType(self.TotalPackageNumber)
        elif nodeName_ == 'TotalSheetNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalSheetNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalSheetNumber')
            self.TotalSheetNumber = ival_
            self.TotalSheetNumber_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.TotalSheetNumber)
        elif nodeName_ == 'TotalCustCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TotalCustCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'TotalCustCost')
            self.TotalCustCost = fval_
            self.TotalCustCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.TotalCustCost)
        elif nodeName_ == 'TotalCustomsValueAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TotalCustomsValueAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'TotalCustomsValueAmount')
            self.TotalCustomsValueAmount = fval_
            self.TotalCustomsValueAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.TotalCustomsValueAmount)
        elif nodeName_ == 'CustCostCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustCostCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CustCostCurrencyCode')
            self.CustCostCurrencyCode = value_
            self.CustCostCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.CustCostCurrencyCode)
# end class CUESADGoodsShipmentType


class CUESADMainContractTermsType(ContractCostType):
    """CUESADMainContractTermsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    с
    л
    о
    в
    и
    я
    х
    с
    д
    е
    л
    к
    и
    .
    Г
    р
    . 11, 20, 22, 23, 24
    TradeCountryCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    т
    о
    р
    г
    у
    ю
    щ
    е
    й
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    .
    Г
    р
    .11, 1-
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    Д
    Т
    RBCountryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    .
    Г
    р
    .11, 2-
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    Д
    Т
    DealFeatureCode -- К
    о
    д
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    с
    д
    е
    л
    к
    и
    (
    д
    о
    г
    о
    в
    о
    р
    а
    ).
    В
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    в
    н
    е
    ш
    н
    е
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    й
    с
    д
    е
    л
    к
    и
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    м
    в
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    х
    -
    ч
    л
    е
    н
    а
    х
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    .
    Г
    р
    . 24
    Д
    Т
    DealNatureCode -- К
    о
    д
    х
    а
    р
    а
    к
    т
    е
    р
    а
    с
    д
    е
    л
    к
    и
    с
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    ы
    м
    и
    т
    о
    в
    а
    р
    а
    м
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    х
    а
    р
    а
    к
    т
    е
    р
    а
    с
    д
    е
    л
    к
    и
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    м
    в
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    х
    -
    ч
    л
    е
    н
    а
    х
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    .
    Г
    р
    .24
    Д
    Т
    CUESADDeliveryTerms -- У
    с
    л
    о
    в
    и
    я
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 20
    Д
    Т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ContractCostType
    def __init__(self, ContractCurrencyCode=None, CurrencyQuantity=None, ContractCurrencyRate=None, TotalInvoiceAmount=None, TotalAmount=None, TradeCountryCode=None, RBCountryCode=None, DealFeatureCode=None, DealNatureCode=None, CUESADDeliveryTerms=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("CUESADMainContractTermsType"), self).__init__(ContractCurrencyCode, CurrencyQuantity, ContractCurrencyRate, TotalInvoiceAmount, TotalAmount, extensiontype_,  **kwargs_)
        self.TradeCountryCode = TradeCountryCode
        self.validate_CountryA2CodeType(self.TradeCountryCode)
        self.TradeCountryCode_nsprefix_ = "clt_ru"
        self.RBCountryCode = RBCountryCode
        self.validate_Code3Type(self.RBCountryCode)
        self.RBCountryCode_nsprefix_ = "clt_ru"
        self.DealFeatureCode = DealFeatureCode
        self.validate_Code2Type(self.DealFeatureCode)
        self.DealFeatureCode_nsprefix_ = "clt_ru"
        self.DealNatureCode = DealNatureCode
        self.validate_DealNatureCodeType(self.DealNatureCode)
        self.DealNatureCode_nsprefix_ = "cltESAD_cu"
        self.CUESADDeliveryTerms = CUESADDeliveryTerms
        self.CUESADDeliveryTerms_nsprefix_ = "cat_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUESADMainContractTermsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUESADMainContractTermsType.subclass:
            return CUESADMainContractTermsType.subclass(*args_, **kwargs_)
        else:
            return CUESADMainContractTermsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TradeCountryCode(self):
        return self.TradeCountryCode
    def set_TradeCountryCode(self, TradeCountryCode):
        self.TradeCountryCode = TradeCountryCode
    def get_RBCountryCode(self):
        return self.RBCountryCode
    def set_RBCountryCode(self, RBCountryCode):
        self.RBCountryCode = RBCountryCode
    def get_DealFeatureCode(self):
        return self.DealFeatureCode
    def set_DealFeatureCode(self, DealFeatureCode):
        self.DealFeatureCode = DealFeatureCode
    def get_DealNatureCode(self):
        return self.DealNatureCode
    def set_DealNatureCode(self, DealNatureCode):
        self.DealNatureCode = DealNatureCode
    def get_CUESADDeliveryTerms(self):
        return self.CUESADDeliveryTerms
    def set_CUESADDeliveryTerms(self, CUESADDeliveryTerms):
        self.CUESADDeliveryTerms = CUESADDeliveryTerms
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DealNatureCodeType(self, value):
        result = True
        # Validate type DealNatureCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on DealNatureCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TradeCountryCode is not None or
            self.RBCountryCode is not None or
            self.DealFeatureCode is not None or
            self.DealNatureCode is not None or
            self.CUESADDeliveryTerms is not None or
            super(CUESADMainContractTermsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUESADMainContractTermsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUESADMainContractTermsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUESADMainContractTermsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADMainContractTermsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUESADMainContractTermsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUESADMainContractTermsType'):
        super(CUESADMainContractTermsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADMainContractTermsType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUESADMainContractTermsType', fromsubclass_=False, pretty_print=True):
        super(CUESADMainContractTermsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TradeCountryCode is not None:
            namespaceprefix_ = self.TradeCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeCountryCode>%s</%sTradeCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeCountryCode), input_name='TradeCountryCode')), namespaceprefix_ , eol_))
        if self.RBCountryCode is not None:
            namespaceprefix_ = self.RBCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RBCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBCountryCode>%s</%sRBCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBCountryCode), input_name='RBCountryCode')), namespaceprefix_ , eol_))
        if self.DealFeatureCode is not None:
            namespaceprefix_ = self.DealFeatureCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DealFeatureCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDealFeatureCode>%s</%sDealFeatureCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DealFeatureCode), input_name='DealFeatureCode')), namespaceprefix_ , eol_))
        if self.DealNatureCode is not None:
            namespaceprefix_ = self.DealNatureCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DealNatureCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDealNatureCode>%s</%sDealNatureCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DealNatureCode), input_name='DealNatureCode')), namespaceprefix_ , eol_))
        if self.CUESADDeliveryTerms is not None:
            namespaceprefix_ = self.CUESADDeliveryTerms_nsprefix_ + ':' if (UseCapturedNS_ and self.CUESADDeliveryTerms_nsprefix_) else ''
            self.CUESADDeliveryTerms.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CUESADDeliveryTerms', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(CUESADMainContractTermsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TradeCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TradeCountryCode')
            value_ = self.gds_validate_string(value_, node, 'TradeCountryCode')
            self.TradeCountryCode = value_
            self.TradeCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.TradeCountryCode)
        elif nodeName_ == 'RBCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RBCountryCode')
            self.RBCountryCode = value_
            self.RBCountryCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.RBCountryCode)
        elif nodeName_ == 'DealFeatureCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DealFeatureCode')
            value_ = self.gds_validate_string(value_, node, 'DealFeatureCode')
            self.DealFeatureCode = value_
            self.DealFeatureCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.DealFeatureCode)
        elif nodeName_ == 'DealNatureCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DealNatureCode')
            value_ = self.gds_validate_string(value_, node, 'DealNatureCode')
            self.DealNatureCode = value_
            self.DealNatureCode_nsprefix_ = child_.prefix
            # validate type DealNatureCodeType
            self.validate_DealNatureCodeType(self.DealNatureCode)
        elif nodeName_ == 'CUESADDeliveryTerms':
            obj_ = DeliveryTermsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CUESADDeliveryTerms = obj_
            obj_.original_tagname_ = 'CUESADDeliveryTerms'
        super(CUESADMainContractTermsType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUESADMainContractTermsType


class CUESADPresentedDocumentsType(DocumentBaseType):
    """CUESADPresentedDocumentsType -- П
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    ы
    .
    Г
    р
    . 44
    CustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    ,
    з
    а
    р
    е
    г
    и
    с
    т
    р
    и
    р
    о
    в
    а
    в
    ш
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    л
    и
    в
    р
    е
    г
    и
    о
    н
    е
    д
    е
    я
    т
    е
    л
    ь
    н
    о
    с
    т
    и
    к
    о
    т
    о
    р
    о
    г
    о
    б
    у
    д
    у
    т
    х
    р
    а
    н
    и
    т
    ь
    с
    я
    т
    о
    в
    а
    р
    ы
    CustomsControlZoneId -- Н
    о
    м
    е
    р
    (
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    )
    з
    о
    н
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    к
    о
    н
    т
    р
    о
    л
    я
    PresentedDocumentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    м
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    DocumentBeginActionsDate -- Д
    а
    т
    а
    н
    а
    ч
    а
    л
    а
    д
    е
    й
    с
    т
    в
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocumentEndActionsDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    д
    е
    й
    с
    т
    в
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    а
    TemporaryImportCode -- К
    о
    д
    с
    р
    о
    к
    а
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    в
    в
    о
    з
    а
    . 1-
    е
    с
    л
    и
    с
    р
    о
    к
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    в
    в
    о
    з
    /
    в
    ы
    в
    о
    з
    а
    м
    е
    н
    е
    е
    1
    г
    о
    д
    а
    , 2-
    е
    с
    л
    и
    с
    р
    о
    к
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    в
    в
    о
    з
    /
    в
    ы
    в
    о
    з
    а
    б
    о
    л
    е
    е
    1
    г
    о
    д
    а
    TemporaryStorageImportDate -- З
    а
    я
    в
    л
    я
    е
    м
    ы
    й
    с
    р
    о
    к
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    в
    в
    о
    з
    а
    /
    в
    ы
    в
    о
    з
    а
    ./
    С
    р
    о
    к
    х
    р
    а
    н
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    /
    З
    а
    п
    р
    а
    ш
    и
    в
    а
    е
    м
    ы
    й
    с
    р
    о
    к
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    CustomsPaymentModeCodeType -- К
    о
    д
    в
    и
    д
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    л
    а
    т
    е
    ж
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    н
    а
    л
    о
    г
    о
    в
    ,
    с
    б
    о
    р
    о
    в
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    в
    з
    и
    м
    а
    н
    и
    е
    к
    о
    т
    о
    р
    ы
    х
    в
    о
    з
    л
    о
    ж
    е
    н
    о
    н
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    о
    р
    г
    а
    н
    ы
    SupplyStatus -- 11 -
    О
    П
    Е
    Р
    Е
    Ж
    А
    Ю
    Щ
    А
    Я
    П
    О
    С
    Т
    А
    В
    К
    А
    .
    З
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    е
    с
    л
    и
    п
    р
    о
    д
    у
    к
    т
    ы
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    в
    в
    о
    з
    я
    т
    с
    я
    р
    а
    н
    ь
    ш
    е
    ,
    ч
    е
    м
    о
    с
    у
    щ
    е
    с
    т
    в
    л
    е
    н
    в
    ы
    в
    о
    з
    т
    о
    в
    а
    р
    о
    в
    н
    а
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    у
    в
    н
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    т
    е
    р
    р
    и
    т
    о
    р
    и
    и
    .
    В
    о
    с
    т
    а
    л
    ь
    н
    ы
    х
    с
    л
    у
    ч
    а
    я
    х
    н
    е
    з
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    ,
    в
    к
    о
    т
    о
    р
    о
    й
    в
    ы
    д
    а
    н
    с
    е
    р
    т
    и
    ф
    и
    к
    а
    т
    TotalDocuments -- О
    б
    щ
    е
    е
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    (
    П
    С
    ,
    к
    о
    н
    т
    р
    а
    к
    т
    о
    в
    )
    д
    л
    я
    Р
    Ф
    PreferenciiCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    ,
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    и
    х
    н
    а
    л
    и
    ч
    и
    е
    л
    ь
    г
    о
    т
    и
    л
    и
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    е
    й
    п
    о
    у
    п
    л
    а
    т
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    .
    Д
    л
    я
    Р
    Б
    PreferenciiDocID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    п
    о
    н
    а
    ц
    и
    о
    н
    а
    л
    ь
    н
    о
    м
    у
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    ,
    н
    е
    о
    б
    х
    о
    д
    и
    м
    ы
    х
    д
    л
    я
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    к
    о
    д
    о
    в
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    х
    .
    Д
    л
    я
    Р
    Б
    ProcessingGoodsCostInfo -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    о
    и
    м
    о
    с
    т
    и
    о
    п
    е
    р
    а
    ц
    и
    й
    п
    о
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    е
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    о
    м
    е
    щ
    е
    н
    н
    ы
    х
    п
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    т
    о
    в
    а
    р
    о
    в
    в
    н
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    т
    е
    р
    р
    и
    т
    о
    р
    и
    и
    RecordID -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    з
    а
    п
    и
    с
    и
    (
    д
    л
    я
    Р
    Ф
    )
    ExecutiveBodyID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    г
    о
    и
    л
    и
    м
    е
    ж
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    (
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ),
    в
    ы
    д
    а
    в
    ш
    е
    г
    о
    и
    л
    и
    у
    т
    в
    е
    р
    д
    и
    в
    ш
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    ExecutiveName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    а
    л
    и
    б
    о
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ,
    в
    ы
    д
    а
    в
    ш
    е
    й
    д
    о
    к
    у
    м
    е
    н
    т
    LicenseGoods -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    м
    т
    о
    в
    а
    р
    е
    п
    о
    л
    и
    ц
    е
    н
    з
    и
    и
    GoodsNumeric -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    в
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    о
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    (
    с
    в
    е
    д
    е
    н
    и
    я
    х
    )
    RFG44PresentedDocId -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    и
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    .
    Г
    р
    44 (
    д
    л
    я
    Р
    Ф
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, CustomsCode=None, CustomsControlZoneId=None, PresentedDocumentModeCode=None, DocumentBeginActionsDate=None, DocumentEndActionsDate=None, TemporaryImportCode=None, TemporaryStorageImportDate=None, CustomsPaymentModeCodeType=None, SupplyStatus=None, CountryCode=None, TotalDocuments=None, PreferenciiCountryCode=None, PreferenciiDocID=None, ProcessingGoodsCostInfo=None, RecordID=None, ExecutiveBodyID=None, ExecutiveName=None, LicenseGoods=None, GoodsNumeric=None, RFG44PresentedDocId=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("CUESADPresentedDocumentsType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, extensiontype_,  **kwargs_)
        self.CustomsCode = CustomsCode
        self.validate_CustomsCodeType(self.CustomsCode)
        self.CustomsCode_nsprefix_ = "clt_ru"
        self.CustomsControlZoneId = CustomsControlZoneId
        self.validate_Text50Type(self.CustomsControlZoneId)
        self.CustomsControlZoneId_nsprefix_ = "clt_ru"
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
        self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        self.PresentedDocumentModeCode_nsprefix_ = "clt_ru"
        if isinstance(DocumentBeginActionsDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocumentBeginActionsDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocumentBeginActionsDate
        self.DocumentBeginActionsDate = initvalue_
        self.DocumentBeginActionsDate_nsprefix_ = "clt_ru"
        if isinstance(DocumentEndActionsDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocumentEndActionsDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocumentEndActionsDate
        self.DocumentEndActionsDate = initvalue_
        self.DocumentEndActionsDate_nsprefix_ = "clt_ru"
        self.TemporaryImportCode = TemporaryImportCode
        self.validate_Numeric1Type(self.TemporaryImportCode)
        self.TemporaryImportCode_nsprefix_ = "clt_ru"
        if isinstance(TemporaryStorageImportDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TemporaryStorageImportDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TemporaryStorageImportDate
        self.TemporaryStorageImportDate = initvalue_
        self.TemporaryStorageImportDate_nsprefix_ = "clt_ru"
        self.CustomsPaymentModeCodeType = CustomsPaymentModeCodeType
        self.validate_CUCustomsPaymentCodeType(self.CustomsPaymentModeCodeType)
        self.CustomsPaymentModeCodeType_nsprefix_ = "clt_ru"
        self.SupplyStatus = SupplyStatus
        self.validate_Code2Type(self.SupplyStatus)
        self.SupplyStatus_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.TotalDocuments = TotalDocuments
        self.validate_Count3Type(self.TotalDocuments)
        self.TotalDocuments_nsprefix_ = "clt_ru"
        self.PreferenciiCountryCode = PreferenciiCountryCode
        self.validate_CountryA2CodeType(self.PreferenciiCountryCode)
        self.PreferenciiCountryCode_nsprefix_ = "clt_ru"
        self.PreferenciiDocID = PreferenciiDocID
        self.validate_CodeVariable6Type(self.PreferenciiDocID)
        self.PreferenciiDocID_nsprefix_ = "clt_ru"
        self.ProcessingGoodsCostInfo = ProcessingGoodsCostInfo
        self.ProcessingGoodsCostInfo_nsprefix_ = "catESAD_cu"
        self.RecordID = RecordID
        self.validate_DocumentIDType(self.RecordID)
        self.RecordID_nsprefix_ = "clt_ru"
        self.ExecutiveBodyID = ExecutiveBodyID
        self.validate_DocumentIDType(self.ExecutiveBodyID)
        self.ExecutiveBodyID_nsprefix_ = "clt_ru"
        if ExecutiveName is None:
            self.ExecutiveName = []
        else:
            self.ExecutiveName = ExecutiveName
        self.ExecutiveName_nsprefix_ = "clt_ru"
        self.LicenseGoods = LicenseGoods
        self.LicenseGoods_nsprefix_ = "catESAD_cu"
        self.GoodsNumeric = GoodsNumeric
        self.validate_Count3Type(self.GoodsNumeric)
        self.GoodsNumeric_nsprefix_ = "clt_ru"
        self.RFG44PresentedDocId = RFG44PresentedDocId
        self.RFG44PresentedDocId_nsprefix_ = "catESAD_cu"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUESADPresentedDocumentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUESADPresentedDocumentsType.subclass:
            return CUESADPresentedDocumentsType.subclass(*args_, **kwargs_)
        else:
            return CUESADPresentedDocumentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomsCode(self):
        return self.CustomsCode
    def set_CustomsCode(self, CustomsCode):
        self.CustomsCode = CustomsCode
    def get_CustomsControlZoneId(self):
        return self.CustomsControlZoneId
    def set_CustomsControlZoneId(self, CustomsControlZoneId):
        self.CustomsControlZoneId = CustomsControlZoneId
    def get_PresentedDocumentModeCode(self):
        return self.PresentedDocumentModeCode
    def set_PresentedDocumentModeCode(self, PresentedDocumentModeCode):
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
    def get_DocumentBeginActionsDate(self):
        return self.DocumentBeginActionsDate
    def set_DocumentBeginActionsDate(self, DocumentBeginActionsDate):
        self.DocumentBeginActionsDate = DocumentBeginActionsDate
    def get_DocumentEndActionsDate(self):
        return self.DocumentEndActionsDate
    def set_DocumentEndActionsDate(self, DocumentEndActionsDate):
        self.DocumentEndActionsDate = DocumentEndActionsDate
    def get_TemporaryImportCode(self):
        return self.TemporaryImportCode
    def set_TemporaryImportCode(self, TemporaryImportCode):
        self.TemporaryImportCode = TemporaryImportCode
    def get_TemporaryStorageImportDate(self):
        return self.TemporaryStorageImportDate
    def set_TemporaryStorageImportDate(self, TemporaryStorageImportDate):
        self.TemporaryStorageImportDate = TemporaryStorageImportDate
    def get_CustomsPaymentModeCodeType(self):
        return self.CustomsPaymentModeCodeType
    def set_CustomsPaymentModeCodeType(self, CustomsPaymentModeCodeType):
        self.CustomsPaymentModeCodeType = CustomsPaymentModeCodeType
    def get_SupplyStatus(self):
        return self.SupplyStatus
    def set_SupplyStatus(self, SupplyStatus):
        self.SupplyStatus = SupplyStatus
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_TotalDocuments(self):
        return self.TotalDocuments
    def set_TotalDocuments(self, TotalDocuments):
        self.TotalDocuments = TotalDocuments
    def get_PreferenciiCountryCode(self):
        return self.PreferenciiCountryCode
    def set_PreferenciiCountryCode(self, PreferenciiCountryCode):
        self.PreferenciiCountryCode = PreferenciiCountryCode
    def get_PreferenciiDocID(self):
        return self.PreferenciiDocID
    def set_PreferenciiDocID(self, PreferenciiDocID):
        self.PreferenciiDocID = PreferenciiDocID
    def get_ProcessingGoodsCostInfo(self):
        return self.ProcessingGoodsCostInfo
    def set_ProcessingGoodsCostInfo(self, ProcessingGoodsCostInfo):
        self.ProcessingGoodsCostInfo = ProcessingGoodsCostInfo
    def get_RecordID(self):
        return self.RecordID
    def set_RecordID(self, RecordID):
        self.RecordID = RecordID
    def get_ExecutiveBodyID(self):
        return self.ExecutiveBodyID
    def set_ExecutiveBodyID(self, ExecutiveBodyID):
        self.ExecutiveBodyID = ExecutiveBodyID
    def get_ExecutiveName(self):
        return self.ExecutiveName
    def set_ExecutiveName(self, ExecutiveName):
        self.ExecutiveName = ExecutiveName
    def add_ExecutiveName(self, value):
        self.ExecutiveName.append(value)
    def insert_ExecutiveName_at(self, index, value):
        self.ExecutiveName.insert(index, value)
    def replace_ExecutiveName_at(self, index, value):
        self.ExecutiveName[index] = value
    def get_LicenseGoods(self):
        return self.LicenseGoods
    def set_LicenseGoods(self, LicenseGoods):
        self.LicenseGoods = LicenseGoods
    def get_GoodsNumeric(self):
        return self.GoodsNumeric
    def set_GoodsNumeric(self, GoodsNumeric):
        self.GoodsNumeric = GoodsNumeric
    def get_RFG44PresentedDocId(self):
        return self.RFG44PresentedDocId
    def set_RFG44PresentedDocId(self, RFG44PresentedDocId):
        self.RFG44PresentedDocId = RFG44PresentedDocId
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_Numeric1Type(self, value):
        result = True
        # Validate type Numeric1Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CUCustomsPaymentCodeType(self, value):
        result = True
        # Validate type CUCustomsPaymentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CUCustomsPaymentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable6Type(self, value):
        result = True
        # Validate type CodeVariable6Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable6Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable6Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentIDType(self, value):
        result = True
        # Validate type DocumentIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 36:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text150Type(self, value):
        result = True
        # Validate type Text150Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text150Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text150Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CustomsCode is not None or
            self.CustomsControlZoneId is not None or
            self.PresentedDocumentModeCode is not None or
            self.DocumentBeginActionsDate is not None or
            self.DocumentEndActionsDate is not None or
            self.TemporaryImportCode is not None or
            self.TemporaryStorageImportDate is not None or
            self.CustomsPaymentModeCodeType is not None or
            self.SupplyStatus is not None or
            self.CountryCode is not None or
            self.TotalDocuments is not None or
            self.PreferenciiCountryCode is not None or
            self.PreferenciiDocID is not None or
            self.ProcessingGoodsCostInfo is not None or
            self.RecordID is not None or
            self.ExecutiveBodyID is not None or
            self.ExecutiveName or
            self.LicenseGoods is not None or
            self.GoodsNumeric is not None or
            self.RFG44PresentedDocId is not None or
            super(CUESADPresentedDocumentsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUESADPresentedDocumentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUESADPresentedDocumentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUESADPresentedDocumentsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADPresentedDocumentsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUESADPresentedDocumentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUESADPresentedDocumentsType'):
        super(CUESADPresentedDocumentsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADPresentedDocumentsType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUESADPresentedDocumentsType', fromsubclass_=False, pretty_print=True):
        super(CUESADPresentedDocumentsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomsCode is not None:
            namespaceprefix_ = self.CustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCode>%s</%sCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCode), input_name='CustomsCode')), namespaceprefix_ , eol_))
        if self.CustomsControlZoneId is not None:
            namespaceprefix_ = self.CustomsControlZoneId_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsControlZoneId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsControlZoneId>%s</%sCustomsControlZoneId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsControlZoneId), input_name='CustomsControlZoneId')), namespaceprefix_ , eol_))
        if self.PresentedDocumentModeCode is not None:
            namespaceprefix_ = self.PresentedDocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PresentedDocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPresentedDocumentModeCode>%s</%sPresentedDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PresentedDocumentModeCode), input_name='PresentedDocumentModeCode')), namespaceprefix_ , eol_))
        if self.DocumentBeginActionsDate is not None:
            namespaceprefix_ = self.DocumentBeginActionsDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentBeginActionsDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentBeginActionsDate>%s</%sDocumentBeginActionsDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocumentBeginActionsDate, input_name='DocumentBeginActionsDate'), namespaceprefix_ , eol_))
        if self.DocumentEndActionsDate is not None:
            namespaceprefix_ = self.DocumentEndActionsDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentEndActionsDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentEndActionsDate>%s</%sDocumentEndActionsDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocumentEndActionsDate, input_name='DocumentEndActionsDate'), namespaceprefix_ , eol_))
        if self.TemporaryImportCode is not None:
            namespaceprefix_ = self.TemporaryImportCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TemporaryImportCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTemporaryImportCode>%s</%sTemporaryImportCode>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TemporaryImportCode, input_name='TemporaryImportCode'), namespaceprefix_ , eol_))
        if self.TemporaryStorageImportDate is not None:
            namespaceprefix_ = self.TemporaryStorageImportDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TemporaryStorageImportDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTemporaryStorageImportDate>%s</%sTemporaryStorageImportDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TemporaryStorageImportDate, input_name='TemporaryStorageImportDate'), namespaceprefix_ , eol_))
        if self.CustomsPaymentModeCodeType is not None:
            namespaceprefix_ = self.CustomsPaymentModeCodeType_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsPaymentModeCodeType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsPaymentModeCodeType>%s</%sCustomsPaymentModeCodeType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsPaymentModeCodeType), input_name='CustomsPaymentModeCodeType')), namespaceprefix_ , eol_))
        if self.SupplyStatus is not None:
            namespaceprefix_ = self.SupplyStatus_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplyStatus_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSupplyStatus>%s</%sSupplyStatus>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SupplyStatus), input_name='SupplyStatus')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.TotalDocuments is not None:
            namespaceprefix_ = self.TotalDocuments_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalDocuments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalDocuments>%s</%sTotalDocuments>%s' % (namespaceprefix_ , self.gds_format_integer(self.TotalDocuments, input_name='TotalDocuments'), namespaceprefix_ , eol_))
        if self.PreferenciiCountryCode is not None:
            namespaceprefix_ = self.PreferenciiCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferenciiCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferenciiCountryCode>%s</%sPreferenciiCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferenciiCountryCode), input_name='PreferenciiCountryCode')), namespaceprefix_ , eol_))
        if self.PreferenciiDocID is not None:
            namespaceprefix_ = self.PreferenciiDocID_nsprefix_ + ':' if (UseCapturedNS_ and self.PreferenciiDocID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPreferenciiDocID>%s</%sPreferenciiDocID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PreferenciiDocID), input_name='PreferenciiDocID')), namespaceprefix_ , eol_))
        if self.ProcessingGoodsCostInfo is not None:
            namespaceprefix_ = self.ProcessingGoodsCostInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingGoodsCostInfo_nsprefix_) else ''
            self.ProcessingGoodsCostInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingGoodsCostInfo', pretty_print=pretty_print)
        if self.RecordID is not None:
            namespaceprefix_ = self.RecordID_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordID>%s</%sRecordID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordID), input_name='RecordID')), namespaceprefix_ , eol_))
        if self.ExecutiveBodyID is not None:
            namespaceprefix_ = self.ExecutiveBodyID_nsprefix_ + ':' if (UseCapturedNS_ and self.ExecutiveBodyID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExecutiveBodyID>%s</%sExecutiveBodyID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExecutiveBodyID), input_name='ExecutiveBodyID')), namespaceprefix_ , eol_))
        for ExecutiveName_ in self.ExecutiveName:
            namespaceprefix_ = self.ExecutiveName_nsprefix_ + ':' if (UseCapturedNS_ and self.ExecutiveName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExecutiveName>%s</%sExecutiveName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ExecutiveName_), input_name='ExecutiveName')), namespaceprefix_ , eol_))
        if self.LicenseGoods is not None:
            namespaceprefix_ = self.LicenseGoods_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseGoods_nsprefix_) else ''
            self.LicenseGoods.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenseGoods', pretty_print=pretty_print)
        if self.GoodsNumeric is not None:
            namespaceprefix_ = self.GoodsNumeric_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsNumeric_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsNumeric>%s</%sGoodsNumeric>%s' % (namespaceprefix_ , self.gds_format_integer(self.GoodsNumeric, input_name='GoodsNumeric'), namespaceprefix_ , eol_))
        if self.RFG44PresentedDocId is not None:
            namespaceprefix_ = self.RFG44PresentedDocId_nsprefix_ + ':' if (UseCapturedNS_ and self.RFG44PresentedDocId_nsprefix_) else ''
            self.RFG44PresentedDocId.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFG44PresentedDocId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(CUESADPresentedDocumentsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCode')
            self.CustomsCode = value_
            self.CustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsCode)
        elif nodeName_ == 'CustomsControlZoneId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomsControlZoneId')
            value_ = self.gds_validate_string(value_, node, 'CustomsControlZoneId')
            self.CustomsControlZoneId = value_
            self.CustomsControlZoneId_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.CustomsControlZoneId)
        elif nodeName_ == 'PresentedDocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PresentedDocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PresentedDocumentModeCode')
            self.PresentedDocumentModeCode = value_
            self.PresentedDocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        elif nodeName_ == 'DocumentBeginActionsDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocumentBeginActionsDate = dval_
            self.DocumentBeginActionsDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocumentBeginActionsDate)
        elif nodeName_ == 'DocumentEndActionsDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocumentEndActionsDate = dval_
            self.DocumentEndActionsDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocumentEndActionsDate)
        elif nodeName_ == 'TemporaryImportCode' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TemporaryImportCode')
            fval_ = self.gds_validate_decimal(fval_, node, 'TemporaryImportCode')
            self.TemporaryImportCode = fval_
            self.TemporaryImportCode_nsprefix_ = child_.prefix
            # validate type Numeric1Type
            self.validate_Numeric1Type(self.TemporaryImportCode)
        elif nodeName_ == 'TemporaryStorageImportDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TemporaryStorageImportDate = dval_
            self.TemporaryStorageImportDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.TemporaryStorageImportDate)
        elif nodeName_ == 'CustomsPaymentModeCodeType':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsPaymentModeCodeType')
            value_ = self.gds_validate_string(value_, node, 'CustomsPaymentModeCodeType')
            self.CustomsPaymentModeCodeType = value_
            self.CustomsPaymentModeCodeType_nsprefix_ = child_.prefix
            # validate type CUCustomsPaymentCodeType
            self.validate_CUCustomsPaymentCodeType(self.CustomsPaymentModeCodeType)
        elif nodeName_ == 'SupplyStatus':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SupplyStatus')
            value_ = self.gds_validate_string(value_, node, 'SupplyStatus')
            self.SupplyStatus = value_
            self.SupplyStatus_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.SupplyStatus)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'TotalDocuments' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TotalDocuments')
            ival_ = self.gds_validate_integer(ival_, node, 'TotalDocuments')
            self.TotalDocuments = ival_
            self.TotalDocuments_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.TotalDocuments)
        elif nodeName_ == 'PreferenciiCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PreferenciiCountryCode')
            value_ = self.gds_validate_string(value_, node, 'PreferenciiCountryCode')
            self.PreferenciiCountryCode = value_
            self.PreferenciiCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.PreferenciiCountryCode)
        elif nodeName_ == 'PreferenciiDocID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PreferenciiDocID')
            value_ = self.gds_validate_string(value_, node, 'PreferenciiDocID')
            self.PreferenciiDocID = value_
            self.PreferenciiDocID_nsprefix_ = child_.prefix
            # validate type CodeVariable6Type
            self.validate_CodeVariable6Type(self.PreferenciiDocID)
        elif nodeName_ == 'ProcessingGoodsCostInfo':
            obj_ = ProcessingGoodsCostInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingGoodsCostInfo = obj_
            obj_.original_tagname_ = 'ProcessingGoodsCostInfo'
        elif nodeName_ == 'RecordID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordID')
            value_ = self.gds_validate_string(value_, node, 'RecordID')
            self.RecordID = value_
            self.RecordID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.RecordID)
        elif nodeName_ == 'ExecutiveBodyID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ExecutiveBodyID')
            value_ = self.gds_validate_string(value_, node, 'ExecutiveBodyID')
            self.ExecutiveBodyID = value_
            self.ExecutiveBodyID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.ExecutiveBodyID)
        elif nodeName_ == 'ExecutiveName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExecutiveName')
            value_ = self.gds_validate_string(value_, node, 'ExecutiveName')
            self.ExecutiveName.append(value_)
            self.ExecutiveName_nsprefix_ = child_.prefix
            # validate type Text150Type
            self.validate_Text150Type(self.ExecutiveName[-1])
        elif nodeName_ == 'LicenseGoods':
            obj_ = LicenseGoodsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenseGoods = obj_
            obj_.original_tagname_ = 'LicenseGoods'
        elif nodeName_ == 'GoodsNumeric' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GoodsNumeric')
            ival_ = self.gds_validate_integer(ival_, node, 'GoodsNumeric')
            self.GoodsNumeric = ival_
            self.GoodsNumeric_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.GoodsNumeric)
        elif nodeName_ == 'RFG44PresentedDocId':
            class_obj_ = self.get_class_obj_(child_, RFBasePresentedDocIDType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFG44PresentedDocId = obj_
            obj_.original_tagname_ = 'RFG44PresentedDocId'
        super(CUESADPresentedDocumentsType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUESADPresentedDocumentsType


class CUGoodsLocationPlaceType(GeneratedsSuper):
    """CUGoodsLocationPlaceType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    м
    е
    с
    т
    о
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    и
    т
    о
    в
    а
    р
    о
    в
    NumberCustomsZone -- Н
    о
    м
    е
    р
    (
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    )
    з
    о
    н
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    к
    о
    н
    т
    р
    о
    л
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NumberCustomsZone=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.NumberCustomsZone = NumberCustomsZone
        self.validate_DocumentNumberType(self.NumberCustomsZone)
        self.NumberCustomsZone_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUGoodsLocationPlaceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUGoodsLocationPlaceType.subclass:
            return CUGoodsLocationPlaceType.subclass(*args_, **kwargs_)
        else:
            return CUGoodsLocationPlaceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NumberCustomsZone(self):
        return self.NumberCustomsZone
    def set_NumberCustomsZone(self, NumberCustomsZone):
        self.NumberCustomsZone = NumberCustomsZone
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.NumberCustomsZone is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUGoodsLocationPlaceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUGoodsLocationPlaceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUGoodsLocationPlaceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUGoodsLocationPlaceType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUGoodsLocationPlaceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUGoodsLocationPlaceType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUGoodsLocationPlaceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumberCustomsZone is not None:
            namespaceprefix_ = self.NumberCustomsZone_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberCustomsZone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberCustomsZone>%s</%sNumberCustomsZone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NumberCustomsZone), input_name='NumberCustomsZone')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NumberCustomsZone':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'NumberCustomsZone')
            value_ = self.gds_validate_string(value_, node, 'NumberCustomsZone')
            self.NumberCustomsZone = value_
            self.NumberCustomsZone_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.NumberCustomsZone)
# end class CUGoodsLocationPlaceType


class CUGuaranteeType(GeneratedsSuper):
    """CUGuaranteeType -- Г
    а
    р
    а
    н
    т
    и
    я
    PaymentWayCode -- К
    о
    д
    с
    п
    о
    с
    о
    б
    о
    в
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    у
    п
    л
    а
    т
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    п
    о
    с
    о
    б
    о
    в
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    у
    п
    л
    а
    т
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    Amount -- С
    у
    м
    м
    а
    (
    р
    а
    з
    м
    е
    р
    )
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    GuaranteeDocDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    е
    м
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    е
    и
    с
    п
    о
    л
    н
    е
    н
    и
    я
    о
    б
    я
    з
    а
    н
    н
    о
    с
    т
    и
    п
    о
    у
    п
    л
    а
    т
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    UNP -- У
    ч
    е
    т
    н
    ы
    й
    н
    о
    м
    е
    р
    п
    л
    а
    т
    е
    л
    ь
    щ
    и
    к
    а
    (
    У
    Н
    П
    )
    BIC -- Б
    а
    н
    к
    о
    в
    с
    к
    и
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    к
    о
    д
    и
    л
    и
    н
    е
    б
    а
    н
    к
    о
    в
    с
    к
    и
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    к
    о
    д
    к
    р
    е
    д
    и
    т
    н
    о
    -
    ф
    и
    н
    а
    н
    с
    о
    в
    о
    й
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentWayCode=None, Amount=None, GuaranteeDocDetails=None, UNP=None, BIC=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.PaymentWayCode = PaymentWayCode
        self.validate_Code2Type(self.PaymentWayCode)
        self.PaymentWayCode_nsprefix_ = "clt_ru"
        self.Amount = Amount
        self.validate_AmountType(self.Amount)
        self.Amount_nsprefix_ = "clt_ru"
        self.GuaranteeDocDetails = GuaranteeDocDetails
        self.GuaranteeDocDetails_nsprefix_ = "catESAD_cu"
        self.UNP = UNP
        self.validate_UNPTtype(self.UNP)
        self.UNP_nsprefix_ = "clt_ru"
        self.BIC = BIC
        self.validate_BICIDType(self.BIC)
        self.BIC_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUGuaranteeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUGuaranteeType.subclass:
            return CUGuaranteeType.subclass(*args_, **kwargs_)
        else:
            return CUGuaranteeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentWayCode(self):
        return self.PaymentWayCode
    def set_PaymentWayCode(self, PaymentWayCode):
        self.PaymentWayCode = PaymentWayCode
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_GuaranteeDocDetails(self):
        return self.GuaranteeDocDetails
    def set_GuaranteeDocDetails(self, GuaranteeDocDetails):
        self.GuaranteeDocDetails = GuaranteeDocDetails
    def get_UNP(self):
        return self.UNP
    def set_UNP(self, UNP):
        self.UNP = UNP
    def get_BIC(self):
        return self.BIC
    def set_BIC(self, BIC):
        self.BIC = BIC
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_UNPTtype(self, value):
        result = True
        # Validate type UNPTtype, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_UNPTtype_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_UNPTtype_patterns_, ))
                result = False
        return result
    validate_UNPTtype_patterns_ = [['^(\\d{9})$']]
    def validate_BICIDType(self, value):
        result = True
        # Validate type BICIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_BICIDType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_BICIDType_patterns_, ))
                result = False
        return result
    validate_BICIDType_patterns_ = [['^(\\d{9})$']]
    def has__content(self):
        if (
            self.PaymentWayCode is not None or
            self.Amount is not None or
            self.GuaranteeDocDetails is not None or
            self.UNP is not None or
            self.BIC is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUGuaranteeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUGuaranteeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUGuaranteeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUGuaranteeType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUGuaranteeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUGuaranteeType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUGuaranteeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentWayCode is not None:
            namespaceprefix_ = self.PaymentWayCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentWayCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentWayCode>%s</%sPaymentWayCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentWayCode), input_name='PaymentWayCode')), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
        if self.GuaranteeDocDetails is not None:
            namespaceprefix_ = self.GuaranteeDocDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeDocDetails_nsprefix_) else ''
            self.GuaranteeDocDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GuaranteeDocDetails', pretty_print=pretty_print)
        if self.UNP is not None:
            namespaceprefix_ = self.UNP_nsprefix_ + ':' if (UseCapturedNS_ and self.UNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUNP>%s</%sUNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UNP), input_name='UNP')), namespaceprefix_ , eol_))
        if self.BIC is not None:
            namespaceprefix_ = self.BIC_nsprefix_ + ':' if (UseCapturedNS_ and self.BIC_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBIC>%s</%sBIC>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BIC), input_name='BIC')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentWayCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentWayCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentWayCode')
            self.PaymentWayCode = value_
            self.PaymentWayCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.PaymentWayCode)
        elif nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.Amount)
        elif nodeName_ == 'GuaranteeDocDetails':
            class_obj_ = self.get_class_obj_(child_, DocBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GuaranteeDocDetails = obj_
            obj_.original_tagname_ = 'GuaranteeDocDetails'
        elif nodeName_ == 'UNP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'UNP')
            value_ = self.gds_validate_string(value_, node, 'UNP')
            self.UNP = value_
            self.UNP_nsprefix_ = child_.prefix
            # validate type UNPTtype
            self.validate_UNPTtype(self.UNP)
        elif nodeName_ == 'BIC':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BIC')
            value_ = self.gds_validate_string(value_, node, 'BIC')
            self.BIC = value_
            self.BIC_nsprefix_ = child_.prefix
            # validate type BICIDType
            self.validate_BICIDType(self.BIC)
# end class CUGuaranteeType


class CUIdentityCardType(GeneratedsSuper):
    """CUIdentityCardType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    м
    л
    и
    ч
    н
    о
    с
    т
    ь
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    IdentityCardCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    ,
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    х
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    FullIdentityCardName -- П
    о
    л
    н
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardSeries -- С
    е
    р
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardNumber -- Н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardDate -- Д
    а
    т
    а
    в
    ы
    д
    а
    ч
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    DocValidityDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    OrganizationName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ,
    в
    ы
    д
    а
    в
    ш
    е
    й
    д
    о
    к
    у
    м
    е
    н
    т
    IssuerCode -- К
    о
    д
    п
    о
    д
    р
    а
    з
    д
    е
    л
    е
    н
    и
    я
    о
    р
    г
    а
    н
    а
    ,
    в
    ы
    д
    а
    в
    ш
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    AuthorityId -- С
    т
    р
    о
    к
    а
    ,
    и
    д
    е
    н
    т
    и
    ф
    и
    ц
    и
    р
    у
    ю
    щ
    а
    я
    о
    р
    г
    а
    н
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    й
    в
    л
    а
    с
    т
    и
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    -
    ч
    л
    е
    н
    а
    л
    и
    б
    о
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    у
    ю
    и
    м
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    ю
    ,
    в
    ы
    д
    а
    в
    ш
    у
    ю
    д
    о
    к
    у
    м
    е
    н
    т
    CountryCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IdentityCardCode=None, IdentityCardName=None, FullIdentityCardName=None, IdentityCardSeries=None, IdentityCardNumber=None, IdentityCardDate=None, DocValidityDate=None, OrganizationName=None, IssuerCode=None, AuthorityId=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.IdentityCardCode = IdentityCardCode
        self.validate_CUIdentityCardCodeType(self.IdentityCardCode)
        self.IdentityCardCode_nsprefix_ = "cltESAD_cu"
        self.IdentityCardName = IdentityCardName
        self.validate_Text40Type(self.IdentityCardName)
        self.IdentityCardName_nsprefix_ = "clt_ru"
        self.FullIdentityCardName = FullIdentityCardName
        self.validate_FreeText250Type(self.FullIdentityCardName)
        self.FullIdentityCardName_nsprefix_ = "clt_ru"
        self.IdentityCardSeries = IdentityCardSeries
        self.validate_IdentityCardSeriesType(self.IdentityCardSeries)
        self.IdentityCardSeries_nsprefix_ = "clt_ru"
        self.IdentityCardNumber = IdentityCardNumber
        self.validate_IdentityCardNumberType(self.IdentityCardNumber)
        self.IdentityCardNumber_nsprefix_ = "clt_ru"
        if isinstance(IdentityCardDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(IdentityCardDate, '%Y-%m-%d').date()
        else:
            initvalue_ = IdentityCardDate
        self.IdentityCardDate = initvalue_
        self.IdentityCardDate_nsprefix_ = "clt_ru"
        if isinstance(DocValidityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocValidityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocValidityDate
        self.DocValidityDate = initvalue_
        self.DocValidityDate_nsprefix_ = "clt_ru"
        self.OrganizationName = OrganizationName
        self.validate_NameType(self.OrganizationName)
        self.OrganizationName_nsprefix_ = "clt_ru"
        self.IssuerCode = IssuerCode
        self.validate_CodeVariable7Type(self.IssuerCode)
        self.IssuerCode_nsprefix_ = "clt_ru"
        self.AuthorityId = AuthorityId
        self.validate_CodeVariable20Type(self.AuthorityId)
        self.AuthorityId_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUIdentityCardType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUIdentityCardType.subclass:
            return CUIdentityCardType.subclass(*args_, **kwargs_)
        else:
            return CUIdentityCardType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IdentityCardCode(self):
        return self.IdentityCardCode
    def set_IdentityCardCode(self, IdentityCardCode):
        self.IdentityCardCode = IdentityCardCode
    def get_IdentityCardName(self):
        return self.IdentityCardName
    def set_IdentityCardName(self, IdentityCardName):
        self.IdentityCardName = IdentityCardName
    def get_FullIdentityCardName(self):
        return self.FullIdentityCardName
    def set_FullIdentityCardName(self, FullIdentityCardName):
        self.FullIdentityCardName = FullIdentityCardName
    def get_IdentityCardSeries(self):
        return self.IdentityCardSeries
    def set_IdentityCardSeries(self, IdentityCardSeries):
        self.IdentityCardSeries = IdentityCardSeries
    def get_IdentityCardNumber(self):
        return self.IdentityCardNumber
    def set_IdentityCardNumber(self, IdentityCardNumber):
        self.IdentityCardNumber = IdentityCardNumber
    def get_IdentityCardDate(self):
        return self.IdentityCardDate
    def set_IdentityCardDate(self, IdentityCardDate):
        self.IdentityCardDate = IdentityCardDate
    def get_DocValidityDate(self):
        return self.DocValidityDate
    def set_DocValidityDate(self, DocValidityDate):
        self.DocValidityDate = DocValidityDate
    def get_OrganizationName(self):
        return self.OrganizationName
    def set_OrganizationName(self, OrganizationName):
        self.OrganizationName = OrganizationName
    def get_IssuerCode(self):
        return self.IssuerCode
    def set_IssuerCode(self, IssuerCode):
        self.IssuerCode = IssuerCode
    def get_AuthorityId(self):
        return self.AuthorityId
    def set_AuthorityId(self, AuthorityId):
        self.AuthorityId = AuthorityId
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_CUIdentityCardCodeType(self, value):
        result = True
        # Validate type CUIdentityCardCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CUIdentityCardCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CUIdentityCardCodeType_patterns_, ))
                result = False
        return result
    validate_CUIdentityCardCodeType_patterns_ = [['^((\\d{2})|([A-Z]{2}\\d{5}))$']]
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IdentityCardSeriesType(self, value):
        result = True
        # Validate type IdentityCardSeriesType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on IdentityCardSeriesType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on IdentityCardSeriesType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IdentityCardNumberType(self, value):
        result = True
        # Validate type IdentityCardNumberType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on IdentityCardNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on IdentityCardNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable7Type(self, value):
        result = True
        # Validate type CodeVariable7Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable7Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable7Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.IdentityCardCode is not None or
            self.IdentityCardName is not None or
            self.FullIdentityCardName is not None or
            self.IdentityCardSeries is not None or
            self.IdentityCardNumber is not None or
            self.IdentityCardDate is not None or
            self.DocValidityDate is not None or
            self.OrganizationName is not None or
            self.IssuerCode is not None or
            self.AuthorityId is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUIdentityCardType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUIdentityCardType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUIdentityCardType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUIdentityCardType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUIdentityCardType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUIdentityCardType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUIdentityCardType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentityCardCode is not None:
            namespaceprefix_ = self.IdentityCardCode_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardCode>%s</%sIdentityCardCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardCode), input_name='IdentityCardCode')), namespaceprefix_ , eol_))
        if self.IdentityCardName is not None:
            namespaceprefix_ = self.IdentityCardName_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardName>%s</%sIdentityCardName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardName), input_name='IdentityCardName')), namespaceprefix_ , eol_))
        if self.FullIdentityCardName is not None:
            namespaceprefix_ = self.FullIdentityCardName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullIdentityCardName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullIdentityCardName>%s</%sFullIdentityCardName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullIdentityCardName), input_name='FullIdentityCardName')), namespaceprefix_ , eol_))
        if self.IdentityCardSeries is not None:
            namespaceprefix_ = self.IdentityCardSeries_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardSeries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardSeries>%s</%sIdentityCardSeries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardSeries), input_name='IdentityCardSeries')), namespaceprefix_ , eol_))
        if self.IdentityCardNumber is not None:
            namespaceprefix_ = self.IdentityCardNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardNumber>%s</%sIdentityCardNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardNumber), input_name='IdentityCardNumber')), namespaceprefix_ , eol_))
        if self.IdentityCardDate is not None:
            namespaceprefix_ = self.IdentityCardDate_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardDate>%s</%sIdentityCardDate>%s' % (namespaceprefix_ , self.gds_format_date(self.IdentityCardDate, input_name='IdentityCardDate'), namespaceprefix_ , eol_))
        if self.DocValidityDate is not None:
            namespaceprefix_ = self.DocValidityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocValidityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocValidityDate>%s</%sDocValidityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocValidityDate, input_name='DocValidityDate'), namespaceprefix_ , eol_))
        if self.OrganizationName is not None:
            namespaceprefix_ = self.OrganizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationName>%s</%sOrganizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationName), input_name='OrganizationName')), namespaceprefix_ , eol_))
        if self.IssuerCode is not None:
            namespaceprefix_ = self.IssuerCode_nsprefix_ + ':' if (UseCapturedNS_ and self.IssuerCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIssuerCode>%s</%sIssuerCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IssuerCode), input_name='IssuerCode')), namespaceprefix_ , eol_))
        if self.AuthorityId is not None:
            namespaceprefix_ = self.AuthorityId_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorityId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorityId>%s</%sAuthorityId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorityId), input_name='AuthorityId')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IdentityCardCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardCode')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardCode')
            self.IdentityCardCode = value_
            self.IdentityCardCode_nsprefix_ = child_.prefix
            # validate type CUIdentityCardCodeType
            self.validate_CUIdentityCardCodeType(self.IdentityCardCode)
        elif nodeName_ == 'IdentityCardName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IdentityCardName')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardName')
            self.IdentityCardName = value_
            self.IdentityCardName_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.IdentityCardName)
        elif nodeName_ == 'FullIdentityCardName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullIdentityCardName')
            value_ = self.gds_validate_string(value_, node, 'FullIdentityCardName')
            self.FullIdentityCardName = value_
            self.FullIdentityCardName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.FullIdentityCardName)
        elif nodeName_ == 'IdentityCardSeries':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardSeries')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardSeries')
            self.IdentityCardSeries = value_
            self.IdentityCardSeries_nsprefix_ = child_.prefix
            # validate type IdentityCardSeriesType
            self.validate_IdentityCardSeriesType(self.IdentityCardSeries)
        elif nodeName_ == 'IdentityCardNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardNumber')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardNumber')
            self.IdentityCardNumber = value_
            self.IdentityCardNumber_nsprefix_ = child_.prefix
            # validate type IdentityCardNumberType
            self.validate_IdentityCardNumberType(self.IdentityCardNumber)
        elif nodeName_ == 'IdentityCardDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.IdentityCardDate = dval_
            self.IdentityCardDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.IdentityCardDate)
        elif nodeName_ == 'DocValidityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocValidityDate = dval_
            self.DocValidityDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocValidityDate)
        elif nodeName_ == 'OrganizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationName')
            value_ = self.gds_validate_string(value_, node, 'OrganizationName')
            self.OrganizationName = value_
            self.OrganizationName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.OrganizationName)
        elif nodeName_ == 'IssuerCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IssuerCode')
            value_ = self.gds_validate_string(value_, node, 'IssuerCode')
            self.IssuerCode = value_
            self.IssuerCode_nsprefix_ = child_.prefix
            # validate type CodeVariable7Type
            self.validate_CodeVariable7Type(self.IssuerCode)
        elif nodeName_ == 'AuthorityId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AuthorityId')
            value_ = self.gds_validate_string(value_, node, 'AuthorityId')
            self.AuthorityId = value_
            self.AuthorityId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.AuthorityId)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
# end class CUIdentityCardType


class CUMarkExcisableGoodsType(GeneratedsSuper):
    """CUMarkExcisableGoodsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    м
    а
    р
    к
    и
    р
    о
    в
    а
    н
    н
    ы
    х
    п
    о
    д
    а
    к
    ц
    и
    з
    н
    ы
    х
    т
    о
    в
    а
    р
    а
    х
    Series -- С
    е
    р
    и
    я
    м
    а
    р
    о
    к
    Number -- Н
    о
    м
    е
    р
    м
    а
    р
    к
    и
    QuantityMark -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    а
    к
    ц
    и
    з
    н
    ы
    х
    м
    а
    р
    о
    к
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Series=None, Number=None, QuantityMark=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if Series is None:
            self.Series = []
        else:
            self.Series = Series
        self.Series_nsprefix_ = "clt_ru"
        self.Number = Number
        self.validate_Count5Type(self.Number)
        self.Number_nsprefix_ = "clt_ru"
        if QuantityMark is None:
            self.QuantityMark = []
        else:
            self.QuantityMark = QuantityMark
        self.QuantityMark_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUMarkExcisableGoodsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUMarkExcisableGoodsType.subclass:
            return CUMarkExcisableGoodsType.subclass(*args_, **kwargs_)
        else:
            return CUMarkExcisableGoodsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Series(self):
        return self.Series
    def set_Series(self, Series):
        self.Series = Series
    def add_Series(self, value):
        self.Series.append(value)
    def insert_Series_at(self, index, value):
        self.Series.insert(index, value)
    def replace_Series_at(self, index, value):
        self.Series[index] = value
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_QuantityMark(self):
        return self.QuantityMark
    def set_QuantityMark(self, QuantityMark):
        self.QuantityMark = QuantityMark
    def add_QuantityMark(self, value):
        self.QuantityMark.append(value)
    def insert_QuantityMark_at(self, index, value):
        self.QuantityMark.insert(index, value)
    def replace_QuantityMark_at(self, index, value):
        self.QuantityMark[index] = value
    def validate_Count5Type(self, value):
        result = True
        # Validate type Count5Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Series or
            self.Number is not None or
            self.QuantityMark
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUMarkExcisableGoodsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUMarkExcisableGoodsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUMarkExcisableGoodsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUMarkExcisableGoodsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUMarkExcisableGoodsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUMarkExcisableGoodsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUMarkExcisableGoodsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Series_ in self.Series:
            namespaceprefix_ = self.Series_nsprefix_ + ':' if (UseCapturedNS_ and self.Series_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeries>%s</%sSeries>%s' % (namespaceprefix_ , self.gds_format_integer(Series_, input_name='Series'), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.Number, input_name='Number'), namespaceprefix_ , eol_))
        for QuantityMark_ in self.QuantityMark:
            namespaceprefix_ = self.QuantityMark_nsprefix_ + ':' if (UseCapturedNS_ and self.QuantityMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityMark>%s</%sQuantityMark>%s' % (namespaceprefix_ , self.gds_format_decimal(QuantityMark_, input_name='QuantityMark'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Series' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Series')
            ival_ = self.gds_validate_integer(ival_, node, 'Series')
            self.Series.append(ival_)
            self.Series_nsprefix_ = child_.prefix
            # validate type Count5Type
            self.validate_Count5Type(self.Series[-1])
        elif nodeName_ == 'Number' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Number')
            ival_ = self.gds_validate_integer(ival_, node, 'Number')
            self.Number = ival_
            self.Number_nsprefix_ = child_.prefix
            # validate type Count5Type
            self.validate_Count5Type(self.Number)
        elif nodeName_ == 'QuantityMark' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'QuantityMark')
            fval_ = self.gds_validate_decimal(fval_, node, 'QuantityMark')
            self.QuantityMark.append(fval_)
            self.QuantityMark_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.QuantityMark[-1])
# end class CUMarkExcisableGoodsType


class CUPreferenciiType(GeneratedsSuper):
    """CUPreferenciiType -- П
    р
    е
    ф
    е
    р
    е
    н
    ц
    и
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    л
    ь
    г
    о
    т
    п
    о
    у
    п
    л
    а
    т
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    .
    Г
    р
    .36
    CustomsTax -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    с
    б
    о
    р
    ы
    CustomsDuty -- Т
    а
    м
    о
    ж
    е
    н
    н
    а
    я
    п
    о
    ш
    л
    и
    н
    а
    Excise -- А
    к
    ц
    и
    з
    ы
    Rate -- Н
    а
    л
    о
    г
    н
    а
    д
    о
    б
    а
    в
    л
    е
    н
    н
    у
    ю
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomsTax=None, CustomsDuty=None, Excise=None, Rate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.CustomsTax = CustomsTax
        self.validate_Code2Type(self.CustomsTax)
        self.CustomsTax_nsprefix_ = "clt_ru"
        self.CustomsDuty = CustomsDuty
        self.validate_Code2Type(self.CustomsDuty)
        self.CustomsDuty_nsprefix_ = "clt_ru"
        self.Excise = Excise
        self.validate_LetterIndicatorType(self.Excise)
        self.Excise_nsprefix_ = "clt_ru"
        self.Rate = Rate
        self.validate_Code2Type(self.Rate)
        self.Rate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUPreferenciiType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUPreferenciiType.subclass:
            return CUPreferenciiType.subclass(*args_, **kwargs_)
        else:
            return CUPreferenciiType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomsTax(self):
        return self.CustomsTax
    def set_CustomsTax(self, CustomsTax):
        self.CustomsTax = CustomsTax
    def get_CustomsDuty(self):
        return self.CustomsDuty
    def set_CustomsDuty(self, CustomsDuty):
        self.CustomsDuty = CustomsDuty
    def get_Excise(self):
        return self.Excise
    def set_Excise(self, Excise):
        self.Excise = Excise
    def get_Rate(self):
        return self.Rate
    def set_Rate(self, Rate):
        self.Rate = Rate
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CustomsTax is not None or
            self.CustomsDuty is not None or
            self.Excise is not None or
            self.Rate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUPreferenciiType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUPreferenciiType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUPreferenciiType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUPreferenciiType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUPreferenciiType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUPreferenciiType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUPreferenciiType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomsTax is not None:
            namespaceprefix_ = self.CustomsTax_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsTax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsTax>%s</%sCustomsTax>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsTax), input_name='CustomsTax')), namespaceprefix_ , eol_))
        if self.CustomsDuty is not None:
            namespaceprefix_ = self.CustomsDuty_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsDuty_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsDuty>%s</%sCustomsDuty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsDuty), input_name='CustomsDuty')), namespaceprefix_ , eol_))
        if self.Excise is not None:
            namespaceprefix_ = self.Excise_nsprefix_ + ':' if (UseCapturedNS_ and self.Excise_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExcise>%s</%sExcise>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Excise), input_name='Excise')), namespaceprefix_ , eol_))
        if self.Rate is not None:
            namespaceprefix_ = self.Rate_nsprefix_ + ':' if (UseCapturedNS_ and self.Rate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate>%s</%sRate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rate), input_name='Rate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomsTax':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsTax')
            value_ = self.gds_validate_string(value_, node, 'CustomsTax')
            self.CustomsTax = value_
            self.CustomsTax_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.CustomsTax)
        elif nodeName_ == 'CustomsDuty':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsDuty')
            value_ = self.gds_validate_string(value_, node, 'CustomsDuty')
            self.CustomsDuty = value_
            self.CustomsDuty_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.CustomsDuty)
        elif nodeName_ == 'Excise':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Excise')
            value_ = self.gds_validate_string(value_, node, 'Excise')
            self.Excise = value_
            self.Excise_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.Excise)
        elif nodeName_ == 'Rate':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Rate')
            value_ = self.gds_validate_string(value_, node, 'Rate')
            self.Rate = value_
            self.Rate_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.Rate)
# end class CUPreferenciiType


class CUPresentedDocumentsType(CUESADPresentedDocumentsType):
    """CUPresentedDocumentsType -- ESAD.
    П
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    ы
    TIRPageNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    л
    и
    с
    т
    а
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    TIRHolderID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    р
    ж
    а
    т
    е
    л
    я
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    RegNumberDocument -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    с
    к
    о
    т
    о
    р
    ы
    м
    о
    н
    б
    ы
    л
    п
    е
    р
    в
    о
    н
    а
    ч
    а
    л
    ь
    н
    о
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CUESADPresentedDocumentsType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, CustomsCode=None, CustomsControlZoneId=None, PresentedDocumentModeCode=None, DocumentBeginActionsDate=None, DocumentEndActionsDate=None, TemporaryImportCode=None, TemporaryStorageImportDate=None, CustomsPaymentModeCodeType=None, SupplyStatus=None, CountryCode=None, TotalDocuments=None, PreferenciiCountryCode=None, PreferenciiDocID=None, ProcessingGoodsCostInfo=None, RecordID=None, ExecutiveBodyID=None, ExecutiveName=None, LicenseGoods=None, GoodsNumeric=None, RFG44PresentedDocId=None, TIRPageNumber=None, TIRHolderID=None, RegNumberDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("CUPresentedDocumentsType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, CustomsCode, CustomsControlZoneId, PresentedDocumentModeCode, DocumentBeginActionsDate, DocumentEndActionsDate, TemporaryImportCode, TemporaryStorageImportDate, CustomsPaymentModeCodeType, SupplyStatus, CountryCode, TotalDocuments, PreferenciiCountryCode, PreferenciiDocID, ProcessingGoodsCostInfo, RecordID, ExecutiveBodyID, ExecutiveName, LicenseGoods, GoodsNumeric, RFG44PresentedDocId,  **kwargs_)
        self.TIRPageNumber = TIRPageNumber
        self.validate_Count2Type(self.TIRPageNumber)
        self.TIRPageNumber_nsprefix_ = "clt_ru"
        self.TIRHolderID = TIRHolderID
        self.validate_TIRHolderIDType(self.TIRHolderID)
        self.TIRHolderID_nsprefix_ = "clt_ru"
        self.RegNumberDocument = RegNumberDocument
        self.validate_Text50Type(self.RegNumberDocument)
        self.RegNumberDocument_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUPresentedDocumentsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUPresentedDocumentsType.subclass:
            return CUPresentedDocumentsType.subclass(*args_, **kwargs_)
        else:
            return CUPresentedDocumentsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TIRPageNumber(self):
        return self.TIRPageNumber
    def set_TIRPageNumber(self, TIRPageNumber):
        self.TIRPageNumber = TIRPageNumber
    def get_TIRHolderID(self):
        return self.TIRHolderID
    def set_TIRHolderID(self, TIRHolderID):
        self.TIRHolderID = TIRHolderID
    def get_RegNumberDocument(self):
        return self.RegNumberDocument
    def set_RegNumberDocument(self, RegNumberDocument):
        self.RegNumberDocument = RegNumberDocument
    def validate_Count2Type(self, value):
        result = True
        # Validate type Count2Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_TIRHolderIDType(self, value):
        result = True
        # Validate type TIRHolderIDType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TIRHolderIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TIRHolderIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TIRPageNumber is not None or
            self.TIRHolderID is not None or
            self.RegNumberDocument is not None or
            super(CUPresentedDocumentsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUPresentedDocumentsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUPresentedDocumentsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUPresentedDocumentsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUPresentedDocumentsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUPresentedDocumentsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUPresentedDocumentsType'):
        super(CUPresentedDocumentsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUPresentedDocumentsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUPresentedDocumentsType', fromsubclass_=False, pretty_print=True):
        super(CUPresentedDocumentsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TIRPageNumber is not None:
            namespaceprefix_ = self.TIRPageNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRPageNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTIRPageNumber>%s</%sTIRPageNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.TIRPageNumber, input_name='TIRPageNumber'), namespaceprefix_ , eol_))
        if self.TIRHolderID is not None:
            namespaceprefix_ = self.TIRHolderID_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRHolderID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTIRHolderID>%s</%sTIRHolderID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TIRHolderID), input_name='TIRHolderID')), namespaceprefix_ , eol_))
        if self.RegNumberDocument is not None:
            namespaceprefix_ = self.RegNumberDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.RegNumberDocument_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegNumberDocument>%s</%sRegNumberDocument>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegNumberDocument), input_name='RegNumberDocument')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUPresentedDocumentsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TIRPageNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TIRPageNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'TIRPageNumber')
            self.TIRPageNumber = ival_
            self.TIRPageNumber_nsprefix_ = child_.prefix
            # validate type Count2Type
            self.validate_Count2Type(self.TIRPageNumber)
        elif nodeName_ == 'TIRHolderID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TIRHolderID')
            value_ = self.gds_validate_string(value_, node, 'TIRHolderID')
            self.TIRHolderID = value_
            self.TIRHolderID_nsprefix_ = child_.prefix
            # validate type TIRHolderIDType
            self.validate_TIRHolderIDType(self.TIRHolderID)
        elif nodeName_ == 'RegNumberDocument':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegNumberDocument')
            value_ = self.gds_validate_string(value_, node, 'RegNumberDocument')
            self.RegNumberDocument = value_
            self.RegNumberDocument_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.RegNumberDocument)
        super(CUPresentedDocumentsType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUPresentedDocumentsType


class CUTransportType(GeneratedsSuper):
    """CUTransportType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    м
    е
    с
    т
    о
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    и
    т
    о
    в
    а
    р
    о
    в
    -
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    TransporKind -- К
    о
    д
    в
    и
    д
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    т
    р
    а
    н
    с
    п
    о
    р
    т
    а
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    и
    р
    о
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    TransporIdentifier -- Н
    о
    м
    е
    р
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransporKind=None, TransporIdentifier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.TransporKind = TransporKind
        self.validate_TransportModeCodeType(self.TransporKind)
        self.TransporKind_nsprefix_ = "clt_ru"
        if TransporIdentifier is None:
            self.TransporIdentifier = []
        else:
            self.TransporIdentifier = TransporIdentifier
        self.TransporIdentifier_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUTransportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUTransportType.subclass:
            return CUTransportType.subclass(*args_, **kwargs_)
        else:
            return CUTransportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransporKind(self):
        return self.TransporKind
    def set_TransporKind(self, TransporKind):
        self.TransporKind = TransporKind
    def get_TransporIdentifier(self):
        return self.TransporIdentifier
    def set_TransporIdentifier(self, TransporIdentifier):
        self.TransporIdentifier = TransporIdentifier
    def add_TransporIdentifier(self, value):
        self.TransporIdentifier.append(value)
    def insert_TransporIdentifier_at(self, index, value):
        self.TransporIdentifier.insert(index, value)
    def replace_TransporIdentifier_at(self, index, value):
        self.TransporIdentifier[index] = value
    def validate_TransportModeCodeType(self, value):
        result = True
        # Validate type TransportModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TransportModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_TransportMeansIDType(self, value):
        result = True
        # Validate type TransportMeansIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TransportMeansIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TransportMeansIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TransporKind is not None or
            self.TransporIdentifier
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUTransportType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUTransportType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUTransportType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUTransportType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUTransportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUTransportType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUTransportType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransporKind is not None:
            namespaceprefix_ = self.TransporKind_nsprefix_ + ':' if (UseCapturedNS_ and self.TransporKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransporKind>%s</%sTransporKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransporKind), input_name='TransporKind')), namespaceprefix_ , eol_))
        for TransporIdentifier_ in self.TransporIdentifier:
            namespaceprefix_ = self.TransporIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.TransporIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransporIdentifier>%s</%sTransporIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(TransporIdentifier_), input_name='TransporIdentifier')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransporKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransporKind')
            value_ = self.gds_validate_string(value_, node, 'TransporKind')
            self.TransporKind = value_
            self.TransporKind_nsprefix_ = child_.prefix
            # validate type TransportModeCodeType
            self.validate_TransportModeCodeType(self.TransporKind)
        elif nodeName_ == 'TransporIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransporIdentifier')
            value_ = self.gds_validate_string(value_, node, 'TransporIdentifier')
            self.TransporIdentifier.append(value_)
            self.TransporIdentifier_nsprefix_ = child_.prefix
            # validate type TransportMeansIDType
            self.validate_TransportMeansIDType(self.TransporIdentifier[-1])
# end class CUTransportType


class CUWarehousePlaceType(DocumentBaseType):
    """CUWarehousePlaceType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    у
    ю
    щ
    е
    м
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    ы
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    л
    и
    б
    о
    р
    е
    е
    с
    т
    р
    ы
    в
    л
    а
    д
    е
    л
    ь
    ц
    е
    в
    с
    к
    л
    а
    д
    о
    в
    х
    р
    а
    н
    е
    н
    и
    я
    с
    о
    б
    с
    т
    в
    е
    н
    н
    ы
    х
    т
    о
    в
    а
    р
    о
    в
    ,
    в
    л
    а
    д
    е
    л
    ь
    ц
    е
    в
    с
    к
    л
    а
    д
    о
    в
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    х
    р
    а
    н
    е
    н
    и
    я
    ,
    в
    л
    а
    д
    е
    л
    ь
    ц
    е
    в
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    с
    к
    л
    а
    д
    о
    в
    л
    и
    б
    о
    с
    в
    о
    б
    о
    д
    н
    ы
    х
    с
    к
    л
    а
    д
    о
    в
    ,
    р
    а
    з
    р
    е
    ш
    е
    н
    и
    е
    н
    а
    в
    р
    е
    м
    е
    н
    н
    о
    е
    х
    р
    а
    н
    е
    н
    и
    е
    н
    а
    с
    к
    л
    а
    д
    е
    п
    о
    л
    у
    ч
    а
    т
    е
    л
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("CUWarehousePlaceType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate,  **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUWarehousePlaceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUWarehousePlaceType.subclass:
            return CUWarehousePlaceType.subclass(*args_, **kwargs_)
        else:
            return CUWarehousePlaceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def has__content(self):
        if (
            super(CUWarehousePlaceType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='CUWarehousePlaceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUWarehousePlaceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUWarehousePlaceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUWarehousePlaceType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUWarehousePlaceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUWarehousePlaceType'):
        super(CUWarehousePlaceType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUWarehousePlaceType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='CUWarehousePlaceType', fromsubclass_=False, pretty_print=True):
        super(CUWarehousePlaceType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUWarehousePlaceType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(CUWarehousePlaceType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class CUWarehousePlaceType


class DeliveryTermsType3(GeneratedsSuper):
    """DeliveryTermsType3 -- У
    с
    л
    о
    в
    и
    я
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    DeliveryPlace -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    г
    е
    о
    г
    р
    а
    ф
    и
    ч
    е
    с
    к
    о
    г
    о
    п
    у
    н
    к
    т
    а
    и
    л
    и
    м
    е
    с
    т
    а
    п
    е
    р
    е
    д
    а
    ч
    и
    т
    о
    в
    а
    р
    о
    в
    DeliveryTermsStringCode -- К
    о
    д
    у
    с
    л
    о
    в
    и
    й
    п
    о
    с
    т
    а
    в
    к
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    у
    с
    л
    о
    в
    и
    й
    п
    о
    с
    т
    а
    в
    к
    и
    DeliveryTermsRBCode -- К
    о
    д
    в
    и
    д
    а
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    п
    о
    с
    т
    а
    в
    о
    к
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    о
    д
    л
    е
    ж
    а
    щ
    и
    х
    у
    ч
    е
    т
    у
    п
    р
    и
    о
    с
    у
    щ
    е
    с
    т
    в
    л
    е
    н
    и
    и
    э
    к
    с
    п
    о
    р
    т
    н
    ы
    х
    о
    п
    е
    р
    а
    ц
    и
    й
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DeliveryPlace=None, DeliveryTermsStringCode=None, DeliveryTermsRBCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.DeliveryPlace = DeliveryPlace
        self.validate_Text50Type(self.DeliveryPlace)
        self.DeliveryPlace_nsprefix_ = "clt_ru"
        self.DeliveryTermsStringCode = DeliveryTermsStringCode
        self.validate_IncotermsDeliveryStringCodeType(self.DeliveryTermsStringCode)
        self.DeliveryTermsStringCode_nsprefix_ = "clt_ru"
        self.DeliveryTermsRBCode = DeliveryTermsRBCode
        self.validate_Code2Type(self.DeliveryTermsRBCode)
        self.DeliveryTermsRBCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryTermsType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryTermsType3.subclass:
            return DeliveryTermsType3.subclass(*args_, **kwargs_)
        else:
            return DeliveryTermsType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DeliveryPlace(self):
        return self.DeliveryPlace
    def set_DeliveryPlace(self, DeliveryPlace):
        self.DeliveryPlace = DeliveryPlace
    def get_DeliveryTermsStringCode(self):
        return self.DeliveryTermsStringCode
    def set_DeliveryTermsStringCode(self, DeliveryTermsStringCode):
        self.DeliveryTermsStringCode = DeliveryTermsStringCode
    def get_DeliveryTermsRBCode(self):
        return self.DeliveryTermsRBCode
    def set_DeliveryTermsRBCode(self, DeliveryTermsRBCode):
        self.DeliveryTermsRBCode = DeliveryTermsRBCode
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IncotermsDeliveryStringCodeType(self, value):
        result = True
        # Validate type IncotermsDeliveryStringCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_IncotermsDeliveryStringCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_IncotermsDeliveryStringCodeType_patterns_, ))
                result = False
        return result
    validate_IncotermsDeliveryStringCodeType_patterns_ = [['^(\\D{3})$']]
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DeliveryPlace is not None or
            self.DeliveryTermsStringCode is not None or
            self.DeliveryTermsRBCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DeliveryTermsType3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryTermsType3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryTermsType3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryTermsType3')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryTermsType3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='DeliveryTermsType3'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DeliveryTermsType3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeliveryPlace is not None:
            namespaceprefix_ = self.DeliveryPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryPlace_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryPlace>%s</%sDeliveryPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryPlace), input_name='DeliveryPlace')), namespaceprefix_ , eol_))
        if self.DeliveryTermsStringCode is not None:
            namespaceprefix_ = self.DeliveryTermsStringCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTermsStringCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTermsStringCode>%s</%sDeliveryTermsStringCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryTermsStringCode), input_name='DeliveryTermsStringCode')), namespaceprefix_ , eol_))
        if self.DeliveryTermsRBCode is not None:
            namespaceprefix_ = self.DeliveryTermsRBCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTermsRBCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTermsRBCode>%s</%sDeliveryTermsRBCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryTermsRBCode), input_name='DeliveryTermsRBCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DeliveryPlace':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryPlace')
            value_ = self.gds_validate_string(value_, node, 'DeliveryPlace')
            self.DeliveryPlace = value_
            self.DeliveryPlace_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.DeliveryPlace)
        elif nodeName_ == 'DeliveryTermsStringCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DeliveryTermsStringCode')
            value_ = self.gds_validate_string(value_, node, 'DeliveryTermsStringCode')
            self.DeliveryTermsStringCode = value_
            self.DeliveryTermsStringCode_nsprefix_ = child_.prefix
            # validate type IncotermsDeliveryStringCodeType
            self.validate_IncotermsDeliveryStringCodeType(self.DeliveryTermsStringCode)
        elif nodeName_ == 'DeliveryTermsRBCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DeliveryTermsRBCode')
            value_ = self.gds_validate_string(value_, node, 'DeliveryTermsRBCode')
            self.DeliveryTermsRBCode = value_
            self.DeliveryTermsRBCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.DeliveryTermsRBCode)
# end class DeliveryTermsType3


class DimensionType(GeneratedsSuper):
    """DimensionType -- Л
    и
    н
    е
    й
    н
    ы
    е
    р
    а
    з
    м
    е
    р
    ы
    о
    б
    ъ
    е
    к
    т
    а
    (
    д
    л
    и
    н
    а
    ,
    ш
    и
    р
    и
    н
    а
    и
    в
    ы
    с
    о
    т
    а
    )
    LengthMeasure -- Л
    и
    н
    е
    й
    н
    ы
    й
    р
    а
    з
    м
    е
    р
    о
    б
    ъ
    е
    к
    т
    а
    в
    п
    р
    о
    д
    о
    л
    ь
    н
    о
    м
    н
    а
    п
    р
    а
    в
    л
    е
    н
    и
    и
      
    * WidthMeasure -- Л
      и
      н
      е
      й
      н
      ы
      й
      р
      а
      з
      м
      е
      р
      о
      б
      ъ
      е
      к
      т
      а
      в
      п
      о
      п
      е
      р
      е
      ч
      н
      о
      м
      н
      а
      п
      р
      а
      в
      л
      е
      н
      и
      и
    * HeightMeasure -- Л
      и
      н
      е
      й
      н
      ы
      й
      р
      а
      з
      м
      е
      р
      о
      б
      ъ
      е
      к
      т
      а
      в
      в
      е
      р
      т
      и
      к
      а
      л
      ь
      н
      о
      м
      н
      а
      п
      р
      а
      в
      л
      е
      н
      и
      и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LengthMeasure=None, WidthMeasure=None, HeightMeasure=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.LengthMeasure = LengthMeasure
        self.LengthMeasure_nsprefix_ = "catESAD_cu"
        self.WidthMeasure = WidthMeasure
        self.WidthMeasure_nsprefix_ = "catESAD_cu"
        self.HeightMeasure = HeightMeasure
        self.HeightMeasure_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DimensionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DimensionType.subclass:
            return DimensionType.subclass(*args_, **kwargs_)
        else:
            return DimensionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LengthMeasure(self):
        return self.LengthMeasure
    def set_LengthMeasure(self, LengthMeasure):
        self.LengthMeasure = LengthMeasure
    def get_WidthMeasure(self):
        return self.WidthMeasure
    def set_WidthMeasure(self, WidthMeasure):
        self.WidthMeasure = WidthMeasure
    def get_HeightMeasure(self):
        return self.HeightMeasure
    def set_HeightMeasure(self, HeightMeasure):
        self.HeightMeasure = HeightMeasure
    def has__content(self):
        if (
            self.LengthMeasure is not None or
            self.WidthMeasure is not None or
            self.HeightMeasure is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='DimensionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DimensionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DimensionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DimensionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DimensionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='DimensionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='DimensionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LengthMeasure is not None:
            namespaceprefix_ = self.LengthMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.LengthMeasure_nsprefix_) else ''
            self.LengthMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LengthMeasure', pretty_print=pretty_print)
        if self.WidthMeasure is not None:
            namespaceprefix_ = self.WidthMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.WidthMeasure_nsprefix_) else ''
            self.WidthMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WidthMeasure', pretty_print=pretty_print)
        if self.HeightMeasure is not None:
            namespaceprefix_ = self.HeightMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.HeightMeasure_nsprefix_) else ''
            self.HeightMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HeightMeasure', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LengthMeasure':
            obj_ = UnifiedPhysicalMeasureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LengthMeasure = obj_
            obj_.original_tagname_ = 'LengthMeasure'
        elif nodeName_ == 'WidthMeasure':
            obj_ = UnifiedPhysicalMeasureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WidthMeasure = obj_
            obj_.original_tagname_ = 'WidthMeasure'
        elif nodeName_ == 'HeightMeasure':
            obj_ = UnifiedPhysicalMeasureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HeightMeasure = obj_
            obj_.original_tagname_ = 'HeightMeasure'
# end class DimensionType


class DocBaseType(DocumentBaseType):
    """DocBaseType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    б
    а
    з
    о
    в
    ы
    х
    р
    е
    к
    в
    и
    з
    и
    т
    а
    х
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocStartDate -- Д
    а
    т
    а
    н
    а
    ч
    а
    л
    а
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    DocValidityDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    DocKindCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocStartDate=None, DocValidityDate=None, CountryCode=None, DocKindCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("DocBaseType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, extensiontype_,  **kwargs_)
        if isinstance(DocStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocStartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocStartDate
        self.DocStartDate = initvalue_
        self.DocStartDate_nsprefix_ = "clt_ru"
        if isinstance(DocValidityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocValidityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocValidityDate
        self.DocValidityDate = initvalue_
        self.DocValidityDate_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.DocKindCode = DocKindCode
        self.validate_CustomsDocumentCodeType(self.DocKindCode)
        self.DocKindCode_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocBaseType.subclass:
            return DocBaseType.subclass(*args_, **kwargs_)
        else:
            return DocBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocStartDate(self):
        return self.DocStartDate
    def set_DocStartDate(self, DocStartDate):
        self.DocStartDate = DocStartDate
    def get_DocValidityDate(self):
        return self.DocValidityDate
    def set_DocValidityDate(self, DocValidityDate):
        self.DocValidityDate = DocValidityDate
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_DocKindCode(self):
        return self.DocKindCode
    def set_DocKindCode(self, DocKindCode):
        self.DocKindCode = DocKindCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocStartDate is not None or
            self.DocValidityDate is not None or
            self.CountryCode is not None or
            self.DocKindCode is not None or
            super(DocBaseType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='DocBaseType'):
        super(DocBaseType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBaseType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocBaseType', fromsubclass_=False, pretty_print=True):
        super(DocBaseType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocStartDate is not None:
            namespaceprefix_ = self.DocStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocStartDate>%s</%sDocStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocStartDate, input_name='DocStartDate'), namespaceprefix_ , eol_))
        if self.DocValidityDate is not None:
            namespaceprefix_ = self.DocValidityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocValidityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocValidityDate>%s</%sDocValidityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocValidityDate, input_name='DocValidityDate'), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.DocKindCode is not None:
            namespaceprefix_ = self.DocKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocKindCode>%s</%sDocKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocKindCode), input_name='DocKindCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(DocBaseType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocStartDate = dval_
            self.DocStartDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocStartDate)
        elif nodeName_ == 'DocValidityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocValidityDate = dval_
            self.DocValidityDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocValidityDate)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'DocKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocKindCode')
            value_ = self.gds_validate_string(value_, node, 'DocKindCode')
            self.DocKindCode = value_
            self.DocKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocKindCode)
        super(DocBaseType, self)._buildChildren(child_, node, nodeName_, True)
# end class DocBaseType


class DTIdentificationMeansDetailsType(GeneratedsSuper):
    """DTIdentificationMeansDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    м
    а
    р
    к
    и
    р
    о
    в
    а
    н
    н
    о
    г
    о
    т
    о
    в
    а
    р
    а
    CIMMarkingCode -- П
    р
    и
    з
    н
    а
    к
    н
    а
    н
    е
    с
    е
    н
    и
    я
    с
    р
    е
    д
    с
    т
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    п
    о
    с
    л
    е
    в
    ы
    п
    у
    с
    к
    а
    т
    о
    в
    а
    р
    о
    в
    «
    П
    В
    »
    CIMQuantity -- О
    б
    щ
    е
    е
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    к
    о
    д
    о
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    ,
    с
    о
    д
    е
    р
    ж
    а
    щ
    и
    х
    с
    я
    в
    с
    р
    е
    д
    с
    т
    в
    а
    х
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    ,
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    х
    н
    а
    к
    а
    ж
    д
    у
    ю
    е
    д
    и
    н
    и
    ц
    у
    т
    о
    в
    а
    р
    а
    ,
    и
    л
    и
    н
    а
    п
    о
    т
    р
    е
    б
    и
    т
    е
    л
    ь
    с
    к
    у
    ю
    у
    п
    а
    к
    о
    в
    к
    у
    (
    а
    в
    с
    л
    у
    ч
    а
    е
    е
    е
    о
    т
    с
    у
    т
    с
    т
    в
    и
    я
    –
    н
    а
    п
    е
    р
    в
    и
    ч
    н
    у
    ю
    у
    п
    а
    к
    о
    в
    к
    у
    ),
    и
    л
    и
    н
    а
    м
    а
    т
    е
    р
    и
    а
    л
    ь
    н
    ы
    й
    н
    о
    с
    и
    т
    е
    л
    ь
    IdentificationMeansDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    м
    а
    р
    к
    и
    р
    о
    в
    а
    н
    н
    о
    г
    о
    т
    о
    в
    а
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CIMMarkingCode=None, CIMQuantity=None, IdentificationMeansDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.CIMMarkingCode = CIMMarkingCode
        self.validate_Code2Type(self.CIMMarkingCode)
        self.CIMMarkingCode_nsprefix_ = "clt_ru"
        self.CIMQuantity = CIMQuantity
        self.validate_Quantity10Type(self.CIMQuantity)
        self.CIMQuantity_nsprefix_ = "cltESAD_cu"
        if IdentificationMeansDetails is None:
            self.IdentificationMeansDetails = []
        else:
            self.IdentificationMeansDetails = IdentificationMeansDetails
        self.IdentificationMeansDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DTIdentificationMeansDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DTIdentificationMeansDetailsType.subclass:
            return DTIdentificationMeansDetailsType.subclass(*args_, **kwargs_)
        else:
            return DTIdentificationMeansDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CIMMarkingCode(self):
        return self.CIMMarkingCode
    def set_CIMMarkingCode(self, CIMMarkingCode):
        self.CIMMarkingCode = CIMMarkingCode
    def get_CIMQuantity(self):
        return self.CIMQuantity
    def set_CIMQuantity(self, CIMQuantity):
        self.CIMQuantity = CIMQuantity
    def get_IdentificationMeansDetails(self):
        return self.IdentificationMeansDetails
    def set_IdentificationMeansDetails(self, IdentificationMeansDetails):
        self.IdentificationMeansDetails = IdentificationMeansDetails
    def add_IdentificationMeansDetails(self, value):
        self.IdentificationMeansDetails.append(value)
    def insert_IdentificationMeansDetails_at(self, index, value):
        self.IdentificationMeansDetails.insert(index, value)
    def replace_IdentificationMeansDetails_at(self, index, value):
        self.IdentificationMeansDetails[index] = value
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Quantity10Type(self, value):
        result = True
        # Validate type Quantity10Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity10Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity10Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CIMMarkingCode is not None or
            self.CIMQuantity is not None or
            self.IdentificationMeansDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='DTIdentificationMeansDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DTIdentificationMeansDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DTIdentificationMeansDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DTIdentificationMeansDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DTIdentificationMeansDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='DTIdentificationMeansDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='DTIdentificationMeansDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CIMMarkingCode is not None:
            namespaceprefix_ = self.CIMMarkingCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMMarkingCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMMarkingCode>%s</%sCIMMarkingCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CIMMarkingCode), input_name='CIMMarkingCode')), namespaceprefix_ , eol_))
        if self.CIMQuantity is not None:
            namespaceprefix_ = self.CIMQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMQuantity>%s</%sCIMQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.CIMQuantity, input_name='CIMQuantity'), namespaceprefix_ , eol_))
        for IdentificationMeansDetails_ in self.IdentificationMeansDetails:
            namespaceprefix_ = self.IdentificationMeansDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentificationMeansDetails_nsprefix_) else ''
            IdentificationMeansDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificationMeansDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CIMMarkingCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CIMMarkingCode')
            value_ = self.gds_validate_string(value_, node, 'CIMMarkingCode')
            self.CIMMarkingCode = value_
            self.CIMMarkingCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.CIMMarkingCode)
        elif nodeName_ == 'CIMQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CIMQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'CIMQuantity')
            self.CIMQuantity = ival_
            self.CIMQuantity_nsprefix_ = child_.prefix
            # validate type Quantity10Type
            self.validate_Quantity10Type(self.CIMQuantity)
        elif nodeName_ == 'IdentificationMeansDetails':
            obj_ = IdentificationMeansDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentificationMeansDetails.append(obj_)
            obj_.original_tagname_ = 'IdentificationMeansDetails'
# end class DTIdentificationMeansDetailsType


class DTMDocDetailsType(GeneratedsSuper):
    """DTMDocDetailsType -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    TransportModeCode -- К
    о
    д
    в
    и
    д
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    т
    р
    а
    н
    с
    п
    о
    р
    т
    а
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    и
    р
    о
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransportModeCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.TransportModeCode = TransportModeCode
        self.validate_TransportModeCodeType(self.TransportModeCode)
        self.TransportModeCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DTMDocDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DTMDocDetailsType.subclass:
            return DTMDocDetailsType.subclass(*args_, **kwargs_)
        else:
            return DTMDocDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportModeCode(self):
        return self.TransportModeCode
    def set_TransportModeCode(self, TransportModeCode):
        self.TransportModeCode = TransportModeCode
    def validate_TransportModeCodeType(self, value):
        result = True
        # Validate type TransportModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TransportModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TransportModeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DTMDocDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DTMDocDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DTMDocDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DTMDocDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DTMDocDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='DTMDocDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DTMDocDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportModeCode is not None:
            namespaceprefix_ = self.TransportModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportModeCode>%s</%sTransportModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportModeCode), input_name='TransportModeCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportModeCode')
            value_ = self.gds_validate_string(value_, node, 'TransportModeCode')
            self.TransportModeCode = value_
            self.TransportModeCode_nsprefix_ = child_.prefix
            # validate type TransportModeCodeType
            self.validate_TransportModeCodeType(self.TransportModeCode)
        super(DTMDocDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class DTMDocDetailsType


class EECCustomsType(CustomsType):
    """EECCustomsType -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    Е
    А
    Э
    С
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CustomsType
    def __init__(self, Code=None, OfficeName=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("EECCustomsType"), self).__init__(Code, OfficeName,  **kwargs_)
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EECCustomsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EECCustomsType.subclass:
            return EECCustomsType.subclass(*args_, **kwargs_)
        else:
            return EECCustomsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.CountryCode is not None or
            super(EECCustomsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECCustomsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EECCustomsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EECCustomsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECCustomsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EECCustomsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='EECCustomsType'):
        super(EECCustomsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECCustomsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECCustomsType', fromsubclass_=False, pretty_print=True):
        super(EECCustomsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(EECCustomsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        super(EECCustomsType, self)._buildChildren(child_, node, nodeName_, True)
# end class EECCustomsType


class ESADCommonOfficialMarkType(GeneratedsSuper):
    """ESADCommonOfficialMarkType -- Д
    Т
    и
    Т
    Д
    .
    В
    н
    у
    т
    р
    е
    н
    н
    и
    й
    ф
    о
    р
    м
    а
    т
    .
    С
    л
    у
    ж
    е
    б
    н
    ы
    е
    о
    т
    м
    е
    т
    к
    и
    п
    о
    Д
    Т
    GRNumber -- О
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    г
    р
    а
    ф
    ы
    (
    п
    о
    д
    р
    а
    з
    д
    е
    л
    а
    г
    р
    а
    ф
    ы
    ) (A,C,D,E1,E2,28)
    Г
    р
    а
    ф
    е
    D/J
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    у
    е
    т
    'D'.
    Г
    р
    а
    ф
    а
    м
    E, E/J
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    у
    ю
    т
    :'E1' -
    в
    е
    р
    х
    н
    и
    й
    (
    п
    е
    р
    в
    ы
    й
    )
    п
    о
    д
    р
    а
    з
    д
    е
    л
    г
    р
    а
    ф
    ы
    E(E/J); 'E2' -
    н
    и
    ж
    н
    и
    й
    (
    в
    т
    о
    р
    о
    й
    )
    п
    о
    д
    р
    а
    з
    д
    е
    л
    г
    р
    а
    ф
    ы
    E(E/J)
    StageMarkIdentifier -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    п
    р
    о
    с
    т
    а
    в
    л
    е
    н
    н
    о
    й
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    о
    й
    о
    т
    м
    е
    т
    к
    и
    - 1 (
    н
    о
    м
    е
    р
    э
    т
    а
    п
    а
    )
    NoteMarkIdentifier -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    п
    р
    о
    с
    т
    а
    в
    л
    е
    н
    н
    о
    й
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    о
    й
    о
    т
    м
    е
    т
    к
    и
    -  2 (
    т
    и
    п
    п
    р
    и
    м
    е
    ч
    а
    н
    и
    я
    )
    InformationTypeCode -- К
    о
    д
    т
    и
    п
    а
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    (SKRECC)
    MarkDescription -- С
    л
    у
    ж
    е
    б
    н
    а
    я
    з
    а
    п
    и
    с
    ь
    /
    н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
      
    * DateInf -- Д
      а
      т
      а
      п
      р
      о
      с
      т
      а
      в
      л
      е
      н
      и
      я
      о
      т
      м
      е
      т
      к
      и
      /
      Д
      а
      т
      а
      п
      р
      и
      н
      я
      т
      и
      я
      р
      е
      ш
      е
      н
      и
      я
      о
      п
      р
      о
      д
      л
      е
      н
      и
      и
      с
      р
      о
      к
      а
      п
      р
      о
      в
      е
      р
      к
      и
      
    * TimeInf -- В
      р
      е
      м
      я
    * Amount -- С
      у
      м
      м
      а
      д
      е
      н
      е
      ж
      н
      ы
      х
      с
      р
      е
      д
      с
      т
      в
      /
      С
      у
      м
      м
      а
      р
      н
      ы
      й
      о
      б
      ъ
      е
      м
      о
      т
      д
      е
      л
      е
      н
      и
      й
      т
      р
      а
      н
      с
      п
      о
      р
      т
      н
      ы
      х
      с
      р
      е
      д
      с
      т
      в
      /
      Ф
      а
      к
      т
      у
      р
      н
      а
      я
      с
      т
      о
      и
      м
      о
      с
      т
      ь
    * PaymentTypeCode -- К
      о
      д
      в
      и
      д
      а
      п
      л
      а
      т
      е
      ж
      а
      (
      п
      е
      н
      и
      ,
      ш
      т
      р
      а
      ф
      ы
      ,
      в
      с
      л
      у
      ч
      а
      е
      п
      о
      л
      н
      о
      й
      у
      п
      л
      а
      т
      ы
      т
      а
      м
      о
      ж
      е
      н
      н
      ы
      х
      п
      о
      ш
      л
      и
      н
      ,
      н
      а
      л
      о
      г
      о
      в
      п
      р
      и
      п
      о
      м
      е
      щ
      е
      н
      и
      и
      т
      о
      в
      а
      р
      о
      в
      п
      о
      д
      т
      а
      м
      о
      ж
      е
      н
      н
      ы
      й
      р
      е
      ж
      и
      м
      в
      р
      е
      м
      е
      н
      н
      о
      г
      о
      в
      в
      о
      з
      а
      )
    * PostponementProcent -- П
      р
      о
      ц
      е
      н
      т
      з
      а
      п
      р
      е
      д
      о
      с
      т
      а
      в
      л
      е
      н
      и
      е
      о
      т
      с
      р
      о
      ч
      к
      и
      /
      р
      а
      с
      с
      р
      о
      ч
      к
      и
      (
      з
      а
      п
      о
      л
      н
      я
      е
      т
      с
      я
      д
      л
      я
      91, 93
      в
      и
      д
      о
      в
      т
      а
      м
      .
      п
      л
      а
      т
      е
      ж
      е
      й
      )
    * Code -- Ц
      и
      ф
      р
      о
      в
      о
      й
      к
      о
      д
      в
      а
      л
      ю
      т
      ы
      д
      е
      н
      е
      ж
      н
      ы
      х
      с
      р
      е
      д
      с
      т
      в
      /
      К
      о
      д
      е
      д
      и
      н
      и
      ц
      ы
      и
      з
      м
      е
      р
      е
      н
      и
      я
      /
      Б
      у
      к
      в
      е
      н
      н
      ы
      й
      к
      о
      д
      с
      т
      р
      а
      н
      ы
      П
      р
      и
      м
      е
      ч
      а
      н
      и
      е
      :
      к
      о
      д
      с
      т
      р
      а
      н
      ы
      з
      а
      п
      о
      л
      н
      я
      е
      т
      с
      я
      д
      л
      я
      к
      о
      д
      а
      т
      и
      п
      а
      и
      н
      ф
      о
      р
      м
      а
      ц
      и
      и
      "34"/
      Б
      у
      к
      в
      е
      н
      н
      ы
      й
      к
      о
      д
      в
      а
      л
      ю
      т
      ы
      (
      п
      р
      и
      у
      к
      а
      з
      а
      н
      и
      и
      ф
      а
      к
      т
      у
      р
      н
      о
      й
      с
      т
      о
      и
      м
      о
      с
      т
      и
      )
    * CurrencyName -- Н
      а
      и
      м
      е
      н
      о
      в
      а
      н
      и
      е
      в
      а
      л
      ю
      т
      ы
      д
      е
      н
      е
      ж
      н
      ы
      х
      с
      р
      е
      д
      с
      т
      в
      /
      У
      с
      л
      о
      в
      н
      о
      е
      о
      б
      о
      з
      н
      а
      ч
      е
      н
      и
      е
      е
      д
      и
      н
      и
      ц
      ы
      и
      з
      м
      е
      р
      е
      н
      и
      я
    * PersonName -- Ф
      И
      О
      и
      н
      с
      п
      е
      к
      т
      о
      р
      а
      ,
      з
      а
      в
      е
      р
      и
      в
      ш
      е
      г
      о
      з
      а
      п
      и
      с
      ь
    * LNP -- Н
      о
      м
      е
      р
      Л
      Н
      П
      и
      н
      с
      п
      е
      к
      т
      о
      р
      а
      ,
      з
      а
      в
      е
      р
      и
      в
      ш
      е
      г
      о
      з
      а
      п
      и
      с
      ь
    * GoodsDevisionDate -- Д
      а
      т
      а
      з
      а
      в
      е
      р
      ш
      е
      н
      и
      я
      р
      а
      з
      д
      е
      л
      е
      н
      и
      я
      т
      о
      в
      а
      р
      н
      о
      й
      п
      а
      р
      т
      и
      и
      н
      а
      о
      т
      д
      е
      л
      ь
      н
      ы
      е
      т
      о
      в
      а
      р
      ы
      
    * GoodsDevisionTime -- В
      р
      е
      м
      я
    * Deadline -- С
      р
      о
      к
    * CustomsCode -- К
      о
      д
      т
      а
      м
      о
      ж
      е
      н
      н
      о
      г
      о
      о
      р
      г
      а
      н
      а
    * CustomsActionDate -- Д
      а
      т
      а
      с
      о
      в
      е
      р
      ш
      е
      н
      и
      я
      о
      т
      д
      е
      л
      ь
      н
      ы
      х
      т
      а
      м
      о
      ж
      е
      н
      н
      ы
      х
      о
      п
      е
      р
      а
      ц
      и
      й
    * DocumentIndicator -- П
      р
      и
      з
      н
      а
      к
      д
      о
      к
      у
      м
      е
      н
      т
      а
      .
      З
      а
      п
      о
      л
      н
      я
      е
      т
      с
      я
      п
      р
      и
      у
      к
      а
      з
      а
      н
      и
      и
      н
      о
      м
      е
      р
      а
      : -
      а
      к
      т
      а
      т
      а
      м
      о
      ж
      е
      н
      н
      о
      г
      о
      д
      о
      с
      м
      о
      т
      р
      а
      (
      о
      с
      м
      о
      т
      р
      а
      ) - '
      Д
      ', '
      О
      '; -
      е
      с
      л
      и
      Д
      Т
      я
      в
      л
      я
      е
      т
      с
      я
      п
      о
      с
      л
      е
      д
      н
      е
      й
      п
      о
      л
      н
      о
      й
      т
      а
      м
      о
      ж
      е
      н
      н
      о
      й
      д
      е
      к
      л
      а
      р
      а
      ц
      и
      е
      й
      ('Z'); -
      п
      р
      и
      п
      р
      о
      с
      т
      а
      в
      л
      е
      н
      и
      и
      о
      т
      м
      е
      т
      к
      и
      в
      н
      и
      ж
      н
      е
      м
      п
      о
      д
      р
      а
      з
      д
      е
      л
      е
      г
      р
      а
      ф
      ы
      E(E/J)
      п
      о
      д
      н
      о
      м
      е
      р
      о
      м
      12 (E2 2 12)  ("0"-
      с
      в
      е
      д
      е
      н
      и
      я
      с
      о
      в
      п
      а
      д
      а
      ю
      т
      ; "1"-
      с
      в
      е
      д
      е
      н
      и
      я
      н
      е
      с
      о
      в
      п
      а
      д
      а
      ю
      т
      )
    * DeadlineMonth -- С
      р
      о
      к
      п
      р
      о
      д
      л
      е
      н
      и
      я
      /
      о
      б
      щ
      и
      й
      в
      м
      е
      с
      я
      ц
      а
      х
    * DocumentInfo -- И
      н
      ф
      о
      р
      м
      а
      ц
      и
      я
      о
      д
      о
      к
      у
      м
      е
      н
      т
      е
      (
      н
      о
      м
      е
      р
      ,
      д
      а
      т
      а
      )
    * CommonMarkOrganization -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      (
      л
      и
      ц
      е
      )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GRNumber=None, StageMarkIdentifier=None, NoteMarkIdentifier=None, InformationTypeCode=None, MarkDescription=None, DateInf=None, TimeInf=None, Amount=None, PaymentTypeCode=None, PostponementProcent=None, Code=None, CurrencyName=None, PersonName=None, LNP=None, GoodsDevisionDate=None, GoodsDevisionTime=None, Deadline=None, CustomsCode=None, CustomsActionDate=None, DocumentIndicator=None, DeadlineMonth=None, DocumentInfo=None, CommonMarkOrganization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.GRNumber = GRNumber
        self.validate_CodeVariable2Type(self.GRNumber)
        self.GRNumber_nsprefix_ = "clt_ru"
        self.StageMarkIdentifier = StageMarkIdentifier
        self.validate_LetterIndicatorType(self.StageMarkIdentifier)
        self.StageMarkIdentifier_nsprefix_ = "clt_ru"
        self.NoteMarkIdentifier = NoteMarkIdentifier
        self.validate_Code2Type(self.NoteMarkIdentifier)
        self.NoteMarkIdentifier_nsprefix_ = "clt_ru"
        self.InformationTypeCode = InformationTypeCode
        self.validate_Code2Type(self.InformationTypeCode)
        self.InformationTypeCode_nsprefix_ = "clt_ru"
        self.MarkDescription = MarkDescription
        self.validate_FreeText250Type(self.MarkDescription)
        self.MarkDescription_nsprefix_ = "clt_ru"
        if isinstance(DateInf, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateInf, '%Y-%m-%d').date()
        else:
            initvalue_ = DateInf
        self.DateInf = initvalue_
        self.DateInf_nsprefix_ = "clt_ru"
        if isinstance(TimeInf, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TimeInf, '%H:%M:%S').time()
        else:
            initvalue_ = TimeInf
        self.TimeInf = initvalue_
        self.TimeInf_nsprefix_ = "clt_ru"
        self.Amount = Amount
        self.validate_AmountType(self.Amount)
        self.Amount_nsprefix_ = "clt_ru"
        self.PaymentTypeCode = PaymentTypeCode
        self.validate_CustomsPaymentCodeType(self.PaymentTypeCode)
        self.PaymentTypeCode_nsprefix_ = "clt_ru"
        self.PostponementProcent = PostponementProcent
        self.validate_ProcentNumericType(self.PostponementProcent)
        self.PostponementProcent_nsprefix_ = "clt_ru"
        self.Code = Code
        self.validate_CodeVariable3Type(self.Code)
        self.Code_nsprefix_ = "clt_ru"
        self.CurrencyName = CurrencyName
        self.validate_CurrencyNameType(self.CurrencyName)
        self.CurrencyName_nsprefix_ = "clt_ru"
        self.PersonName = PersonName
        self.validate_NameType(self.PersonName)
        self.PersonName_nsprefix_ = "clt_ru"
        self.LNP = LNP
        self.validate_LNPIDType(self.LNP)
        self.LNP_nsprefix_ = "clt_ru"
        if isinstance(GoodsDevisionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GoodsDevisionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = GoodsDevisionDate
        self.GoodsDevisionDate = initvalue_
        self.GoodsDevisionDate_nsprefix_ = "clt_ru"
        if isinstance(GoodsDevisionTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GoodsDevisionTime, '%H:%M:%S').time()
        else:
            initvalue_ = GoodsDevisionTime
        self.GoodsDevisionTime = initvalue_
        self.GoodsDevisionTime_nsprefix_ = "clt_ru"
        if isinstance(Deadline, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Deadline, '%Y-%m-%d').date()
        else:
            initvalue_ = Deadline
        self.Deadline = initvalue_
        self.Deadline_nsprefix_ = "clt_ru"
        self.CustomsCode = CustomsCode
        self.validate_CustomsCodeType(self.CustomsCode)
        self.CustomsCode_nsprefix_ = "clt_ru"
        if isinstance(CustomsActionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(CustomsActionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = CustomsActionDate
        self.CustomsActionDate = initvalue_
        self.CustomsActionDate_nsprefix_ = "clt_ru"
        self.DocumentIndicator = DocumentIndicator
        self.validate_LetterIndicatorType(self.DocumentIndicator)
        self.DocumentIndicator_nsprefix_ = "clt_ru"
        self.DeadlineMonth = DeadlineMonth
        self.validate_Quantity2Type(self.DeadlineMonth)
        self.DeadlineMonth_nsprefix_ = "clt_ru"
        self.DocumentInfo = DocumentInfo
        self.DocumentInfo_nsprefix_ = "cat_ru"
        self.CommonMarkOrganization = CommonMarkOrganization
        self.CommonMarkOrganization_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADCommonOfficialMarkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADCommonOfficialMarkType.subclass:
            return ESADCommonOfficialMarkType.subclass(*args_, **kwargs_)
        else:
            return ESADCommonOfficialMarkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GRNumber(self):
        return self.GRNumber
    def set_GRNumber(self, GRNumber):
        self.GRNumber = GRNumber
    def get_StageMarkIdentifier(self):
        return self.StageMarkIdentifier
    def set_StageMarkIdentifier(self, StageMarkIdentifier):
        self.StageMarkIdentifier = StageMarkIdentifier
    def get_NoteMarkIdentifier(self):
        return self.NoteMarkIdentifier
    def set_NoteMarkIdentifier(self, NoteMarkIdentifier):
        self.NoteMarkIdentifier = NoteMarkIdentifier
    def get_InformationTypeCode(self):
        return self.InformationTypeCode
    def set_InformationTypeCode(self, InformationTypeCode):
        self.InformationTypeCode = InformationTypeCode
    def get_MarkDescription(self):
        return self.MarkDescription
    def set_MarkDescription(self, MarkDescription):
        self.MarkDescription = MarkDescription
    def get_DateInf(self):
        return self.DateInf
    def set_DateInf(self, DateInf):
        self.DateInf = DateInf
    def get_TimeInf(self):
        return self.TimeInf
    def set_TimeInf(self, TimeInf):
        self.TimeInf = TimeInf
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_PaymentTypeCode(self):
        return self.PaymentTypeCode
    def set_PaymentTypeCode(self, PaymentTypeCode):
        self.PaymentTypeCode = PaymentTypeCode
    def get_PostponementProcent(self):
        return self.PostponementProcent
    def set_PostponementProcent(self, PostponementProcent):
        self.PostponementProcent = PostponementProcent
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def get_CurrencyName(self):
        return self.CurrencyName
    def set_CurrencyName(self, CurrencyName):
        self.CurrencyName = CurrencyName
    def get_PersonName(self):
        return self.PersonName
    def set_PersonName(self, PersonName):
        self.PersonName = PersonName
    def get_LNP(self):
        return self.LNP
    def set_LNP(self, LNP):
        self.LNP = LNP
    def get_GoodsDevisionDate(self):
        return self.GoodsDevisionDate
    def set_GoodsDevisionDate(self, GoodsDevisionDate):
        self.GoodsDevisionDate = GoodsDevisionDate
    def get_GoodsDevisionTime(self):
        return self.GoodsDevisionTime
    def set_GoodsDevisionTime(self, GoodsDevisionTime):
        self.GoodsDevisionTime = GoodsDevisionTime
    def get_Deadline(self):
        return self.Deadline
    def set_Deadline(self, Deadline):
        self.Deadline = Deadline
    def get_CustomsCode(self):
        return self.CustomsCode
    def set_CustomsCode(self, CustomsCode):
        self.CustomsCode = CustomsCode
    def get_CustomsActionDate(self):
        return self.CustomsActionDate
    def set_CustomsActionDate(self, CustomsActionDate):
        self.CustomsActionDate = CustomsActionDate
    def get_DocumentIndicator(self):
        return self.DocumentIndicator
    def set_DocumentIndicator(self, DocumentIndicator):
        self.DocumentIndicator = DocumentIndicator
    def get_DeadlineMonth(self):
        return self.DeadlineMonth
    def set_DeadlineMonth(self, DeadlineMonth):
        self.DeadlineMonth = DeadlineMonth
    def get_DocumentInfo(self):
        return self.DocumentInfo
    def set_DocumentInfo(self, DocumentInfo):
        self.DocumentInfo = DocumentInfo
    def get_CommonMarkOrganization(self):
        return self.CommonMarkOrganization
    def set_CommonMarkOrganization(self, CommonMarkOrganization):
        self.CommonMarkOrganization = CommonMarkOrganization
    def validate_CodeVariable2Type(self, value):
        result = True
        # Validate type CodeVariable2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable2Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_TimeCustType(self, value):
        result = True
        # Validate type TimeCustType, a restriction on CategoryCust:TimeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.time):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.time)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsPaymentCodeType(self, value):
        result = True
        # Validate type CustomsPaymentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CustomsPaymentCodeType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CustomsPaymentCodeType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_ProcentNumericType(self, value):
        result = True
        # Validate type ProcentNumericType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on ProcentNumericType' % {"value": value, "lineno": lineno} )
                result = False
            if value > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxInclusive restriction on ProcentNumericType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable3Type(self, value):
        result = True
        # Validate type CodeVariable3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable3Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyNameType(self, value):
        result = True
        # Validate type CurrencyNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CurrencyNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CurrencyNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LNPIDType(self, value):
        result = True
        # Validate type LNPIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on LNPIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on LNPIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_Quantity2Type(self, value):
        result = True
        # Validate type Quantity2Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GRNumber is not None or
            self.StageMarkIdentifier is not None or
            self.NoteMarkIdentifier is not None or
            self.InformationTypeCode is not None or
            self.MarkDescription is not None or
            self.DateInf is not None or
            self.TimeInf is not None or
            self.Amount is not None or
            self.PaymentTypeCode is not None or
            self.PostponementProcent is not None or
            self.Code is not None or
            self.CurrencyName is not None or
            self.PersonName is not None or
            self.LNP is not None or
            self.GoodsDevisionDate is not None or
            self.GoodsDevisionTime is not None or
            self.Deadline is not None or
            self.CustomsCode is not None or
            self.CustomsActionDate is not None or
            self.DocumentIndicator is not None or
            self.DeadlineMonth is not None or
            self.DocumentInfo is not None or
            self.CommonMarkOrganization is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADCommonOfficialMarkType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADCommonOfficialMarkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADCommonOfficialMarkType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADCommonOfficialMarkType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADCommonOfficialMarkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADCommonOfficialMarkType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADCommonOfficialMarkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GRNumber is not None:
            namespaceprefix_ = self.GRNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GRNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGRNumber>%s</%sGRNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GRNumber), input_name='GRNumber')), namespaceprefix_ , eol_))
        if self.StageMarkIdentifier is not None:
            namespaceprefix_ = self.StageMarkIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.StageMarkIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStageMarkIdentifier>%s</%sStageMarkIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StageMarkIdentifier), input_name='StageMarkIdentifier')), namespaceprefix_ , eol_))
        if self.NoteMarkIdentifier is not None:
            namespaceprefix_ = self.NoteMarkIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.NoteMarkIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteMarkIdentifier>%s</%sNoteMarkIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NoteMarkIdentifier), input_name='NoteMarkIdentifier')), namespaceprefix_ , eol_))
        if self.InformationTypeCode is not None:
            namespaceprefix_ = self.InformationTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InformationTypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformationTypeCode>%s</%sInformationTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformationTypeCode), input_name='InformationTypeCode')), namespaceprefix_ , eol_))
        if self.MarkDescription is not None:
            namespaceprefix_ = self.MarkDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkDescription>%s</%sMarkDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkDescription), input_name='MarkDescription')), namespaceprefix_ , eol_))
        if self.DateInf is not None:
            namespaceprefix_ = self.DateInf_nsprefix_ + ':' if (UseCapturedNS_ and self.DateInf_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateInf>%s</%sDateInf>%s' % (namespaceprefix_ , self.gds_format_date(self.DateInf, input_name='DateInf'), namespaceprefix_ , eol_))
        if self.TimeInf is not None:
            namespaceprefix_ = self.TimeInf_nsprefix_ + ':' if (UseCapturedNS_ and self.TimeInf_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeInf>%s</%sTimeInf>%s' % (namespaceprefix_ , self.gds_format_time(self.TimeInf, input_name='TimeInf'), namespaceprefix_ , eol_))
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
        if self.PaymentTypeCode is not None:
            namespaceprefix_ = self.PaymentTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentTypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentTypeCode>%s</%sPaymentTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentTypeCode), input_name='PaymentTypeCode')), namespaceprefix_ , eol_))
        if self.PostponementProcent is not None:
            namespaceprefix_ = self.PostponementProcent_nsprefix_ + ':' if (UseCapturedNS_ and self.PostponementProcent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostponementProcent>%s</%sPostponementProcent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PostponementProcent, input_name='PostponementProcent'), namespaceprefix_ , eol_))
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
        if self.CurrencyName is not None:
            namespaceprefix_ = self.CurrencyName_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyName>%s</%sCurrencyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyName), input_name='CurrencyName')), namespaceprefix_ , eol_))
        if self.PersonName is not None:
            namespaceprefix_ = self.PersonName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonName>%s</%sPersonName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), namespaceprefix_ , eol_))
        if self.LNP is not None:
            namespaceprefix_ = self.LNP_nsprefix_ + ':' if (UseCapturedNS_ and self.LNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLNP>%s</%sLNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LNP), input_name='LNP')), namespaceprefix_ , eol_))
        if self.GoodsDevisionDate is not None:
            namespaceprefix_ = self.GoodsDevisionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDevisionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDevisionDate>%s</%sGoodsDevisionDate>%s' % (namespaceprefix_ , self.gds_format_date(self.GoodsDevisionDate, input_name='GoodsDevisionDate'), namespaceprefix_ , eol_))
        if self.GoodsDevisionTime is not None:
            namespaceprefix_ = self.GoodsDevisionTime_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDevisionTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDevisionTime>%s</%sGoodsDevisionTime>%s' % (namespaceprefix_ , self.gds_format_time(self.GoodsDevisionTime, input_name='GoodsDevisionTime'), namespaceprefix_ , eol_))
        if self.Deadline is not None:
            namespaceprefix_ = self.Deadline_nsprefix_ + ':' if (UseCapturedNS_ and self.Deadline_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeadline>%s</%sDeadline>%s' % (namespaceprefix_ , self.gds_format_date(self.Deadline, input_name='Deadline'), namespaceprefix_ , eol_))
        if self.CustomsCode is not None:
            namespaceprefix_ = self.CustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCode>%s</%sCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCode), input_name='CustomsCode')), namespaceprefix_ , eol_))
        if self.CustomsActionDate is not None:
            namespaceprefix_ = self.CustomsActionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsActionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsActionDate>%s</%sCustomsActionDate>%s' % (namespaceprefix_ , self.gds_format_date(self.CustomsActionDate, input_name='CustomsActionDate'), namespaceprefix_ , eol_))
        if self.DocumentIndicator is not None:
            namespaceprefix_ = self.DocumentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentIndicator>%s</%sDocumentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentIndicator), input_name='DocumentIndicator')), namespaceprefix_ , eol_))
        if self.DeadlineMonth is not None:
            namespaceprefix_ = self.DeadlineMonth_nsprefix_ + ':' if (UseCapturedNS_ and self.DeadlineMonth_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeadlineMonth>%s</%sDeadlineMonth>%s' % (namespaceprefix_ , self.gds_format_integer(self.DeadlineMonth, input_name='DeadlineMonth'), namespaceprefix_ , eol_))
        if self.DocumentInfo is not None:
            namespaceprefix_ = self.DocumentInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentInfo_nsprefix_) else ''
            self.DocumentInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentInfo', pretty_print=pretty_print)
        if self.CommonMarkOrganization is not None:
            namespaceprefix_ = self.CommonMarkOrganization_nsprefix_ + ':' if (UseCapturedNS_ and self.CommonMarkOrganization_nsprefix_) else ''
            self.CommonMarkOrganization.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommonMarkOrganization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GRNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GRNumber')
            value_ = self.gds_validate_string(value_, node, 'GRNumber')
            self.GRNumber = value_
            self.GRNumber_nsprefix_ = child_.prefix
            # validate type CodeVariable2Type
            self.validate_CodeVariable2Type(self.GRNumber)
        elif nodeName_ == 'StageMarkIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'StageMarkIdentifier')
            value_ = self.gds_validate_string(value_, node, 'StageMarkIdentifier')
            self.StageMarkIdentifier = value_
            self.StageMarkIdentifier_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.StageMarkIdentifier)
        elif nodeName_ == 'NoteMarkIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'NoteMarkIdentifier')
            value_ = self.gds_validate_string(value_, node, 'NoteMarkIdentifier')
            self.NoteMarkIdentifier = value_
            self.NoteMarkIdentifier_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.NoteMarkIdentifier)
        elif nodeName_ == 'InformationTypeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InformationTypeCode')
            value_ = self.gds_validate_string(value_, node, 'InformationTypeCode')
            self.InformationTypeCode = value_
            self.InformationTypeCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.InformationTypeCode)
        elif nodeName_ == 'MarkDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarkDescription')
            value_ = self.gds_validate_string(value_, node, 'MarkDescription')
            self.MarkDescription = value_
            self.MarkDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.MarkDescription)
        elif nodeName_ == 'DateInf':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DateInf = dval_
            self.DateInf_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DateInf)
        elif nodeName_ == 'TimeInf':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.TimeInf = dval_
            self.TimeInf_nsprefix_ = child_.prefix
            # validate type TimeCustType
            self.validate_TimeCustType(self.TimeInf)
        elif nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.Amount)
        elif nodeName_ == 'PaymentTypeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentTypeCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentTypeCode')
            self.PaymentTypeCode = value_
            self.PaymentTypeCode_nsprefix_ = child_.prefix
            # validate type CustomsPaymentCodeType
            self.validate_CustomsPaymentCodeType(self.PaymentTypeCode)
        elif nodeName_ == 'PostponementProcent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PostponementProcent')
            fval_ = self.gds_validate_decimal(fval_, node, 'PostponementProcent')
            self.PostponementProcent = fval_
            self.PostponementProcent_nsprefix_ = child_.prefix
            # validate type ProcentNumericType
            self.validate_ProcentNumericType(self.PostponementProcent)
        elif nodeName_ == 'Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
            # validate type CodeVariable3Type
            self.validate_CodeVariable3Type(self.Code)
        elif nodeName_ == 'CurrencyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CurrencyName')
            value_ = self.gds_validate_string(value_, node, 'CurrencyName')
            self.CurrencyName = value_
            self.CurrencyName_nsprefix_ = child_.prefix
            # validate type CurrencyNameType
            self.validate_CurrencyNameType(self.CurrencyName)
        elif nodeName_ == 'PersonName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonName')
            value_ = self.gds_validate_string(value_, node, 'PersonName')
            self.PersonName = value_
            self.PersonName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.PersonName)
        elif nodeName_ == 'LNP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LNP')
            value_ = self.gds_validate_string(value_, node, 'LNP')
            self.LNP = value_
            self.LNP_nsprefix_ = child_.prefix
            # validate type LNPIDType
            self.validate_LNPIDType(self.LNP)
        elif nodeName_ == 'GoodsDevisionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.GoodsDevisionDate = dval_
            self.GoodsDevisionDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.GoodsDevisionDate)
        elif nodeName_ == 'GoodsDevisionTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.GoodsDevisionTime = dval_
            self.GoodsDevisionTime_nsprefix_ = child_.prefix
            # validate type TimeCustType
            self.validate_TimeCustType(self.GoodsDevisionTime)
        elif nodeName_ == 'Deadline':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Deadline = dval_
            self.Deadline_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.Deadline)
        elif nodeName_ == 'CustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCode')
            self.CustomsCode = value_
            self.CustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsCode)
        elif nodeName_ == 'CustomsActionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.CustomsActionDate = dval_
            self.CustomsActionDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.CustomsActionDate)
        elif nodeName_ == 'DocumentIndicator':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentIndicator')
            value_ = self.gds_validate_string(value_, node, 'DocumentIndicator')
            self.DocumentIndicator = value_
            self.DocumentIndicator_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.DocumentIndicator)
        elif nodeName_ == 'DeadlineMonth' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DeadlineMonth')
            ival_ = self.gds_validate_integer(ival_, node, 'DeadlineMonth')
            self.DeadlineMonth = ival_
            self.DeadlineMonth_nsprefix_ = child_.prefix
            # validate type Quantity2Type
            self.validate_Quantity2Type(self.DeadlineMonth)
        elif nodeName_ == 'DocumentInfo':
            class_obj_ = self.get_class_obj_(child_, DocumentBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentInfo = obj_
            obj_.original_tagname_ = 'DocumentInfo'
        elif nodeName_ == 'CommonMarkOrganization':
            class_obj_ = self.get_class_obj_(child_, OrganizationBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommonMarkOrganization = obj_
            obj_.original_tagname_ = 'CommonMarkOrganization'
# end class ESADCommonOfficialMarkType


class ESADConsigmentType(GeneratedsSuper):
    """ESADConsigmentType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    е
    р
    е
    в
    о
    з
    к
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 15, 15
    а
    , 17,17
    а
    , 18, 19, 21, 25, 26, 29  -
    Д
    Т
    /
    Г
    р
    . 15, 17, 18, 19, 21, 25, 26, 29 , 53, 55-
    Т
    Д
    ContainerIndicator -- П
    р
    и
    з
    н
    а
    к
    к
    о
    н
    т
    е
    й
    н
    е
    р
    н
    ы
    х
    п
    е
    р
    е
    в
    о
    з
    о
    к
    .
    Г
    р
    .19
    DispatchCountryCode -- С
    т
    р
    а
    н
    а
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    я
    .
    Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    с
    т
    р
    а
    н
    м
    и
    р
    а
    .
    г
    р
    15,
    п
    о
    д
    р
    а
    з
    д
    е
    л
    a
    RBDispatchCountryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ы
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    .
    Г
    р
    .15,
    п
    о
    д
    р
    а
    з
    д
    е
    л
    b
    DispatchCountryName -- С
    т
    р
    а
    н
    а
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    я
    .
    К
    р
    а
    т
    к
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    .
    Г
    р
    .15
    DestinationCountryCode -- С
    т
    р
    а
    н
    а
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    .
    Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    с
    т
    р
    а
    н
    м
    и
    р
    а
    / 00 (
    н
    е
    и
    з
    в
    е
    с
    т
    н
    а
    ).
    Г
    р
    17,
    п
    о
    д
    р
    а
    з
    д
    е
    л
    a
    DestinationCountryName -- С
    т
    р
    а
    н
    а
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    .
    Г
    р
    .17
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    /
    Н
    Е
    И
    З
    В
    Е
    С
    Т
    Н
    А
    RBDestinationCountryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ы
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    .
    Г
    р
    .17,
    п
    о
    д
    р
    а
    з
    д
    е
    л
    b
    DeliveryCustomsOffice -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    п
    р
    и
    т
    р
    а
    н
    з
    и
    т
    е
    .
    г
    р
    .53
    Т
    Д
    .
    BorderCustomsOffice -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    в
    ъ
    е
    з
    д
    а
    /
    в
    ы
    е
    з
    д
    а
    .
    Г
    р
    .29
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContainerIndicator=None, DispatchCountryCode=None, RBDispatchCountryCode=None, DispatchCountryName=None, DestinationCountryCode=None, DestinationCountryName=None, RBDestinationCountryCode=None, DeliveryCustomsOffice=None, BorderCustomsOffice=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ContainerIndicator = ContainerIndicator
        self.validate_IndicatorType(self.ContainerIndicator)
        self.ContainerIndicator_nsprefix_ = "clt_ru"
        self.DispatchCountryCode = DispatchCountryCode
        self.validate_CountryA2CodeType(self.DispatchCountryCode)
        self.DispatchCountryCode_nsprefix_ = "clt_ru"
        self.RBDispatchCountryCode = RBDispatchCountryCode
        self.validate_Code3Type(self.RBDispatchCountryCode)
        self.RBDispatchCountryCode_nsprefix_ = "clt_ru"
        self.DispatchCountryName = DispatchCountryName
        self.validate_CountryNameType(self.DispatchCountryName)
        self.DispatchCountryName_nsprefix_ = "clt_ru"
        self.DestinationCountryCode = DestinationCountryCode
        self.validate_CountryA2CodeType(self.DestinationCountryCode)
        self.DestinationCountryCode_nsprefix_ = "clt_ru"
        self.DestinationCountryName = DestinationCountryName
        self.validate_CountryNameType(self.DestinationCountryName)
        self.DestinationCountryName_nsprefix_ = "clt_ru"
        self.RBDestinationCountryCode = RBDestinationCountryCode
        self.validate_Code3Type(self.RBDestinationCountryCode)
        self.RBDestinationCountryCode_nsprefix_ = "clt_ru"
        self.DeliveryCustomsOffice = DeliveryCustomsOffice
        self.DeliveryCustomsOffice_nsprefix_ = "cat_ru"
        if BorderCustomsOffice is None:
            self.BorderCustomsOffice = []
        else:
            self.BorderCustomsOffice = BorderCustomsOffice
        self.BorderCustomsOffice_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADConsigmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADConsigmentType.subclass:
            return ESADConsigmentType.subclass(*args_, **kwargs_)
        else:
            return ESADConsigmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContainerIndicator(self):
        return self.ContainerIndicator
    def set_ContainerIndicator(self, ContainerIndicator):
        self.ContainerIndicator = ContainerIndicator
    def get_DispatchCountryCode(self):
        return self.DispatchCountryCode
    def set_DispatchCountryCode(self, DispatchCountryCode):
        self.DispatchCountryCode = DispatchCountryCode
    def get_RBDispatchCountryCode(self):
        return self.RBDispatchCountryCode
    def set_RBDispatchCountryCode(self, RBDispatchCountryCode):
        self.RBDispatchCountryCode = RBDispatchCountryCode
    def get_DispatchCountryName(self):
        return self.DispatchCountryName
    def set_DispatchCountryName(self, DispatchCountryName):
        self.DispatchCountryName = DispatchCountryName
    def get_DestinationCountryCode(self):
        return self.DestinationCountryCode
    def set_DestinationCountryCode(self, DestinationCountryCode):
        self.DestinationCountryCode = DestinationCountryCode
    def get_DestinationCountryName(self):
        return self.DestinationCountryName
    def set_DestinationCountryName(self, DestinationCountryName):
        self.DestinationCountryName = DestinationCountryName
    def get_RBDestinationCountryCode(self):
        return self.RBDestinationCountryCode
    def set_RBDestinationCountryCode(self, RBDestinationCountryCode):
        self.RBDestinationCountryCode = RBDestinationCountryCode
    def get_DeliveryCustomsOffice(self):
        return self.DeliveryCustomsOffice
    def set_DeliveryCustomsOffice(self, DeliveryCustomsOffice):
        self.DeliveryCustomsOffice = DeliveryCustomsOffice
    def get_BorderCustomsOffice(self):
        return self.BorderCustomsOffice
    def set_BorderCustomsOffice(self, BorderCustomsOffice):
        self.BorderCustomsOffice = BorderCustomsOffice
    def add_BorderCustomsOffice(self, value):
        self.BorderCustomsOffice.append(value)
    def insert_BorderCustomsOffice_at(self, index, value):
        self.BorderCustomsOffice.insert(index, value)
    def replace_BorderCustomsOffice_at(self, index, value):
        self.BorderCustomsOffice[index] = value
    def validate_IndicatorType(self, value):
        result = True
        # Validate type IndicatorType, a restriction on CategoryCust:IndicatorCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ContainerIndicator is not None or
            self.DispatchCountryCode is not None or
            self.RBDispatchCountryCode is not None or
            self.DispatchCountryName is not None or
            self.DestinationCountryCode is not None or
            self.DestinationCountryName is not None or
            self.RBDestinationCountryCode is not None or
            self.DeliveryCustomsOffice is not None or
            self.BorderCustomsOffice
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADConsigmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADConsigmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADConsigmentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADConsigmentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADConsigmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADConsigmentType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADConsigmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContainerIndicator is not None:
            namespaceprefix_ = self.ContainerIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerIndicator>%s</%sContainerIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ContainerIndicator, input_name='ContainerIndicator'), namespaceprefix_ , eol_))
        if self.DispatchCountryCode is not None:
            namespaceprefix_ = self.DispatchCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DispatchCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispatchCountryCode>%s</%sDispatchCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DispatchCountryCode), input_name='DispatchCountryCode')), namespaceprefix_ , eol_))
        if self.RBDispatchCountryCode is not None:
            namespaceprefix_ = self.RBDispatchCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RBDispatchCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBDispatchCountryCode>%s</%sRBDispatchCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBDispatchCountryCode), input_name='RBDispatchCountryCode')), namespaceprefix_ , eol_))
        if self.DispatchCountryName is not None:
            namespaceprefix_ = self.DispatchCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.DispatchCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDispatchCountryName>%s</%sDispatchCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DispatchCountryName), input_name='DispatchCountryName')), namespaceprefix_ , eol_))
        if self.DestinationCountryCode is not None:
            namespaceprefix_ = self.DestinationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCountryCode>%s</%sDestinationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCountryCode), input_name='DestinationCountryCode')), namespaceprefix_ , eol_))
        if self.DestinationCountryName is not None:
            namespaceprefix_ = self.DestinationCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCountryName>%s</%sDestinationCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCountryName), input_name='DestinationCountryName')), namespaceprefix_ , eol_))
        if self.RBDestinationCountryCode is not None:
            namespaceprefix_ = self.RBDestinationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RBDestinationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBDestinationCountryCode>%s</%sRBDestinationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBDestinationCountryCode), input_name='RBDestinationCountryCode')), namespaceprefix_ , eol_))
        if self.DeliveryCustomsOffice is not None:
            namespaceprefix_ = self.DeliveryCustomsOffice_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryCustomsOffice_nsprefix_) else ''
            self.DeliveryCustomsOffice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryCustomsOffice', pretty_print=pretty_print)
        for BorderCustomsOffice_ in self.BorderCustomsOffice:
            namespaceprefix_ = self.BorderCustomsOffice_nsprefix_ + ':' if (UseCapturedNS_ and self.BorderCustomsOffice_nsprefix_) else ''
            BorderCustomsOffice_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BorderCustomsOffice', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContainerIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ContainerIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'ContainerIndicator')
            self.ContainerIndicator = ival_
            self.ContainerIndicator_nsprefix_ = child_.prefix
            # validate type IndicatorType
            self.validate_IndicatorType(self.ContainerIndicator)
        elif nodeName_ == 'DispatchCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DispatchCountryCode')
            value_ = self.gds_validate_string(value_, node, 'DispatchCountryCode')
            self.DispatchCountryCode = value_
            self.DispatchCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.DispatchCountryCode)
        elif nodeName_ == 'RBDispatchCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBDispatchCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RBDispatchCountryCode')
            self.RBDispatchCountryCode = value_
            self.RBDispatchCountryCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.RBDispatchCountryCode)
        elif nodeName_ == 'DispatchCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DispatchCountryName')
            value_ = self.gds_validate_string(value_, node, 'DispatchCountryName')
            self.DispatchCountryName = value_
            self.DispatchCountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.DispatchCountryName)
        elif nodeName_ == 'DestinationCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DestinationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationCountryCode')
            self.DestinationCountryCode = value_
            self.DestinationCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.DestinationCountryCode)
        elif nodeName_ == 'DestinationCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DestinationCountryName')
            value_ = self.gds_validate_string(value_, node, 'DestinationCountryName')
            self.DestinationCountryName = value_
            self.DestinationCountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.DestinationCountryName)
        elif nodeName_ == 'RBDestinationCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBDestinationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RBDestinationCountryCode')
            self.RBDestinationCountryCode = value_
            self.RBDestinationCountryCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.RBDestinationCountryCode)
        elif nodeName_ == 'DeliveryCustomsOffice':
            obj_ = CUCustomsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryCustomsOffice = obj_
            obj_.original_tagname_ = 'DeliveryCustomsOffice'
        elif nodeName_ == 'BorderCustomsOffice':
            obj_ = CUCustomsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BorderCustomsOffice.append(obj_)
            obj_.original_tagname_ = 'BorderCustomsOffice'
# end class ESADConsigmentType


class ESADContainerType(GeneratedsSuper):
    """ESADContainerType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    х
    ContainerQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    к
    о
    н
    т
    е
    й
    н
    е
    р
    о
    в
    о
    д
    н
    о
    г
    о
    в
    и
    д
    а
    ContainerKind -- Т
    и
    п
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    г
    р
    у
    з
    а
    ,
    у
    п
    а
    к
    о
    в
    к
    и
    и
    у
    п
    а
    к
    о
    в
    о
    ч
    н
    ы
    х
    м
    а
    т
    е
    р
    и
    а
    л
    о
    в
    ContainerNumber -- Н
    о
    м
    е
    р
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContainerQuantity=None, ContainerKind=None, ContainerNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ContainerQuantity = ContainerQuantity
        self.validate_Quantity8Type(self.ContainerQuantity)
        self.ContainerQuantity_nsprefix_ = "clt_ru"
        self.ContainerKind = ContainerKind
        self.validate_PackageCodeType(self.ContainerKind)
        self.ContainerKind_nsprefix_ = "clt_ru"
        if ContainerNumber is None:
            self.ContainerNumber = []
        else:
            self.ContainerNumber = ContainerNumber
        self.ContainerNumber_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADContainerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADContainerType.subclass:
            return ESADContainerType.subclass(*args_, **kwargs_)
        else:
            return ESADContainerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContainerQuantity(self):
        return self.ContainerQuantity
    def set_ContainerQuantity(self, ContainerQuantity):
        self.ContainerQuantity = ContainerQuantity
    def get_ContainerKind(self):
        return self.ContainerKind
    def set_ContainerKind(self, ContainerKind):
        self.ContainerKind = ContainerKind
    def get_ContainerNumber(self):
        return self.ContainerNumber
    def set_ContainerNumber(self, ContainerNumber):
        self.ContainerNumber = ContainerNumber
    def add_ContainerNumber(self, value):
        self.ContainerNumber.append(value)
    def insert_ContainerNumber_at(self, index, value):
        self.ContainerNumber.insert(index, value)
    def replace_ContainerNumber_at(self, index, value):
        self.ContainerNumber[index] = value
    def validate_Quantity8Type(self, value):
        result = True
        # Validate type Quantity8Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity8Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity8Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_PackageCodeType(self, value):
        result = True
        # Validate type PackageCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on PackageCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ContainerQuantity is not None or
            self.ContainerKind is not None or
            self.ContainerNumber
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADContainerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADContainerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADContainerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADContainerType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADContainerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADContainerType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADContainerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContainerQuantity is not None:
            namespaceprefix_ = self.ContainerQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerQuantity>%s</%sContainerQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.ContainerQuantity, input_name='ContainerQuantity'), namespaceprefix_ , eol_))
        if self.ContainerKind is not None:
            namespaceprefix_ = self.ContainerKind_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerKind>%s</%sContainerKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContainerKind), input_name='ContainerKind')), namespaceprefix_ , eol_))
        for ContainerNumber_ in self.ContainerNumber:
            namespaceprefix_ = self.ContainerNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerNumber_nsprefix_) else ''
            ContainerNumber_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContainerNumber', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContainerQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ContainerQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'ContainerQuantity')
            self.ContainerQuantity = ival_
            self.ContainerQuantity_nsprefix_ = child_.prefix
            # validate type Quantity8Type
            self.validate_Quantity8Type(self.ContainerQuantity)
        elif nodeName_ == 'ContainerKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ContainerKind')
            value_ = self.gds_validate_string(value_, node, 'ContainerKind')
            self.ContainerKind = value_
            self.ContainerKind_nsprefix_ = child_.prefix
            # validate type PackageCodeType
            self.validate_PackageCodeType(self.ContainerKind)
        elif nodeName_ == 'ContainerNumber':
            obj_ = ContainerNumberType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContainerNumber.append(obj_)
            obj_.original_tagname_ = 'ContainerNumber'
# end class ESADContainerType


class ESADContractDetailsType(GeneratedsSuper):
    """ESADContractDetailsType -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    с
    в
    е
    д
    е
    н
    и
    я
    п
    о
    в
    н
    е
    ш
    н
    е
    т
    о
    р
    г
    о
    в
    ы
    м
    к
    о
    н
    т
    р
    а
    к
    т
    а
    м
    ForeignTradeConsignee -- П
    о
    л
    у
    ч
    а
    т
    е
    л
    ь
    /
    о
    т
    п
    р
    а
    в
    и
    т
    е
    л
    ь
    т
    о
    в
    а
    р
    а
    п
    о
    д
    о
    г
    о
    в
    о
    р
    у
    (
    к
    о
    н
    т
    р
    а
    к
    т
    у
    )
    DealPassportNumber -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    о
    г
    о
    в
    о
    р
    а
    (
    к
    о
    н
    т
    р
    а
    к
    т
    а
    ),
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    м
    б
    а
    н
    к
    о
    м
    п
    р
    и
    п
    о
    с
    т
    а
    н
    о
    в
    к
    е
    д
    о
    г
    о
    в
    о
    р
    а
    (
    к
    о
    н
    т
    р
    а
    к
    т
    а
    )
    н
    а
    у
    ч
    е
    т
    ForeignMainContractDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    р
    е
    к
    в
    и
    з
    и
    т
    а
    х
    д
    о
    г
    о
    в
    о
    р
    а
    (
    к
    о
    н
    т
    р
    а
    к
    т
    а
    )
    ForeignAddContractDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    р
    е
    к
    в
    и
    з
    и
    т
    а
    х
    д
    о
    п
    о
    л
    н
    е
    н
    и
    я
    к
    д
    о
    г
    о
    в
    о
    р
    у
    (
    к
    о
    н
    т
    р
    а
    к
    т
    у
    )
    DeliveryTerms -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    с
    л
    о
    в
    и
    я
    х
    п
    о
    с
    т
    а
    в
    к
    и
    OriginCountryDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    р
    а
    н
    е
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    CustomsCost -- У
    с
    л
    о
    в
    н
    а
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    GoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    с
    у
    к
    а
    з
    а
    н
    и
    е
    м
    е
    д
    и
    н
    и
    ц
    и
    з
    м
    е
    р
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ForeignTradeConsignee=None, DealPassportNumber=None, ForeignMainContractDetails=None, ForeignAddContractDetails=None, DeliveryTerms=None, OriginCountryDetails=None, CustomsCost=None, GoodsQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ForeignTradeConsignee = ForeignTradeConsignee
        self.ForeignTradeConsignee_nsprefix_ = "catESAD_cu"
        self.DealPassportNumber = DealPassportNumber
        self.validate_DocumentNumberType(self.DealPassportNumber)
        self.DealPassportNumber_nsprefix_ = "clt_ru"
        self.ForeignMainContractDetails = ForeignMainContractDetails
        self.ForeignMainContractDetails_nsprefix_ = "catESAD_cu"
        if ForeignAddContractDetails is None:
            self.ForeignAddContractDetails = []
        else:
            self.ForeignAddContractDetails = ForeignAddContractDetails
        self.ForeignAddContractDetails_nsprefix_ = "catESAD_cu"
        self.DeliveryTerms = DeliveryTerms
        self.DeliveryTerms_nsprefix_ = "catESAD_cu"
        self.OriginCountryDetails = OriginCountryDetails
        self.OriginCountryDetails_nsprefix_ = "catESAD_cu"
        self.CustomsCost = CustomsCost
        self.validate_AmountType(self.CustomsCost)
        self.CustomsCost_nsprefix_ = "clt_ru"
        if GoodsQuantity is None:
            self.GoodsQuantity = []
        else:
            self.GoodsQuantity = GoodsQuantity
        self.GoodsQuantity_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADContractDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADContractDetailsType.subclass:
            return ESADContractDetailsType.subclass(*args_, **kwargs_)
        else:
            return ESADContractDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ForeignTradeConsignee(self):
        return self.ForeignTradeConsignee
    def set_ForeignTradeConsignee(self, ForeignTradeConsignee):
        self.ForeignTradeConsignee = ForeignTradeConsignee
    def get_DealPassportNumber(self):
        return self.DealPassportNumber
    def set_DealPassportNumber(self, DealPassportNumber):
        self.DealPassportNumber = DealPassportNumber
    def get_ForeignMainContractDetails(self):
        return self.ForeignMainContractDetails
    def set_ForeignMainContractDetails(self, ForeignMainContractDetails):
        self.ForeignMainContractDetails = ForeignMainContractDetails
    def get_ForeignAddContractDetails(self):
        return self.ForeignAddContractDetails
    def set_ForeignAddContractDetails(self, ForeignAddContractDetails):
        self.ForeignAddContractDetails = ForeignAddContractDetails
    def add_ForeignAddContractDetails(self, value):
        self.ForeignAddContractDetails.append(value)
    def insert_ForeignAddContractDetails_at(self, index, value):
        self.ForeignAddContractDetails.insert(index, value)
    def replace_ForeignAddContractDetails_at(self, index, value):
        self.ForeignAddContractDetails[index] = value
    def get_DeliveryTerms(self):
        return self.DeliveryTerms
    def set_DeliveryTerms(self, DeliveryTerms):
        self.DeliveryTerms = DeliveryTerms
    def get_OriginCountryDetails(self):
        return self.OriginCountryDetails
    def set_OriginCountryDetails(self, OriginCountryDetails):
        self.OriginCountryDetails = OriginCountryDetails
    def get_CustomsCost(self):
        return self.CustomsCost
    def set_CustomsCost(self, CustomsCost):
        self.CustomsCost = CustomsCost
    def get_GoodsQuantity(self):
        return self.GoodsQuantity
    def set_GoodsQuantity(self, GoodsQuantity):
        self.GoodsQuantity = GoodsQuantity
    def add_GoodsQuantity(self, value):
        self.GoodsQuantity.append(value)
    def insert_GoodsQuantity_at(self, index, value):
        self.GoodsQuantity.insert(index, value)
    def replace_GoodsQuantity_at(self, index, value):
        self.GoodsQuantity[index] = value
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ForeignTradeConsignee is not None or
            self.DealPassportNumber is not None or
            self.ForeignMainContractDetails is not None or
            self.ForeignAddContractDetails or
            self.DeliveryTerms is not None or
            self.OriginCountryDetails is not None or
            self.CustomsCost is not None or
            self.GoodsQuantity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADContractDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADContractDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADContractDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADContractDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADContractDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADContractDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADContractDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ForeignTradeConsignee is not None:
            namespaceprefix_ = self.ForeignTradeConsignee_nsprefix_ + ':' if (UseCapturedNS_ and self.ForeignTradeConsignee_nsprefix_) else ''
            self.ForeignTradeConsignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ForeignTradeConsignee', pretty_print=pretty_print)
        if self.DealPassportNumber is not None:
            namespaceprefix_ = self.DealPassportNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.DealPassportNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDealPassportNumber>%s</%sDealPassportNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DealPassportNumber), input_name='DealPassportNumber')), namespaceprefix_ , eol_))
        if self.ForeignMainContractDetails is not None:
            namespaceprefix_ = self.ForeignMainContractDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ForeignMainContractDetails_nsprefix_) else ''
            self.ForeignMainContractDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ForeignMainContractDetails', pretty_print=pretty_print)
        for ForeignAddContractDetails_ in self.ForeignAddContractDetails:
            namespaceprefix_ = self.ForeignAddContractDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ForeignAddContractDetails_nsprefix_) else ''
            ForeignAddContractDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ForeignAddContractDetails', pretty_print=pretty_print)
        if self.DeliveryTerms is not None:
            namespaceprefix_ = self.DeliveryTerms_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTerms_nsprefix_) else ''
            self.DeliveryTerms.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryTerms', pretty_print=pretty_print)
        if self.OriginCountryDetails is not None:
            namespaceprefix_ = self.OriginCountryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginCountryDetails_nsprefix_) else ''
            self.OriginCountryDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OriginCountryDetails', pretty_print=pretty_print)
        if self.CustomsCost is not None:
            namespaceprefix_ = self.CustomsCost_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCost>%s</%sCustomsCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CustomsCost, input_name='CustomsCost'), namespaceprefix_ , eol_))
        for GoodsQuantity_ in self.GoodsQuantity:
            namespaceprefix_ = self.GoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsQuantity_nsprefix_) else ''
            GoodsQuantity_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsQuantity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ForeignTradeConsignee':
            class_obj_ = self.get_class_obj_(child_, SubjectBaseDetailsType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ForeignTradeConsignee = obj_
            obj_.original_tagname_ = 'ForeignTradeConsignee'
        elif nodeName_ == 'DealPassportNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DealPassportNumber')
            value_ = self.gds_validate_string(value_, node, 'DealPassportNumber')
            self.DealPassportNumber = value_
            self.DealPassportNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.DealPassportNumber)
        elif nodeName_ == 'ForeignMainContractDetails':
            class_obj_ = self.get_class_obj_(child_, DocBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ForeignMainContractDetails = obj_
            obj_.original_tagname_ = 'ForeignMainContractDetails'
        elif nodeName_ == 'ForeignAddContractDetails':
            class_obj_ = self.get_class_obj_(child_, DocBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ForeignAddContractDetails.append(obj_)
            obj_.original_tagname_ = 'ForeignAddContractDetails'
        elif nodeName_ == 'DeliveryTerms':
            obj_ = DeliveryTermsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryTerms = obj_
            obj_.original_tagname_ = 'DeliveryTerms'
        elif nodeName_ == 'OriginCountryDetails':
            obj_ = CountryDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OriginCountryDetails = obj_
            obj_.original_tagname_ = 'OriginCountryDetails'
        elif nodeName_ == 'CustomsCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CustomsCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'CustomsCost')
            self.CustomsCost = fval_
            self.CustomsCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.CustomsCost)
        elif nodeName_ == 'GoodsQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsQuantity.append(obj_)
            obj_.original_tagname_ = 'GoodsQuantity'
# end class ESADContractDetailsType


class ESADContractListType(GeneratedsSuper):
    """ESADContractListType -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    с
    в
    е
    д
    е
    н
    и
    я
    п
    о
    в
    н
    е
    ш
    н
    е
    т
    о
    р
    г
    о
    в
    ы
    м
    к
    о
    н
    т
    р
    а
    к
    т
    а
    м
    .
    Д
    л
    я
    Р
    Ф
    DealPassportNumber -- Н
    о
    м
    е
    р
    п
    а
    с
    п
    о
    р
    т
    а
    с
    д
    е
    л
    к
    и
    ContractNumber -- Н
    о
    м
    е
    р
    в
    н
    е
    ш
    н
    е
    т
    о
    р
    г
    о
    в
    о
    г
    о
    к
    о
    н
    т
    р
    а
    к
    т
    а
    ContractDate -- Д
    а
    т
    а
    в
    н
    е
    ш
    н
    е
    т
    о
    р
    г
    о
    в
    о
    г
    о
    к
    о
    н
    т
    р
    а
    к
    т
    а
    BankName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    б
    а
    н
    к
    а
    ,
    о
    ф
    о
    р
    м
    и
    в
    ш
    е
    г
    о
    п
    а
    с
    п
    о
    р
    т
    с
    д
    е
    л
    к
    и
    SupplyInformations -- О
    п
    и
    с
    а
    н
    и
    е
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    .
    AdditionalContract -- Д
    о
    п
    о
    л
    н
    е
    н
    и
    я
    и
    п
    р
    и
    л
    о
    ж
    е
    н
    и
    я
    к
    о
    с
    н
    о
    в
    н
    о
    м
    у
    к
    о
    н
    т
    р
    а
    к
    т
    у
    .
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DealPassportNumber=None, ContractNumber=None, ContractDate=None, BankName=None, SupplyInformations=None, AdditionalContract=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.DealPassportNumber = DealPassportNumber
        self.validate_DocumentNumberType(self.DealPassportNumber)
        self.DealPassportNumber_nsprefix_ = "clt_ru"
        self.ContractNumber = ContractNumber
        self.validate_DocumentNumberType(self.ContractNumber)
        self.ContractNumber_nsprefix_ = "clt_ru"
        if isinstance(ContractDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ContractDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ContractDate
        self.ContractDate = initvalue_
        self.ContractDate_nsprefix_ = "clt_ru"
        self.BankName = BankName
        self.validate_NameType(self.BankName)
        self.BankName_nsprefix_ = "clt_ru"
        if SupplyInformations is None:
            self.SupplyInformations = []
        else:
            self.SupplyInformations = SupplyInformations
        self.SupplyInformations_nsprefix_ = "catESAD_cu"
        if AdditionalContract is None:
            self.AdditionalContract = []
        else:
            self.AdditionalContract = AdditionalContract
        self.AdditionalContract_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADContractListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADContractListType.subclass:
            return ESADContractListType.subclass(*args_, **kwargs_)
        else:
            return ESADContractListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DealPassportNumber(self):
        return self.DealPassportNumber
    def set_DealPassportNumber(self, DealPassportNumber):
        self.DealPassportNumber = DealPassportNumber
    def get_ContractNumber(self):
        return self.ContractNumber
    def set_ContractNumber(self, ContractNumber):
        self.ContractNumber = ContractNumber
    def get_ContractDate(self):
        return self.ContractDate
    def set_ContractDate(self, ContractDate):
        self.ContractDate = ContractDate
    def get_BankName(self):
        return self.BankName
    def set_BankName(self, BankName):
        self.BankName = BankName
    def get_SupplyInformations(self):
        return self.SupplyInformations
    def set_SupplyInformations(self, SupplyInformations):
        self.SupplyInformations = SupplyInformations
    def add_SupplyInformations(self, value):
        self.SupplyInformations.append(value)
    def insert_SupplyInformations_at(self, index, value):
        self.SupplyInformations.insert(index, value)
    def replace_SupplyInformations_at(self, index, value):
        self.SupplyInformations[index] = value
    def get_AdditionalContract(self):
        return self.AdditionalContract
    def set_AdditionalContract(self, AdditionalContract):
        self.AdditionalContract = AdditionalContract
    def add_AdditionalContract(self, value):
        self.AdditionalContract.append(value)
    def insert_AdditionalContract_at(self, index, value):
        self.AdditionalContract.insert(index, value)
    def replace_AdditionalContract_at(self, index, value):
        self.AdditionalContract[index] = value
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DealPassportNumber is not None or
            self.ContractNumber is not None or
            self.ContractDate is not None or
            self.BankName is not None or
            self.SupplyInformations or
            self.AdditionalContract
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADContractListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADContractListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADContractListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADContractListType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADContractListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADContractListType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADContractListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DealPassportNumber is not None:
            namespaceprefix_ = self.DealPassportNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.DealPassportNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDealPassportNumber>%s</%sDealPassportNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DealPassportNumber), input_name='DealPassportNumber')), namespaceprefix_ , eol_))
        if self.ContractNumber is not None:
            namespaceprefix_ = self.ContractNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractNumber>%s</%sContractNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContractNumber), input_name='ContractNumber')), namespaceprefix_ , eol_))
        if self.ContractDate is not None:
            namespaceprefix_ = self.ContractDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractDate>%s</%sContractDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ContractDate, input_name='ContractDate'), namespaceprefix_ , eol_))
        if self.BankName is not None:
            namespaceprefix_ = self.BankName_nsprefix_ + ':' if (UseCapturedNS_ and self.BankName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankName>%s</%sBankName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BankName), input_name='BankName')), namespaceprefix_ , eol_))
        for SupplyInformations_ in self.SupplyInformations:
            namespaceprefix_ = self.SupplyInformations_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplyInformations_nsprefix_) else ''
            SupplyInformations_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplyInformations', pretty_print=pretty_print)
        for AdditionalContract_ in self.AdditionalContract:
            namespaceprefix_ = self.AdditionalContract_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalContract_nsprefix_) else ''
            AdditionalContract_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AdditionalContract', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DealPassportNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DealPassportNumber')
            value_ = self.gds_validate_string(value_, node, 'DealPassportNumber')
            self.DealPassportNumber = value_
            self.DealPassportNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.DealPassportNumber)
        elif nodeName_ == 'ContractNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ContractNumber')
            value_ = self.gds_validate_string(value_, node, 'ContractNumber')
            self.ContractNumber = value_
            self.ContractNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.ContractNumber)
        elif nodeName_ == 'ContractDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ContractDate = dval_
            self.ContractDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.ContractDate)
        elif nodeName_ == 'BankName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BankName')
            value_ = self.gds_validate_string(value_, node, 'BankName')
            self.BankName = value_
            self.BankName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.BankName)
        elif nodeName_ == 'SupplyInformations':
            obj_ = SupplyInformationsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplyInformations.append(obj_)
            obj_.original_tagname_ = 'SupplyInformations'
        elif nodeName_ == 'AdditionalContract':
            class_obj_ = self.get_class_obj_(child_, DocumentBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AdditionalContract.append(obj_)
            obj_.original_tagname_ = 'AdditionalContract'
# end class ESADContractListType


class ESADCurrencyQuotaType(GeneratedsSuper):
    """ESADCurrencyQuotaType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    с
    т
    а
    т
    к
    е
    к
    в
    о
    т
    ы
    в
    д
    е
    н
    е
    ж
    н
    о
    м
    в
    ы
    р
    а
    ж
    е
    н
    и
    и
    .
    З
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    в
    с
    л
    у
    ч
    а
    е
    ,
    е
    с
    л
    и
    к
    в
    о
    т
    а
    у
    с
    т
    а
    н
    о
    в
    л
    е
    н
    а
    в
    д
    е
    н
    е
    ж
    н
    о
    м
    в
    ы
    р
    а
    ж
    е
    н
    и
    и
    QuotaCurrencyQuantity -- О
    с
    т
    а
    т
    о
    к
    к
    в
    о
    т
    ы
    в
    в
    а
    л
    ю
    т
    е
    QuotaCurrencyCode -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    к
    в
    о
    т
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    к
    о
    д
    о
    в
    в
    а
    л
    ю
    т
    QuotaCurrencyName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    в
    а
    л
    ю
    т
    ы
    к
    в
    о
    т
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, QuotaCurrencyQuantity=None, QuotaCurrencyCode=None, QuotaCurrencyName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.QuotaCurrencyQuantity = QuotaCurrencyQuantity
        self.validate_AmountType(self.QuotaCurrencyQuantity)
        self.QuotaCurrencyQuantity_nsprefix_ = "clt_ru"
        self.QuotaCurrencyCode = QuotaCurrencyCode
        self.validate_CurrencyN3CodeType(self.QuotaCurrencyCode)
        self.QuotaCurrencyCode_nsprefix_ = "clt_ru"
        self.QuotaCurrencyName = QuotaCurrencyName
        self.validate_CurrencyNameType(self.QuotaCurrencyName)
        self.QuotaCurrencyName_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADCurrencyQuotaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADCurrencyQuotaType.subclass:
            return ESADCurrencyQuotaType.subclass(*args_, **kwargs_)
        else:
            return ESADCurrencyQuotaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_QuotaCurrencyQuantity(self):
        return self.QuotaCurrencyQuantity
    def set_QuotaCurrencyQuantity(self, QuotaCurrencyQuantity):
        self.QuotaCurrencyQuantity = QuotaCurrencyQuantity
    def get_QuotaCurrencyCode(self):
        return self.QuotaCurrencyCode
    def set_QuotaCurrencyCode(self, QuotaCurrencyCode):
        self.QuotaCurrencyCode = QuotaCurrencyCode
    def get_QuotaCurrencyName(self):
        return self.QuotaCurrencyName
    def set_QuotaCurrencyName(self, QuotaCurrencyName):
        self.QuotaCurrencyName = QuotaCurrencyName
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyN3CodeType(self, value):
        result = True
        # Validate type CurrencyN3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CurrencyN3CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CurrencyN3CodeType_patterns_, ))
                result = False
        return result
    validate_CurrencyN3CodeType_patterns_ = [['^(\\d{3})$']]
    def validate_CurrencyNameType(self, value):
        result = True
        # Validate type CurrencyNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 70:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CurrencyNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CurrencyNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.QuotaCurrencyQuantity is not None or
            self.QuotaCurrencyCode is not None or
            self.QuotaCurrencyName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADCurrencyQuotaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADCurrencyQuotaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADCurrencyQuotaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADCurrencyQuotaType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADCurrencyQuotaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADCurrencyQuotaType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADCurrencyQuotaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QuotaCurrencyQuantity is not None:
            namespaceprefix_ = self.QuotaCurrencyQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.QuotaCurrencyQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuotaCurrencyQuantity>%s</%sQuotaCurrencyQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.QuotaCurrencyQuantity, input_name='QuotaCurrencyQuantity'), namespaceprefix_ , eol_))
        if self.QuotaCurrencyCode is not None:
            namespaceprefix_ = self.QuotaCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.QuotaCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuotaCurrencyCode>%s</%sQuotaCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuotaCurrencyCode), input_name='QuotaCurrencyCode')), namespaceprefix_ , eol_))
        if self.QuotaCurrencyName is not None:
            namespaceprefix_ = self.QuotaCurrencyName_nsprefix_ + ':' if (UseCapturedNS_ and self.QuotaCurrencyName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuotaCurrencyName>%s</%sQuotaCurrencyName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuotaCurrencyName), input_name='QuotaCurrencyName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'QuotaCurrencyQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'QuotaCurrencyQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'QuotaCurrencyQuantity')
            self.QuotaCurrencyQuantity = fval_
            self.QuotaCurrencyQuantity_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.QuotaCurrencyQuantity)
        elif nodeName_ == 'QuotaCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'QuotaCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'QuotaCurrencyCode')
            self.QuotaCurrencyCode = value_
            self.QuotaCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.QuotaCurrencyCode)
        elif nodeName_ == 'QuotaCurrencyName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuotaCurrencyName')
            value_ = self.gds_validate_string(value_, node, 'QuotaCurrencyName')
            self.QuotaCurrencyName = value_
            self.QuotaCurrencyName_nsprefix_ = child_.prefix
            # validate type CurrencyNameType
            self.validate_CurrencyNameType(self.QuotaCurrencyName)
# end class ESADCurrencyQuotaType


class ESADCustomsProcedureType(GeneratedsSuper):
    """ESADCustomsProcedureType -- П
    р
    о
    ц
    е
    д
    у
    р
    а
    MainCustomsModeCode -- К
    о
    д
    з
    а
    я
    в
    л
    я
    е
    м
    о
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    п
    р
    о
    ц
    е
    д
    у
    р
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    о
    ц
    е
    д
    у
    р
    /
    «
    00
    »
    -
    д
    л
    я
    п
    р
    и
    п
    а
    с
    о
    в
    PrecedingCustomsModeCode -- К
    о
    д
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    п
    р
    о
    ц
    е
    д
    у
    р
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    о
    ц
    е
    д
    у
    р
    /
    «
    00
    »
    -
    д
    л
    я
    п
    р
    и
    п
    а
    с
    о
    в
    GoodsTransferFeature -- О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    ь
    п
    е
    р
    е
    м
    е
    щ
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    е
    й
    п
    е
    р
    е
    м
    е
    щ
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MainCustomsModeCode=None, PrecedingCustomsModeCode=None, GoodsTransferFeature=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.MainCustomsModeCode = MainCustomsModeCode
        self.validate_CustomsModeCodeType(self.MainCustomsModeCode)
        self.MainCustomsModeCode_nsprefix_ = "cltESAD_cu"
        self.PrecedingCustomsModeCode = PrecedingCustomsModeCode
        self.validate_CustomsModeCodeType(self.PrecedingCustomsModeCode)
        self.PrecedingCustomsModeCode_nsprefix_ = "cltESAD_cu"
        self.GoodsTransferFeature = GoodsTransferFeature
        self.validate_GoodsTransferFeatureType(self.GoodsTransferFeature)
        self.GoodsTransferFeature_nsprefix_ = "cltESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADCustomsProcedureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADCustomsProcedureType.subclass:
            return ESADCustomsProcedureType.subclass(*args_, **kwargs_)
        else:
            return ESADCustomsProcedureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MainCustomsModeCode(self):
        return self.MainCustomsModeCode
    def set_MainCustomsModeCode(self, MainCustomsModeCode):
        self.MainCustomsModeCode = MainCustomsModeCode
    def get_PrecedingCustomsModeCode(self):
        return self.PrecedingCustomsModeCode
    def set_PrecedingCustomsModeCode(self, PrecedingCustomsModeCode):
        self.PrecedingCustomsModeCode = PrecedingCustomsModeCode
    def get_GoodsTransferFeature(self):
        return self.GoodsTransferFeature
    def set_GoodsTransferFeature(self, GoodsTransferFeature):
        self.GoodsTransferFeature = GoodsTransferFeature
    def validate_CustomsModeCodeType(self, value):
        result = True
        # Validate type CustomsModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_GoodsTransferFeatureType(self, value):
        result = True
        # Validate type GoodsTransferFeatureType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on GoodsTransferFeatureType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.MainCustomsModeCode is not None or
            self.PrecedingCustomsModeCode is not None or
            self.GoodsTransferFeature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADCustomsProcedureType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADCustomsProcedureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADCustomsProcedureType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADCustomsProcedureType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADCustomsProcedureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADCustomsProcedureType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADCustomsProcedureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MainCustomsModeCode is not None:
            namespaceprefix_ = self.MainCustomsModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MainCustomsModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMainCustomsModeCode>%s</%sMainCustomsModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MainCustomsModeCode), input_name='MainCustomsModeCode')), namespaceprefix_ , eol_))
        if self.PrecedingCustomsModeCode is not None:
            namespaceprefix_ = self.PrecedingCustomsModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingCustomsModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingCustomsModeCode>%s</%sPrecedingCustomsModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingCustomsModeCode), input_name='PrecedingCustomsModeCode')), namespaceprefix_ , eol_))
        if self.GoodsTransferFeature is not None:
            namespaceprefix_ = self.GoodsTransferFeature_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsTransferFeature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsTransferFeature>%s</%sGoodsTransferFeature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsTransferFeature), input_name='GoodsTransferFeature')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MainCustomsModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MainCustomsModeCode')
            value_ = self.gds_validate_string(value_, node, 'MainCustomsModeCode')
            self.MainCustomsModeCode = value_
            self.MainCustomsModeCode_nsprefix_ = child_.prefix
            # validate type CustomsModeCodeType
            self.validate_CustomsModeCodeType(self.MainCustomsModeCode)
        elif nodeName_ == 'PrecedingCustomsModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrecedingCustomsModeCode')
            value_ = self.gds_validate_string(value_, node, 'PrecedingCustomsModeCode')
            self.PrecedingCustomsModeCode = value_
            self.PrecedingCustomsModeCode_nsprefix_ = child_.prefix
            # validate type CustomsModeCodeType
            self.validate_CustomsModeCodeType(self.PrecedingCustomsModeCode)
        elif nodeName_ == 'GoodsTransferFeature':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsTransferFeature')
            value_ = self.gds_validate_string(value_, node, 'GoodsTransferFeature')
            self.GoodsTransferFeature = value_
            self.GoodsTransferFeature_nsprefix_ = child_.prefix
            # validate type GoodsTransferFeatureType
            self.validate_GoodsTransferFeatureType(self.GoodsTransferFeature)
# end class ESADCustomsProcedureType


class ESADDecisionType(GeneratedsSuper):
    """ESADDecisionType -- Д
    Т
    и
    Т
    Д
    .
    П
    р
    и
    н
    я
    т
    о
    е
    р
    е
    ш
    е
    н
    и
    е
    DecisionCode -- К
    о
    д
    р
    е
    ш
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    р
    е
    ш
    е
    н
    и
    й
    ,
    п
    р
    и
    н
    и
    м
    а
    е
    м
    ы
    х
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    м
    и
    о
    р
    г
    а
    н
    а
    м
    и
    (**) -
    р
    а
    з
    л
    и
    ч
    н
    о
    п
    о
    т
    о
    в
    а
    р
    а
    м
    (
    з
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    п
    р
    и
    у
    к
    а
    з
    а
    н
    и
    и
    р
    е
    ш
    е
    н
    и
    я
    п
    о
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    )
    DateInf -- Д
    а
    т
    а
    TimeInf -- В
    р
    е
    м
    я
    LNP -- Л
    Н
    П
    Foundation -- О
    б
    о
    с
    н
    о
    в
    а
    н
    и
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DecisionCode=None, DateInf=None, TimeInf=None, LNP=None, Foundation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.DecisionCode = DecisionCode
        self.validate_Code2Type(self.DecisionCode)
        self.DecisionCode_nsprefix_ = "clt_ru"
        if isinstance(DateInf, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateInf, '%Y-%m-%d').date()
        else:
            initvalue_ = DateInf
        self.DateInf = initvalue_
        self.DateInf_nsprefix_ = "clt_ru"
        if isinstance(TimeInf, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TimeInf, '%H:%M:%S').time()
        else:
            initvalue_ = TimeInf
        self.TimeInf = initvalue_
        self.TimeInf_nsprefix_ = "clt_ru"
        self.LNP = LNP
        self.validate_LNPIDType(self.LNP)
        self.LNP_nsprefix_ = "clt_ru"
        self.Foundation = Foundation
        self.validate_FoundationType(self.Foundation)
        self.Foundation_nsprefix_ = "cltESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADDecisionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADDecisionType.subclass:
            return ESADDecisionType.subclass(*args_, **kwargs_)
        else:
            return ESADDecisionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DecisionCode(self):
        return self.DecisionCode
    def set_DecisionCode(self, DecisionCode):
        self.DecisionCode = DecisionCode
    def get_DateInf(self):
        return self.DateInf
    def set_DateInf(self, DateInf):
        self.DateInf = DateInf
    def get_TimeInf(self):
        return self.TimeInf
    def set_TimeInf(self, TimeInf):
        self.TimeInf = TimeInf
    def get_LNP(self):
        return self.LNP
    def set_LNP(self, LNP):
        self.LNP = LNP
    def get_Foundation(self):
        return self.Foundation
    def set_Foundation(self, Foundation):
        self.Foundation = Foundation
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_TimeCustType(self, value):
        result = True
        # Validate type TimeCustType, a restriction on CategoryCust:TimeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.time):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.time)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_LNPIDType(self, value):
        result = True
        # Validate type LNPIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on LNPIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on LNPIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FoundationType(self, value):
        result = True
        # Validate type FoundationType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FoundationType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FoundationType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DecisionCode is not None or
            self.DateInf is not None or
            self.TimeInf is not None or
            self.LNP is not None or
            self.Foundation is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADDecisionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADDecisionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADDecisionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADDecisionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADDecisionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADDecisionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADDecisionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DecisionCode is not None:
            namespaceprefix_ = self.DecisionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DecisionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDecisionCode>%s</%sDecisionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DecisionCode), input_name='DecisionCode')), namespaceprefix_ , eol_))
        if self.DateInf is not None:
            namespaceprefix_ = self.DateInf_nsprefix_ + ':' if (UseCapturedNS_ and self.DateInf_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateInf>%s</%sDateInf>%s' % (namespaceprefix_ , self.gds_format_date(self.DateInf, input_name='DateInf'), namespaceprefix_ , eol_))
        if self.TimeInf is not None:
            namespaceprefix_ = self.TimeInf_nsprefix_ + ':' if (UseCapturedNS_ and self.TimeInf_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeInf>%s</%sTimeInf>%s' % (namespaceprefix_ , self.gds_format_time(self.TimeInf, input_name='TimeInf'), namespaceprefix_ , eol_))
        if self.LNP is not None:
            namespaceprefix_ = self.LNP_nsprefix_ + ':' if (UseCapturedNS_ and self.LNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLNP>%s</%sLNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LNP), input_name='LNP')), namespaceprefix_ , eol_))
        if self.Foundation is not None:
            namespaceprefix_ = self.Foundation_nsprefix_ + ':' if (UseCapturedNS_ and self.Foundation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFoundation>%s</%sFoundation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Foundation), input_name='Foundation')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DecisionCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DecisionCode')
            value_ = self.gds_validate_string(value_, node, 'DecisionCode')
            self.DecisionCode = value_
            self.DecisionCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.DecisionCode)
        elif nodeName_ == 'DateInf':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DateInf = dval_
            self.DateInf_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DateInf)
        elif nodeName_ == 'TimeInf':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.TimeInf = dval_
            self.TimeInf_nsprefix_ = child_.prefix
            # validate type TimeCustType
            self.validate_TimeCustType(self.TimeInf)
        elif nodeName_ == 'LNP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LNP')
            value_ = self.gds_validate_string(value_, node, 'LNP')
            self.LNP = value_
            self.LNP_nsprefix_ = child_.prefix
            # validate type LNPIDType
            self.validate_LNPIDType(self.LNP)
        elif nodeName_ == 'Foundation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Foundation')
            value_ = self.gds_validate_string(value_, node, 'Foundation')
            self.Foundation = value_
            self.Foundation_nsprefix_ = child_.prefix
            # validate type FoundationType
            self.validate_FoundationType(self.Foundation)
# end class ESADDecisionType


class ESADExciseListType(GeneratedsSuper):
    """ESADExciseListType -- П
    е
    р
    е
    ч
    е
    н
    ь
    н
    о
    м
    е
    р
    о
    в
    а
    к
    ц
    и
    з
    н
    ы
    х
    и
    л
    и
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    ы
    х
    м
    а
    р
    о
    к
    ExciseNumber -- Н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    а
    к
    ц
    и
    з
    н
    ы
    х
    и
    л
    и
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    ы
    х
    м
    а
    р
    о
    к
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExciseNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if ExciseNumber is None:
            self.ExciseNumber = []
        else:
            self.ExciseNumber = ExciseNumber
        self.ExciseNumber_nsprefix_ = "cltESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADExciseListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADExciseListType.subclass:
            return ESADExciseListType.subclass(*args_, **kwargs_)
        else:
            return ESADExciseListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExciseNumber(self):
        return self.ExciseNumber
    def set_ExciseNumber(self, ExciseNumber):
        self.ExciseNumber = ExciseNumber
    def add_ExciseNumber(self, value):
        self.ExciseNumber.append(value)
    def insert_ExciseNumber_at(self, index, value):
        self.ExciseNumber.insert(index, value)
    def replace_ExciseNumber_at(self, index, value):
        self.ExciseNumber[index] = value
    def validate_ExciseNumberType(self, value):
        result = True
        # Validate type ExciseNumberType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on ExciseNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on ExciseNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ExciseNumber
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADExciseListType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADExciseListType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADExciseListType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADExciseListType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADExciseListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADExciseListType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADExciseListType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ExciseNumber_ in self.ExciseNumber:
            namespaceprefix_ = self.ExciseNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExciseNumber>%s</%sExciseNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(ExciseNumber_, input_name='ExciseNumber'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExciseNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ExciseNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'ExciseNumber')
            self.ExciseNumber.append(fval_)
            self.ExciseNumber_nsprefix_ = child_.prefix
            # validate type ExciseNumberType
            self.validate_ExciseNumberType(self.ExciseNumber[-1])
# end class ESADExciseListType


class ESADExciseRangeType(GeneratedsSuper):
    """ESADExciseRangeType -- Д
    и
    а
    п
    а
    з
    о
    н
    н
    о
    м
    е
    р
    о
    в
    а
    к
    ц
    и
    з
    н
    ы
    х
    м
    а
    р
    о
    к
    ExciseFirstNumber -- П
    е
    р
    в
    ы
    й
    н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    д
    и
    а
    п
    а
    з
    о
    н
    а
    н
    о
    м
    е
    р
    о
    в
    а
    к
    ц
    и
    з
    н
    ы
    х
    м
    а
    р
    о
    к
    ExciseLastNumber -- П
    о
    с
    л
    е
    д
    н
    и
    й
    н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    д
    и
    а
    п
    а
    з
    о
    н
    а
    н
    о
    м
    е
    р
    о
    в
    а
    к
    ц
    и
    з
    н
    ы
    х
    м
    а
    р
    о
    к
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExciseFirstNumber=None, ExciseLastNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ExciseFirstNumber = ExciseFirstNumber
        self.validate_ExciseNumberType(self.ExciseFirstNumber)
        self.ExciseFirstNumber_nsprefix_ = "cltESAD_cu"
        self.ExciseLastNumber = ExciseLastNumber
        self.validate_ExciseNumberType(self.ExciseLastNumber)
        self.ExciseLastNumber_nsprefix_ = "cltESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADExciseRangeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADExciseRangeType.subclass:
            return ESADExciseRangeType.subclass(*args_, **kwargs_)
        else:
            return ESADExciseRangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExciseFirstNumber(self):
        return self.ExciseFirstNumber
    def set_ExciseFirstNumber(self, ExciseFirstNumber):
        self.ExciseFirstNumber = ExciseFirstNumber
    def get_ExciseLastNumber(self):
        return self.ExciseLastNumber
    def set_ExciseLastNumber(self, ExciseLastNumber):
        self.ExciseLastNumber = ExciseLastNumber
    def validate_ExciseNumberType(self, value):
        result = True
        # Validate type ExciseNumberType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on ExciseNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on ExciseNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ExciseFirstNumber is not None or
            self.ExciseLastNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADExciseRangeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADExciseRangeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADExciseRangeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADExciseRangeType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADExciseRangeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADExciseRangeType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADExciseRangeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExciseFirstNumber is not None:
            namespaceprefix_ = self.ExciseFirstNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseFirstNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExciseFirstNumber>%s</%sExciseFirstNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ExciseFirstNumber, input_name='ExciseFirstNumber'), namespaceprefix_ , eol_))
        if self.ExciseLastNumber is not None:
            namespaceprefix_ = self.ExciseLastNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseLastNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExciseLastNumber>%s</%sExciseLastNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ExciseLastNumber, input_name='ExciseLastNumber'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExciseFirstNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ExciseFirstNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'ExciseFirstNumber')
            self.ExciseFirstNumber = fval_
            self.ExciseFirstNumber_nsprefix_ = child_.prefix
            # validate type ExciseNumberType
            self.validate_ExciseNumberType(self.ExciseFirstNumber)
        elif nodeName_ == 'ExciseLastNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ExciseLastNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'ExciseLastNumber')
            self.ExciseLastNumber = fval_
            self.ExciseLastNumber_nsprefix_ = child_.prefix
            # validate type ExciseNumberType
            self.validate_ExciseNumberType(self.ExciseLastNumber)
# end class ESADExciseRangeType


class ESADExciseType(GeneratedsSuper):
    """ESADExciseType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    а
    к
    ц
    и
    з
    н
    ы
    х
    м
    а
    р
    к
    а
    х
    ExciseQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    а
    к
    ц
    и
    з
    н
    ы
    х
    и
    л
    и
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    ы
    х
    м
    а
    р
    о
    к
    ExciseSerieses -- Н
    о
    м
    е
    р
    с
    е
    р
    и
    и
    а
    к
    ц
    и
    з
    н
    ы
    х
    и
    л
    и
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    ы
    х
    м
    а
    р
    о
    к
    ExciseList -- П
    е
    р
    е
    ч
    е
    н
    ь
    н
    о
    м
    е
    р
    о
    в
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    в
    )
    а
    к
    ц
    и
    з
    н
    ы
    х
    и
    л
    и
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    ы
    х
    м
    а
    р
    о
    к
    ExciseRange -- Д
    и
    а
    п
    а
    з
    о
    н
    н
    о
    м
    е
    р
    о
    в
    а
    к
    ц
    и
    з
    н
    ы
    х
    и
    л
    и
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    ы
    х
    м
    а
    р
    о
    к
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ExciseQuantity=None, ExciseSerieses=None, ExciseList=None, ExciseRange=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ExciseQuantity = ExciseQuantity
        self.validate_Quantity8Type(self.ExciseQuantity)
        self.ExciseQuantity_nsprefix_ = "clt_ru"
        self.ExciseSerieses = ExciseSerieses
        self.validate_ExciseSeriesesType(self.ExciseSerieses)
        self.ExciseSerieses_nsprefix_ = "cltESAD_cu"
        self.ExciseList = ExciseList
        self.ExciseList_nsprefix_ = "catESAD_cu"
        if ExciseRange is None:
            self.ExciseRange = []
        else:
            self.ExciseRange = ExciseRange
        self.ExciseRange_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADExciseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADExciseType.subclass:
            return ESADExciseType.subclass(*args_, **kwargs_)
        else:
            return ESADExciseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ExciseQuantity(self):
        return self.ExciseQuantity
    def set_ExciseQuantity(self, ExciseQuantity):
        self.ExciseQuantity = ExciseQuantity
    def get_ExciseSerieses(self):
        return self.ExciseSerieses
    def set_ExciseSerieses(self, ExciseSerieses):
        self.ExciseSerieses = ExciseSerieses
    def get_ExciseList(self):
        return self.ExciseList
    def set_ExciseList(self, ExciseList):
        self.ExciseList = ExciseList
    def get_ExciseRange(self):
        return self.ExciseRange
    def set_ExciseRange(self, ExciseRange):
        self.ExciseRange = ExciseRange
    def add_ExciseRange(self, value):
        self.ExciseRange.append(value)
    def insert_ExciseRange_at(self, index, value):
        self.ExciseRange.insert(index, value)
    def replace_ExciseRange_at(self, index, value):
        self.ExciseRange[index] = value
    def validate_Quantity8Type(self, value):
        result = True
        # Validate type Quantity8Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity8Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity8Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_ExciseSeriesesType(self, value):
        result = True
        # Validate type ExciseSeriesesType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ExciseSeriesesType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ExciseSeriesesType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ExciseQuantity is not None or
            self.ExciseSerieses is not None or
            self.ExciseList is not None or
            self.ExciseRange
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADExciseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADExciseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADExciseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADExciseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADExciseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADExciseType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='ESADExciseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ExciseQuantity is not None:
            namespaceprefix_ = self.ExciseQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExciseQuantity>%s</%sExciseQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.ExciseQuantity, input_name='ExciseQuantity'), namespaceprefix_ , eol_))
        if self.ExciseSerieses is not None:
            namespaceprefix_ = self.ExciseSerieses_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseSerieses_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExciseSerieses>%s</%sExciseSerieses>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExciseSerieses), input_name='ExciseSerieses')), namespaceprefix_ , eol_))
        if self.ExciseList is not None:
            namespaceprefix_ = self.ExciseList_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseList_nsprefix_) else ''
            self.ExciseList.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExciseList', pretty_print=pretty_print)
        for ExciseRange_ in self.ExciseRange:
            namespaceprefix_ = self.ExciseRange_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseRange_nsprefix_) else ''
            ExciseRange_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExciseRange', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ExciseQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ExciseQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'ExciseQuantity')
            self.ExciseQuantity = ival_
            self.ExciseQuantity_nsprefix_ = child_.prefix
            # validate type Quantity8Type
            self.validate_Quantity8Type(self.ExciseQuantity)
        elif nodeName_ == 'ExciseSerieses':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ExciseSerieses')
            value_ = self.gds_validate_string(value_, node, 'ExciseSerieses')
            self.ExciseSerieses = value_
            self.ExciseSerieses_nsprefix_ = child_.prefix
            # validate type ExciseSeriesesType
            self.validate_ExciseSeriesesType(self.ExciseSerieses)
        elif nodeName_ == 'ExciseList':
            obj_ = ESADExciseListType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExciseList = obj_
            obj_.original_tagname_ = 'ExciseList'
        elif nodeName_ == 'ExciseRange':
            obj_ = ESADExciseRangeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExciseRange.append(obj_)
            obj_.original_tagname_ = 'ExciseRange'
# end class ESADExciseType


class ESADFilledPersonType(PersonBaseType):
    """ESADFilledPersonType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    л
    и
    ц
    е
    ,
    з
    а
    п
    о
    л
    н
    и
    в
    ш
    е
    м
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    ю
    QualificationCertificate -- Н
    о
    м
    е
    р
    к
    в
    а
    л
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    г
    о
    а
    т
    т
    е
    с
    т
    а
    т
    а
    с
    п
    е
    ц
    и
    а
    л
    и
    с
    т
    а
    п
    о
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    у
    о
    ф
    о
    р
    м
    л
    е
    н
    и
    ю
    .
    Д
    л
    я
    Р
    Б
    AuthoritesDocument -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    м
    п
    о
    л
    н
    о
    м
    о
    ч
    и
    я
    ,
    о
    д
    о
    в
    е
    р
    е
    н
    н
    о
    с
    т
    и
    н
    а
    с
    о
    в
    е
    р
    ш
    е
    н
    и
    е
    д
    е
    й
    с
    т
    в
    и
    й
    IdentityCard -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    Contact -- К
    о
    н
    т
    а
    к
    т
    н
    а
    я
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PersonBaseType
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, QualificationCertificate=None, AuthoritesDocument=None, IdentityCard=None, Contact=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("ESADFilledPersonType"), self).__init__(PersonSurname, PersonName, PersonMiddleName, PersonPost,  **kwargs_)
        self.QualificationCertificate = QualificationCertificate
        self.validate_CodeVariable6Type(self.QualificationCertificate)
        self.QualificationCertificate_nsprefix_ = "clt_ru"
        self.AuthoritesDocument = AuthoritesDocument
        self.AuthoritesDocument_nsprefix_ = "cat_ru"
        self.IdentityCard = IdentityCard
        self.IdentityCard_nsprefix_ = "catESAD_cu"
        self.Contact = Contact
        self.Contact_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADFilledPersonType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADFilledPersonType.subclass:
            return ESADFilledPersonType.subclass(*args_, **kwargs_)
        else:
            return ESADFilledPersonType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_QualificationCertificate(self):
        return self.QualificationCertificate
    def set_QualificationCertificate(self, QualificationCertificate):
        self.QualificationCertificate = QualificationCertificate
    def get_AuthoritesDocument(self):
        return self.AuthoritesDocument
    def set_AuthoritesDocument(self, AuthoritesDocument):
        self.AuthoritesDocument = AuthoritesDocument
    def get_IdentityCard(self):
        return self.IdentityCard
    def set_IdentityCard(self, IdentityCard):
        self.IdentityCard = IdentityCard
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def validate_CodeVariable6Type(self, value):
        result = True
        # Validate type CodeVariable6Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable6Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable6Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.QualificationCertificate is not None or
            self.AuthoritesDocument is not None or
            self.IdentityCard is not None or
            self.Contact is not None or
            super(ESADFilledPersonType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADFilledPersonType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADFilledPersonType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADFilledPersonType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADFilledPersonType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADFilledPersonType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADFilledPersonType'):
        super(ESADFilledPersonType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADFilledPersonType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADFilledPersonType', fromsubclass_=False, pretty_print=True):
        super(ESADFilledPersonType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QualificationCertificate is not None:
            namespaceprefix_ = self.QualificationCertificate_nsprefix_ + ':' if (UseCapturedNS_ and self.QualificationCertificate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQualificationCertificate>%s</%sQualificationCertificate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QualificationCertificate), input_name='QualificationCertificate')), namespaceprefix_ , eol_))
        if self.AuthoritesDocument is not None:
            namespaceprefix_ = self.AuthoritesDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthoritesDocument_nsprefix_) else ''
            self.AuthoritesDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AuthoritesDocument', pretty_print=pretty_print)
        if self.IdentityCard is not None:
            namespaceprefix_ = self.IdentityCard_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCard_nsprefix_) else ''
            self.IdentityCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentityCard', pretty_print=pretty_print)
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADFilledPersonType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'QualificationCertificate':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'QualificationCertificate')
            value_ = self.gds_validate_string(value_, node, 'QualificationCertificate')
            self.QualificationCertificate = value_
            self.QualificationCertificate_nsprefix_ = child_.prefix
            # validate type CodeVariable6Type
            self.validate_CodeVariable6Type(self.QualificationCertificate)
        elif nodeName_ == 'AuthoritesDocument':
            class_obj_ = self.get_class_obj_(child_, AuthoritesDocumentType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AuthoritesDocument = obj_
            obj_.original_tagname_ = 'AuthoritesDocument'
        elif nodeName_ == 'IdentityCard':
            obj_ = CUIdentityCardType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentityCard = obj_
            obj_.original_tagname_ = 'IdentityCard'
        elif nodeName_ == 'Contact':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        super(ESADFilledPersonType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADFilledPersonType


class ESADGoodsOfficialMarkType(GeneratedsSuper):
    """ESADGoodsOfficialMarkType -- Д
    Т
    и
    Т
    Д
    .
    В
    н
    у
    т
    р
    е
    н
    н
    и
    й
    ф
    о
    р
    м
    а
    т
    .
    С
    л
    у
    ж
    е
    б
    н
    ы
    е
    о
    т
    м
    е
    т
    к
    и
    п
    о
    т
    о
    в
    а
    р
    у
    StageMarkIdentifier -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    п
    р
    о
    с
    т
    а
    в
    л
    е
    н
    н
    о
    й
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    о
    й
    о
    т
    м
    е
    т
    к
    и
    - 1 (
    н
    о
    м
    е
    р
    э
    т
    а
    п
    а
    )
    NoteMarkIdentifier -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    п
    р
    о
    с
    т
    а
    в
    л
    е
    н
    н
    о
    й
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    о
    й
    о
    т
    м
    е
    т
    к
    и
    -  2 (
    т
    и
    п
    п
    р
    и
    м
    е
    ч
    а
    н
    и
    я
    )
    InformationTypeCode -- К
    о
    д
    т
    и
    п
    а
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    (SKRECC)
    MarkDescription -- С
    л
    у
    ж
    е
    б
    н
    а
    я
    з
    а
    п
    и
    с
    ь
    /
    н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
      
    * DateInf -- Д
      а
      т
      а
      /
      Д
      а
      т
      а
      п
      р
      и
      н
      я
      т
      и
      я
      р
      е
      ш
      е
      н
      и
      я
      о
      н
      а
      п
      р
      а
      в
      л
      е
      н
      и
      и
      т
      р
      е
      б
      о
      в
      а
      н
      и
      я
      /
      п
      р
      и
      о
      с
      т
      а
      н
      о
      в
      л
      е
      н
      и
      и
      в
      ы
      п
      у
      с
      к
      а
      т
      о
      в
      а
      р
      о
      в
      
    * TimeInf -- В
      р
      е
      м
      я
    * PersonName -- Ф
      И
      О
      и
      н
      с
      п
      е
      к
      т
      о
      р
      а
      ,
      з
      а
      в
      е
      р
      и
      в
      ш
      е
      г
      о
      з
      а
      п
      и
      с
      ь
    * LNP -- Н
      о
      м
      е
      р
      Л
      Н
      П
      и
      н
      с
      п
      е
      к
      т
      о
      р
      а
      ,
      з
      а
      в
      е
      р
      и
      в
      ш
      е
      г
      о
      з
      а
      п
      и
      с
      ь
    * ReqCompletionDate -- Д
      а
      т
      а
      в
      ы
      п
      о
      л
      н
      е
      н
      и
      я
      т
      р
      е
      б
      о
      в
      а
      н
      и
      й
      (
      п
      р
      е
      д
      о
      с
      т
      а
      в
      л
      е
      н
      и
      я
      д
      о
      к
      у
      м
      е
      н
      т
      о
      в
      )
      Д
      е
      к
      л
      а
      р
      а
      н
      т
      о
      м
      /
      Д
      а
      т
      а
      ,
      п
      о
      к
      о
      т
      о
      р
      о
      й
      п
      р
      и
      о
      с
      т
      а
      н
      о
      в
      л
      е
      н
      в
      ы
      п
      у
      с
      к
      т
      о
      в
      а
      р
      о
      в
    * ReqCompletionTime -- В
      р
      е
      м
      я
    * DocumentIndicator -- П
      р
      и
      з
      н
      а
      к
      д
      о
      к
      у
      м
      е
      н
      т
      а
      /
      с
      л
      у
      ж
      е
      б
      н
      о
      й
      з
      а
      п
      и
      с
      и
      .
      З
      а
      п
      о
      л
      н
      я
      е
      т
      с
      я
      п
      р
      и
      п
      р
      о
      с
      т
      а
      в
      л
      е
      н
      и
      и
      о
      т
      м
      е
      т
      к
      и
      в
      г
      р
      а
      ф
      е
      C
      п
      о
      д
      н
      о
      м
      е
      р
      о
      м
      12 (C 2 12)   ("0"-
      с
      в
      е
      д
      е
      н
      и
      я
      о
      т
      о
      в
      а
      р
      е
      с
      о
      в
      п
      а
      д
      а
      ю
      т
      ; "1"-
      с
      в
      е
      д
      е
      н
      и
      я
      о
      т
      о
      в
      а
      р
      е
      н
      е
      с
      о
      в
      п
      а
      д
      а
      ю
      т
      )
    * Deadline -- С
      р
      о
      к
    * DeadlineMonth -- С
      р
      о
      к
      п
      р
      о
      д
      л
      е
      н
      и
      я
      /
      о
      б
      щ
      и
      й
      в
      м
      е
      с
      я
      ц
      а
      х
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StageMarkIdentifier=None, NoteMarkIdentifier=None, InformationTypeCode=None, MarkDescription=None, DateInf=None, TimeInf=None, PersonName=None, LNP=None, ReqCompletionDate=None, ReqCompletionTime=None, DocumentIndicator=None, Deadline=None, DeadlineMonth=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.StageMarkIdentifier = StageMarkIdentifier
        self.validate_LetterIndicatorType(self.StageMarkIdentifier)
        self.StageMarkIdentifier_nsprefix_ = "clt_ru"
        self.NoteMarkIdentifier = NoteMarkIdentifier
        self.validate_Code2Type(self.NoteMarkIdentifier)
        self.NoteMarkIdentifier_nsprefix_ = "clt_ru"
        self.InformationTypeCode = InformationTypeCode
        self.validate_Code2Type(self.InformationTypeCode)
        self.InformationTypeCode_nsprefix_ = "clt_ru"
        self.MarkDescription = MarkDescription
        self.validate_FreeText250Type(self.MarkDescription)
        self.MarkDescription_nsprefix_ = "clt_ru"
        if isinstance(DateInf, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateInf, '%Y-%m-%d').date()
        else:
            initvalue_ = DateInf
        self.DateInf = initvalue_
        self.DateInf_nsprefix_ = "clt_ru"
        if isinstance(TimeInf, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TimeInf, '%H:%M:%S').time()
        else:
            initvalue_ = TimeInf
        self.TimeInf = initvalue_
        self.TimeInf_nsprefix_ = "clt_ru"
        self.PersonName = PersonName
        self.validate_NameType(self.PersonName)
        self.PersonName_nsprefix_ = "clt_ru"
        self.LNP = LNP
        self.validate_LNPIDType(self.LNP)
        self.LNP_nsprefix_ = "clt_ru"
        if isinstance(ReqCompletionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReqCompletionDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ReqCompletionDate
        self.ReqCompletionDate = initvalue_
        self.ReqCompletionDate_nsprefix_ = "clt_ru"
        if isinstance(ReqCompletionTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReqCompletionTime, '%H:%M:%S').time()
        else:
            initvalue_ = ReqCompletionTime
        self.ReqCompletionTime = initvalue_
        self.ReqCompletionTime_nsprefix_ = "clt_ru"
        self.DocumentIndicator = DocumentIndicator
        self.validate_LetterIndicatorType(self.DocumentIndicator)
        self.DocumentIndicator_nsprefix_ = "clt_ru"
        if isinstance(Deadline, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Deadline, '%Y-%m-%d').date()
        else:
            initvalue_ = Deadline
        self.Deadline = initvalue_
        self.Deadline_nsprefix_ = "clt_ru"
        self.DeadlineMonth = DeadlineMonth
        self.validate_Quantity2Type(self.DeadlineMonth)
        self.DeadlineMonth_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADGoodsOfficialMarkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADGoodsOfficialMarkType.subclass:
            return ESADGoodsOfficialMarkType.subclass(*args_, **kwargs_)
        else:
            return ESADGoodsOfficialMarkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StageMarkIdentifier(self):
        return self.StageMarkIdentifier
    def set_StageMarkIdentifier(self, StageMarkIdentifier):
        self.StageMarkIdentifier = StageMarkIdentifier
    def get_NoteMarkIdentifier(self):
        return self.NoteMarkIdentifier
    def set_NoteMarkIdentifier(self, NoteMarkIdentifier):
        self.NoteMarkIdentifier = NoteMarkIdentifier
    def get_InformationTypeCode(self):
        return self.InformationTypeCode
    def set_InformationTypeCode(self, InformationTypeCode):
        self.InformationTypeCode = InformationTypeCode
    def get_MarkDescription(self):
        return self.MarkDescription
    def set_MarkDescription(self, MarkDescription):
        self.MarkDescription = MarkDescription
    def get_DateInf(self):
        return self.DateInf
    def set_DateInf(self, DateInf):
        self.DateInf = DateInf
    def get_TimeInf(self):
        return self.TimeInf
    def set_TimeInf(self, TimeInf):
        self.TimeInf = TimeInf
    def get_PersonName(self):
        return self.PersonName
    def set_PersonName(self, PersonName):
        self.PersonName = PersonName
    def get_LNP(self):
        return self.LNP
    def set_LNP(self, LNP):
        self.LNP = LNP
    def get_ReqCompletionDate(self):
        return self.ReqCompletionDate
    def set_ReqCompletionDate(self, ReqCompletionDate):
        self.ReqCompletionDate = ReqCompletionDate
    def get_ReqCompletionTime(self):
        return self.ReqCompletionTime
    def set_ReqCompletionTime(self, ReqCompletionTime):
        self.ReqCompletionTime = ReqCompletionTime
    def get_DocumentIndicator(self):
        return self.DocumentIndicator
    def set_DocumentIndicator(self, DocumentIndicator):
        self.DocumentIndicator = DocumentIndicator
    def get_Deadline(self):
        return self.Deadline
    def set_Deadline(self, Deadline):
        self.Deadline = Deadline
    def get_DeadlineMonth(self):
        return self.DeadlineMonth
    def set_DeadlineMonth(self, DeadlineMonth):
        self.DeadlineMonth = DeadlineMonth
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_TimeCustType(self, value):
        result = True
        # Validate type TimeCustType, a restriction on CategoryCust:TimeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.time):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.time)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LNPIDType(self, value):
        result = True
        # Validate type LNPIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on LNPIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on LNPIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Quantity2Type(self, value):
        result = True
        # Validate type Quantity2Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.StageMarkIdentifier is not None or
            self.NoteMarkIdentifier is not None or
            self.InformationTypeCode is not None or
            self.MarkDescription is not None or
            self.DateInf is not None or
            self.TimeInf is not None or
            self.PersonName is not None or
            self.LNP is not None or
            self.ReqCompletionDate is not None or
            self.ReqCompletionTime is not None or
            self.DocumentIndicator is not None or
            self.Deadline is not None or
            self.DeadlineMonth is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADGoodsOfficialMarkType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADGoodsOfficialMarkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADGoodsOfficialMarkType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADGoodsOfficialMarkType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADGoodsOfficialMarkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADGoodsOfficialMarkType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADGoodsOfficialMarkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StageMarkIdentifier is not None:
            namespaceprefix_ = self.StageMarkIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.StageMarkIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStageMarkIdentifier>%s</%sStageMarkIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StageMarkIdentifier), input_name='StageMarkIdentifier')), namespaceprefix_ , eol_))
        if self.NoteMarkIdentifier is not None:
            namespaceprefix_ = self.NoteMarkIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.NoteMarkIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteMarkIdentifier>%s</%sNoteMarkIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NoteMarkIdentifier), input_name='NoteMarkIdentifier')), namespaceprefix_ , eol_))
        if self.InformationTypeCode is not None:
            namespaceprefix_ = self.InformationTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InformationTypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformationTypeCode>%s</%sInformationTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformationTypeCode), input_name='InformationTypeCode')), namespaceprefix_ , eol_))
        if self.MarkDescription is not None:
            namespaceprefix_ = self.MarkDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkDescription>%s</%sMarkDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MarkDescription), input_name='MarkDescription')), namespaceprefix_ , eol_))
        if self.DateInf is not None:
            namespaceprefix_ = self.DateInf_nsprefix_ + ':' if (UseCapturedNS_ and self.DateInf_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateInf>%s</%sDateInf>%s' % (namespaceprefix_ , self.gds_format_date(self.DateInf, input_name='DateInf'), namespaceprefix_ , eol_))
        if self.TimeInf is not None:
            namespaceprefix_ = self.TimeInf_nsprefix_ + ':' if (UseCapturedNS_ and self.TimeInf_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeInf>%s</%sTimeInf>%s' % (namespaceprefix_ , self.gds_format_time(self.TimeInf, input_name='TimeInf'), namespaceprefix_ , eol_))
        if self.PersonName is not None:
            namespaceprefix_ = self.PersonName_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonName>%s</%sPersonName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonName), input_name='PersonName')), namespaceprefix_ , eol_))
        if self.LNP is not None:
            namespaceprefix_ = self.LNP_nsprefix_ + ':' if (UseCapturedNS_ and self.LNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLNP>%s</%sLNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LNP), input_name='LNP')), namespaceprefix_ , eol_))
        if self.ReqCompletionDate is not None:
            namespaceprefix_ = self.ReqCompletionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ReqCompletionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReqCompletionDate>%s</%sReqCompletionDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ReqCompletionDate, input_name='ReqCompletionDate'), namespaceprefix_ , eol_))
        if self.ReqCompletionTime is not None:
            namespaceprefix_ = self.ReqCompletionTime_nsprefix_ + ':' if (UseCapturedNS_ and self.ReqCompletionTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReqCompletionTime>%s</%sReqCompletionTime>%s' % (namespaceprefix_ , self.gds_format_time(self.ReqCompletionTime, input_name='ReqCompletionTime'), namespaceprefix_ , eol_))
        if self.DocumentIndicator is not None:
            namespaceprefix_ = self.DocumentIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentIndicator>%s</%sDocumentIndicator>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentIndicator), input_name='DocumentIndicator')), namespaceprefix_ , eol_))
        if self.Deadline is not None:
            namespaceprefix_ = self.Deadline_nsprefix_ + ':' if (UseCapturedNS_ and self.Deadline_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeadline>%s</%sDeadline>%s' % (namespaceprefix_ , self.gds_format_date(self.Deadline, input_name='Deadline'), namespaceprefix_ , eol_))
        if self.DeadlineMonth is not None:
            namespaceprefix_ = self.DeadlineMonth_nsprefix_ + ':' if (UseCapturedNS_ and self.DeadlineMonth_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeadlineMonth>%s</%sDeadlineMonth>%s' % (namespaceprefix_ , self.gds_format_integer(self.DeadlineMonth, input_name='DeadlineMonth'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StageMarkIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'StageMarkIdentifier')
            value_ = self.gds_validate_string(value_, node, 'StageMarkIdentifier')
            self.StageMarkIdentifier = value_
            self.StageMarkIdentifier_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.StageMarkIdentifier)
        elif nodeName_ == 'NoteMarkIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'NoteMarkIdentifier')
            value_ = self.gds_validate_string(value_, node, 'NoteMarkIdentifier')
            self.NoteMarkIdentifier = value_
            self.NoteMarkIdentifier_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.NoteMarkIdentifier)
        elif nodeName_ == 'InformationTypeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InformationTypeCode')
            value_ = self.gds_validate_string(value_, node, 'InformationTypeCode')
            self.InformationTypeCode = value_
            self.InformationTypeCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.InformationTypeCode)
        elif nodeName_ == 'MarkDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarkDescription')
            value_ = self.gds_validate_string(value_, node, 'MarkDescription')
            self.MarkDescription = value_
            self.MarkDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.MarkDescription)
        elif nodeName_ == 'DateInf':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DateInf = dval_
            self.DateInf_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DateInf)
        elif nodeName_ == 'TimeInf':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.TimeInf = dval_
            self.TimeInf_nsprefix_ = child_.prefix
            # validate type TimeCustType
            self.validate_TimeCustType(self.TimeInf)
        elif nodeName_ == 'PersonName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonName')
            value_ = self.gds_validate_string(value_, node, 'PersonName')
            self.PersonName = value_
            self.PersonName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.PersonName)
        elif nodeName_ == 'LNP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LNP')
            value_ = self.gds_validate_string(value_, node, 'LNP')
            self.LNP = value_
            self.LNP_nsprefix_ = child_.prefix
            # validate type LNPIDType
            self.validate_LNPIDType(self.LNP)
        elif nodeName_ == 'ReqCompletionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ReqCompletionDate = dval_
            self.ReqCompletionDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.ReqCompletionDate)
        elif nodeName_ == 'ReqCompletionTime':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.ReqCompletionTime = dval_
            self.ReqCompletionTime_nsprefix_ = child_.prefix
            # validate type TimeCustType
            self.validate_TimeCustType(self.ReqCompletionTime)
        elif nodeName_ == 'DocumentIndicator':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentIndicator')
            value_ = self.gds_validate_string(value_, node, 'DocumentIndicator')
            self.DocumentIndicator = value_
            self.DocumentIndicator_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.DocumentIndicator)
        elif nodeName_ == 'Deadline':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Deadline = dval_
            self.Deadline_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.Deadline)
        elif nodeName_ == 'DeadlineMonth' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'DeadlineMonth')
            ival_ = self.gds_validate_integer(ival_, node, 'DeadlineMonth')
            self.DeadlineMonth = ival_
            self.DeadlineMonth_nsprefix_ = child_.prefix
            # validate type Quantity2Type
            self.validate_Quantity2Type(self.DeadlineMonth)
# end class ESADGoodsOfficialMarkType


class ESADGoodsPackagingType(GeneratedsSuper):
    """ESADGoodsPackagingType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    г
    р
    у
    з
    о
    в
    ы
    х
    м
    е
    с
    т
    а
    х
    ,
    п
    о
    д
    д
    о
    н
    а
    х
    и
    у
    п
    а
    к
    о
    в
    к
    е
    т
    о
    в
    а
    р
    о
    в
    PakageQuantity -- О
    б
    щ
    е
    е
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    г
    р
    у
    з
    о
    в
    ы
    х
    м
    е
    с
    т
    ,
    з
    а
    н
    я
    т
    ы
    х
    т
    о
    в
    а
    р
    о
    м
    PakageTypeCode -- К
    о
    д
    н
    а
    л
    и
    ч
    и
    я
    у
    п
    а
    к
    о
    в
    к
    и
    т
    о
    в
    а
    р
    а
    : 0 -
    Б
    е
    з
    у
    п
    а
    к
    о
    в
    к
    и
    ; 1 -
    С
    у
    п
    а
    к
    о
    в
    к
    о
    й
    ; 2 -
    Б
    е
    з
    у
    п
    а
    к
    о
    в
    к
    и
    в
    о
    б
    о
    р
    у
    д
    о
    в
    а
    н
    н
    ы
    х
    е
    м
    к
    о
    с
    т
    я
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    PakagePartQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    г
    р
    у
    з
    о
    в
    ы
    х
    м
    е
    с
    т
    ,
    ч
    а
    с
    т
    и
    ч
    н
    о
    з
    а
    н
    я
    т
    ы
    х
    т
    о
    в
    а
    р
    о
    м
    PackagePalleteInformation -- С
    в
    е
    д
    е
    н
    и
    я
    о
    г
    р
    у
    з
    е
    ,
    т
    а
    р
    е
    ,
    у
    п
    а
    к
    о
    в
    к
    е
    ,
    п
    о
    д
    д
    о
    н
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PakageQuantity=None, PakageTypeCode=None, PakagePartQuantity=None, PackagePalleteInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.PakageQuantity = PakageQuantity
        self.validate_PakageNumberType(self.PakageQuantity)
        self.PakageQuantity_nsprefix_ = "clt_ru"
        self.PakageTypeCode = PakageTypeCode
        self.validate_LetterIndicatorType(self.PakageTypeCode)
        self.PakageTypeCode_nsprefix_ = "clt_ru"
        self.PakagePartQuantity = PakagePartQuantity
        self.validate_PakageNumberType(self.PakagePartQuantity)
        self.PakagePartQuantity_nsprefix_ = "clt_ru"
        if PackagePalleteInformation is None:
            self.PackagePalleteInformation = []
        else:
            self.PackagePalleteInformation = PackagePalleteInformation
        self.PackagePalleteInformation_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADGoodsPackagingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADGoodsPackagingType.subclass:
            return ESADGoodsPackagingType.subclass(*args_, **kwargs_)
        else:
            return ESADGoodsPackagingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PakageQuantity(self):
        return self.PakageQuantity
    def set_PakageQuantity(self, PakageQuantity):
        self.PakageQuantity = PakageQuantity
    def get_PakageTypeCode(self):
        return self.PakageTypeCode
    def set_PakageTypeCode(self, PakageTypeCode):
        self.PakageTypeCode = PakageTypeCode
    def get_PakagePartQuantity(self):
        return self.PakagePartQuantity
    def set_PakagePartQuantity(self, PakagePartQuantity):
        self.PakagePartQuantity = PakagePartQuantity
    def get_PackagePalleteInformation(self):
        return self.PackagePalleteInformation
    def set_PackagePalleteInformation(self, PackagePalleteInformation):
        self.PackagePalleteInformation = PackagePalleteInformation
    def add_PackagePalleteInformation(self, value):
        self.PackagePalleteInformation.append(value)
    def insert_PackagePalleteInformation_at(self, index, value):
        self.PackagePalleteInformation.insert(index, value)
    def replace_PackagePalleteInformation_at(self, index, value):
        self.PackagePalleteInformation[index] = value
    def validate_PakageNumberType(self, value):
        result = True
        # Validate type PakageNumberType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on PakageNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on PakageNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PakageQuantity is not None or
            self.PakageTypeCode is not None or
            self.PakagePartQuantity is not None or
            self.PackagePalleteInformation
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADGoodsPackagingType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADGoodsPackagingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADGoodsPackagingType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADGoodsPackagingType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADGoodsPackagingType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADGoodsPackagingType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADGoodsPackagingType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PakageQuantity is not None:
            namespaceprefix_ = self.PakageQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.PakageQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPakageQuantity>%s</%sPakageQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PakageQuantity, input_name='PakageQuantity'), namespaceprefix_ , eol_))
        if self.PakageTypeCode is not None:
            namespaceprefix_ = self.PakageTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PakageTypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPakageTypeCode>%s</%sPakageTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PakageTypeCode), input_name='PakageTypeCode')), namespaceprefix_ , eol_))
        if self.PakagePartQuantity is not None:
            namespaceprefix_ = self.PakagePartQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.PakagePartQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPakagePartQuantity>%s</%sPakagePartQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PakagePartQuantity, input_name='PakagePartQuantity'), namespaceprefix_ , eol_))
        for PackagePalleteInformation_ in self.PackagePalleteInformation:
            namespaceprefix_ = self.PackagePalleteInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.PackagePalleteInformation_nsprefix_) else ''
            PackagePalleteInformation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PackagePalleteInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PakageQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PakageQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'PakageQuantity')
            self.PakageQuantity = fval_
            self.PakageQuantity_nsprefix_ = child_.prefix
            # validate type PakageNumberType
            self.validate_PakageNumberType(self.PakageQuantity)
        elif nodeName_ == 'PakageTypeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PakageTypeCode')
            value_ = self.gds_validate_string(value_, node, 'PakageTypeCode')
            self.PakageTypeCode = value_
            self.PakageTypeCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.PakageTypeCode)
        elif nodeName_ == 'PakagePartQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PakagePartQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'PakagePartQuantity')
            self.PakagePartQuantity = fval_
            self.PakagePartQuantity_nsprefix_ = child_.prefix
            # validate type PakageNumberType
            self.validate_PakageNumberType(self.PakagePartQuantity)
        elif nodeName_ == 'PackagePalleteInformation':
            obj_ = PackagePalleteInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PackagePalleteInformation.append(obj_)
            obj_.original_tagname_ = 'PackagePalleteInformation'
# end class ESADGoodsPackagingType


class ESADGoodsQuotaType(GeneratedsSuper):
    """ESADGoodsQuotaType -- К
    в
    о
    т
    а
    ESADProductQuantityQuota -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    с
    т
    а
    т
    к
    е
    к
    в
    о
    т
    ы
    ,
    в
    ы
    р
    а
    ж
    е
    н
    н
    ы
    е
    в
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    е
    п
    р
    о
    д
    у
    к
    т
    а
    .
    З
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    в
    с
    л
    у
    ч
    а
    е
    ,
    е
    с
    л
    и
    к
    в
    о
    т
    а
    у
    к
    а
    з
    ы
    в
    а
    е
    т
    с
    я
    в
    е
    д
    и
    н
    и
    ц
    а
    х
    и
    з
    м
    е
    р
    е
    н
    и
    я
    ESADCurrencyQuota -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    с
    т
    а
    т
    к
    е
    к
    в
    о
    т
    ы
    в
    с
    т
    о
    и
    м
    о
    с
    т
    н
    о
    м
    в
    ы
    р
    а
    ж
    е
    н
    и
    и
    .
    З
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    в
    с
    л
    у
    ч
    а
    е
    ,
    е
    с
    л
    и
    к
    в
    о
    т
    а
    у
    с
    т
    а
    н
    о
    в
    л
    е
    н
    а
    в
    с
    т
    о
    и
    м
    о
    с
    т
    н
    о
    м
    в
    ы
    р
    а
    ж
    е
    н
    и
    и
    SupplementaryGoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    г
    о
    т
    о
    в
    а
    р
    а
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    ,
    н
    е
    о
    б
    х
    о
    д
    и
    м
    о
    е
    д
    л
    я
    с
    п
    и
    с
    а
    н
    и
    я
    к
    в
    о
    т
    ы
    .
    Д
    л
    я
    Р
    К
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ESADProductQuantityQuota=None, ESADCurrencyQuota=None, SupplementaryGoodsQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if ESADProductQuantityQuota is None:
            self.ESADProductQuantityQuota = []
        else:
            self.ESADProductQuantityQuota = ESADProductQuantityQuota
        self.ESADProductQuantityQuota_nsprefix_ = "cat_ru"
        self.ESADCurrencyQuota = ESADCurrencyQuota
        self.ESADCurrencyQuota_nsprefix_ = "catESAD_cu"
        self.SupplementaryGoodsQuantity = SupplementaryGoodsQuantity
        self.SupplementaryGoodsQuantity_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADGoodsQuotaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADGoodsQuotaType.subclass:
            return ESADGoodsQuotaType.subclass(*args_, **kwargs_)
        else:
            return ESADGoodsQuotaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ESADProductQuantityQuota(self):
        return self.ESADProductQuantityQuota
    def set_ESADProductQuantityQuota(self, ESADProductQuantityQuota):
        self.ESADProductQuantityQuota = ESADProductQuantityQuota
    def add_ESADProductQuantityQuota(self, value):
        self.ESADProductQuantityQuota.append(value)
    def insert_ESADProductQuantityQuota_at(self, index, value):
        self.ESADProductQuantityQuota.insert(index, value)
    def replace_ESADProductQuantityQuota_at(self, index, value):
        self.ESADProductQuantityQuota[index] = value
    def get_ESADCurrencyQuota(self):
        return self.ESADCurrencyQuota
    def set_ESADCurrencyQuota(self, ESADCurrencyQuota):
        self.ESADCurrencyQuota = ESADCurrencyQuota
    def get_SupplementaryGoodsQuantity(self):
        return self.SupplementaryGoodsQuantity
    def set_SupplementaryGoodsQuantity(self, SupplementaryGoodsQuantity):
        self.SupplementaryGoodsQuantity = SupplementaryGoodsQuantity
    def has__content(self):
        if (
            self.ESADProductQuantityQuota or
            self.ESADCurrencyQuota is not None or
            self.SupplementaryGoodsQuantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADGoodsQuotaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADGoodsQuotaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADGoodsQuotaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADGoodsQuotaType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADGoodsQuotaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADGoodsQuotaType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADGoodsQuotaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ESADProductQuantityQuota_ in self.ESADProductQuantityQuota:
            namespaceprefix_ = self.ESADProductQuantityQuota_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADProductQuantityQuota_nsprefix_) else ''
            ESADProductQuantityQuota_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADProductQuantityQuota', pretty_print=pretty_print)
        if self.ESADCurrencyQuota is not None:
            namespaceprefix_ = self.ESADCurrencyQuota_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADCurrencyQuota_nsprefix_) else ''
            self.ESADCurrencyQuota.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADCurrencyQuota', pretty_print=pretty_print)
        if self.SupplementaryGoodsQuantity is not None:
            namespaceprefix_ = self.SupplementaryGoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplementaryGoodsQuantity_nsprefix_) else ''
            self.SupplementaryGoodsQuantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplementaryGoodsQuantity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ESADProductQuantityQuota':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADProductQuantityQuota.append(obj_)
            obj_.original_tagname_ = 'ESADProductQuantityQuota'
        elif nodeName_ == 'ESADCurrencyQuota':
            obj_ = ESADCurrencyQuotaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADCurrencyQuota = obj_
            obj_.original_tagname_ = 'ESADCurrencyQuota'
        elif nodeName_ == 'SupplementaryGoodsQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplementaryGoodsQuantity = obj_
            obj_.original_tagname_ = 'SupplementaryGoodsQuantity'
# end class ESADGoodsQuotaType


class ESADout_CUCustomsPaymentType(GeneratedsSuper):
    """ESADout_CUCustomsPaymentType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    п
    л
    а
    ч
    и
    в
    а
    е
    м
    ы
    х
    п
    л
    а
    т
    е
    ж
    а
    х
    .
    Г
    р
    . B
    PaymentModeCode -- К
    о
    д
    в
    и
    д
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    л
    а
    т
    е
    ж
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    н
    а
    л
    о
    г
    о
    в
    ,
    с
    б
    о
    р
    о
    в
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    в
    з
    и
    м
    а
    н
    и
    е
    к
    о
    т
    о
    р
    ы
    х
    в
    о
    з
    л
    о
    ж
    е
    н
    о
    н
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    о
    р
    г
    а
    н
    ы
    PaymentAmount -- С
    у
    м
    м
    а
    п
    л
    а
    т
    е
    ж
    а
      
    * PaymentCurrencyCode -- Ц
      и
      ф
      р
      о
      в
      о
      й
      к
      о
      д
      в
      а
      л
      ю
      т
      ы
      с
      у
      м
      м
      ы
      п
      л
      а
      т
      е
      ж
      а
    * CurrencyRate -- К
      у
      р
      с
      в
      а
      л
      ю
      т
      ы
      п
      л
      а
      т
      е
      ж
      а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentModeCode=None, PaymentAmount=None, PaymentCurrencyCode=None, CurrencyRate=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.PaymentModeCode = PaymentModeCode
        self.validate_CustomsPaymentCodeType(self.PaymentModeCode)
        self.PaymentModeCode_nsprefix_ = "clt_ru"
        self.PaymentAmount = PaymentAmount
        self.validate_AmountType(self.PaymentAmount)
        self.PaymentAmount_nsprefix_ = "clt_ru"
        self.PaymentCurrencyCode = PaymentCurrencyCode
        self.validate_CurrencyN3CodeType(self.PaymentCurrencyCode)
        self.PaymentCurrencyCode_nsprefix_ = "clt_ru"
        self.CurrencyRate = CurrencyRate
        self.validate_CurrencyRateType(self.CurrencyRate)
        self.CurrencyRate_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUCustomsPaymentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUCustomsPaymentType.subclass:
            return ESADout_CUCustomsPaymentType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUCustomsPaymentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentModeCode(self):
        return self.PaymentModeCode
    def set_PaymentModeCode(self, PaymentModeCode):
        self.PaymentModeCode = PaymentModeCode
    def get_PaymentAmount(self):
        return self.PaymentAmount
    def set_PaymentAmount(self, PaymentAmount):
        self.PaymentAmount = PaymentAmount
    def get_PaymentCurrencyCode(self):
        return self.PaymentCurrencyCode
    def set_PaymentCurrencyCode(self, PaymentCurrencyCode):
        self.PaymentCurrencyCode = PaymentCurrencyCode
    def get_CurrencyRate(self):
        return self.CurrencyRate
    def set_CurrencyRate(self, CurrencyRate):
        self.CurrencyRate = CurrencyRate
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CustomsPaymentCodeType(self, value):
        result = True
        # Validate type CustomsPaymentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CustomsPaymentCodeType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CustomsPaymentCodeType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyN3CodeType(self, value):
        result = True
        # Validate type CurrencyN3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CurrencyN3CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CurrencyN3CodeType_patterns_, ))
                result = False
        return result
    validate_CurrencyN3CodeType_patterns_ = [['^(\\d{3})$']]
    def validate_CurrencyRateType(self, value):
        result = True
        # Validate type CurrencyRateType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on CurrencyRateType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on CurrencyRateType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PaymentModeCode is not None or
            self.PaymentAmount is not None or
            self.PaymentCurrencyCode is not None or
            self.CurrencyRate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADout_CUCustomsPaymentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUCustomsPaymentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUCustomsPaymentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUCustomsPaymentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUCustomsPaymentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADout_CUCustomsPaymentType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADout_CUCustomsPaymentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentModeCode is not None:
            namespaceprefix_ = self.PaymentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentModeCode>%s</%sPaymentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentModeCode), input_name='PaymentModeCode')), namespaceprefix_ , eol_))
        if self.PaymentAmount is not None:
            namespaceprefix_ = self.PaymentAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentAmount>%s</%sPaymentAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PaymentAmount, input_name='PaymentAmount'), namespaceprefix_ , eol_))
        if self.PaymentCurrencyCode is not None:
            namespaceprefix_ = self.PaymentCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentCurrencyCode>%s</%sPaymentCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentCurrencyCode), input_name='PaymentCurrencyCode')), namespaceprefix_ , eol_))
        if self.CurrencyRate is not None:
            namespaceprefix_ = self.CurrencyRate_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyRate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyRate>%s</%sCurrencyRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CurrencyRate, input_name='CurrencyRate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentModeCode')
            self.PaymentModeCode = value_
            self.PaymentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsPaymentCodeType
            self.validate_CustomsPaymentCodeType(self.PaymentModeCode)
        elif nodeName_ == 'PaymentAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PaymentAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'PaymentAmount')
            self.PaymentAmount = fval_
            self.PaymentAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.PaymentAmount)
        elif nodeName_ == 'PaymentCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentCurrencyCode')
            self.PaymentCurrencyCode = value_
            self.PaymentCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.PaymentCurrencyCode)
        elif nodeName_ == 'CurrencyRate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CurrencyRate')
            fval_ = self.gds_validate_decimal(fval_, node, 'CurrencyRate')
            self.CurrencyRate = fval_
            self.CurrencyRate_nsprefix_ = child_.prefix
            # validate type CurrencyRateType
            self.validate_CurrencyRateType(self.CurrencyRate)
# end class ESADout_CUCustomsPaymentType


class ESADProductQuantityQuotaType(GeneratedsSuper):
    """ESADProductQuantityQuotaType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    с
    т
    а
    т
    к
    е
    к
    в
    о
    т
    ы
    ,
    в
    ы
    р
    а
    ж
    е
    н
    н
    ы
    е
    в
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    е
    п
    р
    о
    д
    у
    к
    т
    а
    .
    З
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    в
    с
    л
    у
    ч
    а
    е
    ,
    е
    с
    л
    и
    к
    в
    о
    т
    а
    у
    к
    а
    з
    ы
    в
    а
    е
    т
    с
    я
    в
    е
    д
    и
    н
    и
    ц
    а
    х
    и
    з
    м
    е
    р
    е
    н
    и
    я
    QuotaQuantity -- О
    с
    т
    а
    т
    о
    к
    к
    в
    о
    т
    ы
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    QuotaMeasureUnitQualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    к
    в
    о
    т
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    е
    д
    и
    н
    и
    ц
    и
    з
    м
    е
    р
    е
    н
    и
    я
    QuotaMeasurementName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    к
    в
    о
    т
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, QuotaQuantity=None, QuotaMeasureUnitQualifierCode=None, QuotaMeasurementName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.QuotaQuantity = QuotaQuantity
        self.validate_QuantityBasisType(self.QuotaQuantity)
        self.QuotaQuantity_nsprefix_ = "clt_ru"
        self.QuotaMeasureUnitQualifierCode = QuotaMeasureUnitQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.QuotaMeasureUnitQualifierCode)
        self.QuotaMeasureUnitQualifierCode_nsprefix_ = "clt_ru"
        self.QuotaMeasurementName = QuotaMeasurementName
        self.validate_MeasureUnitQualifierNameType(self.QuotaMeasurementName)
        self.QuotaMeasurementName_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADProductQuantityQuotaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADProductQuantityQuotaType.subclass:
            return ESADProductQuantityQuotaType.subclass(*args_, **kwargs_)
        else:
            return ESADProductQuantityQuotaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_QuotaQuantity(self):
        return self.QuotaQuantity
    def set_QuotaQuantity(self, QuotaQuantity):
        self.QuotaQuantity = QuotaQuantity
    def get_QuotaMeasureUnitQualifierCode(self):
        return self.QuotaMeasureUnitQualifierCode
    def set_QuotaMeasureUnitQualifierCode(self, QuotaMeasureUnitQualifierCode):
        self.QuotaMeasureUnitQualifierCode = QuotaMeasureUnitQualifierCode
    def get_QuotaMeasurementName(self):
        return self.QuotaMeasurementName
    def set_QuotaMeasurementName(self, QuotaMeasurementName):
        self.QuotaMeasurementName = QuotaMeasurementName
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierNameType(self, value):
        result = True
        # Validate type MeasureUnitQualifierNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 13:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on MeasureUnitQualifierNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on MeasureUnitQualifierNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.QuotaQuantity is not None or
            self.QuotaMeasureUnitQualifierCode is not None or
            self.QuotaMeasurementName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADProductQuantityQuotaType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADProductQuantityQuotaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADProductQuantityQuotaType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADProductQuantityQuotaType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADProductQuantityQuotaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADProductQuantityQuotaType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADProductQuantityQuotaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QuotaQuantity is not None:
            namespaceprefix_ = self.QuotaQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.QuotaQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuotaQuantity>%s</%sQuotaQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.QuotaQuantity, input_name='QuotaQuantity'), namespaceprefix_ , eol_))
        if self.QuotaMeasureUnitQualifierCode is not None:
            namespaceprefix_ = self.QuotaMeasureUnitQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.QuotaMeasureUnitQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuotaMeasureUnitQualifierCode>%s</%sQuotaMeasureUnitQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuotaMeasureUnitQualifierCode), input_name='QuotaMeasureUnitQualifierCode')), namespaceprefix_ , eol_))
        if self.QuotaMeasurementName is not None:
            namespaceprefix_ = self.QuotaMeasurementName_nsprefix_ + ':' if (UseCapturedNS_ and self.QuotaMeasurementName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuotaMeasurementName>%s</%sQuotaMeasurementName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QuotaMeasurementName), input_name='QuotaMeasurementName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'QuotaQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'QuotaQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'QuotaQuantity')
            self.QuotaQuantity = fval_
            self.QuotaQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.QuotaQuantity)
        elif nodeName_ == 'QuotaMeasureUnitQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'QuotaMeasureUnitQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'QuotaMeasureUnitQualifierCode')
            self.QuotaMeasureUnitQualifierCode = value_
            self.QuotaMeasureUnitQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.QuotaMeasureUnitQualifierCode)
        elif nodeName_ == 'QuotaMeasurementName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QuotaMeasurementName')
            value_ = self.gds_validate_string(value_, node, 'QuotaMeasurementName')
            self.QuotaMeasurementName = value_
            self.QuotaMeasurementName_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierNameType
            self.validate_MeasureUnitQualifierNameType(self.QuotaMeasurementName)
# end class ESADProductQuantityQuotaType


class ESADReloadContainerType(GeneratedsSuper):
    """ESADReloadContainerType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    н
    о
    в
    ы
    х
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    х
    ContainerNumber -- Н
    о
    м
    е
    р
    н
    о
    в
    о
    г
    о
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ContainerNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if ContainerNumber is None:
            self.ContainerNumber = []
        else:
            self.ContainerNumber = ContainerNumber
        self.ContainerNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADReloadContainerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADReloadContainerType.subclass:
            return ESADReloadContainerType.subclass(*args_, **kwargs_)
        else:
            return ESADReloadContainerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ContainerNumber(self):
        return self.ContainerNumber
    def set_ContainerNumber(self, ContainerNumber):
        self.ContainerNumber = ContainerNumber
    def add_ContainerNumber(self, value):
        self.ContainerNumber.append(value)
    def insert_ContainerNumber_at(self, index, value):
        self.ContainerNumber.insert(index, value)
    def replace_ContainerNumber_at(self, index, value):
        self.ContainerNumber[index] = value
    def validate_ContainerIdentityType(self, value):
        result = True
        # Validate type ContainerIdentityType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 17:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ContainerIdentityType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ContainerIdentityType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ContainerNumber
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADReloadContainerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADReloadContainerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADReloadContainerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADReloadContainerType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADReloadContainerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADReloadContainerType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADReloadContainerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ContainerNumber_ in self.ContainerNumber:
            namespaceprefix_ = self.ContainerNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerNumber>%s</%sContainerNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ContainerNumber_), input_name='ContainerNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ContainerNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ContainerNumber')
            value_ = self.gds_validate_string(value_, node, 'ContainerNumber')
            self.ContainerNumber.append(value_)
            self.ContainerNumber_nsprefix_ = child_.prefix
            # validate type ContainerIdentityType
            self.validate_ContainerIdentityType(self.ContainerNumber[-1])
# end class ESADReloadContainerType


class ESADReloadingInfoType(GeneratedsSuper):
    """ESADReloadingInfoType -- И
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    о
    п
    е
    р
    е
    г
    р
    у
    з
    к
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 55
    Т
    Д
    ReloadCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    п
    е
    р
    е
    г
    р
    у
    з
    к
    и
    т
    о
    в
    а
    р
    а
    ReloadCountryName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    п
    е
    р
    е
    г
    р
    у
    з
    к
    и
    т
    о
    в
    а
    р
    а
    PlaceName -- Н
    а
    з
    в
    а
    н
    и
    е
    п
    у
    н
    к
    т
    а
    о
    с
    у
    щ
    е
    с
    т
    в
    л
    е
    н
    и
    я
    п
    е
    р
    е
    г
    р
    у
    з
    к
    и
    т
    о
    в
    а
    р
    а
    ContainerIndicator -- П
    р
    и
    з
    н
    а
    к
    к
    о
    н
    т
    е
    й
    н
    е
    р
    н
    ы
    х
    п
    е
    р
    е
    в
    о
    з
    о
    к
    TransportModeCode -- К
    о
    д
    в
    и
    д
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    т
    р
    а
    н
    с
    п
    о
    р
    т
    а
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    и
    р
    о
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    TransportNationalityCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    п
    р
    и
    н
    а
    д
    л
    е
    ж
    н
    о
    с
    т
    и
    (
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    )
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    с
    т
    р
    а
    н
    м
    и
    р
    а
    . 99-
    р
    а
    з
    н
    ы
    е
    , 00-
    н
    е
    и
    з
    в
    е
    с
    т
    н
    а
    TransportMeansQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    ReloadingTransportMeans -- Н
    о
    в
    о
    е
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    ReloadingCustomsOffice -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    п
    е
    р
    е
    г
    р
    у
    з
    к
    и
    т
    о
    в
    а
    р
    о
    в
    ReloadContainer -- С
    в
    е
    д
    е
    н
    и
    я
    о
    н
    о
    в
    ы
    х
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    х
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReloadCountryCode=None, ReloadCountryName=None, PlaceName=None, ContainerIndicator=None, TransportModeCode=None, TransportNationalityCode=None, TransportMeansQuantity=None, ReloadingTransportMeans=None, ReloadingCustomsOffice=None, ReloadContainer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ReloadCountryCode = ReloadCountryCode
        self.validate_CountryA2CodeType(self.ReloadCountryCode)
        self.ReloadCountryCode_nsprefix_ = "clt_ru"
        self.ReloadCountryName = ReloadCountryName
        self.validate_CountryNameType(self.ReloadCountryName)
        self.ReloadCountryName_nsprefix_ = "clt_ru"
        self.PlaceName = PlaceName
        self.validate_ShortNameType(self.PlaceName)
        self.PlaceName_nsprefix_ = "clt_ru"
        self.ContainerIndicator = ContainerIndicator
        self.validate_IndicatorType(self.ContainerIndicator)
        self.ContainerIndicator_nsprefix_ = "clt_ru"
        self.TransportModeCode = TransportModeCode
        self.validate_TransportModeCodeType(self.TransportModeCode)
        self.TransportModeCode_nsprefix_ = "clt_ru"
        self.TransportNationalityCode = TransportNationalityCode
        self.validate_CountryA2CodeType(self.TransportNationalityCode)
        self.TransportNationalityCode_nsprefix_ = "clt_ru"
        self.TransportMeansQuantity = TransportMeansQuantity
        self.validate_Count5Type(self.TransportMeansQuantity)
        self.TransportMeansQuantity_nsprefix_ = "clt_ru"
        if ReloadingTransportMeans is None:
            self.ReloadingTransportMeans = []
        else:
            self.ReloadingTransportMeans = ReloadingTransportMeans
        self.ReloadingTransportMeans_nsprefix_ = "catESAD_cu"
        self.ReloadingCustomsOffice = ReloadingCustomsOffice
        self.ReloadingCustomsOffice_nsprefix_ = "catESAD_cu"
        self.ReloadContainer = ReloadContainer
        self.ReloadContainer_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADReloadingInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADReloadingInfoType.subclass:
            return ESADReloadingInfoType.subclass(*args_, **kwargs_)
        else:
            return ESADReloadingInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReloadCountryCode(self):
        return self.ReloadCountryCode
    def set_ReloadCountryCode(self, ReloadCountryCode):
        self.ReloadCountryCode = ReloadCountryCode
    def get_ReloadCountryName(self):
        return self.ReloadCountryName
    def set_ReloadCountryName(self, ReloadCountryName):
        self.ReloadCountryName = ReloadCountryName
    def get_PlaceName(self):
        return self.PlaceName
    def set_PlaceName(self, PlaceName):
        self.PlaceName = PlaceName
    def get_ContainerIndicator(self):
        return self.ContainerIndicator
    def set_ContainerIndicator(self, ContainerIndicator):
        self.ContainerIndicator = ContainerIndicator
    def get_TransportModeCode(self):
        return self.TransportModeCode
    def set_TransportModeCode(self, TransportModeCode):
        self.TransportModeCode = TransportModeCode
    def get_TransportNationalityCode(self):
        return self.TransportNationalityCode
    def set_TransportNationalityCode(self, TransportNationalityCode):
        self.TransportNationalityCode = TransportNationalityCode
    def get_TransportMeansQuantity(self):
        return self.TransportMeansQuantity
    def set_TransportMeansQuantity(self, TransportMeansQuantity):
        self.TransportMeansQuantity = TransportMeansQuantity
    def get_ReloadingTransportMeans(self):
        return self.ReloadingTransportMeans
    def set_ReloadingTransportMeans(self, ReloadingTransportMeans):
        self.ReloadingTransportMeans = ReloadingTransportMeans
    def add_ReloadingTransportMeans(self, value):
        self.ReloadingTransportMeans.append(value)
    def insert_ReloadingTransportMeans_at(self, index, value):
        self.ReloadingTransportMeans.insert(index, value)
    def replace_ReloadingTransportMeans_at(self, index, value):
        self.ReloadingTransportMeans[index] = value
    def get_ReloadingCustomsOffice(self):
        return self.ReloadingCustomsOffice
    def set_ReloadingCustomsOffice(self, ReloadingCustomsOffice):
        self.ReloadingCustomsOffice = ReloadingCustomsOffice
    def get_ReloadContainer(self):
        return self.ReloadContainer
    def set_ReloadContainer(self, ReloadContainer):
        self.ReloadContainer = ReloadContainer
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_ShortNameType(self, value):
        result = True
        # Validate type ShortNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ShortNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ShortNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IndicatorType(self, value):
        result = True
        # Validate type IndicatorType, a restriction on CategoryCust:IndicatorCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_TransportModeCodeType(self, value):
        result = True
        # Validate type TransportModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TransportModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count5Type(self, value):
        result = True
        # Validate type Count5Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ReloadCountryCode is not None or
            self.ReloadCountryName is not None or
            self.PlaceName is not None or
            self.ContainerIndicator is not None or
            self.TransportModeCode is not None or
            self.TransportNationalityCode is not None or
            self.TransportMeansQuantity is not None or
            self.ReloadingTransportMeans or
            self.ReloadingCustomsOffice is not None or
            self.ReloadContainer is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADReloadingInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADReloadingInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADReloadingInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADReloadingInfoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADReloadingInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ESADReloadingInfoType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADReloadingInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReloadCountryCode is not None:
            namespaceprefix_ = self.ReloadCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReloadCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReloadCountryCode>%s</%sReloadCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReloadCountryCode), input_name='ReloadCountryCode')), namespaceprefix_ , eol_))
        if self.ReloadCountryName is not None:
            namespaceprefix_ = self.ReloadCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.ReloadCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReloadCountryName>%s</%sReloadCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReloadCountryName), input_name='ReloadCountryName')), namespaceprefix_ , eol_))
        if self.PlaceName is not None:
            namespaceprefix_ = self.PlaceName_nsprefix_ + ':' if (UseCapturedNS_ and self.PlaceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlaceName>%s</%sPlaceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PlaceName), input_name='PlaceName')), namespaceprefix_ , eol_))
        if self.ContainerIndicator is not None:
            namespaceprefix_ = self.ContainerIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.ContainerIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContainerIndicator>%s</%sContainerIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ContainerIndicator, input_name='ContainerIndicator'), namespaceprefix_ , eol_))
        if self.TransportModeCode is not None:
            namespaceprefix_ = self.TransportModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportModeCode>%s</%sTransportModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportModeCode), input_name='TransportModeCode')), namespaceprefix_ , eol_))
        if self.TransportNationalityCode is not None:
            namespaceprefix_ = self.TransportNationalityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportNationalityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportNationalityCode>%s</%sTransportNationalityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportNationalityCode), input_name='TransportNationalityCode')), namespaceprefix_ , eol_))
        if self.TransportMeansQuantity is not None:
            namespaceprefix_ = self.TransportMeansQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportMeansQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportMeansQuantity>%s</%sTransportMeansQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.TransportMeansQuantity, input_name='TransportMeansQuantity'), namespaceprefix_ , eol_))
        for ReloadingTransportMeans_ in self.ReloadingTransportMeans:
            namespaceprefix_ = self.ReloadingTransportMeans_nsprefix_ + ':' if (UseCapturedNS_ and self.ReloadingTransportMeans_nsprefix_) else ''
            ReloadingTransportMeans_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReloadingTransportMeans', pretty_print=pretty_print)
        if self.ReloadingCustomsOffice is not None:
            namespaceprefix_ = self.ReloadingCustomsOffice_nsprefix_ + ':' if (UseCapturedNS_ and self.ReloadingCustomsOffice_nsprefix_) else ''
            self.ReloadingCustomsOffice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReloadingCustomsOffice', pretty_print=pretty_print)
        if self.ReloadContainer is not None:
            namespaceprefix_ = self.ReloadContainer_nsprefix_ + ':' if (UseCapturedNS_ and self.ReloadContainer_nsprefix_) else ''
            self.ReloadContainer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReloadContainer', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReloadCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ReloadCountryCode')
            value_ = self.gds_validate_string(value_, node, 'ReloadCountryCode')
            self.ReloadCountryCode = value_
            self.ReloadCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.ReloadCountryCode)
        elif nodeName_ == 'ReloadCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReloadCountryName')
            value_ = self.gds_validate_string(value_, node, 'ReloadCountryName')
            self.ReloadCountryName = value_
            self.ReloadCountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.ReloadCountryName)
        elif nodeName_ == 'PlaceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PlaceName')
            value_ = self.gds_validate_string(value_, node, 'PlaceName')
            self.PlaceName = value_
            self.PlaceName_nsprefix_ = child_.prefix
            # validate type ShortNameType
            self.validate_ShortNameType(self.PlaceName)
        elif nodeName_ == 'ContainerIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ContainerIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'ContainerIndicator')
            self.ContainerIndicator = ival_
            self.ContainerIndicator_nsprefix_ = child_.prefix
            # validate type IndicatorType
            self.validate_IndicatorType(self.ContainerIndicator)
        elif nodeName_ == 'TransportModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportModeCode')
            value_ = self.gds_validate_string(value_, node, 'TransportModeCode')
            self.TransportModeCode = value_
            self.TransportModeCode_nsprefix_ = child_.prefix
            # validate type TransportModeCodeType
            self.validate_TransportModeCodeType(self.TransportModeCode)
        elif nodeName_ == 'TransportNationalityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportNationalityCode')
            value_ = self.gds_validate_string(value_, node, 'TransportNationalityCode')
            self.TransportNationalityCode = value_
            self.TransportNationalityCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.TransportNationalityCode)
        elif nodeName_ == 'TransportMeansQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TransportMeansQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'TransportMeansQuantity')
            self.TransportMeansQuantity = ival_
            self.TransportMeansQuantity_nsprefix_ = child_.prefix
            # validate type Count5Type
            self.validate_Count5Type(self.TransportMeansQuantity)
        elif nodeName_ == 'ReloadingTransportMeans':
            obj_ = TransportMeansRegistrationIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReloadingTransportMeans.append(obj_)
            obj_.original_tagname_ = 'ReloadingTransportMeans'
        elif nodeName_ == 'ReloadingCustomsOffice':
            obj_ = EECCustomsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReloadingCustomsOffice = obj_
            obj_.original_tagname_ = 'ReloadingCustomsOffice'
        elif nodeName_ == 'ReloadContainer':
            obj_ = ESADReloadContainerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReloadContainer = obj_
            obj_.original_tagname_ = 'ReloadContainer'
# end class ESADReloadingInfoType


class GoodsGroupDescriptionType(GeneratedsSuper):
    """GoodsGroupDescriptionType -- О
    п
    и
    с
    а
    н
    и
    е
    г
    р
    у
    п
    п
    ы
    т
    о
    в
    а
    р
    о
    в
    о
    д
    н
    о
    г
    о
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    я
    с
    о
    т
    л
    и
    ч
    а
    ю
    щ
    и
    м
    и
    с
    я
    о
    т
    д
    р
    у
    г
    и
    х
    г
    р
    у
    п
    п
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    м
    и
    GoodsDescription -- О
    п
    и
    с
    а
    н
    и
    е
    г
    р
    у
    п
    п
    ы
    т
    о
    в
    а
    р
    о
    в
    с
    у
    ч
    е
    т
    о
    м
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    х
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    (
    к
    а
    ч
    е
    с
    т
    в
    е
    н
    н
    ы
    х
    ,
    т
    е
    х
    н
    и
    ч
    е
    с
    к
    и
    х
    ,
    к
    о
    м
    м
    е
    р
    ч
    е
    с
    к
    и
    х
    ),
    н
    е
    о
    б
    х
    о
    д
    и
    м
    ы
    х
    д
    л
    я
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    ц
    и
    и
    т
    о
    в
    а
    р
    а
    и
    д
    л
    я
    и
    с
    ч
    и
    с
    л
    е
    н
    и
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    с
    т
    о
    и
    м
    о
    с
    т
    и
    .
    В
    с
    л
    у
    ч
    а
    е
    о
    т
    с
    у
    т
    с
    т
    в
    и
    я
    о
    п
    и
    с
    а
    н
    и
    я
    г
    р
    у
    п
    п
    ы
    т
    о
    в
    а
    р
    о
    в
    у
    к
    а
    з
    ы
    в
    а
    е
    т
    с
    я
    с
    и
    м
    в
    о
    л
    «
    :
    »
    (
    д
    в
    о
    е
    т
    о
    ч
    и
    е
    ).
    Г
    р
    . 31
    п
    е
    р
    в
    ы
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    RKTNVED -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    м
    а
    ш
    и
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    ObjectOrdinal -- Н
    о
    м
    е
    р
    (
    п
    о
    з
    и
    ц
    и
    я
    )
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    т
    о
    в
    а
    р
    а
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    о
    г
    о
    ч
    е
    р
    е
    з
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    г
    р
    а
    н
    и
    ц
    у
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    т
    о
    м
    ч
    и
    с
    л
    е
    н
    е
    к
    о
    м
    п
    л
    е
    к
    т
    н
    о
    м
    и
    л
    и
    н
    е
    з
    а
    в
    е
    р
    ш
    е
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    р
    е
    ш
    е
    н
    и
    е
    м
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    ц
    и
    и
    т
    о
    в
    а
    р
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    ComponentNumber -- С
    б
    о
    р
    о
    ч
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    т
    о
    в
    а
    р
    а
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    о
    г
    о
    ч
    е
    р
    е
    з
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    г
    р
    а
    н
    и
    ц
    у
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    т
    о
    м
    ч
    и
    с
    л
    е
    н
    е
    к
    о
    м
    п
    л
    е
    к
    т
    н
    о
    м
    и
    л
    и
    н
    е
    з
    а
    в
    е
    р
    ш
    е
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    р
    е
    ш
    е
    н
    и
    е
    м
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    ц
    и
    и
    т
    о
    в
    а
    р
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    GoodsGroupInformation -- Х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    т
    о
    в
    а
    р
    о
    в
    в
    г
    р
    у
    п
    п
    е
    GroupNum -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    г
    р
    у
    п
    п
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsDescription=None, RKTNVED=None, ObjectOrdinal=None, ComponentNumber=None, GoodsGroupInformation=None, GroupNum=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if GoodsDescription is None:
            self.GoodsDescription = []
        else:
            self.GoodsDescription = GoodsDescription
        self.GoodsDescription_nsprefix_ = "clt_ru"
        self.RKTNVED = RKTNVED
        self.validate_CUGoodsNomenclatuerCodeType(self.RKTNVED)
        self.RKTNVED_nsprefix_ = "clt_ru"
        self.ObjectOrdinal = ObjectOrdinal
        self.validate_Code3Type(self.ObjectOrdinal)
        self.ObjectOrdinal_nsprefix_ = "clt_ru"
        self.ComponentNumber = ComponentNumber
        self.validate_Text50Type(self.ComponentNumber)
        self.ComponentNumber_nsprefix_ = "clt_ru"
        if GoodsGroupInformation is None:
            self.GoodsGroupInformation = []
        else:
            self.GoodsGroupInformation = GoodsGroupInformation
        self.GoodsGroupInformation_nsprefix_ = "catESAD_cu"
        self.GroupNum = GroupNum
        self.validate_Count4Type(self.GroupNum)
        self.GroupNum_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsGroupDescriptionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsGroupDescriptionType.subclass:
            return GoodsGroupDescriptionType.subclass(*args_, **kwargs_)
        else:
            return GoodsGroupDescriptionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsDescription(self):
        return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription):
        self.GoodsDescription = GoodsDescription
    def add_GoodsDescription(self, value):
        self.GoodsDescription.append(value)
    def insert_GoodsDescription_at(self, index, value):
        self.GoodsDescription.insert(index, value)
    def replace_GoodsDescription_at(self, index, value):
        self.GoodsDescription[index] = value
    def get_RKTNVED(self):
        return self.RKTNVED
    def set_RKTNVED(self, RKTNVED):
        self.RKTNVED = RKTNVED
    def get_ObjectOrdinal(self):
        return self.ObjectOrdinal
    def set_ObjectOrdinal(self, ObjectOrdinal):
        self.ObjectOrdinal = ObjectOrdinal
    def get_ComponentNumber(self):
        return self.ComponentNumber
    def set_ComponentNumber(self, ComponentNumber):
        self.ComponentNumber = ComponentNumber
    def get_GoodsGroupInformation(self):
        return self.GoodsGroupInformation
    def set_GoodsGroupInformation(self, GoodsGroupInformation):
        self.GoodsGroupInformation = GoodsGroupInformation
    def add_GoodsGroupInformation(self, value):
        self.GoodsGroupInformation.append(value)
    def insert_GoodsGroupInformation_at(self, index, value):
        self.GoodsGroupInformation.insert(index, value)
    def replace_GoodsGroupInformation_at(self, index, value):
        self.GoodsGroupInformation[index] = value
    def get_GroupNum(self):
        return self.GroupNum
    def set_GroupNum(self, GroupNum):
        self.GroupNum = GroupNum
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CUGoodsNomenclatuerCodeType(self, value):
        result = True
        # Validate type CUGoodsNomenclatuerCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CUGoodsNomenclatuerCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CUGoodsNomenclatuerCodeType_patterns_, ))
                result = False
        return result
    validate_CUGoodsNomenclatuerCodeType_patterns_ = [['^([0-9]{4}|[0-9]{6}|[0-9]{8}|[0-9]{10})$']]
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Count4Type(self, value):
        result = True
        # Validate type Count4Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count4Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count4Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsDescription or
            self.RKTNVED is not None or
            self.ObjectOrdinal is not None or
            self.ComponentNumber is not None or
            self.GoodsGroupInformation or
            self.GroupNum is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsGroupDescriptionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsGroupDescriptionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsGroupDescriptionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsGroupDescriptionType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsGroupDescriptionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='GoodsGroupDescriptionType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsGroupDescriptionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for GoodsDescription_ in self.GoodsDescription:
            namespaceprefix_ = self.GoodsDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDescription>%s</%sGoodsDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsDescription_), input_name='GoodsDescription')), namespaceprefix_ , eol_))
        if self.RKTNVED is not None:
            namespaceprefix_ = self.RKTNVED_nsprefix_ + ':' if (UseCapturedNS_ and self.RKTNVED_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRKTNVED>%s</%sRKTNVED>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RKTNVED), input_name='RKTNVED')), namespaceprefix_ , eol_))
        if self.ObjectOrdinal is not None:
            namespaceprefix_ = self.ObjectOrdinal_nsprefix_ + ':' if (UseCapturedNS_ and self.ObjectOrdinal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sObjectOrdinal>%s</%sObjectOrdinal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ObjectOrdinal), input_name='ObjectOrdinal')), namespaceprefix_ , eol_))
        if self.ComponentNumber is not None:
            namespaceprefix_ = self.ComponentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ComponentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComponentNumber>%s</%sComponentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ComponentNumber), input_name='ComponentNumber')), namespaceprefix_ , eol_))
        for GoodsGroupInformation_ in self.GoodsGroupInformation:
            namespaceprefix_ = self.GoodsGroupInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsGroupInformation_nsprefix_) else ''
            GoodsGroupInformation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsGroupInformation', pretty_print=pretty_print)
        if self.GroupNum is not None:
            namespaceprefix_ = self.GroupNum_nsprefix_ + ':' if (UseCapturedNS_ and self.GroupNum_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGroupNum>%s</%sGroupNum>%s' % (namespaceprefix_ , self.gds_format_integer(self.GroupNum, input_name='GroupNum'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsDescription')
            value_ = self.gds_validate_string(value_, node, 'GoodsDescription')
            self.GoodsDescription.append(value_)
            self.GoodsDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsDescription[-1])
        elif nodeName_ == 'RKTNVED':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RKTNVED')
            value_ = self.gds_validate_string(value_, node, 'RKTNVED')
            self.RKTNVED = value_
            self.RKTNVED_nsprefix_ = child_.prefix
            # validate type CUGoodsNomenclatuerCodeType
            self.validate_CUGoodsNomenclatuerCodeType(self.RKTNVED)
        elif nodeName_ == 'ObjectOrdinal':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ObjectOrdinal')
            value_ = self.gds_validate_string(value_, node, 'ObjectOrdinal')
            self.ObjectOrdinal = value_
            self.ObjectOrdinal_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.ObjectOrdinal)
        elif nodeName_ == 'ComponentNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ComponentNumber')
            value_ = self.gds_validate_string(value_, node, 'ComponentNumber')
            self.ComponentNumber = value_
            self.ComponentNumber_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.ComponentNumber)
        elif nodeName_ == 'GoodsGroupInformation':
            obj_ = GoodsGroupInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsGroupInformation.append(obj_)
            obj_.original_tagname_ = 'GoodsGroupInformation'
        elif nodeName_ == 'GroupNum' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GroupNum')
            ival_ = self.gds_validate_integer(ival_, node, 'GroupNum')
            self.GroupNum = ival_
            self.GroupNum_nsprefix_ = child_.prefix
            # validate type Count4Type
            self.validate_Count4Type(self.GroupNum)
# end class GoodsGroupDescriptionType


class GoodsGroupInformationType(GeneratedsSuper):
    """GoodsGroupInformationType -- Х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    т
    о
    в
    а
    р
    о
    в
    в
    г
    р
    у
    п
    п
    е
    InfoDescription -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    а
    р
    т
    и
    к
    у
    л
    а
    Manufacturer -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    п
    р
    о
    и
    з
    в
    о
    д
    и
    т
    е
    л
    я
    (
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    я
    )
    т
    о
    в
    а
    р
    а
    ManufacturerINN -- И
    Н
    Н
    п
    р
    о
    и
    з
    в
    о
    д
    и
    т
    е
    л
    я
    (
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    я
    )
    т
    о
    в
    а
    р
    а
    ManufacturerKPP -- К
    П
    П
    п
    р
    о
    и
    з
    в
    о
    д
    и
    т
    е
    л
    я
    (
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    я
    )
    т
    о
    в
    а
    р
    а
    ManufacturerOKATO -- К
    о
    д
    О
    К
    А
    Т
    О
    п
    р
    о
    и
    з
    в
    о
    д
    и
    т
    е
    л
    я
    (
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    я
    )
    т
    о
    в
    а
    р
    а
    TradeMark -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    т
    о
    в
    а
    р
    н
    о
    г
    о
    з
    н
    а
    к
    а
    ,
    о
    б
    ъ
    е
    к
    т
    а
    а
    в
    т
    о
    р
    с
    к
    о
    г
    о
    п
    р
    а
    в
    а
    ,
    с
    м
    е
    ж
    н
    ы
    х
    п
    р
    а
    в
    ,
    п
    а
    т
    е
    н
    т
    а
    и
    т
    .
    д
    .
    ProductionPlaceName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    е
    с
    т
    а
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    GoodsMark -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    а
    р
    к
    и
    GoodsModel -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    о
    д
    е
    л
    и
    п
    р
    о
    д
    у
    к
    т
    а
    (
    т
    о
    в
    а
    р
    а
    )
    GoodsMarking -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    в
    и
    д
    а
    п
    р
    о
    д
    у
    к
    т
    а
    (
    т
    о
    в
    а
    р
    а
    )
    и
    л
    и
    а
    р
    т
    и
    к
    у
    л
    т
    о
    в
    а
    р
    а
    GoodsStandard -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    т
    а
    н
    д
    а
    р
    т
    а
    (
    м
    е
    ж
    д
    у
    н
    а
    р
    о
    д
    н
    о
    г
    о
    ,
    м
    е
    ж
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    г
    о
    ,
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    г
    о
    ,
    о
    т
    р
    а
    с
    л
    е
    в
    о
    г
    о
    и
    л
    и
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    )
    и
    л
    и
    т
    е
    х
    н
    и
    ч
    е
    с
    к
    и
    х
    у
    с
    л
    о
    в
    и
    й
    н
    а
    т
    о
    в
    а
    р
      
    * GoodsSort -- Н
      а
      и
      м
      е
      н
      о
      в
      а
      н
      и
      е
      с
      о
      р
      т
      а
      /
      с
      о
      р
      т
      и
      л
      и
      г
      р
      у
      п
      п
      а
      с
      о
      р
      т
      о
      в
      (
      д
      л
      я
      л
      е
      с
      о
      -
      и
      п
      и
      л
      о
      м
      а
      т
      е
      р
      и
      а
      л
      о
      в
      )
    * WoodDescriptionDetails -- С
      в
      е
      д
      е
      н
      и
      я
      о
      л
      е
      с
      о
      м
      а
      т
      е
      р
      и
      а
      л
      а
      х
    * Dimensions -- Л
      и
      н
      е
      й
      н
      ы
      е
      р
      а
      з
      м
      е
      р
      ы
      о
      б
      ъ
      е
      к
      т
      а
      (
      д
      л
      и
      н
      а
      ,
      ш
      и
      р
      и
      н
      а
      и
      в
      ы
      с
      о
      т
      а
      )
    * DateIssue -- Д
      а
      т
      а
      п
      р
      о
      и
      з
      в
      о
      д
      с
      т
      в
      а
      (
      и
      з
      г
      о
      т
      о
      в
      л
      е
      н
      и
      я
      )
      т
      о
      в
      а
      р
      а
    * SerialNumber -- У
      н
      и
      к
      а
      л
      ь
      н
      ы
      й
      и
      д
      е
      н
      т
      и
      ф
      и
      к
      а
      т
      о
      р
      (
      с
      е
      р
      и
      й
      н
      ы
      й
      н
      о
      м
      е
      р
      ,
      к
      о
      д
      )
      э
      к
      з
      е
      м
      п
      л
      я
      р
      а
      п
      р
      о
      д
      у
      к
      т
      а
      (
      т
      о
      в
      а
      р
      а
      )
    * GoodsGroupQuantity -- К
      о
      л
      и
      ч
      е
      с
      т
      в
      о
      т
      о
      в
      а
      р
      о
      в
    * ArticleWeight -- В
      е
      с
      а
      р
      т
      и
      к
      у
      л
      а
    * RecordId -- У
      н
      и
      к
      а
      л
      ь
      н
      ы
      й
      и
      д
      е
      н
      т
      и
      ф
      и
      к
      а
      т
      о
      р
      з
      а
      п
      и
      с
      и
    * LineNum -- П
      о
      р
      я
      д
      к
      о
      в
      ы
      й
      н
      о
      м
      е
      р
      з
      а
      п
      и
      с
      и
      в
      г
      р
      у
      п
      п
      е
    * InvoicedCost -- Ц
      е
      н
      а
      /
      с
      т
      о
      и
      м
      о
      с
      т
      ь
      т
      о
      в
      а
      р
      н
      о
      й
      п
      о
      з
      и
      ц
      и
      и
    * LicenseGroup -- С
      в
      е
      д
      е
      н
      и
      я
      о
      р
      а
      з
      р
      е
      ш
      и
      т
      е
      л
      ь
      н
      о
      м
      д
      о
      к
      у
      м
      е
      н
      т
      е
      к
      т
      о
      в
      а
      р
      н
      о
      й
      г
      р
      у
      п
      п
      е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InfoDescription=None, Manufacturer=None, ManufacturerINN=None, ManufacturerKPP=None, ManufacturerOKATO=None, TradeMark=None, ProductionPlaceName=None, GoodsMark=None, GoodsModel=None, GoodsMarking=None, GoodsStandard=None, GoodsSort=None, WoodDescriptionDetails=None, Dimensions=None, DateIssue=None, SerialNumber=None, GoodsGroupQuantity=None, ArticleWeight=None, RecordId=None, LineNum=None, InvoicedCost=None, LicenseGroup=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if InfoDescription is None:
            self.InfoDescription = []
        else:
            self.InfoDescription = InfoDescription
        self.InfoDescription_nsprefix_ = "clt_ru"
        self.Manufacturer = Manufacturer
        self.validate_NameType(self.Manufacturer)
        self.Manufacturer_nsprefix_ = "clt_ru"
        self.ManufacturerINN = ManufacturerINN
        self.validate_INNIDType(self.ManufacturerINN)
        self.ManufacturerINN_nsprefix_ = "clt_ru"
        self.ManufacturerKPP = ManufacturerKPP
        self.validate_KPPCodeType(self.ManufacturerKPP)
        self.ManufacturerKPP_nsprefix_ = "clt_ru"
        self.ManufacturerOKATO = ManufacturerOKATO
        self.validate_OKATOCodeType(self.ManufacturerOKATO)
        self.ManufacturerOKATO_nsprefix_ = "clt_ru"
        self.TradeMark = TradeMark
        self.validate_NameType(self.TradeMark)
        self.TradeMark_nsprefix_ = "clt_ru"
        self.ProductionPlaceName = ProductionPlaceName
        self.validate_FreeText250Type(self.ProductionPlaceName)
        self.ProductionPlaceName_nsprefix_ = "clt_ru"
        self.GoodsMark = GoodsMark
        self.validate_GoodsArticulType(self.GoodsMark)
        self.GoodsMark_nsprefix_ = "cltESAD_cu"
        self.GoodsModel = GoodsModel
        self.validate_GoodsArticulType(self.GoodsModel)
        self.GoodsModel_nsprefix_ = "cltESAD_cu"
        self.GoodsMarking = GoodsMarking
        self.validate_GoodsArticulType(self.GoodsMarking)
        self.GoodsMarking_nsprefix_ = "cltESAD_cu"
        self.GoodsStandard = GoodsStandard
        self.validate_GoodsArticulType(self.GoodsStandard)
        self.GoodsStandard_nsprefix_ = "cltESAD_cu"
        self.GoodsSort = GoodsSort
        self.validate_GoodsArticulType(self.GoodsSort)
        self.GoodsSort_nsprefix_ = "cltESAD_cu"
        self.WoodDescriptionDetails = WoodDescriptionDetails
        self.WoodDescriptionDetails_nsprefix_ = "catESAD_cu"
        self.Dimensions = Dimensions
        self.Dimensions_nsprefix_ = "catESAD_cu"
        if isinstance(DateIssue, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateIssue, '%Y-%m-%d').date()
        else:
            initvalue_ = DateIssue
        self.DateIssue = initvalue_
        self.DateIssue_nsprefix_ = "clt_ru"
        if SerialNumber is None:
            self.SerialNumber = []
        else:
            self.SerialNumber = SerialNumber
        self.SerialNumber_nsprefix_ = "clt_ru"
        self.GoodsGroupQuantity = GoodsGroupQuantity
        self.GoodsGroupQuantity_nsprefix_ = "catESAD_cu"
        self.ArticleWeight = ArticleWeight
        self.validate_QuantityBasisType(self.ArticleWeight)
        self.ArticleWeight_nsprefix_ = "clt_ru"
        self.RecordId = RecordId
        self.validate_DocumentIDType(self.RecordId)
        self.RecordId_nsprefix_ = "clt_ru"
        self.LineNum = LineNum
        self.validate_Count5Type(self.LineNum)
        self.LineNum_nsprefix_ = "clt_ru"
        self.InvoicedCost = InvoicedCost
        self.validate_AmountType(self.InvoicedCost)
        self.InvoicedCost_nsprefix_ = "clt_ru"
        if LicenseGroup is None:
            self.LicenseGroup = []
        else:
            self.LicenseGroup = LicenseGroup
        self.LicenseGroup_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsGroupInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsGroupInformationType.subclass:
            return GoodsGroupInformationType.subclass(*args_, **kwargs_)
        else:
            return GoodsGroupInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InfoDescription(self):
        return self.InfoDescription
    def set_InfoDescription(self, InfoDescription):
        self.InfoDescription = InfoDescription
    def add_InfoDescription(self, value):
        self.InfoDescription.append(value)
    def insert_InfoDescription_at(self, index, value):
        self.InfoDescription.insert(index, value)
    def replace_InfoDescription_at(self, index, value):
        self.InfoDescription[index] = value
    def get_Manufacturer(self):
        return self.Manufacturer
    def set_Manufacturer(self, Manufacturer):
        self.Manufacturer = Manufacturer
    def get_ManufacturerINN(self):
        return self.ManufacturerINN
    def set_ManufacturerINN(self, ManufacturerINN):
        self.ManufacturerINN = ManufacturerINN
    def get_ManufacturerKPP(self):
        return self.ManufacturerKPP
    def set_ManufacturerKPP(self, ManufacturerKPP):
        self.ManufacturerKPP = ManufacturerKPP
    def get_ManufacturerOKATO(self):
        return self.ManufacturerOKATO
    def set_ManufacturerOKATO(self, ManufacturerOKATO):
        self.ManufacturerOKATO = ManufacturerOKATO
    def get_TradeMark(self):
        return self.TradeMark
    def set_TradeMark(self, TradeMark):
        self.TradeMark = TradeMark
    def get_ProductionPlaceName(self):
        return self.ProductionPlaceName
    def set_ProductionPlaceName(self, ProductionPlaceName):
        self.ProductionPlaceName = ProductionPlaceName
    def get_GoodsMark(self):
        return self.GoodsMark
    def set_GoodsMark(self, GoodsMark):
        self.GoodsMark = GoodsMark
    def get_GoodsModel(self):
        return self.GoodsModel
    def set_GoodsModel(self, GoodsModel):
        self.GoodsModel = GoodsModel
    def get_GoodsMarking(self):
        return self.GoodsMarking
    def set_GoodsMarking(self, GoodsMarking):
        self.GoodsMarking = GoodsMarking
    def get_GoodsStandard(self):
        return self.GoodsStandard
    def set_GoodsStandard(self, GoodsStandard):
        self.GoodsStandard = GoodsStandard
    def get_GoodsSort(self):
        return self.GoodsSort
    def set_GoodsSort(self, GoodsSort):
        self.GoodsSort = GoodsSort
    def get_WoodDescriptionDetails(self):
        return self.WoodDescriptionDetails
    def set_WoodDescriptionDetails(self, WoodDescriptionDetails):
        self.WoodDescriptionDetails = WoodDescriptionDetails
    def get_Dimensions(self):
        return self.Dimensions
    def set_Dimensions(self, Dimensions):
        self.Dimensions = Dimensions
    def get_DateIssue(self):
        return self.DateIssue
    def set_DateIssue(self, DateIssue):
        self.DateIssue = DateIssue
    def get_SerialNumber(self):
        return self.SerialNumber
    def set_SerialNumber(self, SerialNumber):
        self.SerialNumber = SerialNumber
    def add_SerialNumber(self, value):
        self.SerialNumber.append(value)
    def insert_SerialNumber_at(self, index, value):
        self.SerialNumber.insert(index, value)
    def replace_SerialNumber_at(self, index, value):
        self.SerialNumber[index] = value
    def get_GoodsGroupQuantity(self):
        return self.GoodsGroupQuantity
    def set_GoodsGroupQuantity(self, GoodsGroupQuantity):
        self.GoodsGroupQuantity = GoodsGroupQuantity
    def get_ArticleWeight(self):
        return self.ArticleWeight
    def set_ArticleWeight(self, ArticleWeight):
        self.ArticleWeight = ArticleWeight
    def get_RecordId(self):
        return self.RecordId
    def set_RecordId(self, RecordId):
        self.RecordId = RecordId
    def get_LineNum(self):
        return self.LineNum
    def set_LineNum(self, LineNum):
        self.LineNum = LineNum
    def get_InvoicedCost(self):
        return self.InvoicedCost
    def set_InvoicedCost(self, InvoicedCost):
        self.InvoicedCost = InvoicedCost
    def get_LicenseGroup(self):
        return self.LicenseGroup
    def set_LicenseGroup(self, LicenseGroup):
        self.LicenseGroup = LicenseGroup
    def add_LicenseGroup(self, value):
        self.LicenseGroup.append(value)
    def insert_LicenseGroup_at(self, index, value):
        self.LicenseGroup.insert(index, value)
    def replace_LicenseGroup_at(self, index, value):
        self.LicenseGroup[index] = value
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_INNIDType(self, value):
        result = True
        # Validate type INNIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on INNIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on INNIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_KPPCodeType(self, value):
        result = True
        # Validate type KPPCodeType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_KPPCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_KPPCodeType_patterns_, ))
                result = False
        return result
    validate_KPPCodeType_patterns_ = [['^(\\d{9})$']]
    def validate_OKATOCodeType(self, value):
        result = True
        # Validate type OKATOCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_OKATOCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_OKATOCodeType_patterns_, ))
                result = False
        return result
    validate_OKATOCodeType_patterns_ = [['^(\\d{5,11})$']]
    def validate_GoodsArticulType(self, value):
        result = True
        # Validate type GoodsArticulType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on GoodsArticulType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on GoodsArticulType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentIDType(self, value):
        result = True
        # Validate type DocumentIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 36:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Count5Type(self, value):
        result = True
        # Validate type Count5Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.InfoDescription or
            self.Manufacturer is not None or
            self.ManufacturerINN is not None or
            self.ManufacturerKPP is not None or
            self.ManufacturerOKATO is not None or
            self.TradeMark is not None or
            self.ProductionPlaceName is not None or
            self.GoodsMark is not None or
            self.GoodsModel is not None or
            self.GoodsMarking is not None or
            self.GoodsStandard is not None or
            self.GoodsSort is not None or
            self.WoodDescriptionDetails is not None or
            self.Dimensions is not None or
            self.DateIssue is not None or
            self.SerialNumber or
            self.GoodsGroupQuantity is not None or
            self.ArticleWeight is not None or
            self.RecordId is not None or
            self.LineNum is not None or
            self.InvoicedCost is not None or
            self.LicenseGroup
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='GoodsGroupInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsGroupInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsGroupInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsGroupInformationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsGroupInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='GoodsGroupInformationType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='GoodsGroupInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InfoDescription_ in self.InfoDescription:
            namespaceprefix_ = self.InfoDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.InfoDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfoDescription>%s</%sInfoDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(InfoDescription_), input_name='InfoDescription')), namespaceprefix_ , eol_))
        if self.Manufacturer is not None:
            namespaceprefix_ = self.Manufacturer_nsprefix_ + ':' if (UseCapturedNS_ and self.Manufacturer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturer>%s</%sManufacturer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Manufacturer), input_name='Manufacturer')), namespaceprefix_ , eol_))
        if self.ManufacturerINN is not None:
            namespaceprefix_ = self.ManufacturerINN_nsprefix_ + ':' if (UseCapturedNS_ and self.ManufacturerINN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerINN>%s</%sManufacturerINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ManufacturerINN), input_name='ManufacturerINN')), namespaceprefix_ , eol_))
        if self.ManufacturerKPP is not None:
            namespaceprefix_ = self.ManufacturerKPP_nsprefix_ + ':' if (UseCapturedNS_ and self.ManufacturerKPP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerKPP>%s</%sManufacturerKPP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ManufacturerKPP), input_name='ManufacturerKPP')), namespaceprefix_ , eol_))
        if self.ManufacturerOKATO is not None:
            namespaceprefix_ = self.ManufacturerOKATO_nsprefix_ + ':' if (UseCapturedNS_ and self.ManufacturerOKATO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerOKATO>%s</%sManufacturerOKATO>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ManufacturerOKATO), input_name='ManufacturerOKATO')), namespaceprefix_ , eol_))
        if self.TradeMark is not None:
            namespaceprefix_ = self.TradeMark_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeMark>%s</%sTradeMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeMark), input_name='TradeMark')), namespaceprefix_ , eol_))
        if self.ProductionPlaceName is not None:
            namespaceprefix_ = self.ProductionPlaceName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductionPlaceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductionPlaceName>%s</%sProductionPlaceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductionPlaceName), input_name='ProductionPlaceName')), namespaceprefix_ , eol_))
        if self.GoodsMark is not None:
            namespaceprefix_ = self.GoodsMark_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsMark>%s</%sGoodsMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsMark), input_name='GoodsMark')), namespaceprefix_ , eol_))
        if self.GoodsModel is not None:
            namespaceprefix_ = self.GoodsModel_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsModel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsModel>%s</%sGoodsModel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsModel), input_name='GoodsModel')), namespaceprefix_ , eol_))
        if self.GoodsMarking is not None:
            namespaceprefix_ = self.GoodsMarking_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsMarking_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsMarking>%s</%sGoodsMarking>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsMarking), input_name='GoodsMarking')), namespaceprefix_ , eol_))
        if self.GoodsStandard is not None:
            namespaceprefix_ = self.GoodsStandard_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsStandard_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsStandard>%s</%sGoodsStandard>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsStandard), input_name='GoodsStandard')), namespaceprefix_ , eol_))
        if self.GoodsSort is not None:
            namespaceprefix_ = self.GoodsSort_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsSort>%s</%sGoodsSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsSort), input_name='GoodsSort')), namespaceprefix_ , eol_))
        if self.WoodDescriptionDetails is not None:
            namespaceprefix_ = self.WoodDescriptionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.WoodDescriptionDetails_nsprefix_) else ''
            self.WoodDescriptionDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WoodDescriptionDetails', pretty_print=pretty_print)
        if self.Dimensions is not None:
            namespaceprefix_ = self.Dimensions_nsprefix_ + ':' if (UseCapturedNS_ and self.Dimensions_nsprefix_) else ''
            self.Dimensions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Dimensions', pretty_print=pretty_print)
        if self.DateIssue is not None:
            namespaceprefix_ = self.DateIssue_nsprefix_ + ':' if (UseCapturedNS_ and self.DateIssue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateIssue>%s</%sDateIssue>%s' % (namespaceprefix_ , self.gds_format_date(self.DateIssue, input_name='DateIssue'), namespaceprefix_ , eol_))
        for SerialNumber_ in self.SerialNumber:
            namespaceprefix_ = self.SerialNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SerialNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SerialNumber_), input_name='SerialNumber')), namespaceprefix_ , eol_))
        if self.GoodsGroupQuantity is not None:
            namespaceprefix_ = self.GoodsGroupQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsGroupQuantity_nsprefix_) else ''
            self.GoodsGroupQuantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsGroupQuantity', pretty_print=pretty_print)
        if self.ArticleWeight is not None:
            namespaceprefix_ = self.ArticleWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.ArticleWeight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sArticleWeight>%s</%sArticleWeight>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ArticleWeight, input_name='ArticleWeight'), namespaceprefix_ , eol_))
        if self.RecordId is not None:
            namespaceprefix_ = self.RecordId_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordId>%s</%sRecordId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordId), input_name='RecordId')), namespaceprefix_ , eol_))
        if self.LineNum is not None:
            namespaceprefix_ = self.LineNum_nsprefix_ + ':' if (UseCapturedNS_ and self.LineNum_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineNum>%s</%sLineNum>%s' % (namespaceprefix_ , self.gds_format_integer(self.LineNum, input_name='LineNum'), namespaceprefix_ , eol_))
        if self.InvoicedCost is not None:
            namespaceprefix_ = self.InvoicedCost_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoicedCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoicedCost>%s</%sInvoicedCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.InvoicedCost, input_name='InvoicedCost'), namespaceprefix_ , eol_))
        for LicenseGroup_ in self.LicenseGroup:
            namespaceprefix_ = self.LicenseGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseGroup_nsprefix_) else ''
            LicenseGroup_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicenseGroup', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InfoDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InfoDescription')
            value_ = self.gds_validate_string(value_, node, 'InfoDescription')
            self.InfoDescription.append(value_)
            self.InfoDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.InfoDescription[-1])
        elif nodeName_ == 'Manufacturer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Manufacturer')
            value_ = self.gds_validate_string(value_, node, 'Manufacturer')
            self.Manufacturer = value_
            self.Manufacturer_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.Manufacturer)
        elif nodeName_ == 'ManufacturerINN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ManufacturerINN')
            value_ = self.gds_validate_string(value_, node, 'ManufacturerINN')
            self.ManufacturerINN = value_
            self.ManufacturerINN_nsprefix_ = child_.prefix
            # validate type INNIDType
            self.validate_INNIDType(self.ManufacturerINN)
        elif nodeName_ == 'ManufacturerKPP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ManufacturerKPP')
            value_ = self.gds_validate_string(value_, node, 'ManufacturerKPP')
            self.ManufacturerKPP = value_
            self.ManufacturerKPP_nsprefix_ = child_.prefix
            # validate type KPPCodeType
            self.validate_KPPCodeType(self.ManufacturerKPP)
        elif nodeName_ == 'ManufacturerOKATO':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ManufacturerOKATO')
            value_ = self.gds_validate_string(value_, node, 'ManufacturerOKATO')
            self.ManufacturerOKATO = value_
            self.ManufacturerOKATO_nsprefix_ = child_.prefix
            # validate type OKATOCodeType
            self.validate_OKATOCodeType(self.ManufacturerOKATO)
        elif nodeName_ == 'TradeMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TradeMark')
            value_ = self.gds_validate_string(value_, node, 'TradeMark')
            self.TradeMark = value_
            self.TradeMark_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.TradeMark)
        elif nodeName_ == 'ProductionPlaceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductionPlaceName')
            value_ = self.gds_validate_string(value_, node, 'ProductionPlaceName')
            self.ProductionPlaceName = value_
            self.ProductionPlaceName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ProductionPlaceName)
        elif nodeName_ == 'GoodsMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsMark')
            value_ = self.gds_validate_string(value_, node, 'GoodsMark')
            self.GoodsMark = value_
            self.GoodsMark_nsprefix_ = child_.prefix
            # validate type GoodsArticulType
            self.validate_GoodsArticulType(self.GoodsMark)
        elif nodeName_ == 'GoodsModel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsModel')
            value_ = self.gds_validate_string(value_, node, 'GoodsModel')
            self.GoodsModel = value_
            self.GoodsModel_nsprefix_ = child_.prefix
            # validate type GoodsArticulType
            self.validate_GoodsArticulType(self.GoodsModel)
        elif nodeName_ == 'GoodsMarking':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsMarking')
            value_ = self.gds_validate_string(value_, node, 'GoodsMarking')
            self.GoodsMarking = value_
            self.GoodsMarking_nsprefix_ = child_.prefix
            # validate type GoodsArticulType
            self.validate_GoodsArticulType(self.GoodsMarking)
        elif nodeName_ == 'GoodsStandard':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsStandard')
            value_ = self.gds_validate_string(value_, node, 'GoodsStandard')
            self.GoodsStandard = value_
            self.GoodsStandard_nsprefix_ = child_.prefix
            # validate type GoodsArticulType
            self.validate_GoodsArticulType(self.GoodsStandard)
        elif nodeName_ == 'GoodsSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsSort')
            value_ = self.gds_validate_string(value_, node, 'GoodsSort')
            self.GoodsSort = value_
            self.GoodsSort_nsprefix_ = child_.prefix
            # validate type GoodsArticulType
            self.validate_GoodsArticulType(self.GoodsSort)
        elif nodeName_ == 'WoodDescriptionDetails':
            obj_ = WoodDescriptionDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WoodDescriptionDetails = obj_
            obj_.original_tagname_ = 'WoodDescriptionDetails'
        elif nodeName_ == 'Dimensions':
            obj_ = DimensionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Dimensions = obj_
            obj_.original_tagname_ = 'Dimensions'
        elif nodeName_ == 'DateIssue':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DateIssue = dval_
            self.DateIssue_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DateIssue)
        elif nodeName_ == 'SerialNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SerialNumber')
            value_ = self.gds_validate_string(value_, node, 'SerialNumber')
            self.SerialNumber.append(value_)
            self.SerialNumber_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.SerialNumber[-1])
        elif nodeName_ == 'GoodsGroupQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsGroupQuantity = obj_
            obj_.original_tagname_ = 'GoodsGroupQuantity'
        elif nodeName_ == 'ArticleWeight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ArticleWeight')
            fval_ = self.gds_validate_decimal(fval_, node, 'ArticleWeight')
            self.ArticleWeight = fval_
            self.ArticleWeight_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.ArticleWeight)
        elif nodeName_ == 'RecordId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordId')
            value_ = self.gds_validate_string(value_, node, 'RecordId')
            self.RecordId = value_
            self.RecordId_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.RecordId)
        elif nodeName_ == 'LineNum' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'LineNum')
            ival_ = self.gds_validate_integer(ival_, node, 'LineNum')
            self.LineNum = ival_
            self.LineNum_nsprefix_ = child_.prefix
            # validate type Count5Type
            self.validate_Count5Type(self.LineNum)
        elif nodeName_ == 'InvoicedCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'InvoicedCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'InvoicedCost')
            self.InvoicedCost = fval_
            self.InvoicedCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.InvoicedCost)
        elif nodeName_ == 'LicenseGroup':
            obj_ = LicenseGroupType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicenseGroup.append(obj_)
            obj_.original_tagname_ = 'LicenseGroup'
# end class GoodsGroupInformationType


class GoodsItemBaseType(GeneratedsSuper):
    """GoodsItemBaseType -- Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    д
    л
    я
    о
    п
    и
    с
    а
    н
    и
    я
    т
    о
    в
    а
    р
    а
    GoodsNumeric -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    г
    о
    т
    о
    в
    а
    р
    а
    /
    н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    п
    о
    с
    п
    и
    с
    к
    у
    /
    н
    о
    м
    е
    р
    к
    о
    р
    р
    е
    к
    т
    и
    р
    у
    е
    м
    о
    г
    о
    т
    о
    в
    а
    р
    а
    .
    Г
    р
    .32
    GoodFeatures -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    е
    й
    у
    к
    а
    з
    а
    н
    и
    я
    с
    в
    е
    д
    е
    н
    и
    й
    о
    т
    о
    в
    а
    р
    а
    х
    (
    М
    П
    О
    (
    п
    р
    и
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    е
    р
    е
    с
    ы
    л
    а
    е
    м
    ы
    х
    в
    м
    е
    ж
    д
    у
    н
    а
    р
    о
    д
    н
    ы
    х
    п
    о
    ч
    т
    о
    в
    ы
    х
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    я
    х
    ).
    Э
    К
    Г
    (
    п
    р
    и
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    э
    к
    с
    п
    р
    е
    с
    с
    -
    г
    р
    у
    з
    о
    в
    )).
    Г
    р
    .32, 2-
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    Д
    Т
    GoodsDescription -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    (
    к
    о
    м
    м
    е
    р
    ч
    е
    с
    к
    о
    е
    ,
    ф
    и
    р
    м
    е
    н
    н
    о
    е
    и
    л
    и
    и
    н
    о
    е
    т
    р
    а
    д
    и
    ц
    и
    о
    н
    н
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    )
    т
    о
    в
    а
    р
    о
    в
    /
    «
    Т
    о
    в
    а
    р
    ы
    с
    о
    г
    л
    а
    с
    н
    о
    п
    р
    и
    л
    а
    г
    а
    е
    м
    о
    м
    у
    С
    п
    и
    с
    к
    у
    »
    .
    Г
    р
    .31
    п
    е
    р
    в
    ы
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    GrossWeightQuantity -- В
    е
    с
    т
    о
    в
    а
    р
    а
    ,
    б
    р
    у
    т
    т
    о
    (
    к
    г
    ).
    Г
    р
    . 35
    NetWeightQuantity -- В
    е
    с
    т
    о
    в
    а
    р
    а
    ,
    н
    е
    т
    т
    о
    (
    к
    г
    ).
    Г
    р
    .38
    NetWeightQuantity2 -- В
    е
    с
    т
    о
    в
    а
    р
    а
    ,
    н
    е
    т
    т
    о
    б
    е
    з
    у
    ч
    е
    т
    а
    в
    с
    е
    х
    в
    и
    д
    о
    в
    у
    п
    а
    к
    о
    в
    к
    и
    .
    Г
    р
    .38
    InvoicedCost -- Ц
    е
    н
    а
    /
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    о
    в
    а
    р
    а
    .
    Г
    р
    42
    InvoicedCurrencyCode -- Т
    р
    е
    х
    з
    н
    а
    ч
    н
    ы
    й
    б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    ц
    е
    н
    ы
    /
    с
    т
    о
    и
    м
    о
    с
    т
    и
    т
    о
    в
    а
    р
    а
    .
    П
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    а
    л
    ю
    т
    InvoicedCurrencyQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    е
    д
    и
    н
    и
    ц
    в
    а
    л
    ю
    т
    ы
    ,
    д
    л
    я
    к
    о
    т
    о
    р
    о
    й
    у
    к
    а
    з
    а
    н
    к
    у
    р
    с
    д
    л
    я
    Р
    Б
    InvoicedCurrencyRate -- К
    у
    р
    с
    в
    а
    л
    ю
    т
    ы
    ц
    е
    н
    ы
    /
    с
    т
    о
    и
    м
    о
    с
    т
    и
    т
    о
    в
    а
    р
    а
    InvoicedCurrencyDate -- Д
    а
    т
    а
    п
    р
    и
    м
    е
    н
    е
    н
    и
    я
    к
    у
    р
    с
    а
    в
    а
    л
    ю
    т
    ы
    CustomsCost -- Т
    а
    м
    о
    ж
    е
    н
    н
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    о
    в
    а
    р
    а
    .
    Г
    р
    .45
    StatisticalCost -- С
    т
    а
    т
    и
    с
    т
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    г
    о
    т
    о
    в
    а
    р
    а
    .
    Г
    р
    . 46
    TotalStatisticValueAmount -- О
    б
    щ
    а
    я
    с
    т
    а
    т
    и
    с
    т
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    о
    в
    а
    р
    а
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    о
    г
    о
    ч
    е
    р
    е
    з
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    г
    р
    а
    н
    и
    ц
    у
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    т
    о
    м
    ч
    и
    с
    л
    е
    н
    е
    к
    о
    м
    п
    л
    е
    к
    т
    н
    о
    м
    и
    л
    и
    н
    е
    з
    а
    в
    е
    р
    ш
    е
    н
    н
    о
    м
    в
    и
    д
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsNumeric=None, GoodFeatures=None, GoodsDescription=None, GrossWeightQuantity=None, NetWeightQuantity=None, NetWeightQuantity2=None, InvoicedCost=None, InvoicedCurrencyCode=None, InvoicedCurrencyQuantity=None, InvoicedCurrencyRate=None, InvoicedCurrencyDate=None, CustomsCost=None, StatisticalCost=None, TotalStatisticValueAmount=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.GoodsNumeric = GoodsNumeric
        self.validate_Count3Type(self.GoodsNumeric)
        self.GoodsNumeric_nsprefix_ = "clt_ru"
        self.GoodFeatures = GoodFeatures
        self.validate_Code3Type(self.GoodFeatures)
        self.GoodFeatures_nsprefix_ = "clt_ru"
        if GoodsDescription is None:
            self.GoodsDescription = []
        else:
            self.GoodsDescription = GoodsDescription
        self.GoodsDescription_nsprefix_ = "clt_ru"
        self.GrossWeightQuantity = GrossWeightQuantity
        self.validate_QuantityBasisType(self.GrossWeightQuantity)
        self.GrossWeightQuantity_nsprefix_ = "clt_ru"
        self.NetWeightQuantity = NetWeightQuantity
        self.validate_QuantityBasisType(self.NetWeightQuantity)
        self.NetWeightQuantity_nsprefix_ = "clt_ru"
        self.NetWeightQuantity2 = NetWeightQuantity2
        self.validate_QuantityBasisType(self.NetWeightQuantity2)
        self.NetWeightQuantity2_nsprefix_ = "clt_ru"
        self.InvoicedCost = InvoicedCost
        self.validate_AmountType(self.InvoicedCost)
        self.InvoicedCost_nsprefix_ = "clt_ru"
        self.InvoicedCurrencyCode = InvoicedCurrencyCode
        self.validate_CurrencyA3CodeType(self.InvoicedCurrencyCode)
        self.InvoicedCurrencyCode_nsprefix_ = "clt_ru"
        self.InvoicedCurrencyQuantity = InvoicedCurrencyQuantity
        self.validate_Count6Type(self.InvoicedCurrencyQuantity)
        self.InvoicedCurrencyQuantity_nsprefix_ = "clt_ru"
        self.InvoicedCurrencyRate = InvoicedCurrencyRate
        self.validate_CurrencyRateType(self.InvoicedCurrencyRate)
        self.InvoicedCurrencyRate_nsprefix_ = "clt_ru"
        if isinstance(InvoicedCurrencyDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(InvoicedCurrencyDate, '%Y-%m-%d').date()
        else:
            initvalue_ = InvoicedCurrencyDate
        self.InvoicedCurrencyDate = initvalue_
        self.InvoicedCurrencyDate_nsprefix_ = "clt_ru"
        self.CustomsCost = CustomsCost
        self.validate_AmountType(self.CustomsCost)
        self.CustomsCost_nsprefix_ = "clt_ru"
        self.StatisticalCost = StatisticalCost
        self.validate_AmountType(self.StatisticalCost)
        self.StatisticalCost_nsprefix_ = "clt_ru"
        self.TotalStatisticValueAmount = TotalStatisticValueAmount
        self.validate_AmountType(self.TotalStatisticValueAmount)
        self.TotalStatisticValueAmount_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsItemBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsItemBaseType.subclass:
            return GoodsItemBaseType.subclass(*args_, **kwargs_)
        else:
            return GoodsItemBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsNumeric(self):
        return self.GoodsNumeric
    def set_GoodsNumeric(self, GoodsNumeric):
        self.GoodsNumeric = GoodsNumeric
    def get_GoodFeatures(self):
        return self.GoodFeatures
    def set_GoodFeatures(self, GoodFeatures):
        self.GoodFeatures = GoodFeatures
    def get_GoodsDescription(self):
        return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription):
        self.GoodsDescription = GoodsDescription
    def add_GoodsDescription(self, value):
        self.GoodsDescription.append(value)
    def insert_GoodsDescription_at(self, index, value):
        self.GoodsDescription.insert(index, value)
    def replace_GoodsDescription_at(self, index, value):
        self.GoodsDescription[index] = value
    def get_GrossWeightQuantity(self):
        return self.GrossWeightQuantity
    def set_GrossWeightQuantity(self, GrossWeightQuantity):
        self.GrossWeightQuantity = GrossWeightQuantity
    def get_NetWeightQuantity(self):
        return self.NetWeightQuantity
    def set_NetWeightQuantity(self, NetWeightQuantity):
        self.NetWeightQuantity = NetWeightQuantity
    def get_NetWeightQuantity2(self):
        return self.NetWeightQuantity2
    def set_NetWeightQuantity2(self, NetWeightQuantity2):
        self.NetWeightQuantity2 = NetWeightQuantity2
    def get_InvoicedCost(self):
        return self.InvoicedCost
    def set_InvoicedCost(self, InvoicedCost):
        self.InvoicedCost = InvoicedCost
    def get_InvoicedCurrencyCode(self):
        return self.InvoicedCurrencyCode
    def set_InvoicedCurrencyCode(self, InvoicedCurrencyCode):
        self.InvoicedCurrencyCode = InvoicedCurrencyCode
    def get_InvoicedCurrencyQuantity(self):
        return self.InvoicedCurrencyQuantity
    def set_InvoicedCurrencyQuantity(self, InvoicedCurrencyQuantity):
        self.InvoicedCurrencyQuantity = InvoicedCurrencyQuantity
    def get_InvoicedCurrencyRate(self):
        return self.InvoicedCurrencyRate
    def set_InvoicedCurrencyRate(self, InvoicedCurrencyRate):
        self.InvoicedCurrencyRate = InvoicedCurrencyRate
    def get_InvoicedCurrencyDate(self):
        return self.InvoicedCurrencyDate
    def set_InvoicedCurrencyDate(self, InvoicedCurrencyDate):
        self.InvoicedCurrencyDate = InvoicedCurrencyDate
    def get_CustomsCost(self):
        return self.CustomsCost
    def set_CustomsCost(self, CustomsCost):
        self.CustomsCost = CustomsCost
    def get_StatisticalCost(self):
        return self.StatisticalCost
    def set_StatisticalCost(self, StatisticalCost):
        self.StatisticalCost = StatisticalCost
    def get_TotalStatisticValueAmount(self):
        return self.TotalStatisticValueAmount
    def set_TotalStatisticValueAmount(self, TotalStatisticValueAmount):
        self.TotalStatisticValueAmount = TotalStatisticValueAmount
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count6Type(self, value):
        result = True
        # Validate type Count6Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count6Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count6Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyRateType(self, value):
        result = True
        # Validate type CurrencyRateType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on CurrencyRateType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on CurrencyRateType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.GoodsNumeric is not None or
            self.GoodFeatures is not None or
            self.GoodsDescription or
            self.GrossWeightQuantity is not None or
            self.NetWeightQuantity is not None or
            self.NetWeightQuantity2 is not None or
            self.InvoicedCost is not None or
            self.InvoicedCurrencyCode is not None or
            self.InvoicedCurrencyQuantity is not None or
            self.InvoicedCurrencyRate is not None or
            self.InvoicedCurrencyDate is not None or
            self.CustomsCost is not None or
            self.StatisticalCost is not None or
            self.TotalStatisticValueAmount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsItemBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsItemBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsItemBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsItemBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsItemBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='GoodsItemBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsItemBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsNumeric is not None:
            namespaceprefix_ = self.GoodsNumeric_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsNumeric_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsNumeric>%s</%sGoodsNumeric>%s' % (namespaceprefix_ , self.gds_format_integer(self.GoodsNumeric, input_name='GoodsNumeric'), namespaceprefix_ , eol_))
        if self.GoodFeatures is not None:
            namespaceprefix_ = self.GoodFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodFeatures_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodFeatures>%s</%sGoodFeatures>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodFeatures), input_name='GoodFeatures')), namespaceprefix_ , eol_))
        for GoodsDescription_ in self.GoodsDescription:
            namespaceprefix_ = self.GoodsDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDescription>%s</%sGoodsDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsDescription_), input_name='GoodsDescription')), namespaceprefix_ , eol_))
        if self.GrossWeightQuantity is not None:
            namespaceprefix_ = self.GrossWeightQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GrossWeightQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGrossWeightQuantity>%s</%sGrossWeightQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.GrossWeightQuantity, input_name='GrossWeightQuantity'), namespaceprefix_ , eol_))
        if self.NetWeightQuantity is not None:
            namespaceprefix_ = self.NetWeightQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.NetWeightQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetWeightQuantity>%s</%sNetWeightQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.NetWeightQuantity, input_name='NetWeightQuantity'), namespaceprefix_ , eol_))
        if self.NetWeightQuantity2 is not None:
            namespaceprefix_ = self.NetWeightQuantity2_nsprefix_ + ':' if (UseCapturedNS_ and self.NetWeightQuantity2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetWeightQuantity2>%s</%sNetWeightQuantity2>%s' % (namespaceprefix_ , self.gds_format_decimal(self.NetWeightQuantity2, input_name='NetWeightQuantity2'), namespaceprefix_ , eol_))
        if self.InvoicedCost is not None:
            namespaceprefix_ = self.InvoicedCost_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoicedCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoicedCost>%s</%sInvoicedCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.InvoicedCost, input_name='InvoicedCost'), namespaceprefix_ , eol_))
        if self.InvoicedCurrencyCode is not None:
            namespaceprefix_ = self.InvoicedCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoicedCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoicedCurrencyCode>%s</%sInvoicedCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvoicedCurrencyCode), input_name='InvoicedCurrencyCode')), namespaceprefix_ , eol_))
        if self.InvoicedCurrencyQuantity is not None:
            namespaceprefix_ = self.InvoicedCurrencyQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoicedCurrencyQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoicedCurrencyQuantity>%s</%sInvoicedCurrencyQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.InvoicedCurrencyQuantity, input_name='InvoicedCurrencyQuantity'), namespaceprefix_ , eol_))
        if self.InvoicedCurrencyRate is not None:
            namespaceprefix_ = self.InvoicedCurrencyRate_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoicedCurrencyRate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoicedCurrencyRate>%s</%sInvoicedCurrencyRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.InvoicedCurrencyRate, input_name='InvoicedCurrencyRate'), namespaceprefix_ , eol_))
        if self.InvoicedCurrencyDate is not None:
            namespaceprefix_ = self.InvoicedCurrencyDate_nsprefix_ + ':' if (UseCapturedNS_ and self.InvoicedCurrencyDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoicedCurrencyDate>%s</%sInvoicedCurrencyDate>%s' % (namespaceprefix_ , self.gds_format_date(self.InvoicedCurrencyDate, input_name='InvoicedCurrencyDate'), namespaceprefix_ , eol_))
        if self.CustomsCost is not None:
            namespaceprefix_ = self.CustomsCost_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCost>%s</%sCustomsCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CustomsCost, input_name='CustomsCost'), namespaceprefix_ , eol_))
        if self.StatisticalCost is not None:
            namespaceprefix_ = self.StatisticalCost_nsprefix_ + ':' if (UseCapturedNS_ and self.StatisticalCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatisticalCost>%s</%sStatisticalCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.StatisticalCost, input_name='StatisticalCost'), namespaceprefix_ , eol_))
        if self.TotalStatisticValueAmount is not None:
            namespaceprefix_ = self.TotalStatisticValueAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalStatisticValueAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalStatisticValueAmount>%s</%sTotalStatisticValueAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TotalStatisticValueAmount, input_name='TotalStatisticValueAmount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsNumeric' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GoodsNumeric')
            ival_ = self.gds_validate_integer(ival_, node, 'GoodsNumeric')
            self.GoodsNumeric = ival_
            self.GoodsNumeric_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.GoodsNumeric)
        elif nodeName_ == 'GoodFeatures':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodFeatures')
            value_ = self.gds_validate_string(value_, node, 'GoodFeatures')
            self.GoodFeatures = value_
            self.GoodFeatures_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.GoodFeatures)
        elif nodeName_ == 'GoodsDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsDescription')
            value_ = self.gds_validate_string(value_, node, 'GoodsDescription')
            self.GoodsDescription.append(value_)
            self.GoodsDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsDescription[-1])
        elif nodeName_ == 'GrossWeightQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'GrossWeightQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'GrossWeightQuantity')
            self.GrossWeightQuantity = fval_
            self.GrossWeightQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.GrossWeightQuantity)
        elif nodeName_ == 'NetWeightQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'NetWeightQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'NetWeightQuantity')
            self.NetWeightQuantity = fval_
            self.NetWeightQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.NetWeightQuantity)
        elif nodeName_ == 'NetWeightQuantity2' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'NetWeightQuantity2')
            fval_ = self.gds_validate_decimal(fval_, node, 'NetWeightQuantity2')
            self.NetWeightQuantity2 = fval_
            self.NetWeightQuantity2_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.NetWeightQuantity2)
        elif nodeName_ == 'InvoicedCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'InvoicedCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'InvoicedCost')
            self.InvoicedCost = fval_
            self.InvoicedCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.InvoicedCost)
        elif nodeName_ == 'InvoicedCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InvoicedCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'InvoicedCurrencyCode')
            self.InvoicedCurrencyCode = value_
            self.InvoicedCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.InvoicedCurrencyCode)
        elif nodeName_ == 'InvoicedCurrencyQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'InvoicedCurrencyQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'InvoicedCurrencyQuantity')
            self.InvoicedCurrencyQuantity = ival_
            self.InvoicedCurrencyQuantity_nsprefix_ = child_.prefix
            # validate type Count6Type
            self.validate_Count6Type(self.InvoicedCurrencyQuantity)
        elif nodeName_ == 'InvoicedCurrencyRate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'InvoicedCurrencyRate')
            fval_ = self.gds_validate_decimal(fval_, node, 'InvoicedCurrencyRate')
            self.InvoicedCurrencyRate = fval_
            self.InvoicedCurrencyRate_nsprefix_ = child_.prefix
            # validate type CurrencyRateType
            self.validate_CurrencyRateType(self.InvoicedCurrencyRate)
        elif nodeName_ == 'InvoicedCurrencyDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.InvoicedCurrencyDate = dval_
            self.InvoicedCurrencyDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.InvoicedCurrencyDate)
        elif nodeName_ == 'CustomsCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CustomsCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'CustomsCost')
            self.CustomsCost = fval_
            self.CustomsCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.CustomsCost)
        elif nodeName_ == 'StatisticalCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'StatisticalCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'StatisticalCost')
            self.StatisticalCost = fval_
            self.StatisticalCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.StatisticalCost)
        elif nodeName_ == 'TotalStatisticValueAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TotalStatisticValueAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'TotalStatisticValueAmount')
            self.TotalStatisticValueAmount = fval_
            self.TotalStatisticValueAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.TotalStatisticValueAmount)
# end class GoodsItemBaseType


class GoodsSTZType(GeneratedsSuper):
    """GoodsSTZType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    а
    х
    ,
    п
    о
    м
    е
    щ
    е
    н
    н
    ы
    х
    п
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    С
    Т
    З
    и
    л
    и
    с
    в
    о
    б
    о
    д
    н
    о
    г
    о
    с
    к
    л
    а
    д
    а
    .
    г
    р
    31
    п
    11
    LineNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    с
    т
    р
    о
    к
    и
    в
    г
    р
    40
    GoodsDescription -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    я
    т
    о
    в
    а
    р
    а
    (
    к
    о
    м
    м
    е
    р
    ч
    е
    с
    к
    о
    е
    ,
    ф
    и
    р
    м
    е
    н
    н
    о
    е
    и
    л
    и
    и
    н
    о
    е
    т
    р
    а
    д
    и
    ц
    и
    о
    н
    н
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    )
    SupplementaryQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    GoodsGroupDescription -- О
    п
    и
    с
    а
    н
    и
    е
    и
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    т
    о
    в
    а
    р
    о
    в
    /
    О
    п
    и
    с
    а
    н
    и
    е
    г
    р
    у
    п
    п
    ы
    т
    о
    в
    а
    р
    о
    в
    о
    д
    н
    о
    г
    о
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    я
    с
    о
    т
    л
    и
    ч
    а
    ю
    щ
    и
    м
    и
    с
    я
    о
    т
    д
    р
    у
    г
    и
    х
    г
    р
    у
    п
    п
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    м
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, GoodsDescription=None, SupplementaryQuantity=None, GoodsGroupDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.LineNumber = LineNumber
        self.validate_SheetNumberType(self.LineNumber)
        self.LineNumber_nsprefix_ = "clt_ru"
        if GoodsDescription is None:
            self.GoodsDescription = []
        else:
            self.GoodsDescription = GoodsDescription
        self.GoodsDescription_nsprefix_ = "clt_ru"
        if SupplementaryQuantity is None:
            self.SupplementaryQuantity = []
        else:
            self.SupplementaryQuantity = SupplementaryQuantity
        self.SupplementaryQuantity_nsprefix_ = "cat_ru"
        if GoodsGroupDescription is None:
            self.GoodsGroupDescription = []
        else:
            self.GoodsGroupDescription = GoodsGroupDescription
        self.GoodsGroupDescription_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsSTZType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsSTZType.subclass:
            return GoodsSTZType.subclass(*args_, **kwargs_)
        else:
            return GoodsSTZType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineNumber(self):
        return self.LineNumber
    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber
    def get_GoodsDescription(self):
        return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription):
        self.GoodsDescription = GoodsDescription
    def add_GoodsDescription(self, value):
        self.GoodsDescription.append(value)
    def insert_GoodsDescription_at(self, index, value):
        self.GoodsDescription.insert(index, value)
    def replace_GoodsDescription_at(self, index, value):
        self.GoodsDescription[index] = value
    def get_SupplementaryQuantity(self):
        return self.SupplementaryQuantity
    def set_SupplementaryQuantity(self, SupplementaryQuantity):
        self.SupplementaryQuantity = SupplementaryQuantity
    def add_SupplementaryQuantity(self, value):
        self.SupplementaryQuantity.append(value)
    def insert_SupplementaryQuantity_at(self, index, value):
        self.SupplementaryQuantity.insert(index, value)
    def replace_SupplementaryQuantity_at(self, index, value):
        self.SupplementaryQuantity[index] = value
    def get_GoodsGroupDescription(self):
        return self.GoodsGroupDescription
    def set_GoodsGroupDescription(self, GoodsGroupDescription):
        self.GoodsGroupDescription = GoodsGroupDescription
    def add_GoodsGroupDescription(self, value):
        self.GoodsGroupDescription.append(value)
    def insert_GoodsGroupDescription_at(self, index, value):
        self.GoodsGroupDescription.insert(index, value)
    def replace_GoodsGroupDescription_at(self, index, value):
        self.GoodsGroupDescription[index] = value
    def validate_SheetNumberType(self, value):
        result = True
        # Validate type SheetNumberType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.LineNumber is not None or
            self.GoodsDescription or
            self.SupplementaryQuantity or
            self.GoodsGroupDescription
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='GoodsSTZType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsSTZType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsSTZType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsSTZType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsSTZType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='GoodsSTZType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='GoodsSTZType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineNumber is not None:
            namespaceprefix_ = self.LineNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LineNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineNumber>%s</%sLineNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(self.LineNumber, input_name='LineNumber'), namespaceprefix_ , eol_))
        for GoodsDescription_ in self.GoodsDescription:
            namespaceprefix_ = self.GoodsDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDescription>%s</%sGoodsDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsDescription_), input_name='GoodsDescription')), namespaceprefix_ , eol_))
        for SupplementaryQuantity_ in self.SupplementaryQuantity:
            namespaceprefix_ = self.SupplementaryQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplementaryQuantity_nsprefix_) else ''
            SupplementaryQuantity_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplementaryQuantity', pretty_print=pretty_print)
        for GoodsGroupDescription_ in self.GoodsGroupDescription:
            namespaceprefix_ = self.GoodsGroupDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsGroupDescription_nsprefix_) else ''
            GoodsGroupDescription_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsGroupDescription', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'LineNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'LineNumber')
            self.LineNumber = fval_
            self.LineNumber_nsprefix_ = child_.prefix
            # validate type SheetNumberType
            self.validate_SheetNumberType(self.LineNumber)
        elif nodeName_ == 'GoodsDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsDescription')
            value_ = self.gds_validate_string(value_, node, 'GoodsDescription')
            self.GoodsDescription.append(value_)
            self.GoodsDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsDescription[-1])
        elif nodeName_ == 'SupplementaryQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplementaryQuantity.append(obj_)
            obj_.original_tagname_ = 'SupplementaryQuantity'
        elif nodeName_ == 'GoodsGroupDescription':
            obj_ = GoodsGroupDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsGroupDescription.append(obj_)
            obj_.original_tagname_ = 'GoodsGroupDescription'
# end class GoodsSTZType


class GuaranteeTDType(GeneratedsSuper):
    """GuaranteeTDType -- П
    о
    р
    у
    ч
    и
    т
    е
    л
    ь
    с
    т
    в
    о
    GeneralDocName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    -
    Г
    е
    н
    е
    р
    а
    л
    ь
    н
    ы
    й
    д
    о
    г
    о
    в
    о
    р
    GeneralNumber -- Н
    о
    м
    е
    р
    г
    е
    н
    е
    р
    а
    л
    ь
    н
    о
    г
    о
    д
    о
    г
    о
    в
    о
    р
    а
    GeneralDate -- Д
    а
    т
    а
    г
    е
    н
    е
    р
    а
    л
    ь
    н
    о
    г
    о
    д
    о
    г
    о
    в
    о
    р
    а
    GeneralKindCode -- Г
    е
    н
    е
    р
    а
    л
    ь
    н
    ы
    й
    д
    о
    г
    о
    в
    о
    р
    -
    К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    GuaranteeDocName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    -
    Д
    о
    г
    о
    в
    о
    р
    п
    о
    р
    у
    ч
    и
    т
    е
    л
    ь
    с
    т
    в
    а
    GuaranteeNumber -- Н
    о
    м
    е
    р
    д
    о
    г
    о
    в
    о
    р
    а
    п
    о
    р
    у
    ч
    и
    т
    е
    л
    ь
    с
    т
    в
    а
    GuaranteeDate -- Д
    а
    т
    а
    д
    о
    г
    о
    в
    о
    р
    а
    п
    о
    р
    у
    ч
    и
    т
    е
    л
    ь
    с
    т
    в
    а
    GuaranteeKindCode -- Д
    о
    г
    о
    в
    о
    р
    п
    о
    р
    у
    ч
    и
    т
    е
    л
    ь
    с
    т
    в
    а
    -
    К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    AddGuaranteeDocName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    -
    Д
    о
    п
    о
    л
    н
    е
    н
    и
    е
    к
    д
    о
    г
    о
    в
    о
    р
    у
    п
    о
    р
    у
    ч
    и
    т
    е
    л
    ь
    с
    т
    в
    а
    AddGuaranteeNumber -- Н
    о
    м
    е
    р
    д
    о
    п
    о
    л
    н
    е
    н
    и
    е
    к
    д
    о
    г
    о
    в
    о
    р
    у
    п
    о
    р
    у
    ч
    и
    т
    е
    л
    ь
    с
    т
    в
    а
      
    * AddGuaranteeDate -- Д
      а
      т
      а
      д
      о
      п
      о
      л
      н
      е
      н
      и
      е
      к
      д
      о
      г
      о
      в
      о
      р
      у
      п
      о
      р
      у
      ч
      и
      т
      е
      л
      ь
      с
      т
      в
      а
    * AddGuaranteeKindCode -- Д
      о
      п
      о
      л
      н
      е
      н
      и
      е
      к
      д
      о
      г
      о
      в
      о
      р
      у
      п
      о
      р
      у
      ч
      и
      т
      е
      л
      ь
      с
      т
      в
      а
      -
      К
      о
      д
      в
      и
      д
      а
      д
      о
      к
      у
      м
      е
      н
      т
      а
      в
      с
      о
      о
      т
      в
      е
      т
      с
      т
      в
      и
      и
      с
      к
      л
      а
      с
      с
      и
      ф
      и
      к
      а
      т
      о
      р
      о
      м
      в
      и
      д
      о
      в
      д
      о
      к
      у
      м
      е
      н
      т
      о
      в
      и
      с
      в
      е
      д
      е
      н
      и
      й
      ,
      и
      с
      п
      о
      л
      ь
      з
      у
      е
      м
      ы
      х
      п
      р
      и
      т
      а
      м
      о
      ж
      е
      н
      н
      о
      м
      д
      е
      к
      л
      а
      р
      и
      р
      о
      в
      а
      н
      и
      и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GeneralDocName=None, GeneralNumber=None, GeneralDate=None, GeneralKindCode=None, GuaranteeDocName=None, GuaranteeNumber=None, GuaranteeDate=None, GuaranteeKindCode=None, AddGuaranteeDocName=None, AddGuaranteeNumber=None, AddGuaranteeDate=None, AddGuaranteeKindCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.GeneralDocName = GeneralDocName
        self.validate_DocumentNameType(self.GeneralDocName)
        self.GeneralDocName_nsprefix_ = "clt_ru"
        self.GeneralNumber = GeneralNumber
        self.validate_DocumentNumberType(self.GeneralNumber)
        self.GeneralNumber_nsprefix_ = "clt_ru"
        if isinstance(GeneralDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GeneralDate, '%Y-%m-%d').date()
        else:
            initvalue_ = GeneralDate
        self.GeneralDate = initvalue_
        self.GeneralDate_nsprefix_ = "clt_ru"
        self.GeneralKindCode = GeneralKindCode
        self.validate_CustomsDocumentCodeType(self.GeneralKindCode)
        self.GeneralKindCode_nsprefix_ = "clt_ru"
        self.GuaranteeDocName = GuaranteeDocName
        self.validate_DocumentNameType(self.GuaranteeDocName)
        self.GuaranteeDocName_nsprefix_ = "clt_ru"
        self.GuaranteeNumber = GuaranteeNumber
        self.validate_DocumentNumberType(self.GuaranteeNumber)
        self.GuaranteeNumber_nsprefix_ = "clt_ru"
        if isinstance(GuaranteeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GuaranteeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = GuaranteeDate
        self.GuaranteeDate = initvalue_
        self.GuaranteeDate_nsprefix_ = "clt_ru"
        self.GuaranteeKindCode = GuaranteeKindCode
        self.validate_CustomsDocumentCodeType(self.GuaranteeKindCode)
        self.GuaranteeKindCode_nsprefix_ = "clt_ru"
        self.AddGuaranteeDocName = AddGuaranteeDocName
        self.validate_DocumentNameType(self.AddGuaranteeDocName)
        self.AddGuaranteeDocName_nsprefix_ = "clt_ru"
        self.AddGuaranteeNumber = AddGuaranteeNumber
        self.validate_DocumentNumberType(self.AddGuaranteeNumber)
        self.AddGuaranteeNumber_nsprefix_ = "clt_ru"
        if isinstance(AddGuaranteeDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(AddGuaranteeDate, '%Y-%m-%d').date()
        else:
            initvalue_ = AddGuaranteeDate
        self.AddGuaranteeDate = initvalue_
        self.AddGuaranteeDate_nsprefix_ = "clt_ru"
        self.AddGuaranteeKindCode = AddGuaranteeKindCode
        self.validate_CustomsDocumentCodeType(self.AddGuaranteeKindCode)
        self.AddGuaranteeKindCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GuaranteeTDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GuaranteeTDType.subclass:
            return GuaranteeTDType.subclass(*args_, **kwargs_)
        else:
            return GuaranteeTDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GeneralDocName(self):
        return self.GeneralDocName
    def set_GeneralDocName(self, GeneralDocName):
        self.GeneralDocName = GeneralDocName
    def get_GeneralNumber(self):
        return self.GeneralNumber
    def set_GeneralNumber(self, GeneralNumber):
        self.GeneralNumber = GeneralNumber
    def get_GeneralDate(self):
        return self.GeneralDate
    def set_GeneralDate(self, GeneralDate):
        self.GeneralDate = GeneralDate
    def get_GeneralKindCode(self):
        return self.GeneralKindCode
    def set_GeneralKindCode(self, GeneralKindCode):
        self.GeneralKindCode = GeneralKindCode
    def get_GuaranteeDocName(self):
        return self.GuaranteeDocName
    def set_GuaranteeDocName(self, GuaranteeDocName):
        self.GuaranteeDocName = GuaranteeDocName
    def get_GuaranteeNumber(self):
        return self.GuaranteeNumber
    def set_GuaranteeNumber(self, GuaranteeNumber):
        self.GuaranteeNumber = GuaranteeNumber
    def get_GuaranteeDate(self):
        return self.GuaranteeDate
    def set_GuaranteeDate(self, GuaranteeDate):
        self.GuaranteeDate = GuaranteeDate
    def get_GuaranteeKindCode(self):
        return self.GuaranteeKindCode
    def set_GuaranteeKindCode(self, GuaranteeKindCode):
        self.GuaranteeKindCode = GuaranteeKindCode
    def get_AddGuaranteeDocName(self):
        return self.AddGuaranteeDocName
    def set_AddGuaranteeDocName(self, AddGuaranteeDocName):
        self.AddGuaranteeDocName = AddGuaranteeDocName
    def get_AddGuaranteeNumber(self):
        return self.AddGuaranteeNumber
    def set_AddGuaranteeNumber(self, AddGuaranteeNumber):
        self.AddGuaranteeNumber = AddGuaranteeNumber
    def get_AddGuaranteeDate(self):
        return self.AddGuaranteeDate
    def set_AddGuaranteeDate(self, AddGuaranteeDate):
        self.AddGuaranteeDate = AddGuaranteeDate
    def get_AddGuaranteeKindCode(self):
        return self.AddGuaranteeKindCode
    def set_AddGuaranteeKindCode(self, AddGuaranteeKindCode):
        self.AddGuaranteeKindCode = AddGuaranteeKindCode
    def validate_DocumentNameType(self, value):
        result = True
        # Validate type DocumentNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GeneralDocName is not None or
            self.GeneralNumber is not None or
            self.GeneralDate is not None or
            self.GeneralKindCode is not None or
            self.GuaranteeDocName is not None or
            self.GuaranteeNumber is not None or
            self.GuaranteeDate is not None or
            self.GuaranteeKindCode is not None or
            self.AddGuaranteeDocName is not None or
            self.AddGuaranteeNumber is not None or
            self.AddGuaranteeDate is not None or
            self.AddGuaranteeKindCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GuaranteeTDType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GuaranteeTDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GuaranteeTDType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GuaranteeTDType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GuaranteeTDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='GuaranteeTDType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GuaranteeTDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GeneralDocName is not None:
            namespaceprefix_ = self.GeneralDocName_nsprefix_ + ':' if (UseCapturedNS_ and self.GeneralDocName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeneralDocName>%s</%sGeneralDocName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeneralDocName), input_name='GeneralDocName')), namespaceprefix_ , eol_))
        if self.GeneralNumber is not None:
            namespaceprefix_ = self.GeneralNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GeneralNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeneralNumber>%s</%sGeneralNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeneralNumber), input_name='GeneralNumber')), namespaceprefix_ , eol_))
        if self.GeneralDate is not None:
            namespaceprefix_ = self.GeneralDate_nsprefix_ + ':' if (UseCapturedNS_ and self.GeneralDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeneralDate>%s</%sGeneralDate>%s' % (namespaceprefix_ , self.gds_format_date(self.GeneralDate, input_name='GeneralDate'), namespaceprefix_ , eol_))
        if self.GeneralKindCode is not None:
            namespaceprefix_ = self.GeneralKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GeneralKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGeneralKindCode>%s</%sGeneralKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GeneralKindCode), input_name='GeneralKindCode')), namespaceprefix_ , eol_))
        if self.GuaranteeDocName is not None:
            namespaceprefix_ = self.GuaranteeDocName_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeDocName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteeDocName>%s</%sGuaranteeDocName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteeDocName), input_name='GuaranteeDocName')), namespaceprefix_ , eol_))
        if self.GuaranteeNumber is not None:
            namespaceprefix_ = self.GuaranteeNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteeNumber>%s</%sGuaranteeNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteeNumber), input_name='GuaranteeNumber')), namespaceprefix_ , eol_))
        if self.GuaranteeDate is not None:
            namespaceprefix_ = self.GuaranteeDate_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteeDate>%s</%sGuaranteeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.GuaranteeDate, input_name='GuaranteeDate'), namespaceprefix_ , eol_))
        if self.GuaranteeKindCode is not None:
            namespaceprefix_ = self.GuaranteeKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteeKindCode>%s</%sGuaranteeKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteeKindCode), input_name='GuaranteeKindCode')), namespaceprefix_ , eol_))
        if self.AddGuaranteeDocName is not None:
            namespaceprefix_ = self.AddGuaranteeDocName_nsprefix_ + ':' if (UseCapturedNS_ and self.AddGuaranteeDocName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddGuaranteeDocName>%s</%sAddGuaranteeDocName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddGuaranteeDocName), input_name='AddGuaranteeDocName')), namespaceprefix_ , eol_))
        if self.AddGuaranteeNumber is not None:
            namespaceprefix_ = self.AddGuaranteeNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AddGuaranteeNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddGuaranteeNumber>%s</%sAddGuaranteeNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddGuaranteeNumber), input_name='AddGuaranteeNumber')), namespaceprefix_ , eol_))
        if self.AddGuaranteeDate is not None:
            namespaceprefix_ = self.AddGuaranteeDate_nsprefix_ + ':' if (UseCapturedNS_ and self.AddGuaranteeDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddGuaranteeDate>%s</%sAddGuaranteeDate>%s' % (namespaceprefix_ , self.gds_format_date(self.AddGuaranteeDate, input_name='AddGuaranteeDate'), namespaceprefix_ , eol_))
        if self.AddGuaranteeKindCode is not None:
            namespaceprefix_ = self.AddGuaranteeKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AddGuaranteeKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddGuaranteeKindCode>%s</%sAddGuaranteeKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddGuaranteeKindCode), input_name='AddGuaranteeKindCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GeneralDocName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GeneralDocName')
            value_ = self.gds_validate_string(value_, node, 'GeneralDocName')
            self.GeneralDocName = value_
            self.GeneralDocName_nsprefix_ = child_.prefix
            # validate type DocumentNameType
            self.validate_DocumentNameType(self.GeneralDocName)
        elif nodeName_ == 'GeneralNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GeneralNumber')
            value_ = self.gds_validate_string(value_, node, 'GeneralNumber')
            self.GeneralNumber = value_
            self.GeneralNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.GeneralNumber)
        elif nodeName_ == 'GeneralDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.GeneralDate = dval_
            self.GeneralDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.GeneralDate)
        elif nodeName_ == 'GeneralKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GeneralKindCode')
            value_ = self.gds_validate_string(value_, node, 'GeneralKindCode')
            self.GeneralKindCode = value_
            self.GeneralKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.GeneralKindCode)
        elif nodeName_ == 'GuaranteeDocName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GuaranteeDocName')
            value_ = self.gds_validate_string(value_, node, 'GuaranteeDocName')
            self.GuaranteeDocName = value_
            self.GuaranteeDocName_nsprefix_ = child_.prefix
            # validate type DocumentNameType
            self.validate_DocumentNameType(self.GuaranteeDocName)
        elif nodeName_ == 'GuaranteeNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GuaranteeNumber')
            value_ = self.gds_validate_string(value_, node, 'GuaranteeNumber')
            self.GuaranteeNumber = value_
            self.GuaranteeNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.GuaranteeNumber)
        elif nodeName_ == 'GuaranteeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.GuaranteeDate = dval_
            self.GuaranteeDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.GuaranteeDate)
        elif nodeName_ == 'GuaranteeKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GuaranteeKindCode')
            value_ = self.gds_validate_string(value_, node, 'GuaranteeKindCode')
            self.GuaranteeKindCode = value_
            self.GuaranteeKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.GuaranteeKindCode)
        elif nodeName_ == 'AddGuaranteeDocName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddGuaranteeDocName')
            value_ = self.gds_validate_string(value_, node, 'AddGuaranteeDocName')
            self.AddGuaranteeDocName = value_
            self.AddGuaranteeDocName_nsprefix_ = child_.prefix
            # validate type DocumentNameType
            self.validate_DocumentNameType(self.AddGuaranteeDocName)
        elif nodeName_ == 'AddGuaranteeNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AddGuaranteeNumber')
            value_ = self.gds_validate_string(value_, node, 'AddGuaranteeNumber')
            self.AddGuaranteeNumber = value_
            self.AddGuaranteeNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.AddGuaranteeNumber)
        elif nodeName_ == 'AddGuaranteeDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.AddGuaranteeDate = dval_
            self.AddGuaranteeDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.AddGuaranteeDate)
        elif nodeName_ == 'AddGuaranteeKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AddGuaranteeKindCode')
            value_ = self.gds_validate_string(value_, node, 'AddGuaranteeKindCode')
            self.AddGuaranteeKindCode = value_
            self.AddGuaranteeKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.AddGuaranteeKindCode)
# end class GuaranteeTDType


class IdentificationMeansDataUnitDetailsType(GeneratedsSuper):
    """IdentificationMeansDataUnitDetailsType -- С
    и
    м
    в
    о
    л
    ь
    н
    о
    е
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    е
    б
    л
    о
    к
    а
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    ,
    с
    о
    д
    е
    р
    ж
    а
    щ
    е
    й
    с
    я
    в
    к
    о
    д
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    AIId -- Ц
    и
    ф
    р
    о
    в
    о
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    п
    р
    и
    м
    е
    н
    е
    н
    и
    я
    б
    л
    о
    к
    а
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    ,
    с
    о
    д
    е
    р
    ж
    а
    щ
    е
    й
    с
    я
    в
    к
    о
    д
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    IdentifacationMeansUnitCharacterValueId -- З
    н
    а
    ч
    е
    н
    и
    е
    б
    л
    о
    к
    а
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    ,
    с
    о
    д
    е
    р
    ж
    а
    щ
    е
    й
    с
    я
    в
    к
    о
    д
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    о
    е
    в
    в
    и
    д
    е
    п
    о
    с
    л
    е
    д
    о
    в
    а
    т
    е
    л
    ь
    н
    о
    с
    т
    и
    с
    и
    м
    в
    о
    л
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AIId=None, IdentifacationMeansUnitCharacterValueId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.AIId = AIId
        self.validate_AIIdType(self.AIId)
        self.AIId_nsprefix_ = "cltESAD_cu"
        self.IdentifacationMeansUnitCharacterValueId = IdentifacationMeansUnitCharacterValueId
        self.validate_CodeVariable100Type(self.IdentifacationMeansUnitCharacterValueId)
        self.IdentifacationMeansUnitCharacterValueId_nsprefix_ = "cltESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentificationMeansDataUnitDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentificationMeansDataUnitDetailsType.subclass:
            return IdentificationMeansDataUnitDetailsType.subclass(*args_, **kwargs_)
        else:
            return IdentificationMeansDataUnitDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AIId(self):
        return self.AIId
    def set_AIId(self, AIId):
        self.AIId = AIId
    def get_IdentifacationMeansUnitCharacterValueId(self):
        return self.IdentifacationMeansUnitCharacterValueId
    def set_IdentifacationMeansUnitCharacterValueId(self, IdentifacationMeansUnitCharacterValueId):
        self.IdentifacationMeansUnitCharacterValueId = IdentifacationMeansUnitCharacterValueId
    def validate_AIIdType(self, value):
        result = True
        # Validate type AIIdType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_AIIdType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_AIIdType_patterns_, ))
                result = False
        return result
    validate_AIIdType_patterns_ = [['^(\\d{2,4})$']]
    def validate_CodeVariable100Type(self, value):
        result = True
        # Validate type CodeVariable100Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 100:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable100Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable100Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.AIId is not None or
            self.IdentifacationMeansUnitCharacterValueId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='IdentificationMeansDataUnitDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentificationMeansDataUnitDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IdentificationMeansDataUnitDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IdentificationMeansDataUnitDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IdentificationMeansDataUnitDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='IdentificationMeansDataUnitDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='IdentificationMeansDataUnitDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AIId is not None:
            namespaceprefix_ = self.AIId_nsprefix_ + ':' if (UseCapturedNS_ and self.AIId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAIId>%s</%sAIId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AIId), input_name='AIId')), namespaceprefix_ , eol_))
        if self.IdentifacationMeansUnitCharacterValueId is not None:
            namespaceprefix_ = self.IdentifacationMeansUnitCharacterValueId_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentifacationMeansUnitCharacterValueId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentifacationMeansUnitCharacterValueId>%s</%sIdentifacationMeansUnitCharacterValueId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentifacationMeansUnitCharacterValueId), input_name='IdentifacationMeansUnitCharacterValueId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AIId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AIId')
            value_ = self.gds_validate_string(value_, node, 'AIId')
            self.AIId = value_
            self.AIId_nsprefix_ = child_.prefix
            # validate type AIIdType
            self.validate_AIIdType(self.AIId)
        elif nodeName_ == 'IdentifacationMeansUnitCharacterValueId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentifacationMeansUnitCharacterValueId')
            value_ = self.gds_validate_string(value_, node, 'IdentifacationMeansUnitCharacterValueId')
            self.IdentifacationMeansUnitCharacterValueId = value_
            self.IdentifacationMeansUnitCharacterValueId_nsprefix_ = child_.prefix
            # validate type CodeVariable100Type
            self.validate_CodeVariable100Type(self.IdentifacationMeansUnitCharacterValueId)
# end class IdentificationMeansDataUnitDetailsType


class IdentificationMeansDetailsType(GeneratedsSuper):
    """IdentificationMeansDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    р
    е
    д
    с
    т
    в
    а
    х
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    AggregationKindCode -- К
    о
    д
    у
    р
    о
    в
    н
    я
    м
    а
    р
    к
    и
    р
    о
    в
    к
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    о
    с
    п
    р
    а
    в
    о
    ч
    н
    и
    к
    о
    м
    у
    р
    о
    в
    н
    е
    й
    м
    а
    р
    к
    и
    р
    о
    в
    к
    и
    IdentificationMeansListDetails -- П
    е
    р
    е
    ч
    е
    н
    ь
    к
    о
    д
    о
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    IdentificationMeansRangeDetails -- Д
    и
    а
    п
    а
    з
    о
    н
    з
    н
    а
    ч
    е
    н
    и
    й
    к
    о
    д
    о
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    IdentifacationMeansCustomsId -- А
    г
    р
    е
    г
    и
    р
    о
    в
    а
    н
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    к
    о
    д
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AggregationKindCode=None, IdentificationMeansListDetails=None, IdentificationMeansRangeDetails=None, IdentifacationMeansCustomsId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.AggregationKindCode = AggregationKindCode
        self.validate_LetterIndicatorType(self.AggregationKindCode)
        self.AggregationKindCode_nsprefix_ = "clt_ru"
        self.IdentificationMeansListDetails = IdentificationMeansListDetails
        self.IdentificationMeansListDetails_nsprefix_ = "catESAD_cu"
        if IdentificationMeansRangeDetails is None:
            self.IdentificationMeansRangeDetails = []
        else:
            self.IdentificationMeansRangeDetails = IdentificationMeansRangeDetails
        self.IdentificationMeansRangeDetails_nsprefix_ = "catESAD_cu"
        self.IdentifacationMeansCustomsId = IdentifacationMeansCustomsId
        self.validate_IdentifacationMeansCustomsIdType(self.IdentifacationMeansCustomsId)
        self.IdentifacationMeansCustomsId_nsprefix_ = "cltESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentificationMeansDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentificationMeansDetailsType.subclass:
            return IdentificationMeansDetailsType.subclass(*args_, **kwargs_)
        else:
            return IdentificationMeansDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AggregationKindCode(self):
        return self.AggregationKindCode
    def set_AggregationKindCode(self, AggregationKindCode):
        self.AggregationKindCode = AggregationKindCode
    def get_IdentificationMeansListDetails(self):
        return self.IdentificationMeansListDetails
    def set_IdentificationMeansListDetails(self, IdentificationMeansListDetails):
        self.IdentificationMeansListDetails = IdentificationMeansListDetails
    def get_IdentificationMeansRangeDetails(self):
        return self.IdentificationMeansRangeDetails
    def set_IdentificationMeansRangeDetails(self, IdentificationMeansRangeDetails):
        self.IdentificationMeansRangeDetails = IdentificationMeansRangeDetails
    def add_IdentificationMeansRangeDetails(self, value):
        self.IdentificationMeansRangeDetails.append(value)
    def insert_IdentificationMeansRangeDetails_at(self, index, value):
        self.IdentificationMeansRangeDetails.insert(index, value)
    def replace_IdentificationMeansRangeDetails_at(self, index, value):
        self.IdentificationMeansRangeDetails[index] = value
    def get_IdentifacationMeansCustomsId(self):
        return self.IdentifacationMeansCustomsId
    def set_IdentifacationMeansCustomsId(self, IdentifacationMeansCustomsId):
        self.IdentifacationMeansCustomsId = IdentifacationMeansCustomsId
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_IdentifacationMeansCustomsIdType(self, value):
        result = True
        # Validate type IdentifacationMeansCustomsIdType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on IdentifacationMeansCustomsIdType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on IdentifacationMeansCustomsIdType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.AggregationKindCode is not None or
            self.IdentificationMeansListDetails is not None or
            self.IdentificationMeansRangeDetails or
            self.IdentifacationMeansCustomsId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='IdentificationMeansDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentificationMeansDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IdentificationMeansDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IdentificationMeansDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IdentificationMeansDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='IdentificationMeansDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='IdentificationMeansDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AggregationKindCode is not None:
            namespaceprefix_ = self.AggregationKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AggregationKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAggregationKindCode>%s</%sAggregationKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AggregationKindCode), input_name='AggregationKindCode')), namespaceprefix_ , eol_))
        if self.IdentificationMeansListDetails is not None:
            namespaceprefix_ = self.IdentificationMeansListDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentificationMeansListDetails_nsprefix_) else ''
            self.IdentificationMeansListDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificationMeansListDetails', pretty_print=pretty_print)
        for IdentificationMeansRangeDetails_ in self.IdentificationMeansRangeDetails:
            namespaceprefix_ = self.IdentificationMeansRangeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentificationMeansRangeDetails_nsprefix_) else ''
            IdentificationMeansRangeDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificationMeansRangeDetails', pretty_print=pretty_print)
        if self.IdentifacationMeansCustomsId is not None:
            namespaceprefix_ = self.IdentifacationMeansCustomsId_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentifacationMeansCustomsId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentifacationMeansCustomsId>%s</%sIdentifacationMeansCustomsId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentifacationMeansCustomsId), input_name='IdentifacationMeansCustomsId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AggregationKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AggregationKindCode')
            value_ = self.gds_validate_string(value_, node, 'AggregationKindCode')
            self.AggregationKindCode = value_
            self.AggregationKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.AggregationKindCode)
        elif nodeName_ == 'IdentificationMeansListDetails':
            obj_ = IdentificationMeansListDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentificationMeansListDetails = obj_
            obj_.original_tagname_ = 'IdentificationMeansListDetails'
        elif nodeName_ == 'IdentificationMeansRangeDetails':
            obj_ = IdentificationMeansRangeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentificationMeansRangeDetails.append(obj_)
            obj_.original_tagname_ = 'IdentificationMeansRangeDetails'
        elif nodeName_ == 'IdentifacationMeansCustomsId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IdentifacationMeansCustomsId')
            value_ = self.gds_validate_string(value_, node, 'IdentifacationMeansCustomsId')
            self.IdentifacationMeansCustomsId = value_
            self.IdentifacationMeansCustomsId_nsprefix_ = child_.prefix
            # validate type IdentifacationMeansCustomsIdType
            self.validate_IdentifacationMeansCustomsIdType(self.IdentifacationMeansCustomsId)
# end class IdentificationMeansDetailsType


class IdentificationMeansItemDetailsType(GeneratedsSuper):
    """IdentificationMeansItemDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    ,
    р
    а
    з
    м
    е
    щ
    е
    н
    н
    ы
    е
    н
    а
    с
    р
    е
    д
    с
    т
    в
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    IdentificationMeansKindCode -- К
    о
    д
    в
    и
    д
    а
    с
    р
    е
    д
    с
    т
    в
    а
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    ,
    с
    о
    д
    е
    р
    ж
    а
    щ
    е
    г
    о
    к
    о
    д
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    IdentificationMeansDataUnitDetails -- С
    и
    м
    в
    о
    л
    ь
    н
    о
    е
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    е
    б
    л
    о
    к
    а
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    ,
    с
    о
    д
    е
    р
    ж
    а
    щ
    е
    й
    с
    я
    в
    к
    о
    д
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IdentificationMeansKindCode=None, IdentificationMeansDataUnitDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.IdentificationMeansKindCode = IdentificationMeansKindCode
        self.validate_Code3Type(self.IdentificationMeansKindCode)
        self.IdentificationMeansKindCode_nsprefix_ = "clt_ru"
        if IdentificationMeansDataUnitDetails is None:
            self.IdentificationMeansDataUnitDetails = []
        else:
            self.IdentificationMeansDataUnitDetails = IdentificationMeansDataUnitDetails
        self.IdentificationMeansDataUnitDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentificationMeansItemDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentificationMeansItemDetailsType.subclass:
            return IdentificationMeansItemDetailsType.subclass(*args_, **kwargs_)
        else:
            return IdentificationMeansItemDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IdentificationMeansKindCode(self):
        return self.IdentificationMeansKindCode
    def set_IdentificationMeansKindCode(self, IdentificationMeansKindCode):
        self.IdentificationMeansKindCode = IdentificationMeansKindCode
    def get_IdentificationMeansDataUnitDetails(self):
        return self.IdentificationMeansDataUnitDetails
    def set_IdentificationMeansDataUnitDetails(self, IdentificationMeansDataUnitDetails):
        self.IdentificationMeansDataUnitDetails = IdentificationMeansDataUnitDetails
    def add_IdentificationMeansDataUnitDetails(self, value):
        self.IdentificationMeansDataUnitDetails.append(value)
    def insert_IdentificationMeansDataUnitDetails_at(self, index, value):
        self.IdentificationMeansDataUnitDetails.insert(index, value)
    def replace_IdentificationMeansDataUnitDetails_at(self, index, value):
        self.IdentificationMeansDataUnitDetails[index] = value
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.IdentificationMeansKindCode is not None or
            self.IdentificationMeansDataUnitDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='IdentificationMeansItemDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentificationMeansItemDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IdentificationMeansItemDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IdentificationMeansItemDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IdentificationMeansItemDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='IdentificationMeansItemDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='IdentificationMeansItemDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificationMeansKindCode is not None:
            namespaceprefix_ = self.IdentificationMeansKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentificationMeansKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentificationMeansKindCode>%s</%sIdentificationMeansKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentificationMeansKindCode), input_name='IdentificationMeansKindCode')), namespaceprefix_ , eol_))
        for IdentificationMeansDataUnitDetails_ in self.IdentificationMeansDataUnitDetails:
            namespaceprefix_ = self.IdentificationMeansDataUnitDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentificationMeansDataUnitDetails_nsprefix_) else ''
            IdentificationMeansDataUnitDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificationMeansDataUnitDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IdentificationMeansKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentificationMeansKindCode')
            value_ = self.gds_validate_string(value_, node, 'IdentificationMeansKindCode')
            self.IdentificationMeansKindCode = value_
            self.IdentificationMeansKindCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.IdentificationMeansKindCode)
        elif nodeName_ == 'IdentificationMeansDataUnitDetails':
            obj_ = IdentificationMeansDataUnitDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentificationMeansDataUnitDetails.append(obj_)
            obj_.original_tagname_ = 'IdentificationMeansDataUnitDetails'
# end class IdentificationMeansItemDetailsType


class IdentificationMeansListDetailsType(GeneratedsSuper):
    """IdentificationMeansListDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    е
    р
    е
    ч
    н
    е
    с
    р
    е
    д
    с
    т
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    ,
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    х
    н
    а
    т
    о
    в
    а
    р
    ,
    п
    о
    д
    л
    е
    ж
    а
    щ
    и
    й
    м
    а
    р
    к
    и
    р
    о
    в
    к
    е
    с
    р
    е
    д
    с
    т
    в
    а
    м
    и
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    IdentificationMeansItemDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    д
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IdentificationMeansItemDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if IdentificationMeansItemDetails is None:
            self.IdentificationMeansItemDetails = []
        else:
            self.IdentificationMeansItemDetails = IdentificationMeansItemDetails
        self.IdentificationMeansItemDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentificationMeansListDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentificationMeansListDetailsType.subclass:
            return IdentificationMeansListDetailsType.subclass(*args_, **kwargs_)
        else:
            return IdentificationMeansListDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IdentificationMeansItemDetails(self):
        return self.IdentificationMeansItemDetails
    def set_IdentificationMeansItemDetails(self, IdentificationMeansItemDetails):
        self.IdentificationMeansItemDetails = IdentificationMeansItemDetails
    def add_IdentificationMeansItemDetails(self, value):
        self.IdentificationMeansItemDetails.append(value)
    def insert_IdentificationMeansItemDetails_at(self, index, value):
        self.IdentificationMeansItemDetails.insert(index, value)
    def replace_IdentificationMeansItemDetails_at(self, index, value):
        self.IdentificationMeansItemDetails[index] = value
    def has__content(self):
        if (
            self.IdentificationMeansItemDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='IdentificationMeansListDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentificationMeansListDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IdentificationMeansListDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IdentificationMeansListDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IdentificationMeansListDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='IdentificationMeansListDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='IdentificationMeansListDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for IdentificationMeansItemDetails_ in self.IdentificationMeansItemDetails:
            namespaceprefix_ = self.IdentificationMeansItemDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentificationMeansItemDetails_nsprefix_) else ''
            IdentificationMeansItemDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificationMeansItemDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IdentificationMeansItemDetails':
            obj_ = IdentificationMeansItemDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentificationMeansItemDetails.append(obj_)
            obj_.original_tagname_ = 'IdentificationMeansItemDetails'
# end class IdentificationMeansListDetailsType


class IdentificationMeansRangeDetailsType(GeneratedsSuper):
    """IdentificationMeansRangeDetailsType -- Д
    и
    а
    п
    а
    з
    о
    н
    з
    н
    а
    ч
    е
    н
    и
    й
    к
    о
    д
    о
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    FirstIdentificationMeansItemDetails -- П
    е
    р
    в
    ы
    й
    н
    о
    м
    е
    р
    д
    и
    а
    п
    а
    з
    о
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    й
    к
    о
    д
    о
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    LastIdentificationMeansItemDetails -- П
    о
    с
    л
    е
    д
    н
    и
    й
    н
    о
    м
    е
    р
    д
    и
    а
    п
    а
    з
    о
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    й
    к
    о
    д
    о
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FirstIdentificationMeansItemDetails=None, LastIdentificationMeansItemDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.FirstIdentificationMeansItemDetails = FirstIdentificationMeansItemDetails
        self.FirstIdentificationMeansItemDetails_nsprefix_ = "catESAD_cu"
        self.LastIdentificationMeansItemDetails = LastIdentificationMeansItemDetails
        self.LastIdentificationMeansItemDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IdentificationMeansRangeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IdentificationMeansRangeDetailsType.subclass:
            return IdentificationMeansRangeDetailsType.subclass(*args_, **kwargs_)
        else:
            return IdentificationMeansRangeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FirstIdentificationMeansItemDetails(self):
        return self.FirstIdentificationMeansItemDetails
    def set_FirstIdentificationMeansItemDetails(self, FirstIdentificationMeansItemDetails):
        self.FirstIdentificationMeansItemDetails = FirstIdentificationMeansItemDetails
    def get_LastIdentificationMeansItemDetails(self):
        return self.LastIdentificationMeansItemDetails
    def set_LastIdentificationMeansItemDetails(self, LastIdentificationMeansItemDetails):
        self.LastIdentificationMeansItemDetails = LastIdentificationMeansItemDetails
    def has__content(self):
        if (
            self.FirstIdentificationMeansItemDetails is not None or
            self.LastIdentificationMeansItemDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='IdentificationMeansRangeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IdentificationMeansRangeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IdentificationMeansRangeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IdentificationMeansRangeDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IdentificationMeansRangeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='IdentificationMeansRangeDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='IdentificationMeansRangeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FirstIdentificationMeansItemDetails is not None:
            namespaceprefix_ = self.FirstIdentificationMeansItemDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.FirstIdentificationMeansItemDetails_nsprefix_) else ''
            self.FirstIdentificationMeansItemDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FirstIdentificationMeansItemDetails', pretty_print=pretty_print)
        if self.LastIdentificationMeansItemDetails is not None:
            namespaceprefix_ = self.LastIdentificationMeansItemDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.LastIdentificationMeansItemDetails_nsprefix_) else ''
            self.LastIdentificationMeansItemDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LastIdentificationMeansItemDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FirstIdentificationMeansItemDetails':
            obj_ = IdentificationMeansItemDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FirstIdentificationMeansItemDetails = obj_
            obj_.original_tagname_ = 'FirstIdentificationMeansItemDetails'
        elif nodeName_ == 'LastIdentificationMeansItemDetails':
            obj_ = IdentificationMeansItemDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LastIdentificationMeansItemDetails = obj_
            obj_.original_tagname_ = 'LastIdentificationMeansItemDetails'
# end class IdentificationMeansRangeDetailsType


class InvestmentGoodsIdDetailsType(GeneratedsSuper):
    """InvestmentGoodsIdDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    о
    м
    н
    о
    м
    е
    р
    е
    т
    о
    в
    а
    р
    а
    (
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    б
    о
    р
    у
    д
    о
    в
    а
    н
    и
    я
    ,
    к
    о
    м
    п
    л
    е
    к
    т
    у
    ю
    щ
    и
    х
    и
    з
    а
    п
    а
    с
    н
    ы
    х
    ч
    а
    с
    т
    е
    й
    к
    н
    е
    м
    у
    ,
    с
    ы
    р
    ь
    я
    и
    м
    а
    т
    е
    р
    и
    а
    л
    о
    в
    ),
    у
    к
    а
    з
    а
    н
    н
    о
    м
    в
    п
    е
    р
    е
    ч
    н
    е
    т
    о
    в
    а
    р
    о
    в
    ,
    в
    в
    о
    з
    и
    м
    ы
    х
    д
    л
    я
    р
    е
    а
    л
    и
    з
    а
    ц
    и
    и
    и
    н
    в
    е
    с
    т
    и
    ц
    и
    о
    н
    н
    о
    г
    о
    п
    р
    о
    е
    к
    т
    а
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    ,
    в
    с
    о
    о
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    InvestmentProjectSeqId -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    и
    н
    в
    е
    с
    т
    и
    ц
    и
    о
    н
    н
    о
    г
    о
    п
    р
    о
    е
    к
    т
    а
    п
    о
    р
    е
    е
    с
    т
    р
    у
    и
    н
    в
    е
    с
    т
    и
    ц
    и
    о
    н
    н
    ы
    х
    п
    р
    о
    е
    к
    т
    о
    в
    InvestmentProjectYear -- Г
    о
    д
    в
    к
    л
    ю
    ч
    е
    н
    и
    я
    и
    н
    в
    е
    с
    т
    и
    ц
    и
    о
    н
    н
    о
    г
    о
    п
    р
    о
    е
    к
    т
    а
    в
    р
    е
    е
    с
    т
    р
    и
    н
    в
    е
    с
    т
    и
    ц
    и
    о
    н
    н
    ы
    х
    п
    р
    о
    е
    к
    т
    о
    в
    InvestmentGoodsListKindCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    (
    п
    р
    и
    з
    н
    а
    к
    а
    )
    п
    е
    р
    е
    ч
    н
    я
    т
    о
    в
    а
    р
    о
    в
    ,
    в
    в
    о
    з
    и
    м
    ы
    х
    д
    л
    я
    р
    е
    а
    л
    и
    з
    а
    ц
    и
    и
    и
    н
    в
    е
    с
    т
    и
    ц
    и
    о
    н
    н
    о
    г
    о
    п
    р
    о
    е
    к
    т
    а
    InvestmentProjectGoodsSeqId -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    в
    п
    р
    е
    д
    е
    л
    а
    х
    о
    д
    н
    о
    г
    о
    и
    н
    в
    е
    с
    т
    и
    ц
    и
    о
    н
    н
    о
    г
    о
    п
    р
    о
    е
    к
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, InvestmentProjectSeqId=None, InvestmentProjectYear=None, InvestmentGoodsListKindCode=None, InvestmentProjectGoodsSeqId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.InvestmentProjectSeqId = InvestmentProjectSeqId
        self.validate_Code4Type(self.InvestmentProjectSeqId)
        self.InvestmentProjectSeqId_nsprefix_ = "clt_ru"
        self.InvestmentProjectYear = InvestmentProjectYear
        self.validate_DateYearCustType(self.InvestmentProjectYear)
        self.InvestmentProjectYear_nsprefix_ = "clt_ru"
        self.InvestmentGoodsListKindCode = InvestmentGoodsListKindCode
        self.validate_LetterIndicatorType(self.InvestmentGoodsListKindCode)
        self.InvestmentGoodsListKindCode_nsprefix_ = "clt_ru"
        self.InvestmentProjectGoodsSeqId = InvestmentProjectGoodsSeqId
        self.validate_Code9Type(self.InvestmentProjectGoodsSeqId)
        self.InvestmentProjectGoodsSeqId_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InvestmentGoodsIdDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InvestmentGoodsIdDetailsType.subclass:
            return InvestmentGoodsIdDetailsType.subclass(*args_, **kwargs_)
        else:
            return InvestmentGoodsIdDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_InvestmentProjectSeqId(self):
        return self.InvestmentProjectSeqId
    def set_InvestmentProjectSeqId(self, InvestmentProjectSeqId):
        self.InvestmentProjectSeqId = InvestmentProjectSeqId
    def get_InvestmentProjectYear(self):
        return self.InvestmentProjectYear
    def set_InvestmentProjectYear(self, InvestmentProjectYear):
        self.InvestmentProjectYear = InvestmentProjectYear
    def get_InvestmentGoodsListKindCode(self):
        return self.InvestmentGoodsListKindCode
    def set_InvestmentGoodsListKindCode(self, InvestmentGoodsListKindCode):
        self.InvestmentGoodsListKindCode = InvestmentGoodsListKindCode
    def get_InvestmentProjectGoodsSeqId(self):
        return self.InvestmentProjectGoodsSeqId
    def set_InvestmentProjectGoodsSeqId(self, InvestmentProjectGoodsSeqId):
        self.InvestmentProjectGoodsSeqId = InvestmentProjectGoodsSeqId
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Code4Type(self, value):
        result = True
        # Validate type Code4Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code4Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateYearCustType(self, value):
        result = True
        # Validate type DateYearCustType, a restriction on CategoryCust:YearCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code9Type(self, value):
        result = True
        # Validate type Code9Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code9Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CountryCode is not None or
            self.InvestmentProjectSeqId is not None or
            self.InvestmentProjectYear is not None or
            self.InvestmentGoodsListKindCode is not None or
            self.InvestmentProjectGoodsSeqId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='InvestmentGoodsIdDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InvestmentGoodsIdDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InvestmentGoodsIdDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InvestmentGoodsIdDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InvestmentGoodsIdDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='InvestmentGoodsIdDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='InvestmentGoodsIdDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.InvestmentProjectSeqId is not None:
            namespaceprefix_ = self.InvestmentProjectSeqId_nsprefix_ + ':' if (UseCapturedNS_ and self.InvestmentProjectSeqId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvestmentProjectSeqId>%s</%sInvestmentProjectSeqId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvestmentProjectSeqId), input_name='InvestmentProjectSeqId')), namespaceprefix_ , eol_))
        if self.InvestmentProjectYear is not None:
            namespaceprefix_ = self.InvestmentProjectYear_nsprefix_ + ':' if (UseCapturedNS_ and self.InvestmentProjectYear_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvestmentProjectYear>%s</%sInvestmentProjectYear>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvestmentProjectYear), input_name='InvestmentProjectYear')), namespaceprefix_ , eol_))
        if self.InvestmentGoodsListKindCode is not None:
            namespaceprefix_ = self.InvestmentGoodsListKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InvestmentGoodsListKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvestmentGoodsListKindCode>%s</%sInvestmentGoodsListKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvestmentGoodsListKindCode), input_name='InvestmentGoodsListKindCode')), namespaceprefix_ , eol_))
        if self.InvestmentProjectGoodsSeqId is not None:
            namespaceprefix_ = self.InvestmentProjectGoodsSeqId_nsprefix_ + ':' if (UseCapturedNS_ and self.InvestmentProjectGoodsSeqId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvestmentProjectGoodsSeqId>%s</%sInvestmentProjectGoodsSeqId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InvestmentProjectGoodsSeqId), input_name='InvestmentProjectGoodsSeqId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'InvestmentProjectSeqId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InvestmentProjectSeqId')
            value_ = self.gds_validate_string(value_, node, 'InvestmentProjectSeqId')
            self.InvestmentProjectSeqId = value_
            self.InvestmentProjectSeqId_nsprefix_ = child_.prefix
            # validate type Code4Type
            self.validate_Code4Type(self.InvestmentProjectSeqId)
        elif nodeName_ == 'InvestmentProjectYear':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InvestmentProjectYear')
            value_ = self.gds_validate_string(value_, node, 'InvestmentProjectYear')
            self.InvestmentProjectYear = value_
            self.InvestmentProjectYear_nsprefix_ = child_.prefix
            # validate type DateYearCustType
            self.validate_DateYearCustType(self.InvestmentProjectYear)
        elif nodeName_ == 'InvestmentGoodsListKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InvestmentGoodsListKindCode')
            value_ = self.gds_validate_string(value_, node, 'InvestmentGoodsListKindCode')
            self.InvestmentGoodsListKindCode = value_
            self.InvestmentGoodsListKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.InvestmentGoodsListKindCode)
        elif nodeName_ == 'InvestmentProjectGoodsSeqId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InvestmentProjectGoodsSeqId')
            value_ = self.gds_validate_string(value_, node, 'InvestmentProjectGoodsSeqId')
            self.InvestmentProjectGoodsSeqId = value_
            self.InvestmentProjectGoodsSeqId_nsprefix_ = child_.prefix
            # validate type Code9Type
            self.validate_Code9Type(self.InvestmentProjectGoodsSeqId)
# end class InvestmentGoodsIdDetailsType


class IPObjectRegistryNumType(GeneratedsSuper):
    """IPObjectRegistryNumType -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    о
    б
    ъ
    е
    к
    т
    а
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    п
    о
    р
    е
    е
    с
    т
    р
    у
    о
    б
    ъ
    е
    к
    т
    о
    в
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    DocumentModeCode -- Т
    и
    п
    р
    е
    е
    с
    т
    р
    а
    о
    б
    ъ
    е
    к
    т
    о
    в
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    : 1 -
    е
    д
    и
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    р
    е
    е
    с
    т
    р
    о
    б
    ъ
    е
    к
    т
    о
    в
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    -
    ч
    л
    е
    н
    о
    в
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    ; 2 -
    н
    а
    ц
    и
    о
    н
    а
    л
    ь
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    р
    е
    е
    с
    т
    р
    о
    б
    ъ
    е
    к
    т
    о
    в
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    CountryCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    IPORegistryNumber -- Н
    о
    м
    е
    р
    о
    б
    ъ
    е
    к
    т
    а
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    п
    о
    р
    е
    е
    с
    т
    р
    у
    о
    б
    ъ
    е
    к
    т
    о
    в
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocumentModeCode=None, CountryCode=None, IPORegistryNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.DocumentModeCode = DocumentModeCode
        self.validate_LetterIndicatorType(self.DocumentModeCode)
        self.DocumentModeCode_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.IPORegistryNumber = IPORegistryNumber
        self.validate_IPORegistryNumberType(self.IPORegistryNumber)
        self.IPORegistryNumber_nsprefix_ = "cltESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IPObjectRegistryNumType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IPObjectRegistryNumType.subclass:
            return IPObjectRegistryNumType.subclass(*args_, **kwargs_)
        else:
            return IPObjectRegistryNumType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentModeCode(self):
        return self.DocumentModeCode
    def set_DocumentModeCode(self, DocumentModeCode):
        self.DocumentModeCode = DocumentModeCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_IPORegistryNumber(self):
        return self.IPORegistryNumber
    def set_IPORegistryNumber(self, IPORegistryNumber):
        self.IPORegistryNumber = IPORegistryNumber
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_IPORegistryNumberType(self, value):
        result = True
        # Validate type IPORegistryNumberType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_IPORegistryNumberType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_IPORegistryNumberType_patterns_, ))
                result = False
        return result
    validate_IPORegistryNumberType_patterns_ = [['^((\\d{1,4})|(\\d{5}/[А-Я]{2}-\\d{6})|(\\d{5}/\\d{6}/\\d{2}-[А-Я]{2}-\\d{6})|(\\d{5}/\\d{5}-\\d{3}/[А-Я]{2}-\\d{6})|(\\d{5}/[А-Я]{2}-\\d{4}-\\d{6}))$']]
    def has__content(self):
        if (
            self.DocumentModeCode is not None or
            self.CountryCode is not None or
            self.IPORegistryNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='IPObjectRegistryNumType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IPObjectRegistryNumType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IPObjectRegistryNumType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IPObjectRegistryNumType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IPObjectRegistryNumType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='IPObjectRegistryNumType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='IPObjectRegistryNumType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentModeCode is not None:
            namespaceprefix_ = self.DocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentModeCode>%s</%sDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentModeCode), input_name='DocumentModeCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.IPORegistryNumber is not None:
            namespaceprefix_ = self.IPORegistryNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.IPORegistryNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIPORegistryNumber>%s</%sIPORegistryNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IPORegistryNumber), input_name='IPORegistryNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'DocumentModeCode')
            self.DocumentModeCode = value_
            self.DocumentModeCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.DocumentModeCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'IPORegistryNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IPORegistryNumber')
            value_ = self.gds_validate_string(value_, node, 'IPORegistryNumber')
            self.IPORegistryNumber = value_
            self.IPORegistryNumber_nsprefix_ = child_.prefix
            # validate type IPORegistryNumberType
            self.validate_IPORegistryNumberType(self.IPORegistryNumber)
# end class IPObjectRegistryNumType


class LicenseGoodsType(GeneratedsSuper):
    """LicenseGoodsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    м
    т
    о
    в
    а
    р
    е
    п
    о
    л
    и
    ц
    е
    н
    з
    и
    и
    AppNumber -- Н
    о
    м
    е
    р
    п
    р
    и
    л
    о
    ж
    е
    н
    и
    я
    /
    п
    е
    р
    е
    ч
    н
    я
    к
    л
    и
    ц
    е
    н
    з
    и
    и
      
    * GoodsNumericLic -- П
      о
      р
      я
      д
      к
      о
      в
      ы
      й
      н
      о
      м
      е
      р
      д
      е
      к
      л
      а
      р
      и
      р
      у
      е
      м
      о
      г
      о
      т
      о
      в
      а
      р
      а
      п
      о
      п
      р
      и
      л
      о
      ж
      е
      н
      и
      ю
      /
      п
      е
      р
      е
      ч
      н
      ю
      к
      л
      и
      ц
      е
      н
      з
      и
      и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AppNumber=None, GoodsNumericLic=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.AppNumber = AppNumber
        self.validate_Count3Type(self.AppNumber)
        self.AppNumber_nsprefix_ = "clt_ru"
        self.GoodsNumericLic = GoodsNumericLic
        self.validate_Count6Type(self.GoodsNumericLic)
        self.GoodsNumericLic_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseGoodsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseGoodsType.subclass:
            return LicenseGoodsType.subclass(*args_, **kwargs_)
        else:
            return LicenseGoodsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AppNumber(self):
        return self.AppNumber
    def set_AppNumber(self, AppNumber):
        self.AppNumber = AppNumber
    def get_GoodsNumericLic(self):
        return self.GoodsNumericLic
    def set_GoodsNumericLic(self, GoodsNumericLic):
        self.GoodsNumericLic = GoodsNumericLic
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count6Type(self, value):
        result = True
        # Validate type Count6Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count6Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count6Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.AppNumber is not None or
            self.GoodsNumericLic is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='LicenseGoodsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseGoodsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenseGoodsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseGoodsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenseGoodsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='LicenseGoodsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='LicenseGoodsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AppNumber is not None:
            namespaceprefix_ = self.AppNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AppNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppNumber>%s</%sAppNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.AppNumber, input_name='AppNumber'), namespaceprefix_ , eol_))
        if self.GoodsNumericLic is not None:
            namespaceprefix_ = self.GoodsNumericLic_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsNumericLic_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsNumericLic>%s</%sGoodsNumericLic>%s' % (namespaceprefix_ , self.gds_format_integer(self.GoodsNumericLic, input_name='GoodsNumericLic'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AppNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'AppNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'AppNumber')
            self.AppNumber = ival_
            self.AppNumber_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.AppNumber)
        elif nodeName_ == 'GoodsNumericLic' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GoodsNumericLic')
            ival_ = self.gds_validate_integer(ival_, node, 'GoodsNumericLic')
            self.GoodsNumericLic = ival_
            self.GoodsNumericLic_nsprefix_ = child_.prefix
            # validate type Count6Type
            self.validate_Count6Type(self.GoodsNumericLic)
# end class LicenseGoodsType


class LicenseGroupType(GeneratedsSuper):
    """LicenseGroupType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    р
    а
    з
    р
    е
    ш
    и
    т
    е
    л
    ь
    н
    о
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    к
    т
    о
    в
    а
    р
    н
    о
    й
    г
    р
    у
    п
    п
    е
    LicDocument -- Р
    а
    з
    р
    е
    ш
    и
    т
    е
    л
    ь
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    RecordId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    н
    о
    м
    е
    р
    з
    а
    п
    и
    с
    и
    в
    г
    р
    а
    ф
    е
    44
    GoodsNumericLic -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    в
    р
    а
    з
    р
    е
    ш
    и
    т
    е
    л
    ь
    н
    о
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LicDocument=None, RecordId=None, GoodsNumericLic=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.LicDocument = LicDocument
        self.LicDocument_nsprefix_ = "cat_ru"
        self.RecordId = RecordId
        self.validate_DocumentIDType(self.RecordId)
        self.RecordId_nsprefix_ = "clt_ru"
        self.GoodsNumericLic = GoodsNumericLic
        self.validate_Count6Type(self.GoodsNumericLic)
        self.GoodsNumericLic_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LicenseGroupType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LicenseGroupType.subclass:
            return LicenseGroupType.subclass(*args_, **kwargs_)
        else:
            return LicenseGroupType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LicDocument(self):
        return self.LicDocument
    def set_LicDocument(self, LicDocument):
        self.LicDocument = LicDocument
    def get_RecordId(self):
        return self.RecordId
    def set_RecordId(self, RecordId):
        self.RecordId = RecordId
    def get_GoodsNumericLic(self):
        return self.GoodsNumericLic
    def set_GoodsNumericLic(self, GoodsNumericLic):
        self.GoodsNumericLic = GoodsNumericLic
    def validate_DocumentIDType(self, value):
        result = True
        # Validate type DocumentIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 36:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Count6Type(self, value):
        result = True
        # Validate type Count6Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count6Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count6Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.LicDocument is not None or
            self.RecordId is not None or
            self.GoodsNumericLic is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='LicenseGroupType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LicenseGroupType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LicenseGroupType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LicenseGroupType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LicenseGroupType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='LicenseGroupType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='LicenseGroupType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LicDocument is not None:
            namespaceprefix_ = self.LicDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.LicDocument_nsprefix_) else ''
            self.LicDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LicDocument', pretty_print=pretty_print)
        if self.RecordId is not None:
            namespaceprefix_ = self.RecordId_nsprefix_ + ':' if (UseCapturedNS_ and self.RecordId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecordId>%s</%sRecordId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecordId), input_name='RecordId')), namespaceprefix_ , eol_))
        if self.GoodsNumericLic is not None:
            namespaceprefix_ = self.GoodsNumericLic_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsNumericLic_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsNumericLic>%s</%sGoodsNumericLic>%s' % (namespaceprefix_ , self.gds_format_integer(self.GoodsNumericLic, input_name='GoodsNumericLic'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LicDocument':
            class_obj_ = self.get_class_obj_(child_, DocumentBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LicDocument = obj_
            obj_.original_tagname_ = 'LicDocument'
        elif nodeName_ == 'RecordId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecordId')
            value_ = self.gds_validate_string(value_, node, 'RecordId')
            self.RecordId = value_
            self.RecordId_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.RecordId)
        elif nodeName_ == 'GoodsNumericLic' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GoodsNumericLic')
            ival_ = self.gds_validate_integer(ival_, node, 'GoodsNumericLic')
            self.GoodsNumericLic = ival_
            self.GoodsNumericLic_nsprefix_ = child_.prefix
            # validate type Count6Type
            self.validate_Count6Type(self.GoodsNumericLic)
# end class LicenseGroupType


class ManufacturerAddressType(GeneratedsSuper):
    """ManufacturerAddressType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    а
    д
    р
    е
    с
    е
    п
    р
    о
    и
    з
    в
    о
    д
    и
    т
    е
    л
    я
    (
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    я
    )
    AddressKindCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    а
    д
    р
    е
    с
    а
    : "1" -
    а
    д
    р
    е
    с
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    ; "2" -
    ф
    а
    к
    т
    и
    ч
    е
    с
    к
    и
    й
    а
    д
    р
    е
    с
    ; "3" -
    п
    о
    ч
    т
    о
    в
    ы
    й
    а
    д
    р
    е
    с
    PostalCode -- П
    о
    ч
    т
    о
    в
    ы
    й
    и
    н
    д
    е
    к
    с
    CountryCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    CounryName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    з
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    Region -- Р
    е
    г
    и
    о
    н
    (
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    п
    е
    р
    в
    о
    г
    о
    у
    р
    о
    в
    н
    я
    )
    District -- Р
    а
    й
    о
    н
    (
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    в
    т
    о
    р
    о
    г
    о
    у
    р
    о
    в
    н
    я
    )
    Town -- Г
    о
    р
    о
    д
    City -- Н
    а
    с
    е
    л
    е
    н
    н
    ы
    й
    п
    у
    н
    к
    т
    StreetHouse -- У
    л
    и
    ц
    а
    (
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    э
    л
    е
    м
    е
    н
    т
    а
    у
    л
    и
    ч
    н
    о
    -
    д
    о
    р
    о
    ж
    н
    о
    й
    с
    е
    т
    и
    г
    о
    р
    о
    д
    с
    к
    о
    й
    и
    н
    ф
    р
    а
    с
    т
    р
    у
    к
    т
    у
    р
    ы
    )
    House -- О
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    д
    о
    м
    а
    ,
    к
    о
    р
    п
    у
    с
    а
    ,
    с
    т
    р
    о
    е
    н
    и
    я
    Room -- О
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    о
    ф
    и
    с
    а
    и
    л
    и
    к
    в
    а
    р
    т
    и
    р
    ы
    AddressText -- Н
    а
    б
    о
    р
    э
    л
    е
    м
    е
    н
    т
    о
    в
    а
    д
    р
    е
    с
    а
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    х
    в
    с
    в
    о
    б
    о
    д
    н
    о
    й
    ф
    о
    р
    м
    е
    в
    в
    и
    д
    е
    т
    е
    к
    с
    т
    а
    .
    OKTMO -- К
    о
    д
    О
    К
    Т
    М
    О
    (
    О
    б
    щ
    е
    р
    о
    с
    с
    и
    й
    с
    к
    и
    й
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    т
    е
    р
    р
    и
    т
    о
    р
    и
    й
    м
    у
    н
    и
    ц
    и
    п
    а
    л
    ь
    н
    ы
    х
    о
    б
    р
    а
    з
    о
    в
    а
    н
    и
    й
    )
    OKATO -- К
    о
    д
    О
    К
    А
    Т
    О
    (
    О
    б
    щ
    е
    р
    о
    с
    с
    и
    й
    с
    к
    и
    й
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    б
    ъ
    е
    к
    т
    о
    в
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    )
    KLADR -- К
    о
    д
    К
    Л
    А
    Д
    Р
    AOGUID -- Г
    л
    о
    б
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    д
    р
    е
    с
    н
    о
    г
    о
    о
    б
    ъ
    е
    к
    т
    а
    п
    о
    Ф
    И
    А
    С
    AOID -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    д
    р
    е
    с
    н
    о
    г
    о
    о
    б
    ъ
    е
    к
    т
    а
    п
    о
    Ф
    И
    А
    С
    TerritoryCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    PostOfficeBoxId -- Н
    о
    м
    е
    р
    а
    б
    о
    н
    е
    н
    т
    с
    к
    о
    г
    о
    я
    щ
    и
    к
    а
    н
    а
    п
    р
    е
    д
    п
    р
    и
    я
    т
    и
    и
    п
    о
    ч
    т
    о
    в
    о
    й
    с
    в
    я
    з
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressKindCode=None, PostalCode=None, CountryCode=None, CounryName=None, Region=None, District=None, Town=None, City=None, StreetHouse=None, House=None, Room=None, AddressText=None, OKTMO=None, OKATO=None, KLADR=None, AOGUID=None, AOID=None, TerritoryCode=None, PostOfficeBoxId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.AddressKindCode = AddressKindCode
        self.validate_CodeVariable20Type(self.AddressKindCode)
        self.AddressKindCode_nsprefix_ = "clt_ru"
        self.PostalCode = PostalCode
        self.validate_PostalCodeType(self.PostalCode)
        self.PostalCode_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.CounryName = CounryName
        self.validate_CountryNameType(self.CounryName)
        self.CounryName_nsprefix_ = "clt_ru"
        self.Region = Region
        self.validate_NameType(self.Region)
        self.Region_nsprefix_ = "clt_ru"
        self.District = District
        self.validate_NameType(self.District)
        self.District_nsprefix_ = "clt_ru"
        self.Town = Town
        self.validate_NameType(self.Town)
        self.Town_nsprefix_ = "clt_ru"
        self.City = City
        self.validate_NameType(self.City)
        self.City_nsprefix_ = "clt_ru"
        self.StreetHouse = StreetHouse
        self.validate_NameType(self.StreetHouse)
        self.StreetHouse_nsprefix_ = "clt_ru"
        self.House = House
        self.validate_Text50Type(self.House)
        self.House_nsprefix_ = "clt_ru"
        self.Room = Room
        self.validate_CodeVariable20Type(self.Room)
        self.Room_nsprefix_ = "clt_ru"
        if AddressText is None:
            self.AddressText = []
        else:
            self.AddressText = AddressText
        self.AddressText_nsprefix_ = "clt_ru"
        self.OKTMO = OKTMO
        self.validate_CodeVariable11Type(self.OKTMO)
        self.OKTMO_nsprefix_ = "clt_ru"
        self.OKATO = OKATO
        self.validate_OKATOCodeType(self.OKATO)
        self.OKATO_nsprefix_ = "clt_ru"
        self.KLADR = KLADR
        self.validate_CodeVariable20Type(self.KLADR)
        self.KLADR_nsprefix_ = "clt_ru"
        self.AOGUID = AOGUID
        self.validate_DocumentIDType(self.AOGUID)
        self.AOGUID_nsprefix_ = "clt_ru"
        self.AOID = AOID
        self.validate_DocumentIDType(self.AOID)
        self.AOID_nsprefix_ = "clt_ru"
        self.TerritoryCode = TerritoryCode
        self.validate_TerritoryCodeType(self.TerritoryCode)
        self.TerritoryCode_nsprefix_ = "clt_ru"
        self.PostOfficeBoxId = PostOfficeBoxId
        self.validate_CodeVariable20Type(self.PostOfficeBoxId)
        self.PostOfficeBoxId_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManufacturerAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManufacturerAddressType.subclass:
            return ManufacturerAddressType.subclass(*args_, **kwargs_)
        else:
            return ManufacturerAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressKindCode(self):
        return self.AddressKindCode
    def set_AddressKindCode(self, AddressKindCode):
        self.AddressKindCode = AddressKindCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CounryName(self):
        return self.CounryName
    def set_CounryName(self, CounryName):
        self.CounryName = CounryName
    def get_Region(self):
        return self.Region
    def set_Region(self, Region):
        self.Region = Region
    def get_District(self):
        return self.District
    def set_District(self, District):
        self.District = District
    def get_Town(self):
        return self.Town
    def set_Town(self, Town):
        self.Town = Town
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StreetHouse(self):
        return self.StreetHouse
    def set_StreetHouse(self, StreetHouse):
        self.StreetHouse = StreetHouse
    def get_House(self):
        return self.House
    def set_House(self, House):
        self.House = House
    def get_Room(self):
        return self.Room
    def set_Room(self, Room):
        self.Room = Room
    def get_AddressText(self):
        return self.AddressText
    def set_AddressText(self, AddressText):
        self.AddressText = AddressText
    def add_AddressText(self, value):
        self.AddressText.append(value)
    def insert_AddressText_at(self, index, value):
        self.AddressText.insert(index, value)
    def replace_AddressText_at(self, index, value):
        self.AddressText[index] = value
    def get_OKTMO(self):
        return self.OKTMO
    def set_OKTMO(self, OKTMO):
        self.OKTMO = OKTMO
    def get_OKATO(self):
        return self.OKATO
    def set_OKATO(self, OKATO):
        self.OKATO = OKATO
    def get_KLADR(self):
        return self.KLADR
    def set_KLADR(self, KLADR):
        self.KLADR = KLADR
    def get_AOGUID(self):
        return self.AOGUID
    def set_AOGUID(self, AOGUID):
        self.AOGUID = AOGUID
    def get_AOID(self):
        return self.AOID
    def set_AOID(self, AOID):
        self.AOID = AOID
    def get_TerritoryCode(self):
        return self.TerritoryCode
    def set_TerritoryCode(self, TerritoryCode):
        self.TerritoryCode = TerritoryCode
    def get_PostOfficeBoxId(self):
        return self.PostOfficeBoxId
    def set_PostOfficeBoxId(self, PostOfficeBoxId):
        self.PostOfficeBoxId = PostOfficeBoxId
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_PostalCodeType(self, value):
        result = True
        # Validate type PostalCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PostalCodeType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PostalCodeType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText500Type(self, value):
        result = True
        # Validate type FreeText500Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 500:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText500Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText500Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable11Type(self, value):
        result = True
        # Validate type CodeVariable11Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable11Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable11Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_OKATOCodeType(self, value):
        result = True
        # Validate type OKATOCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_OKATOCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_OKATOCodeType_patterns_, ))
                result = False
        return result
    validate_OKATOCodeType_patterns_ = [['^(\\d{5,11})$']]
    def validate_DocumentIDType(self, value):
        result = True
        # Validate type DocumentIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 36:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_TerritoryCodeType(self, value):
        result = True
        # Validate type TerritoryCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TerritoryCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TerritoryCodeType_patterns_, ))
                result = False
        return result
    validate_TerritoryCodeType_patterns_ = [['^(\\d{8,17})$']]
    def has__content(self):
        if (
            self.AddressKindCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None or
            self.CounryName is not None or
            self.Region is not None or
            self.District is not None or
            self.Town is not None or
            self.City is not None or
            self.StreetHouse is not None or
            self.House is not None or
            self.Room is not None or
            self.AddressText or
            self.OKTMO is not None or
            self.OKATO is not None or
            self.KLADR is not None or
            self.AOGUID is not None or
            self.AOID is not None or
            self.TerritoryCode is not None or
            self.PostOfficeBoxId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ManufacturerAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManufacturerAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ManufacturerAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ManufacturerAddressType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ManufacturerAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ManufacturerAddressType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ManufacturerAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressKindCode is not None:
            namespaceprefix_ = self.AddressKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressKindCode>%s</%sAddressKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressKindCode), input_name='AddressKindCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CounryName is not None:
            namespaceprefix_ = self.CounryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CounryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounryName>%s</%sCounryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounryName), input_name='CounryName')), namespaceprefix_ , eol_))
        if self.Region is not None:
            namespaceprefix_ = self.Region_nsprefix_ + ':' if (UseCapturedNS_ and self.Region_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegion>%s</%sRegion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Region), input_name='Region')), namespaceprefix_ , eol_))
        if self.District is not None:
            namespaceprefix_ = self.District_nsprefix_ + ':' if (UseCapturedNS_ and self.District_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDistrict>%s</%sDistrict>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.District), input_name='District')), namespaceprefix_ , eol_))
        if self.Town is not None:
            namespaceprefix_ = self.Town_nsprefix_ + ':' if (UseCapturedNS_ and self.Town_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTown>%s</%sTown>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Town), input_name='Town')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StreetHouse is not None:
            namespaceprefix_ = self.StreetHouse_nsprefix_ + ':' if (UseCapturedNS_ and self.StreetHouse_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStreetHouse>%s</%sStreetHouse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StreetHouse), input_name='StreetHouse')), namespaceprefix_ , eol_))
        if self.House is not None:
            namespaceprefix_ = self.House_nsprefix_ + ':' if (UseCapturedNS_ and self.House_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHouse>%s</%sHouse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.House), input_name='House')), namespaceprefix_ , eol_))
        if self.Room is not None:
            namespaceprefix_ = self.Room_nsprefix_ + ':' if (UseCapturedNS_ and self.Room_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoom>%s</%sRoom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Room), input_name='Room')), namespaceprefix_ , eol_))
        for AddressText_ in self.AddressText:
            namespaceprefix_ = self.AddressText_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressText>%s</%sAddressText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AddressText_), input_name='AddressText')), namespaceprefix_ , eol_))
        if self.OKTMO is not None:
            namespaceprefix_ = self.OKTMO_nsprefix_ + ':' if (UseCapturedNS_ and self.OKTMO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOKTMO>%s</%sOKTMO>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OKTMO), input_name='OKTMO')), namespaceprefix_ , eol_))
        if self.OKATO is not None:
            namespaceprefix_ = self.OKATO_nsprefix_ + ':' if (UseCapturedNS_ and self.OKATO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOKATO>%s</%sOKATO>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OKATO), input_name='OKATO')), namespaceprefix_ , eol_))
        if self.KLADR is not None:
            namespaceprefix_ = self.KLADR_nsprefix_ + ':' if (UseCapturedNS_ and self.KLADR_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKLADR>%s</%sKLADR>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KLADR), input_name='KLADR')), namespaceprefix_ , eol_))
        if self.AOGUID is not None:
            namespaceprefix_ = self.AOGUID_nsprefix_ + ':' if (UseCapturedNS_ and self.AOGUID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAOGUID>%s</%sAOGUID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AOGUID), input_name='AOGUID')), namespaceprefix_ , eol_))
        if self.AOID is not None:
            namespaceprefix_ = self.AOID_nsprefix_ + ':' if (UseCapturedNS_ and self.AOID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAOID>%s</%sAOID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AOID), input_name='AOID')), namespaceprefix_ , eol_))
        if self.TerritoryCode is not None:
            namespaceprefix_ = self.TerritoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TerritoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTerritoryCode>%s</%sTerritoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TerritoryCode), input_name='TerritoryCode')), namespaceprefix_ , eol_))
        if self.PostOfficeBoxId is not None:
            namespaceprefix_ = self.PostOfficeBoxId_nsprefix_ + ':' if (UseCapturedNS_ and self.PostOfficeBoxId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostOfficeBoxId>%s</%sPostOfficeBoxId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostOfficeBoxId), input_name='PostOfficeBoxId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AddressKindCode')
            value_ = self.gds_validate_string(value_, node, 'AddressKindCode')
            self.AddressKindCode = value_
            self.AddressKindCode_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.AddressKindCode)
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
            # validate type PostalCodeType
            self.validate_PostalCodeType(self.PostalCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'CounryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CounryName')
            value_ = self.gds_validate_string(value_, node, 'CounryName')
            self.CounryName = value_
            self.CounryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.CounryName)
        elif nodeName_ == 'Region':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Region')
            value_ = self.gds_validate_string(value_, node, 'Region')
            self.Region = value_
            self.Region_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.Region)
        elif nodeName_ == 'District':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'District')
            value_ = self.gds_validate_string(value_, node, 'District')
            self.District = value_
            self.District_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.District)
        elif nodeName_ == 'Town':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Town')
            value_ = self.gds_validate_string(value_, node, 'Town')
            self.Town = value_
            self.Town_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.Town)
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.City)
        elif nodeName_ == 'StreetHouse':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StreetHouse')
            value_ = self.gds_validate_string(value_, node, 'StreetHouse')
            self.StreetHouse = value_
            self.StreetHouse_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.StreetHouse)
        elif nodeName_ == 'House':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'House')
            value_ = self.gds_validate_string(value_, node, 'House')
            self.House = value_
            self.House_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.House)
        elif nodeName_ == 'Room':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Room')
            value_ = self.gds_validate_string(value_, node, 'Room')
            self.Room = value_
            self.Room_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.Room)
        elif nodeName_ == 'AddressText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressText')
            value_ = self.gds_validate_string(value_, node, 'AddressText')
            self.AddressText.append(value_)
            self.AddressText_nsprefix_ = child_.prefix
            # validate type FreeText500Type
            self.validate_FreeText500Type(self.AddressText[-1])
        elif nodeName_ == 'OKTMO':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OKTMO')
            value_ = self.gds_validate_string(value_, node, 'OKTMO')
            self.OKTMO = value_
            self.OKTMO_nsprefix_ = child_.prefix
            # validate type CodeVariable11Type
            self.validate_CodeVariable11Type(self.OKTMO)
        elif nodeName_ == 'OKATO':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OKATO')
            value_ = self.gds_validate_string(value_, node, 'OKATO')
            self.OKATO = value_
            self.OKATO_nsprefix_ = child_.prefix
            # validate type OKATOCodeType
            self.validate_OKATOCodeType(self.OKATO)
        elif nodeName_ == 'KLADR':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'KLADR')
            value_ = self.gds_validate_string(value_, node, 'KLADR')
            self.KLADR = value_
            self.KLADR_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.KLADR)
        elif nodeName_ == 'AOGUID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AOGUID')
            value_ = self.gds_validate_string(value_, node, 'AOGUID')
            self.AOGUID = value_
            self.AOGUID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.AOGUID)
        elif nodeName_ == 'AOID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AOID')
            value_ = self.gds_validate_string(value_, node, 'AOID')
            self.AOID = value_
            self.AOID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.AOID)
        elif nodeName_ == 'TerritoryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TerritoryCode')
            value_ = self.gds_validate_string(value_, node, 'TerritoryCode')
            self.TerritoryCode = value_
            self.TerritoryCode_nsprefix_ = child_.prefix
            # validate type TerritoryCodeType
            self.validate_TerritoryCodeType(self.TerritoryCode)
        elif nodeName_ == 'PostOfficeBoxId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PostOfficeBoxId')
            value_ = self.gds_validate_string(value_, node, 'PostOfficeBoxId')
            self.PostOfficeBoxId = value_
            self.PostOfficeBoxId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.PostOfficeBoxId)
# end class ManufacturerAddressType


class MechanismUnitType(ComponentDescriptionType):
    """MechanismUnitType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    ф
    у
    н
    к
    ц
    и
    о
    н
    а
    л
    ь
    н
    о
    м
    б
    л
    о
    к
    е
    UnitDescription -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    Ф
    Б
    /
    Р
    а
    з
    д
    е
    л
    а
    с
    п
    и
    с
    к
    а
    (
    П
    Р
    О
    Ч
    И
    Е
    К
    О
    М
    П
    О
    Н
    Е
    Н
    Т
    Ы
    )
    MechUnitPart -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    м
    п
    о
    н
    е
    н
    т
    е
    ф
    у
    н
    к
    ц
    и
    о
    н
    а
    л
    ь
    н
    о
    г
    о
    б
    л
    о
    к
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ComponentDescriptionType
    def __init__(self, GoodsTNVEDCode=None, KGWeight=None, InvoicedCost=None, InvoiceCurrencyCode=None, SupplementaryQuantity=None, UnitDescription=None, MechUnitPart=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("MechanismUnitType"), self).__init__(GoodsTNVEDCode, KGWeight, InvoicedCost, InvoiceCurrencyCode, SupplementaryQuantity,  **kwargs_)
        self.UnitDescription = UnitDescription
        self.validate_FreeText250Type(self.UnitDescription)
        self.UnitDescription_nsprefix_ = "clt_ru"
        if MechUnitPart is None:
            self.MechUnitPart = []
        else:
            self.MechUnitPart = MechUnitPart
        self.MechUnitPart_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MechanismUnitType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MechanismUnitType.subclass:
            return MechanismUnitType.subclass(*args_, **kwargs_)
        else:
            return MechanismUnitType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitDescription(self):
        return self.UnitDescription
    def set_UnitDescription(self, UnitDescription):
        self.UnitDescription = UnitDescription
    def get_MechUnitPart(self):
        return self.MechUnitPart
    def set_MechUnitPart(self, MechUnitPart):
        self.MechUnitPart = MechUnitPart
    def add_MechUnitPart(self, value):
        self.MechUnitPart.append(value)
    def insert_MechUnitPart_at(self, index, value):
        self.MechUnitPart.insert(index, value)
    def replace_MechUnitPart_at(self, index, value):
        self.MechUnitPart[index] = value
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.UnitDescription is not None or
            self.MechUnitPart or
            super(MechanismUnitType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='MechanismUnitType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MechanismUnitType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MechanismUnitType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MechanismUnitType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MechanismUnitType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='MechanismUnitType'):
        super(MechanismUnitType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MechanismUnitType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='MechanismUnitType', fromsubclass_=False, pretty_print=True):
        super(MechanismUnitType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitDescription is not None:
            namespaceprefix_ = self.UnitDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitDescription>%s</%sUnitDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitDescription), input_name='UnitDescription')), namespaceprefix_ , eol_))
        for MechUnitPart_ in self.MechUnitPart:
            namespaceprefix_ = self.MechUnitPart_nsprefix_ + ':' if (UseCapturedNS_ and self.MechUnitPart_nsprefix_) else ''
            MechUnitPart_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MechUnitPart', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(MechanismUnitType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitDescription')
            value_ = self.gds_validate_string(value_, node, 'UnitDescription')
            self.UnitDescription = value_
            self.UnitDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.UnitDescription)
        elif nodeName_ == 'MechUnitPart':
            obj_ = MechUnitPartType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MechUnitPart.append(obj_)
            obj_.original_tagname_ = 'MechUnitPart'
        super(MechanismUnitType, self)._buildChildren(child_, node, nodeName_, True)
# end class MechanismUnitType


class MechUnitPartType(ComponentDescriptionType):
    """MechUnitPartType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    м
    п
    о
    н
    е
    н
    т
    е
    ф
    у
    н
    к
    ц
    и
    о
    н
    а
    л
    ь
    н
    о
    г
    о
    б
    л
    о
    к
    а
    PartDescription -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    к
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ComponentDescriptionType
    def __init__(self, GoodsTNVEDCode=None, KGWeight=None, InvoicedCost=None, InvoiceCurrencyCode=None, SupplementaryQuantity=None, PartDescription=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("MechUnitPartType"), self).__init__(GoodsTNVEDCode, KGWeight, InvoicedCost, InvoiceCurrencyCode, SupplementaryQuantity,  **kwargs_)
        self.PartDescription = PartDescription
        self.validate_FreeText250Type(self.PartDescription)
        self.PartDescription_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MechUnitPartType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MechUnitPartType.subclass:
            return MechUnitPartType.subclass(*args_, **kwargs_)
        else:
            return MechUnitPartType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PartDescription(self):
        return self.PartDescription
    def set_PartDescription(self, PartDescription):
        self.PartDescription = PartDescription
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PartDescription is not None or
            super(MechUnitPartType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='MechUnitPartType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MechUnitPartType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MechUnitPartType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MechUnitPartType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MechUnitPartType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='MechUnitPartType'):
        super(MechUnitPartType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MechUnitPartType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='MechUnitPartType', fromsubclass_=False, pretty_print=True):
        super(MechUnitPartType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PartDescription is not None:
            namespaceprefix_ = self.PartDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.PartDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPartDescription>%s</%sPartDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PartDescription), input_name='PartDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(MechUnitPartType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PartDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PartDescription')
            value_ = self.gds_validate_string(value_, node, 'PartDescription')
            self.PartDescription = value_
            self.PartDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.PartDescription)
        super(MechUnitPartType, self)._buildChildren(child_, node, nodeName_, True)
# end class MechUnitPartType


class PackagePalleteInformationType(GeneratedsSuper):
    """PackagePalleteInformationType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    г
    р
    у
    з
    е
    ,
    т
    а
    р
    е
    ,
    у
    п
    а
    к
    о
    в
    к
    е
    ,
    п
    о
    д
    д
    о
    н
    е
    InfoKindCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    ( 0
    –
    с
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    п
    а
    к
    о
    в
    к
    е
    ;
    1
    –
    с
    в
    е
    д
    е
    н
    и
    я
    о
    т
    а
    р
    е
    ;
    2
    –
    с
    в
    е
    д
    е
    н
    и
    я
    о
    г
    р
    у
    з
    е
    ;
    3
    –
    с
    в
    е
    д
    е
    н
    и
    я
    о
    п
    о
    д
    д
    о
    н
    а
    х
    ;
    4
    –
    с
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    н
    д
    и
    в
    и
    д
    у
    а
    л
    ь
    н
    о
    й
    у
    п
    а
    к
    о
    в
    к
    е
    )
    PalleteCode -- К
    о
    д
    в
    и
    д
    а
    г
    р
    у
    з
    а
    ,
    у
    п
    а
    к
    о
    в
    к
    и
    и
    л
    и
    у
    п
    а
    к
    о
    в
    о
    ч
    н
    о
    г
    о
    м
    а
    т
    е
    р
    и
    а
    л
    а
    PalleteQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    у
    п
    а
    к
    о
    в
    о
    к
    ,
    п
    о
    д
    д
    о
    н
    о
    в
    CargoDescriptionText -- О
    п
    и
    с
    а
    н
    и
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InfoKindCode=None, PalleteCode=None, PalleteQuantity=None, CargoDescriptionText=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.InfoKindCode = InfoKindCode
        self.validate_LetterIndicatorType(self.InfoKindCode)
        self.InfoKindCode_nsprefix_ = "clt_ru"
        self.PalleteCode = PalleteCode
        self.validate_PackageCodeType(self.PalleteCode)
        self.PalleteCode_nsprefix_ = "clt_ru"
        self.PalleteQuantity = PalleteQuantity
        self.validate_PackagesQuantityType(self.PalleteQuantity)
        self.PalleteQuantity_nsprefix_ = "clt_ru"
        if CargoDescriptionText is None:
            self.CargoDescriptionText = []
        else:
            self.CargoDescriptionText = CargoDescriptionText
        self.CargoDescriptionText_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PackagePalleteInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PackagePalleteInformationType.subclass:
            return PackagePalleteInformationType.subclass(*args_, **kwargs_)
        else:
            return PackagePalleteInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InfoKindCode(self):
        return self.InfoKindCode
    def set_InfoKindCode(self, InfoKindCode):
        self.InfoKindCode = InfoKindCode
    def get_PalleteCode(self):
        return self.PalleteCode
    def set_PalleteCode(self, PalleteCode):
        self.PalleteCode = PalleteCode
    def get_PalleteQuantity(self):
        return self.PalleteQuantity
    def set_PalleteQuantity(self, PalleteQuantity):
        self.PalleteQuantity = PalleteQuantity
    def get_CargoDescriptionText(self):
        return self.CargoDescriptionText
    def set_CargoDescriptionText(self, CargoDescriptionText):
        self.CargoDescriptionText = CargoDescriptionText
    def add_CargoDescriptionText(self, value):
        self.CargoDescriptionText.append(value)
    def insert_CargoDescriptionText_at(self, index, value):
        self.CargoDescriptionText.insert(index, value)
    def replace_CargoDescriptionText_at(self, index, value):
        self.CargoDescriptionText[index] = value
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_PackageCodeType(self, value):
        result = True
        # Validate type PackageCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on PackageCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_PackagesQuantityType(self, value):
        result = True
        # Validate type PackagesQuantityType, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on PackagesQuantityType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on PackagesQuantityType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.InfoKindCode is not None or
            self.PalleteCode is not None or
            self.PalleteQuantity is not None or
            self.CargoDescriptionText
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PackagePalleteInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PackagePalleteInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PackagePalleteInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PackagePalleteInformationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PackagePalleteInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='PackagePalleteInformationType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PackagePalleteInformationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InfoKindCode is not None:
            namespaceprefix_ = self.InfoKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InfoKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfoKindCode>%s</%sInfoKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InfoKindCode), input_name='InfoKindCode')), namespaceprefix_ , eol_))
        if self.PalleteCode is not None:
            namespaceprefix_ = self.PalleteCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PalleteCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalleteCode>%s</%sPalleteCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PalleteCode), input_name='PalleteCode')), namespaceprefix_ , eol_))
        if self.PalleteQuantity is not None:
            namespaceprefix_ = self.PalleteQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.PalleteQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPalleteQuantity>%s</%sPalleteQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.PalleteQuantity, input_name='PalleteQuantity'), namespaceprefix_ , eol_))
        for CargoDescriptionText_ in self.CargoDescriptionText:
            namespaceprefix_ = self.CargoDescriptionText_nsprefix_ + ':' if (UseCapturedNS_ and self.CargoDescriptionText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCargoDescriptionText>%s</%sCargoDescriptionText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(CargoDescriptionText_), input_name='CargoDescriptionText')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InfoKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InfoKindCode')
            value_ = self.gds_validate_string(value_, node, 'InfoKindCode')
            self.InfoKindCode = value_
            self.InfoKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.InfoKindCode)
        elif nodeName_ == 'PalleteCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PalleteCode')
            value_ = self.gds_validate_string(value_, node, 'PalleteCode')
            self.PalleteCode = value_
            self.PalleteCode_nsprefix_ = child_.prefix
            # validate type PackageCodeType
            self.validate_PackageCodeType(self.PalleteCode)
        elif nodeName_ == 'PalleteQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PalleteQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'PalleteQuantity')
            self.PalleteQuantity = ival_
            self.PalleteQuantity_nsprefix_ = child_.prefix
            # validate type PackagesQuantityType
            self.validate_PackagesQuantityType(self.PalleteQuantity)
        elif nodeName_ == 'CargoDescriptionText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CargoDescriptionText')
            value_ = self.gds_validate_string(value_, node, 'CargoDescriptionText')
            self.CargoDescriptionText.append(value_)
            self.CargoDescriptionText_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.CargoDescriptionText[-1])
# end class PackagePalleteInformationType


class PIRegNumberType(GeneratedsSuper):
    """PIRegNumberType -- Р
    е
    г
    и
    с
    т
    а
    р
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    п
    р
    е
    д
    в
    а
    р
    и
    т
    е
    л
    ь
    н
    о
    й
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    CountryCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    Date -- Д
    а
    т
    а
    р
    е
    г
    и
    с
    т
    а
    р
    ц
    и
    и
      
    * PINumber -- П
      о
      р
      я
      д
      к
      о
      в
      ы
      й
      и
      д
      е
      н
      т
      и
      ф
      и
      к
      а
      т
      о
      р
      ,
      п
      р
      и
      с
      в
      а
      и
      в
      а
      е
      м
      ы
      й
      п
      р
      и
      р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, Date=None, PINumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = "clt_ru"
        self.PINumber = PINumber
        self.validate_Code9Type(self.PINumber)
        self.PINumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PIRegNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PIRegNumberType.subclass:
            return PIRegNumberType.subclass(*args_, **kwargs_)
        else:
            return PIRegNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_PINumber(self):
        return self.PINumber
    def set_PINumber(self, PINumber):
        self.PINumber = PINumber
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_Code9Type(self, value):
        result = True
        # Validate type Code9Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code9Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CountryCode is not None or
            self.Date is not None or
            self.PINumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PIRegNumberType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PIRegNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PIRegNumberType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PIRegNumberType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PIRegNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='PIRegNumberType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PIRegNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.PINumber is not None:
            namespaceprefix_ = self.PINumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PINumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPINumber>%s</%sPINumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PINumber), input_name='PINumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.Date)
        elif nodeName_ == 'PINumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PINumber')
            value_ = self.gds_validate_string(value_, node, 'PINumber')
            self.PINumber = value_
            self.PINumber_nsprefix_ = child_.prefix
            # validate type Code9Type
            self.validate_Code9Type(self.PINumber)
# end class PIRegNumberType


class PrecedingDocumentType(GeneratedsSuper):
    """PrecedingDocumentType -- П
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    и
    й
    д
    о
    к
    у
    м
    е
    н
    т
    LineNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    с
    т
    р
    о
    к
    и
    PrecedingDocumentID -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrecedingDocumentCustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrecedingDocumentDate -- П
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    и
    й
    д
    о
    к
    у
    м
    е
    н
    т
    -
    д
    а
    т
    а
      
    * PrecedingDocumentNumber -- П
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      и
      й
      д
      о
      к
      у
      м
      е
      н
      т
      -
      р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      о
      н
      н
      ы
      й
      н
      о
      м
      е
      р
      д
      е
      к
      л
      а
      р
      а
      ц
      и
      и
      н
      а
      т
      о
      в
      а
      р
      ы
      ,
      т
      р
      а
      н
      з
      и
      т
      н
      о
      й
      д
      е
      к
      л
      а
      р
      а
      ц
      и
      и
      ,
      з
      а
      я
      в
      л
      е
      н
      и
      я
      о
      в
      ы
      п
      у
      с
      к
      е
      т
      о
      в
      а
      р
      о
      в
      д
      о
      п
      о
      д
      а
      ч
      и
      д
      е
      к
      л
      а
      р
      а
      ц
      и
      и
      н
      а
      т
      о
      в
      а
      р
      ы
      и
      л
      и
      з
      а
      я
      в
      л
      е
      н
      и
      я
      о
      с
      о
      в
      е
      р
      ш
      е
      н
      и
      и
      о
      п
      е
      р
      а
      ц
      и
      й
      в
      о
      т
      н
      о
      ш
      е
      н
      и
      и
      в
      р
      е
      м
      е
      н
      н
      о
      в
      ы
      в
      е
      з
      е
      н
      н
      ы
      х
      т
      р
      а
      н
      с
      п
      о
      р
      т
      н
      ы
      х
      с
      р
      е
      д
      с
      т
      в
      м
      е
      ж
      д
      у
      н
      а
      р
      о
      д
      н
      о
      й
      п
      е
      р
      е
      в
      о
      з
      к
      и
      ,
      я
      в
      л
      я
      ю
      щ
      и
      х
      с
      я
      т
      о
      в
      а
      р
      а
      м
      и
      ,
      п
      о
      м
      е
      щ
      е
      н
      н
      ы
      м
      и
      п
      о
      д
      т
      а
      м
      о
      ж
      е
      н
      н
      у
      ю
      п
      р
      о
      ц
      е
      д
      у
      р
      у
      в
      р
      е
      м
      е
      н
      н
      о
      г
      о
      в
      в
      о
      з
      а
      (
      д
      о
      п
      у
      с
      к
      а
      )
    * PrecedingDocumentOrdinalId -- П
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      и
      й
      д
      о
      к
      у
      м
      е
      н
      т
      -
      Н
      о
      м
      е
      р
      (
      и
      д
      е
      н
      т
      и
      ф
      и
      к
      а
      т
      о
      р
      )
      в
      н
      о
      с
      и
      м
      ы
      х
      и
      з
      м
      е
      н
      е
      н
      и
      й
      и
      (
      и
      л
      и
      )
      д
      о
      п
      о
      л
      н
      е
      н
      и
      й
    * AddNumberPart -- П
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      и
      й
      д
      о
      к
      у
      м
      е
      н
      т
      -
      д
      о
      п
      о
      л
      н
      и
      т
      е
      л
      ь
      н
      а
      я
      с
      о
      с
      т
      а
      в
      л
      я
      ю
      щ
      а
      я
      3
      е
      й
      ч
      а
      с
      т
      и
      н
      о
      м
      е
      р
      а
      
    * DTMDocDetails -- Р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      о
      н
      н
      ы
      й
      н
      о
      м
      е
      р
      д
      е
      к
      л
      а
      р
      а
      ц
      и
      и
      н
      а
      т
      р
      а
      н
      с
      п
      о
      р
      т
      н
      о
      е
      с
      р
      е
      д
      с
      т
      в
      о
    * PIDocumentNumber -- Р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      о
      н
      н
      ы
      й
      н
      о
      м
      е
      р
      п
      р
      е
      д
      в
      а
      р
      и
      т
      е
      л
      ь
      н
      о
      й
      и
      н
      ф
      о
      р
      м
      а
      ц
      и
      и
    * TIRIdDetails -- Р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      о
      н
      н
      ы
      й
      н
      о
      м
      е
      р
      к
      н
      и
      ж
      к
      и
      М
      Д
      П
    * OtherPrDocumentNumber -- Р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      о
      н
      н
      ы
      й
      н
      о
      м
      е
      р
      и
      н
      о
      г
      о
      п
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      е
      г
      о
      д
      о
      к
      у
      м
      е
      н
      т
      а
    * OtherPrDocumentDate -- Д
      а
      т
      а
      р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      и
      и
      н
      о
      г
      о
      п
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      е
      г
      о
      д
      о
      к
      у
      м
      е
      н
      т
      а
      
    * PrecedingDocumentGoodsNumeric -- Н
      о
      м
      е
      р
      т
      о
      в
      а
      р
      а
      в
      п
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      е
      м
      д
      о
      к
      у
      м
      е
      н
      т
      е
      
    * PrecedingDocumentName -- Н
      а
      и
      м
      е
      н
      о
      в
      а
      н
      и
      е
      п
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      е
      г
      о
      д
      о
      к
      у
      м
      е
      н
      т
      а
    * PrecedingDocumentModeCode -- К
      о
      д
      в
      и
      д
      а
      п
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      е
      г
      о
      д
      о
      к
      у
      м
      е
      н
      т
      а
      в
      с
      о
      о
      т
      в
      е
      т
      с
      т
      в
      и
      и
      с
      к
      л
      а
      с
      с
      и
      ф
      и
      к
      а
      т
      о
      р
      о
      м
      в
      и
      д
      о
      в
      д
      о
      к
      у
      м
      е
      н
      т
      о
      в
    * PrcDocGoodsTNVEDCode -- К
      о
      д
      т
      о
      в
      а
      р
      а
      п
      о
      Т
      Н
      В
      Э
      Д
      Е
      А
      Э
      С
      в
      п
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      е
      м
      д
      о
      к
      у
      м
      е
      н
      т
      е
      (
      д
      л
      я
      Р
      Ф
      и
      К
      Р
      )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineNumber=None, PrecedingDocumentID=None, PrecedingDocumentCustomsCode=None, PrecedingDocumentDate=None, PrecedingDocumentNumber=None, PrecedingDocumentOrdinalId=None, AddNumberPart=None, DTMDocDetails=None, PIDocumentNumber=None, TIRIdDetails=None, OtherPrDocumentNumber=None, OtherPrDocumentDate=None, PrecedingDocumentGoodsNumeric=None, PrecedingDocumentName=None, PrecedingDocumentModeCode=None, PrcDocGoodsTNVEDCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.LineNumber = LineNumber
        self.validate_SheetNumberType(self.LineNumber)
        self.LineNumber_nsprefix_ = "clt_ru"
        self.PrecedingDocumentID = PrecedingDocumentID
        self.validate_Numeric1Type(self.PrecedingDocumentID)
        self.PrecedingDocumentID_nsprefix_ = "clt_ru"
        self.PrecedingDocumentCustomsCode = PrecedingDocumentCustomsCode
        self.validate_CustomsCodeType(self.PrecedingDocumentCustomsCode)
        self.PrecedingDocumentCustomsCode_nsprefix_ = "clt_ru"
        if isinstance(PrecedingDocumentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PrecedingDocumentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PrecedingDocumentDate
        self.PrecedingDocumentDate = initvalue_
        self.PrecedingDocumentDate_nsprefix_ = "clt_ru"
        self.PrecedingDocumentNumber = PrecedingDocumentNumber
        self.validate_PrecedingDocumentNumberType(self.PrecedingDocumentNumber)
        self.PrecedingDocumentNumber_nsprefix_ = "clt_ru"
        self.PrecedingDocumentOrdinalId = PrecedingDocumentOrdinalId
        self.validate_CodeVariable2Type(self.PrecedingDocumentOrdinalId)
        self.PrecedingDocumentOrdinalId_nsprefix_ = "clt_ru"
        self.AddNumberPart = AddNumberPart
        self.validate_CodeVariable2Type(self.AddNumberPart)
        self.AddNumberPart_nsprefix_ = "clt_ru"
        self.DTMDocDetails = DTMDocDetails
        self.DTMDocDetails_nsprefix_ = "catESAD_cu"
        self.PIDocumentNumber = PIDocumentNumber
        self.PIDocumentNumber_nsprefix_ = "catESAD_cu"
        self.TIRIdDetails = TIRIdDetails
        self.TIRIdDetails_nsprefix_ = "catESAD_cu"
        self.OtherPrDocumentNumber = OtherPrDocumentNumber
        self.validate_DocumentNumberType(self.OtherPrDocumentNumber)
        self.OtherPrDocumentNumber_nsprefix_ = "clt_ru"
        if isinstance(OtherPrDocumentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OtherPrDocumentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OtherPrDocumentDate
        self.OtherPrDocumentDate = initvalue_
        self.OtherPrDocumentDate_nsprefix_ = "clt_ru"
        self.PrecedingDocumentGoodsNumeric = PrecedingDocumentGoodsNumeric
        self.validate_Count3Type(self.PrecedingDocumentGoodsNumeric)
        self.PrecedingDocumentGoodsNumeric_nsprefix_ = "clt_ru"
        self.PrecedingDocumentName = PrecedingDocumentName
        self.validate_DocumentNameType(self.PrecedingDocumentName)
        self.PrecedingDocumentName_nsprefix_ = "clt_ru"
        self.PrecedingDocumentModeCode = PrecedingDocumentModeCode
        self.validate_CustomsDocumentCodeType(self.PrecedingDocumentModeCode)
        self.PrecedingDocumentModeCode_nsprefix_ = "clt_ru"
        self.PrcDocGoodsTNVEDCode = PrcDocGoodsTNVEDCode
        self.validate_CUGoodsNomenclatuerCodeType(self.PrcDocGoodsTNVEDCode)
        self.PrcDocGoodsTNVEDCode_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrecedingDocumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrecedingDocumentType.subclass:
            return PrecedingDocumentType.subclass(*args_, **kwargs_)
        else:
            return PrecedingDocumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineNumber(self):
        return self.LineNumber
    def set_LineNumber(self, LineNumber):
        self.LineNumber = LineNumber
    def get_PrecedingDocumentID(self):
        return self.PrecedingDocumentID
    def set_PrecedingDocumentID(self, PrecedingDocumentID):
        self.PrecedingDocumentID = PrecedingDocumentID
    def get_PrecedingDocumentCustomsCode(self):
        return self.PrecedingDocumentCustomsCode
    def set_PrecedingDocumentCustomsCode(self, PrecedingDocumentCustomsCode):
        self.PrecedingDocumentCustomsCode = PrecedingDocumentCustomsCode
    def get_PrecedingDocumentDate(self):
        return self.PrecedingDocumentDate
    def set_PrecedingDocumentDate(self, PrecedingDocumentDate):
        self.PrecedingDocumentDate = PrecedingDocumentDate
    def get_PrecedingDocumentNumber(self):
        return self.PrecedingDocumentNumber
    def set_PrecedingDocumentNumber(self, PrecedingDocumentNumber):
        self.PrecedingDocumentNumber = PrecedingDocumentNumber
    def get_PrecedingDocumentOrdinalId(self):
        return self.PrecedingDocumentOrdinalId
    def set_PrecedingDocumentOrdinalId(self, PrecedingDocumentOrdinalId):
        self.PrecedingDocumentOrdinalId = PrecedingDocumentOrdinalId
    def get_AddNumberPart(self):
        return self.AddNumberPart
    def set_AddNumberPart(self, AddNumberPart):
        self.AddNumberPart = AddNumberPart
    def get_DTMDocDetails(self):
        return self.DTMDocDetails
    def set_DTMDocDetails(self, DTMDocDetails):
        self.DTMDocDetails = DTMDocDetails
    def get_PIDocumentNumber(self):
        return self.PIDocumentNumber
    def set_PIDocumentNumber(self, PIDocumentNumber):
        self.PIDocumentNumber = PIDocumentNumber
    def get_TIRIdDetails(self):
        return self.TIRIdDetails
    def set_TIRIdDetails(self, TIRIdDetails):
        self.TIRIdDetails = TIRIdDetails
    def get_OtherPrDocumentNumber(self):
        return self.OtherPrDocumentNumber
    def set_OtherPrDocumentNumber(self, OtherPrDocumentNumber):
        self.OtherPrDocumentNumber = OtherPrDocumentNumber
    def get_OtherPrDocumentDate(self):
        return self.OtherPrDocumentDate
    def set_OtherPrDocumentDate(self, OtherPrDocumentDate):
        self.OtherPrDocumentDate = OtherPrDocumentDate
    def get_PrecedingDocumentGoodsNumeric(self):
        return self.PrecedingDocumentGoodsNumeric
    def set_PrecedingDocumentGoodsNumeric(self, PrecedingDocumentGoodsNumeric):
        self.PrecedingDocumentGoodsNumeric = PrecedingDocumentGoodsNumeric
    def get_PrecedingDocumentName(self):
        return self.PrecedingDocumentName
    def set_PrecedingDocumentName(self, PrecedingDocumentName):
        self.PrecedingDocumentName = PrecedingDocumentName
    def get_PrecedingDocumentModeCode(self):
        return self.PrecedingDocumentModeCode
    def set_PrecedingDocumentModeCode(self, PrecedingDocumentModeCode):
        self.PrecedingDocumentModeCode = PrecedingDocumentModeCode
    def get_PrcDocGoodsTNVEDCode(self):
        return self.PrcDocGoodsTNVEDCode
    def set_PrcDocGoodsTNVEDCode(self, PrcDocGoodsTNVEDCode):
        self.PrcDocGoodsTNVEDCode = PrcDocGoodsTNVEDCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_SheetNumberType(self, value):
        result = True
        # Validate type SheetNumberType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Numeric1Type(self, value):
        result = True
        # Validate type Numeric1Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_PrecedingDocumentNumberType(self, value):
        result = True
        # Validate type PrecedingDocumentNumberType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PrecedingDocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PrecedingDocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable2Type(self, value):
        result = True
        # Validate type CodeVariable2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable2Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentNameType(self, value):
        result = True
        # Validate type DocumentNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CUGoodsNomenclatuerCodeType(self, value):
        result = True
        # Validate type CUGoodsNomenclatuerCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CUGoodsNomenclatuerCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CUGoodsNomenclatuerCodeType_patterns_, ))
                result = False
        return result
    validate_CUGoodsNomenclatuerCodeType_patterns_ = [['^([0-9]{4}|[0-9]{6}|[0-9]{8}|[0-9]{10})$']]
    def has__content(self):
        if (
            self.LineNumber is not None or
            self.PrecedingDocumentID is not None or
            self.PrecedingDocumentCustomsCode is not None or
            self.PrecedingDocumentDate is not None or
            self.PrecedingDocumentNumber is not None or
            self.PrecedingDocumentOrdinalId is not None or
            self.AddNumberPart is not None or
            self.DTMDocDetails is not None or
            self.PIDocumentNumber is not None or
            self.TIRIdDetails is not None or
            self.OtherPrDocumentNumber is not None or
            self.OtherPrDocumentDate is not None or
            self.PrecedingDocumentGoodsNumeric is not None or
            self.PrecedingDocumentName is not None or
            self.PrecedingDocumentModeCode is not None or
            self.PrcDocGoodsTNVEDCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PrecedingDocumentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrecedingDocumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrecedingDocumentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrecedingDocumentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrecedingDocumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='PrecedingDocumentType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PrecedingDocumentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineNumber is not None:
            namespaceprefix_ = self.LineNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.LineNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineNumber>%s</%sLineNumber>%s' % (namespaceprefix_ , self.gds_format_decimal(self.LineNumber, input_name='LineNumber'), namespaceprefix_ , eol_))
        if self.PrecedingDocumentID is not None:
            namespaceprefix_ = self.PrecedingDocumentID_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentID>%s</%sPrecedingDocumentID>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PrecedingDocumentID, input_name='PrecedingDocumentID'), namespaceprefix_ , eol_))
        if self.PrecedingDocumentCustomsCode is not None:
            namespaceprefix_ = self.PrecedingDocumentCustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentCustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentCustomsCode>%s</%sPrecedingDocumentCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentCustomsCode), input_name='PrecedingDocumentCustomsCode')), namespaceprefix_ , eol_))
        if self.PrecedingDocumentDate is not None:
            namespaceprefix_ = self.PrecedingDocumentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentDate>%s</%sPrecedingDocumentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PrecedingDocumentDate, input_name='PrecedingDocumentDate'), namespaceprefix_ , eol_))
        if self.PrecedingDocumentNumber is not None:
            namespaceprefix_ = self.PrecedingDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentNumber>%s</%sPrecedingDocumentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentNumber), input_name='PrecedingDocumentNumber')), namespaceprefix_ , eol_))
        if self.PrecedingDocumentOrdinalId is not None:
            namespaceprefix_ = self.PrecedingDocumentOrdinalId_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentOrdinalId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentOrdinalId>%s</%sPrecedingDocumentOrdinalId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentOrdinalId), input_name='PrecedingDocumentOrdinalId')), namespaceprefix_ , eol_))
        if self.AddNumberPart is not None:
            namespaceprefix_ = self.AddNumberPart_nsprefix_ + ':' if (UseCapturedNS_ and self.AddNumberPart_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddNumberPart>%s</%sAddNumberPart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddNumberPart), input_name='AddNumberPart')), namespaceprefix_ , eol_))
        if self.DTMDocDetails is not None:
            namespaceprefix_ = self.DTMDocDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DTMDocDetails_nsprefix_) else ''
            self.DTMDocDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DTMDocDetails', pretty_print=pretty_print)
        if self.PIDocumentNumber is not None:
            namespaceprefix_ = self.PIDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PIDocumentNumber_nsprefix_) else ''
            self.PIDocumentNumber.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PIDocumentNumber', pretty_print=pretty_print)
        if self.TIRIdDetails is not None:
            namespaceprefix_ = self.TIRIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRIdDetails_nsprefix_) else ''
            self.TIRIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TIRIdDetails', pretty_print=pretty_print)
        if self.OtherPrDocumentNumber is not None:
            namespaceprefix_ = self.OtherPrDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherPrDocumentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOtherPrDocumentNumber>%s</%sOtherPrDocumentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OtherPrDocumentNumber), input_name='OtherPrDocumentNumber')), namespaceprefix_ , eol_))
        if self.OtherPrDocumentDate is not None:
            namespaceprefix_ = self.OtherPrDocumentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherPrDocumentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOtherPrDocumentDate>%s</%sOtherPrDocumentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OtherPrDocumentDate, input_name='OtherPrDocumentDate'), namespaceprefix_ , eol_))
        if self.PrecedingDocumentGoodsNumeric is not None:
            namespaceprefix_ = self.PrecedingDocumentGoodsNumeric_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentGoodsNumeric_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentGoodsNumeric>%s</%sPrecedingDocumentGoodsNumeric>%s' % (namespaceprefix_ , self.gds_format_integer(self.PrecedingDocumentGoodsNumeric, input_name='PrecedingDocumentGoodsNumeric'), namespaceprefix_ , eol_))
        if self.PrecedingDocumentName is not None:
            namespaceprefix_ = self.PrecedingDocumentName_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentName>%s</%sPrecedingDocumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentName), input_name='PrecedingDocumentName')), namespaceprefix_ , eol_))
        if self.PrecedingDocumentModeCode is not None:
            namespaceprefix_ = self.PrecedingDocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentModeCode>%s</%sPrecedingDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentModeCode), input_name='PrecedingDocumentModeCode')), namespaceprefix_ , eol_))
        if self.PrcDocGoodsTNVEDCode is not None:
            namespaceprefix_ = self.PrcDocGoodsTNVEDCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrcDocGoodsTNVEDCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrcDocGoodsTNVEDCode>%s</%sPrcDocGoodsTNVEDCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrcDocGoodsTNVEDCode), input_name='PrcDocGoodsTNVEDCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineNumber' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'LineNumber')
            fval_ = self.gds_validate_decimal(fval_, node, 'LineNumber')
            self.LineNumber = fval_
            self.LineNumber_nsprefix_ = child_.prefix
            # validate type SheetNumberType
            self.validate_SheetNumberType(self.LineNumber)
        elif nodeName_ == 'PrecedingDocumentID' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PrecedingDocumentID')
            fval_ = self.gds_validate_decimal(fval_, node, 'PrecedingDocumentID')
            self.PrecedingDocumentID = fval_
            self.PrecedingDocumentID_nsprefix_ = child_.prefix
            # validate type Numeric1Type
            self.validate_Numeric1Type(self.PrecedingDocumentID)
        elif nodeName_ == 'PrecedingDocumentCustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentCustomsCode')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentCustomsCode')
            self.PrecedingDocumentCustomsCode = value_
            self.PrecedingDocumentCustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.PrecedingDocumentCustomsCode)
        elif nodeName_ == 'PrecedingDocumentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PrecedingDocumentDate = dval_
            self.PrecedingDocumentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.PrecedingDocumentDate)
        elif nodeName_ == 'PrecedingDocumentNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentNumber')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentNumber')
            self.PrecedingDocumentNumber = value_
            self.PrecedingDocumentNumber_nsprefix_ = child_.prefix
            # validate type PrecedingDocumentNumberType
            self.validate_PrecedingDocumentNumberType(self.PrecedingDocumentNumber)
        elif nodeName_ == 'PrecedingDocumentOrdinalId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentOrdinalId')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentOrdinalId')
            self.PrecedingDocumentOrdinalId = value_
            self.PrecedingDocumentOrdinalId_nsprefix_ = child_.prefix
            # validate type CodeVariable2Type
            self.validate_CodeVariable2Type(self.PrecedingDocumentOrdinalId)
        elif nodeName_ == 'AddNumberPart':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AddNumberPart')
            value_ = self.gds_validate_string(value_, node, 'AddNumberPart')
            self.AddNumberPart = value_
            self.AddNumberPart_nsprefix_ = child_.prefix
            # validate type CodeVariable2Type
            self.validate_CodeVariable2Type(self.AddNumberPart)
        elif nodeName_ == 'DTMDocDetails':
            obj_ = DTMDocDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DTMDocDetails = obj_
            obj_.original_tagname_ = 'DTMDocDetails'
        elif nodeName_ == 'PIDocumentNumber':
            obj_ = PIRegNumberType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PIDocumentNumber = obj_
            obj_.original_tagname_ = 'PIDocumentNumber'
        elif nodeName_ == 'TIRIdDetails':
            obj_ = TIRIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TIRIdDetails = obj_
            obj_.original_tagname_ = 'TIRIdDetails'
        elif nodeName_ == 'OtherPrDocumentNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OtherPrDocumentNumber')
            value_ = self.gds_validate_string(value_, node, 'OtherPrDocumentNumber')
            self.OtherPrDocumentNumber = value_
            self.OtherPrDocumentNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.OtherPrDocumentNumber)
        elif nodeName_ == 'OtherPrDocumentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OtherPrDocumentDate = dval_
            self.OtherPrDocumentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.OtherPrDocumentDate)
        elif nodeName_ == 'PrecedingDocumentGoodsNumeric' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PrecedingDocumentGoodsNumeric')
            ival_ = self.gds_validate_integer(ival_, node, 'PrecedingDocumentGoodsNumeric')
            self.PrecedingDocumentGoodsNumeric = ival_
            self.PrecedingDocumentGoodsNumeric_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.PrecedingDocumentGoodsNumeric)
        elif nodeName_ == 'PrecedingDocumentName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentName')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentName')
            self.PrecedingDocumentName = value_
            self.PrecedingDocumentName_nsprefix_ = child_.prefix
            # validate type DocumentNameType
            self.validate_DocumentNameType(self.PrecedingDocumentName)
        elif nodeName_ == 'PrecedingDocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentModeCode')
            self.PrecedingDocumentModeCode = value_
            self.PrecedingDocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.PrecedingDocumentModeCode)
        elif nodeName_ == 'PrcDocGoodsTNVEDCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrcDocGoodsTNVEDCode')
            value_ = self.gds_validate_string(value_, node, 'PrcDocGoodsTNVEDCode')
            self.PrcDocGoodsTNVEDCode = value_
            self.PrcDocGoodsTNVEDCode_nsprefix_ = child_.prefix
            # validate type CUGoodsNomenclatuerCodeType
            self.validate_CUGoodsNomenclatuerCodeType(self.PrcDocGoodsTNVEDCode)
# end class PrecedingDocumentType


class ProcessingGoodsCostInfoType(GeneratedsSuper):
    """ProcessingGoodsCostInfoType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    о
    и
    м
    о
    с
    т
    и
    о
    п
    е
    р
    а
    ц
    и
    й
    п
    о
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    е
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    о
    м
    е
    щ
    е
    н
    н
    ы
    х
    п
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    т
    о
    в
    а
    р
    о
    в
    в
    н
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    т
    е
    р
    р
    и
    т
    о
    р
    и
    и
    ProcessingGoodsCost -- С
    т
    о
    и
    м
    о
    с
    т
    ь
    о
    п
    е
    р
    а
    ц
    и
    й
    п
    о
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    е
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    о
    м
    е
    щ
    е
    н
    н
    ы
    х
    п
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    т
    о
    в
    а
    р
    о
    в
    в
    н
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    т
    е
    р
    р
    и
    т
    о
    р
    и
    и
    ProcessingGoodsCostCurrencyCode -- Т
    р
    е
    х
    з
    н
    а
    ч
    н
    ы
    й
    б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    т
    о
    и
    м
    о
    с
    т
    и
    о
    п
    е
    р
    а
    ц
    и
    й
    п
    о
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    е
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    о
    м
    е
    щ
    е
    н
    н
    ы
    х
    п
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    т
    о
    в
    а
    р
    о
    в
    в
    н
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    т
    е
    р
    р
    и
    т
    о
    р
    и
    и
    ,
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    К
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    а
    л
    ю
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProcessingGoodsCost=None, ProcessingGoodsCostCurrencyCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ProcessingGoodsCost = ProcessingGoodsCost
        self.validate_AmountType(self.ProcessingGoodsCost)
        self.ProcessingGoodsCost_nsprefix_ = "clt_ru"
        self.ProcessingGoodsCostCurrencyCode = ProcessingGoodsCostCurrencyCode
        self.validate_CurrencyA3CodeType(self.ProcessingGoodsCostCurrencyCode)
        self.ProcessingGoodsCostCurrencyCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessingGoodsCostInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessingGoodsCostInfoType.subclass:
            return ProcessingGoodsCostInfoType.subclass(*args_, **kwargs_)
        else:
            return ProcessingGoodsCostInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProcessingGoodsCost(self):
        return self.ProcessingGoodsCost
    def set_ProcessingGoodsCost(self, ProcessingGoodsCost):
        self.ProcessingGoodsCost = ProcessingGoodsCost
    def get_ProcessingGoodsCostCurrencyCode(self):
        return self.ProcessingGoodsCostCurrencyCode
    def set_ProcessingGoodsCostCurrencyCode(self, ProcessingGoodsCostCurrencyCode):
        self.ProcessingGoodsCostCurrencyCode = ProcessingGoodsCostCurrencyCode
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ProcessingGoodsCost is not None or
            self.ProcessingGoodsCostCurrencyCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ProcessingGoodsCostInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProcessingGoodsCostInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProcessingGoodsCostInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProcessingGoodsCostInfoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProcessingGoodsCostInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ProcessingGoodsCostInfoType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ProcessingGoodsCostInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProcessingGoodsCost is not None:
            namespaceprefix_ = self.ProcessingGoodsCost_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingGoodsCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessingGoodsCost>%s</%sProcessingGoodsCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ProcessingGoodsCost, input_name='ProcessingGoodsCost'), namespaceprefix_ , eol_))
        if self.ProcessingGoodsCostCurrencyCode is not None:
            namespaceprefix_ = self.ProcessingGoodsCostCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingGoodsCostCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessingGoodsCostCurrencyCode>%s</%sProcessingGoodsCostCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProcessingGoodsCostCurrencyCode), input_name='ProcessingGoodsCostCurrencyCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProcessingGoodsCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ProcessingGoodsCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'ProcessingGoodsCost')
            self.ProcessingGoodsCost = fval_
            self.ProcessingGoodsCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.ProcessingGoodsCost)
        elif nodeName_ == 'ProcessingGoodsCostCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ProcessingGoodsCostCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'ProcessingGoodsCostCurrencyCode')
            self.ProcessingGoodsCostCurrencyCode = value_
            self.ProcessingGoodsCostCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.ProcessingGoodsCostCurrencyCode)
# end class ProcessingGoodsCostInfoType


class ProcessingGoodsType(GeneratedsSuper):
    """ProcessingGoodsType -- О
    п
    и
    с
    а
    н
    и
    е
    п
    р
    о
    д
    у
    к
    т
    о
    в
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    GoodsTNVEDCode -- К
    о
    д
    т
    о
    в
    а
    р
    а
    п
    о
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    GoodsDescription -- О
    п
    и
    с
    а
    н
    и
    е
    и
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    т
    о
    в
    а
    р
    а
    ProcessingGoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    о
    в
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsTNVEDCode=None, GoodsDescription=None, ProcessingGoodsQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.GoodsTNVEDCode = GoodsTNVEDCode
        self.validate_GoodsNomenclatureCodeType(self.GoodsTNVEDCode)
        self.GoodsTNVEDCode_nsprefix_ = "clt_ru"
        if GoodsDescription is None:
            self.GoodsDescription = []
        else:
            self.GoodsDescription = GoodsDescription
        self.GoodsDescription_nsprefix_ = "clt_ru"
        if ProcessingGoodsQuantity is None:
            self.ProcessingGoodsQuantity = []
        else:
            self.ProcessingGoodsQuantity = ProcessingGoodsQuantity
        self.ProcessingGoodsQuantity_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessingGoodsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessingGoodsType.subclass:
            return ProcessingGoodsType.subclass(*args_, **kwargs_)
        else:
            return ProcessingGoodsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsTNVEDCode(self):
        return self.GoodsTNVEDCode
    def set_GoodsTNVEDCode(self, GoodsTNVEDCode):
        self.GoodsTNVEDCode = GoodsTNVEDCode
    def get_GoodsDescription(self):
        return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription):
        self.GoodsDescription = GoodsDescription
    def add_GoodsDescription(self, value):
        self.GoodsDescription.append(value)
    def insert_GoodsDescription_at(self, index, value):
        self.GoodsDescription.insert(index, value)
    def replace_GoodsDescription_at(self, index, value):
        self.GoodsDescription[index] = value
    def get_ProcessingGoodsQuantity(self):
        return self.ProcessingGoodsQuantity
    def set_ProcessingGoodsQuantity(self, ProcessingGoodsQuantity):
        self.ProcessingGoodsQuantity = ProcessingGoodsQuantity
    def add_ProcessingGoodsQuantity(self, value):
        self.ProcessingGoodsQuantity.append(value)
    def insert_ProcessingGoodsQuantity_at(self, index, value):
        self.ProcessingGoodsQuantity.insert(index, value)
    def replace_ProcessingGoodsQuantity_at(self, index, value):
        self.ProcessingGoodsQuantity[index] = value
    def validate_GoodsNomenclatureCodeType(self, value):
        result = True
        # Validate type GoodsNomenclatureCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_GoodsNomenclatureCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_GoodsNomenclatureCodeType_patterns_, ))
                result = False
        return result
    validate_GoodsNomenclatureCodeType_patterns_ = [['^(\\d{4,10})$']]
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsTNVEDCode is not None or
            self.GoodsDescription or
            self.ProcessingGoodsQuantity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ProcessingGoodsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProcessingGoodsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProcessingGoodsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProcessingGoodsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProcessingGoodsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ProcessingGoodsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ProcessingGoodsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsTNVEDCode is not None:
            namespaceprefix_ = self.GoodsTNVEDCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsTNVEDCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsTNVEDCode>%s</%sGoodsTNVEDCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsTNVEDCode), input_name='GoodsTNVEDCode')), namespaceprefix_ , eol_))
        for GoodsDescription_ in self.GoodsDescription:
            namespaceprefix_ = self.GoodsDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDescription>%s</%sGoodsDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsDescription_), input_name='GoodsDescription')), namespaceprefix_ , eol_))
        for ProcessingGoodsQuantity_ in self.ProcessingGoodsQuantity:
            namespaceprefix_ = self.ProcessingGoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingGoodsQuantity_nsprefix_) else ''
            ProcessingGoodsQuantity_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingGoodsQuantity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsTNVEDCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsTNVEDCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsTNVEDCode')
            self.GoodsTNVEDCode = value_
            self.GoodsTNVEDCode_nsprefix_ = child_.prefix
            # validate type GoodsNomenclatureCodeType
            self.validate_GoodsNomenclatureCodeType(self.GoodsTNVEDCode)
        elif nodeName_ == 'GoodsDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsDescription')
            value_ = self.gds_validate_string(value_, node, 'GoodsDescription')
            self.GoodsDescription.append(value_)
            self.GoodsDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsDescription[-1])
        elif nodeName_ == 'ProcessingGoodsQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingGoodsQuantity.append(obj_)
            obj_.original_tagname_ = 'ProcessingGoodsQuantity'
# end class ProcessingGoodsType


class RangeMeasureType(GeneratedsSuper):
    """RangeMeasureType -- Д
    и
    а
    п
    а
    з
    о
    н
    в
    е
    л
    и
    ч
    и
    н
    (
    с
    у
    к
    а
    з
    а
    н
    и
    е
    м
    е
    д
    и
    н
    и
    ц
    и
    з
    м
    е
    р
    е
    н
    и
    я
    )
    MinRangeMeasure -- М
    и
    н
    и
    м
    а
    л
    ь
    н
    а
    я
    в
    е
    л
    и
    ч
    и
    н
    а
    д
    и
    а
    п
    а
    з
    о
    н
    а
    в
    е
    л
    и
    ч
    и
    н
    (
    с
    у
    к
    а
    з
    а
    н
    и
    е
    м
    е
    д
    и
    н
    и
    ц
    и
    з
    м
    е
    р
    е
    н
    и
    я
    )
    MaxRangeMeasure -- М
    а
    к
    с
    и
    м
    а
    л
    ь
    н
    а
    я
    в
    е
    л
    и
    ч
    и
    н
    а
    д
    и
    а
    п
    а
    з
    о
    н
    а
    в
    е
    л
    и
    ч
    и
    н
    (
    с
    у
    к
    а
    з
    а
    н
    и
    е
    м
    е
    д
    и
    н
    и
    ц
    и
    з
    м
    е
    р
    е
    н
    и
    я
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MinRangeMeasure=None, MaxRangeMeasure=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.MinRangeMeasure = MinRangeMeasure
        self.MinRangeMeasure_nsprefix_ = "cat_ru"
        self.MaxRangeMeasure = MaxRangeMeasure
        self.MaxRangeMeasure_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RangeMeasureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RangeMeasureType.subclass:
            return RangeMeasureType.subclass(*args_, **kwargs_)
        else:
            return RangeMeasureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MinRangeMeasure(self):
        return self.MinRangeMeasure
    def set_MinRangeMeasure(self, MinRangeMeasure):
        self.MinRangeMeasure = MinRangeMeasure
    def get_MaxRangeMeasure(self):
        return self.MaxRangeMeasure
    def set_MaxRangeMeasure(self, MaxRangeMeasure):
        self.MaxRangeMeasure = MaxRangeMeasure
    def has__content(self):
        if (
            self.MinRangeMeasure is not None or
            self.MaxRangeMeasure is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='RangeMeasureType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RangeMeasureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RangeMeasureType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RangeMeasureType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RangeMeasureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='RangeMeasureType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='RangeMeasureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MinRangeMeasure is not None:
            namespaceprefix_ = self.MinRangeMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.MinRangeMeasure_nsprefix_) else ''
            self.MinRangeMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MinRangeMeasure', pretty_print=pretty_print)
        if self.MaxRangeMeasure is not None:
            namespaceprefix_ = self.MaxRangeMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.MaxRangeMeasure_nsprefix_) else ''
            self.MaxRangeMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MaxRangeMeasure', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MinRangeMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MinRangeMeasure = obj_
            obj_.original_tagname_ = 'MinRangeMeasure'
        elif nodeName_ == 'MaxRangeMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MaxRangeMeasure = obj_
            obj_.original_tagname_ = 'MaxRangeMeasure'
# end class RangeMeasureType


class RBGoodsReleaseNumberType(GeneratedsSuper):
    """RBGoodsReleaseNumberType -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    в
    ы
    п
    у
    с
    к
    а
    т
    о
    в
    а
    р
    о
    в
    (
    д
    л
    я
    Р
    Б
    )
    CustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    ReleaseNumber -- Н
    о
    м
    е
    р
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    в
    ы
    п
    у
    с
    к
    а
    т
    о
    в
    а
    р
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CustomsCode=None, ReleaseNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.CustomsCode = CustomsCode
        self.validate_CustomsCodeType(self.CustomsCode)
        self.CustomsCode_nsprefix_ = "clt_ru"
        self.ReleaseNumber = ReleaseNumber
        self.validate_Code8Type(self.ReleaseNumber)
        self.ReleaseNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RBGoodsReleaseNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RBGoodsReleaseNumberType.subclass:
            return RBGoodsReleaseNumberType.subclass(*args_, **kwargs_)
        else:
            return RBGoodsReleaseNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomsCode(self):
        return self.CustomsCode
    def set_CustomsCode(self, CustomsCode):
        self.CustomsCode = CustomsCode
    def get_ReleaseNumber(self):
        return self.ReleaseNumber
    def set_ReleaseNumber(self, ReleaseNumber):
        self.ReleaseNumber = ReleaseNumber
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_Code8Type(self, value):
        result = True
        # Validate type Code8Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code8Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CustomsCode is not None or
            self.ReleaseNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RBGoodsReleaseNumberType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RBGoodsReleaseNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RBGoodsReleaseNumberType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RBGoodsReleaseNumberType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RBGoodsReleaseNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='RBGoodsReleaseNumberType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RBGoodsReleaseNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomsCode is not None:
            namespaceprefix_ = self.CustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCode>%s</%sCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCode), input_name='CustomsCode')), namespaceprefix_ , eol_))
        if self.ReleaseNumber is not None:
            namespaceprefix_ = self.ReleaseNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ReleaseNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReleaseNumber>%s</%sReleaseNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReleaseNumber), input_name='ReleaseNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCode')
            self.CustomsCode = value_
            self.CustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsCode)
        elif nodeName_ == 'ReleaseNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ReleaseNumber')
            value_ = self.gds_validate_string(value_, node, 'ReleaseNumber')
            self.ReleaseNumber = value_
            self.ReleaseNumber_nsprefix_ = child_.prefix
            # validate type Code8Type
            self.validate_Code8Type(self.ReleaseNumber)
# end class RBGoodsReleaseNumberType


class RFBasePresentedDocIDType(GeneratedsSuper):
    """RFBasePresentedDocIDType -- Т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    и
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    (
    д
    л
    я
    Р
    Ф
    )
    ElectronicDocumentID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    й
    с
    и
    с
    т
    е
    м
    о
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    о
    р
    г
    а
    н
    о
    в
    п
    р
    и
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    м
    в
    и
    д
    е
    ElectronicArchID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    х
    р
    а
    н
    и
    л
    и
    щ
    а
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    п
    р
    и
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    м
    в
    и
    д
    е
    DocumentModeID -- К
    о
    д
    в
    и
    д
    а
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    а
    л
    ь
    б
    о
    м
    о
    м
    ф
    о
    р
    м
    а
    т
    о
    в
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    ф
    о
    р
    м
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ElectronicDocumentID=None, ElectronicArchID=None, DocumentModeID=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.ElectronicDocumentID = ElectronicDocumentID
        self.validate_DocumentIDType(self.ElectronicDocumentID)
        self.ElectronicDocumentID_nsprefix_ = "clt_ru"
        self.ElectronicArchID = ElectronicArchID
        self.validate_DocumentIDType(self.ElectronicArchID)
        self.ElectronicArchID_nsprefix_ = "clt_ru"
        self.DocumentModeID = DocumentModeID
        self.validate_DocumentModeIDType(self.DocumentModeID)
        self.DocumentModeID_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RFBasePresentedDocIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RFBasePresentedDocIDType.subclass:
            return RFBasePresentedDocIDType.subclass(*args_, **kwargs_)
        else:
            return RFBasePresentedDocIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ElectronicDocumentID(self):
        return self.ElectronicDocumentID
    def set_ElectronicDocumentID(self, ElectronicDocumentID):
        self.ElectronicDocumentID = ElectronicDocumentID
    def get_ElectronicArchID(self):
        return self.ElectronicArchID
    def set_ElectronicArchID(self, ElectronicArchID):
        self.ElectronicArchID = ElectronicArchID
    def get_DocumentModeID(self):
        return self.DocumentModeID
    def set_DocumentModeID(self, DocumentModeID):
        self.DocumentModeID = DocumentModeID
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_DocumentIDType(self, value):
        result = True
        # Validate type DocumentIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 36:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentModeIDType(self, value):
        result = True
        # Validate type DocumentModeIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 30:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentModeIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentModeIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ElectronicDocumentID is not None or
            self.ElectronicArchID is not None or
            self.DocumentModeID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RFBasePresentedDocIDType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RFBasePresentedDocIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RFBasePresentedDocIDType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RFBasePresentedDocIDType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RFBasePresentedDocIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='RFBasePresentedDocIDType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RFBasePresentedDocIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ElectronicDocumentID is not None:
            namespaceprefix_ = self.ElectronicDocumentID_nsprefix_ + ':' if (UseCapturedNS_ and self.ElectronicDocumentID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sElectronicDocumentID>%s</%sElectronicDocumentID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ElectronicDocumentID), input_name='ElectronicDocumentID')), namespaceprefix_ , eol_))
        if self.ElectronicArchID is not None:
            namespaceprefix_ = self.ElectronicArchID_nsprefix_ + ':' if (UseCapturedNS_ and self.ElectronicArchID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sElectronicArchID>%s</%sElectronicArchID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ElectronicArchID), input_name='ElectronicArchID')), namespaceprefix_ , eol_))
        if self.DocumentModeID is not None:
            namespaceprefix_ = self.DocumentModeID_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentModeID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentModeID>%s</%sDocumentModeID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentModeID), input_name='DocumentModeID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ElectronicDocumentID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ElectronicDocumentID')
            value_ = self.gds_validate_string(value_, node, 'ElectronicDocumentID')
            self.ElectronicDocumentID = value_
            self.ElectronicDocumentID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.ElectronicDocumentID)
        elif nodeName_ == 'ElectronicArchID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ElectronicArchID')
            value_ = self.gds_validate_string(value_, node, 'ElectronicArchID')
            self.ElectronicArchID = value_
            self.ElectronicArchID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.ElectronicArchID)
        elif nodeName_ == 'DocumentModeID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentModeID')
            value_ = self.gds_validate_string(value_, node, 'DocumentModeID')
            self.DocumentModeID = value_
            self.DocumentModeID_nsprefix_ = child_.prefix
            # validate type DocumentModeIDType
            self.validate_DocumentModeIDType(self.DocumentModeID)
# end class RFBasePresentedDocIDType


class RFPresentedDocIDType(RFBasePresentedDocIDType):
    """RFPresentedDocIDType -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    и
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    (
    д
    л
    я
    Р
    Ф
    )
    PresentedDocumentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    м
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    ProvidingIndicationMark -- П
    р
    и
    з
    н
    а
    к
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    а
    : 1 -
    д
    о
    к
    у
    м
    е
    н
    т
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    п
    р
    и
    п
    о
    д
    а
    ч
    е
    Д
    Т
    ; 2 -
    д
    о
    к
    у
    м
    е
    н
    т
    н
    е
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    ч
    а
    с
    т
    ь
    ю
    1
    п
    .2
    с
    т
    . 80
    Т
    К
    Е
    А
    Э
    С
    RegNumberDocument -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    с
    к
    о
    т
    о
    р
    ы
    м
    о
    н
    б
    ы
    л
    п
    е
    р
    в
    о
    н
    а
    ч
    а
    л
    ь
    н
    о
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = RFBasePresentedDocIDType
    def __init__(self, ElectronicDocumentID=None, ElectronicArchID=None, DocumentModeID=None, PresentedDocumentModeCode=None, ProvidingIndicationMark=None, RegNumberDocument=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("RFPresentedDocIDType"), self).__init__(ElectronicDocumentID, ElectronicArchID, DocumentModeID,  **kwargs_)
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
        self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        self.PresentedDocumentModeCode_nsprefix_ = "clt_ru"
        self.ProvidingIndicationMark = ProvidingIndicationMark
        self.validate_DigitalIndicatorType(self.ProvidingIndicationMark)
        self.ProvidingIndicationMark_nsprefix_ = "clt_ru"
        self.RegNumberDocument = RegNumberDocument
        self.validate_Text50Type(self.RegNumberDocument)
        self.RegNumberDocument_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RFPresentedDocIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RFPresentedDocIDType.subclass:
            return RFPresentedDocIDType.subclass(*args_, **kwargs_)
        else:
            return RFPresentedDocIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PresentedDocumentModeCode(self):
        return self.PresentedDocumentModeCode
    def set_PresentedDocumentModeCode(self, PresentedDocumentModeCode):
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
    def get_ProvidingIndicationMark(self):
        return self.ProvidingIndicationMark
    def set_ProvidingIndicationMark(self, ProvidingIndicationMark):
        self.ProvidingIndicationMark = ProvidingIndicationMark
    def get_RegNumberDocument(self):
        return self.RegNumberDocument
    def set_RegNumberDocument(self, RegNumberDocument):
        self.RegNumberDocument = RegNumberDocument
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DigitalIndicatorType(self, value):
        result = True
        # Validate type DigitalIndicatorType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on DigitalIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PresentedDocumentModeCode is not None or
            self.ProvidingIndicationMark is not None or
            self.RegNumberDocument is not None or
            super(RFPresentedDocIDType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RFPresentedDocIDType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RFPresentedDocIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RFPresentedDocIDType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RFPresentedDocIDType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RFPresentedDocIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='RFPresentedDocIDType'):
        super(RFPresentedDocIDType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RFPresentedDocIDType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RFPresentedDocIDType', fromsubclass_=False, pretty_print=True):
        super(RFPresentedDocIDType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PresentedDocumentModeCode is not None:
            namespaceprefix_ = self.PresentedDocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PresentedDocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPresentedDocumentModeCode>%s</%sPresentedDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PresentedDocumentModeCode), input_name='PresentedDocumentModeCode')), namespaceprefix_ , eol_))
        if self.ProvidingIndicationMark is not None:
            namespaceprefix_ = self.ProvidingIndicationMark_nsprefix_ + ':' if (UseCapturedNS_ and self.ProvidingIndicationMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProvidingIndicationMark>%s</%sProvidingIndicationMark>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ProvidingIndicationMark, input_name='ProvidingIndicationMark'), namespaceprefix_ , eol_))
        if self.RegNumberDocument is not None:
            namespaceprefix_ = self.RegNumberDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.RegNumberDocument_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegNumberDocument>%s</%sRegNumberDocument>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegNumberDocument), input_name='RegNumberDocument')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(RFPresentedDocIDType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PresentedDocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PresentedDocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PresentedDocumentModeCode')
            self.PresentedDocumentModeCode = value_
            self.PresentedDocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        elif nodeName_ == 'ProvidingIndicationMark' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ProvidingIndicationMark')
            fval_ = self.gds_validate_decimal(fval_, node, 'ProvidingIndicationMark')
            self.ProvidingIndicationMark = fval_
            self.ProvidingIndicationMark_nsprefix_ = child_.prefix
            # validate type DigitalIndicatorType
            self.validate_DigitalIndicatorType(self.ProvidingIndicationMark)
        elif nodeName_ == 'RegNumberDocument':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegNumberDocument')
            value_ = self.gds_validate_string(value_, node, 'RegNumberDocument')
            self.RegNumberDocument = value_
            self.RegNumberDocument_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.RegNumberDocument)
        super(RFPresentedDocIDType, self)._buildChildren(child_, node, nodeName_, True)
# end class RFPresentedDocIDType


class RFTechMarkType(GeneratedsSuper):
    """RFTechMarkType -- Т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    и
    е
    о
    т
    м
    е
    т
    к
    и
    д
    л
    я
    Р
    Ф
    RFTechDocumentId -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    и
    е
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    и
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    х
    л
    и
    ч
    н
    о
    с
    т
    ь
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    х
    п
    о
    л
    н
    о
    м
    о
    ч
    и
    я
    л
    и
    ц
    а
    ,
    п
    о
    д
    а
    ю
    щ
    е
    г
    о
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    ю
    ,
    и
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    и
    х
    д
    о
    г
    о
    в
    о
    р
    н
    ы
    е
    о
    т
    н
    о
    ш
    е
    н
    и
    я
    д
    е
    к
    л
    а
    р
    а
    н
    т
    а
    с
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    м
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    м
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RFTechDocumentId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        if RFTechDocumentId is None:
            self.RFTechDocumentId = []
        else:
            self.RFTechDocumentId = RFTechDocumentId
        self.RFTechDocumentId_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RFTechMarkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RFTechMarkType.subclass:
            return RFTechMarkType.subclass(*args_, **kwargs_)
        else:
            return RFTechMarkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RFTechDocumentId(self):
        return self.RFTechDocumentId
    def set_RFTechDocumentId(self, RFTechDocumentId):
        self.RFTechDocumentId = RFTechDocumentId
    def add_RFTechDocumentId(self, value):
        self.RFTechDocumentId.append(value)
    def insert_RFTechDocumentId_at(self, index, value):
        self.RFTechDocumentId.insert(index, value)
    def replace_RFTechDocumentId_at(self, index, value):
        self.RFTechDocumentId[index] = value
    def has__content(self):
        if (
            self.RFTechDocumentId
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='RFTechMarkType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RFTechMarkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RFTechMarkType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RFTechMarkType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RFTechMarkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='RFTechMarkType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"', name_='RFTechMarkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RFTechDocumentId_ in self.RFTechDocumentId:
            namespaceprefix_ = self.RFTechDocumentId_nsprefix_ + ':' if (UseCapturedNS_ and self.RFTechDocumentId_nsprefix_) else ''
            RFTechDocumentId_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFTechDocumentId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RFTechDocumentId':
            obj_ = RFPresentedDocIDType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFTechDocumentId.append(obj_)
            obj_.original_tagname_ = 'RFTechDocumentId'
# end class RFTechMarkType


class SubjectBaseDetailsType(OrganizationBaseType):
    """SubjectBaseDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    б
    а
    з
    о
    в
    ы
    й
    н
    а
    б
    о
    р
    с
    в
    е
    д
    е
    н
    и
    й
    о
    с
    у
    б
    ъ
    е
    к
    т
    е
    CountryA2Code -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    BusinessEntityTypeCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    о
    н
    н
    о
    -
    п
    р
    а
    в
    о
    в
    о
    й
    ф
    о
    р
    м
    ы
    ,
    в
    к
    о
    т
    о
    р
    о
    й
    з
    а
    р
    е
    г
    и
    с
    т
    р
    и
    р
    о
    в
    а
    н
    х
    о
    з
    я
    й
    с
    т
    в
    у
    ю
    щ
    и
    й
    с
    у
    б
    ъ
    е
    к
    т
    BusinessEntityTypeName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    о
    н
    н
    о
    -
    п
    р
    а
    в
    о
    в
    о
    й
    ф
    о
    р
    м
    ы
    ,
    в
    к
    о
    т
    о
    р
    о
    й
    з
    а
    р
    е
    г
    и
    с
    т
    р
    и
    р
    о
    в
    а
    н
    х
    о
    з
    я
    й
    с
    т
    в
    у
    ю
    щ
    и
    й
    с
    у
    б
    ъ
    е
    к
    т
    UITN -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    о
    м
    у
    и
    л
    и
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    м
    у
    л
    и
    ц
    у
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = OrganizationBaseType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("SubjectBaseDetailsType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, extensiontype_,  **kwargs_)
        self.CountryA2Code = CountryA2Code
        self.validate_CountryA2CodeType(self.CountryA2Code)
        self.CountryA2Code_nsprefix_ = "clt_ru"
        self.BusinessEntityTypeCode = BusinessEntityTypeCode
        self.BusinessEntityTypeCode_nsprefix_ = "catESAD_cu"
        if BusinessEntityTypeName is None:
            self.BusinessEntityTypeName = []
        else:
            self.BusinessEntityTypeName = BusinessEntityTypeName
        self.BusinessEntityTypeName_nsprefix_ = "clt_ru"
        self.UITN = UITN
        self.UITN_nsprefix_ = "catESAD_cu"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SubjectBaseDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SubjectBaseDetailsType.subclass:
            return SubjectBaseDetailsType.subclass(*args_, **kwargs_)
        else:
            return SubjectBaseDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryA2Code(self):
        return self.CountryA2Code
    def set_CountryA2Code(self, CountryA2Code):
        self.CountryA2Code = CountryA2Code
    def get_BusinessEntityTypeCode(self):
        return self.BusinessEntityTypeCode
    def set_BusinessEntityTypeCode(self, BusinessEntityTypeCode):
        self.BusinessEntityTypeCode = BusinessEntityTypeCode
    def get_BusinessEntityTypeName(self):
        return self.BusinessEntityTypeName
    def set_BusinessEntityTypeName(self, BusinessEntityTypeName):
        self.BusinessEntityTypeName = BusinessEntityTypeName
    def add_BusinessEntityTypeName(self, value):
        self.BusinessEntityTypeName.append(value)
    def insert_BusinessEntityTypeName_at(self, index, value):
        self.BusinessEntityTypeName.insert(index, value)
    def replace_BusinessEntityTypeName_at(self, index, value):
        self.BusinessEntityTypeName[index] = value
    def get_UITN(self):
        return self.UITN
    def set_UITN(self, UITN):
        self.UITN = UITN
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Text150Type(self, value):
        result = True
        # Validate type Text150Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text150Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text150Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CountryA2Code is not None or
            self.BusinessEntityTypeCode is not None or
            self.BusinessEntityTypeName or
            self.UITN is not None or
            super(SubjectBaseDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SubjectBaseDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SubjectBaseDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SubjectBaseDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectBaseDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SubjectBaseDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='SubjectBaseDetailsType'):
        super(SubjectBaseDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectBaseDetailsType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SubjectBaseDetailsType', fromsubclass_=False, pretty_print=True):
        super(SubjectBaseDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryA2Code is not None:
            namespaceprefix_ = self.CountryA2Code_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryA2Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryA2Code>%s</%sCountryA2Code>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryA2Code), input_name='CountryA2Code')), namespaceprefix_ , eol_))
        if self.BusinessEntityTypeCode is not None:
            namespaceprefix_ = self.BusinessEntityTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessEntityTypeCode_nsprefix_) else ''
            self.BusinessEntityTypeCode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BusinessEntityTypeCode', pretty_print=pretty_print)
        for BusinessEntityTypeName_ in self.BusinessEntityTypeName:
            namespaceprefix_ = self.BusinessEntityTypeName_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessEntityTypeName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBusinessEntityTypeName>%s</%sBusinessEntityTypeName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(BusinessEntityTypeName_), input_name='BusinessEntityTypeName')), namespaceprefix_ , eol_))
        if self.UITN is not None:
            namespaceprefix_ = self.UITN_nsprefix_ + ':' if (UseCapturedNS_ and self.UITN_nsprefix_) else ''
            self.UITN.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UITN', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(SubjectBaseDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryA2Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryA2Code')
            value_ = self.gds_validate_string(value_, node, 'CountryA2Code')
            self.CountryA2Code = value_
            self.CountryA2Code_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryA2Code)
        elif nodeName_ == 'BusinessEntityTypeCode':
            obj_ = UnifiedCode20Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BusinessEntityTypeCode = obj_
            obj_.original_tagname_ = 'BusinessEntityTypeCode'
        elif nodeName_ == 'BusinessEntityTypeName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BusinessEntityTypeName')
            value_ = self.gds_validate_string(value_, node, 'BusinessEntityTypeName')
            self.BusinessEntityTypeName.append(value_)
            self.BusinessEntityTypeName_nsprefix_ = child_.prefix
            # validate type Text150Type
            self.validate_Text150Type(self.BusinessEntityTypeName[-1])
        elif nodeName_ == 'UITN':
            obj_ = UITN40Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UITN = obj_
            obj_.original_tagname_ = 'UITN'
        super(SubjectBaseDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class SubjectBaseDetailsType


class SupplementaryQuantityType4(GeneratedsSuper):
    """SupplementaryQuantityType4 -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    в
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    GoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierName -- У
    с
    л
    о
    в
    н
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierCode -- К
    о
    д
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    е
    д
    и
    н
    и
    ц
    и
    з
    м
    е
    р
    е
    н
    и
    я
    и
    с
    ч
    е
    т
    а
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsQuantity=None, MeasureUnitQualifierName=None, MeasureUnitQualifierCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.GoodsQuantity = GoodsQuantity
        self.validate_Quantity24point8Type(self.GoodsQuantity)
        self.GoodsQuantity_nsprefix_ = "RUSclt_ru"
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
        self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        self.MeasureUnitQualifierName_nsprefix_ = "cltESAD_cu"
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
        self.MeasureUnitQualifierCode_nsprefix_ = "cltESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SupplementaryQuantityType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplementaryQuantityType4.subclass:
            return SupplementaryQuantityType4.subclass(*args_, **kwargs_)
        else:
            return SupplementaryQuantityType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsQuantity(self):
        return self.GoodsQuantity
    def set_GoodsQuantity(self, GoodsQuantity):
        self.GoodsQuantity = GoodsQuantity
    def get_MeasureUnitQualifierName(self):
        return self.MeasureUnitQualifierName
    def set_MeasureUnitQualifierName(self, MeasureUnitQualifierName):
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
    def get_MeasureUnitQualifierCode(self):
        return self.MeasureUnitQualifierCode
    def set_MeasureUnitQualifierCode(self, MeasureUnitQualifierCode):
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
    def validate_Quantity24point8Type(self, value):
        result = True
        # Validate type Quantity24point8Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity24point8Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity24point8Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierNameType(self, value):
        result = True
        # Validate type MeasureUnitQualifierNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 13:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on MeasureUnitQualifierNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on MeasureUnitQualifierNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsQuantity is not None or
            self.MeasureUnitQualifierName is not None or
            self.MeasureUnitQualifierCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='SupplementaryQuantityType4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SupplementaryQuantityType4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SupplementaryQuantityType4':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SupplementaryQuantityType4')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SupplementaryQuantityType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='SupplementaryQuantityType4'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='SupplementaryQuantityType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsQuantity is not None:
            namespaceprefix_ = self.GoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsQuantity>%s</%sGoodsQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.GoodsQuantity, input_name='GoodsQuantity'), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierName is not None:
            namespaceprefix_ = self.MeasureUnitQualifierName_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierName>%s</%sMeasureUnitQualifierName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierName), input_name='MeasureUnitQualifierName')), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierCode is not None:
            namespaceprefix_ = self.MeasureUnitQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierCode>%s</%sMeasureUnitQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierCode), input_name='MeasureUnitQualifierCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'GoodsQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'GoodsQuantity')
            self.GoodsQuantity = fval_
            self.GoodsQuantity_nsprefix_ = child_.prefix
            # validate type Quantity24point8Type
            self.validate_Quantity24point8Type(self.GoodsQuantity)
        elif nodeName_ == 'MeasureUnitQualifierName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierName')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierName')
            self.MeasureUnitQualifierName = value_
            self.MeasureUnitQualifierName_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierNameType
            self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        elif nodeName_ == 'MeasureUnitQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierCode')
            self.MeasureUnitQualifierCode = value_
            self.MeasureUnitQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
# end class SupplementaryQuantityType4


class SupplyConsigneeType(OrganizationBaseType):
    """SupplyConsigneeType -- П
    о
    л
    у
    ч
    а
    т
    е
    л
    ь
    п
    о
    с
    т
    а
    в
    к
    и
    .
    Д
    л
    я
    Р
    Ф
    CountryCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = OrganizationBaseType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("SupplyConsigneeType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures,  **kwargs_)
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SupplyConsigneeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplyConsigneeType.subclass:
            return SupplyConsigneeType.subclass(*args_, **kwargs_)
        else:
            return SupplyConsigneeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.CountryCode is not None or
            super(SupplyConsigneeType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SupplyConsigneeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SupplyConsigneeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SupplyConsigneeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SupplyConsigneeType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SupplyConsigneeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='SupplyConsigneeType'):
        super(SupplyConsigneeType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SupplyConsigneeType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SupplyConsigneeType', fromsubclass_=False, pretty_print=True):
        super(SupplyConsigneeType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(SupplyConsigneeType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        super(SupplyConsigneeType, self)._buildChildren(child_, node, nodeName_, True)
# end class SupplyConsigneeType


class SupplyConsignorType(OrganizationBaseType):
    """SupplyConsignorType -- О
    т
    п
    р
    а
    в
    и
    т
    е
    л
    ь
    п
    о
    с
    т
    а
    в
    к
    и
    .
    Д
    л
    я
    Р
    Ф
    CountryCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = OrganizationBaseType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("SupplyConsignorType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures,  **kwargs_)
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SupplyConsignorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplyConsignorType.subclass:
            return SupplyConsignorType.subclass(*args_, **kwargs_)
        else:
            return SupplyConsignorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.CountryCode is not None or
            super(SupplyConsignorType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SupplyConsignorType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SupplyConsignorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SupplyConsignorType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SupplyConsignorType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SupplyConsignorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='SupplyConsignorType'):
        super(SupplyConsignorType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SupplyConsignorType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SupplyConsignorType', fromsubclass_=False, pretty_print=True):
        super(SupplyConsignorType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(SupplyConsignorType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        super(SupplyConsignorType, self)._buildChildren(child_, node, nodeName_, True)
# end class SupplyConsignorType


class SupplyInformationsType(GeneratedsSuper):
    """SupplyInformationsType -- О
    п
    и
    с
    а
    н
    и
    е
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    .
    Д
    л
    я
    Р
    Ф
    OriginCountryName -- С
    т
    р
    а
    н
    а
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    CustomsCost -- У
    с
    л
    о
    в
    н
    а
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    ContractCurrencyCode -- К
    о
    д
    в
    а
    л
    ю
    т
    ы
    DeliveryTerms -- У
    с
    л
    о
    в
    и
    я
    п
    о
    с
    т
    а
    в
    к
    и
    .
    GoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    в
    е
    д
    и
    н
    и
    ц
    а
    х
    и
    з
    м
    е
    р
    е
    н
    и
    я
    .
    SupplyConsignor -- О
    т
    п
    р
    а
    в
    и
    т
    е
    л
    ь
    п
    о
    с
    т
    а
    в
    к
    и
    .
    SupplyConsignee -- П
    о
    л
    у
    ч
    а
    т
    е
    л
    ь
    п
    о
    с
    т
    а
    в
    к
    и
    .
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OriginCountryName=None, CustomsCost=None, ContractCurrencyCode=None, DeliveryTerms=None, GoodsQuantity=None, SupplyConsignor=None, SupplyConsignee=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.OriginCountryName = OriginCountryName
        self.validate_CountryNameType(self.OriginCountryName)
        self.OriginCountryName_nsprefix_ = "clt_ru"
        self.CustomsCost = CustomsCost
        self.validate_AmountType(self.CustomsCost)
        self.CustomsCost_nsprefix_ = "clt_ru"
        self.ContractCurrencyCode = ContractCurrencyCode
        self.validate_CurrencyA3CodeType(self.ContractCurrencyCode)
        self.ContractCurrencyCode_nsprefix_ = "clt_ru"
        self.DeliveryTerms = DeliveryTerms
        self.DeliveryTerms_nsprefix_ = "cat_ru"
        if GoodsQuantity is None:
            self.GoodsQuantity = []
        else:
            self.GoodsQuantity = GoodsQuantity
        self.GoodsQuantity_nsprefix_ = "cat_ru"
        self.SupplyConsignor = SupplyConsignor
        self.SupplyConsignor_nsprefix_ = "catESAD_cu"
        self.SupplyConsignee = SupplyConsignee
        self.SupplyConsignee_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SupplyInformationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplyInformationsType.subclass:
            return SupplyInformationsType.subclass(*args_, **kwargs_)
        else:
            return SupplyInformationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OriginCountryName(self):
        return self.OriginCountryName
    def set_OriginCountryName(self, OriginCountryName):
        self.OriginCountryName = OriginCountryName
    def get_CustomsCost(self):
        return self.CustomsCost
    def set_CustomsCost(self, CustomsCost):
        self.CustomsCost = CustomsCost
    def get_ContractCurrencyCode(self):
        return self.ContractCurrencyCode
    def set_ContractCurrencyCode(self, ContractCurrencyCode):
        self.ContractCurrencyCode = ContractCurrencyCode
    def get_DeliveryTerms(self):
        return self.DeliveryTerms
    def set_DeliveryTerms(self, DeliveryTerms):
        self.DeliveryTerms = DeliveryTerms
    def get_GoodsQuantity(self):
        return self.GoodsQuantity
    def set_GoodsQuantity(self, GoodsQuantity):
        self.GoodsQuantity = GoodsQuantity
    def add_GoodsQuantity(self, value):
        self.GoodsQuantity.append(value)
    def insert_GoodsQuantity_at(self, index, value):
        self.GoodsQuantity.insert(index, value)
    def replace_GoodsQuantity_at(self, index, value):
        self.GoodsQuantity[index] = value
    def get_SupplyConsignor(self):
        return self.SupplyConsignor
    def set_SupplyConsignor(self, SupplyConsignor):
        self.SupplyConsignor = SupplyConsignor
    def get_SupplyConsignee(self):
        return self.SupplyConsignee
    def set_SupplyConsignee(self, SupplyConsignee):
        self.SupplyConsignee = SupplyConsignee
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.OriginCountryName is not None or
            self.CustomsCost is not None or
            self.ContractCurrencyCode is not None or
            self.DeliveryTerms is not None or
            self.GoodsQuantity or
            self.SupplyConsignor is not None or
            self.SupplyConsignee is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='SupplyInformationsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SupplyInformationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SupplyInformationsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SupplyInformationsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SupplyInformationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='SupplyInformationsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='SupplyInformationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OriginCountryName is not None:
            namespaceprefix_ = self.OriginCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCountryName>%s</%sOriginCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryName), input_name='OriginCountryName')), namespaceprefix_ , eol_))
        if self.CustomsCost is not None:
            namespaceprefix_ = self.CustomsCost_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCost>%s</%sCustomsCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CustomsCost, input_name='CustomsCost'), namespaceprefix_ , eol_))
        if self.ContractCurrencyCode is not None:
            namespaceprefix_ = self.ContractCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractCurrencyCode>%s</%sContractCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContractCurrencyCode), input_name='ContractCurrencyCode')), namespaceprefix_ , eol_))
        if self.DeliveryTerms is not None:
            namespaceprefix_ = self.DeliveryTerms_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTerms_nsprefix_) else ''
            self.DeliveryTerms.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeliveryTerms', pretty_print=pretty_print)
        for GoodsQuantity_ in self.GoodsQuantity:
            namespaceprefix_ = self.GoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsQuantity_nsprefix_) else ''
            GoodsQuantity_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsQuantity', pretty_print=pretty_print)
        if self.SupplyConsignor is not None:
            namespaceprefix_ = self.SupplyConsignor_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplyConsignor_nsprefix_) else ''
            self.SupplyConsignor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplyConsignor', pretty_print=pretty_print)
        if self.SupplyConsignee is not None:
            namespaceprefix_ = self.SupplyConsignee_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplyConsignee_nsprefix_) else ''
            self.SupplyConsignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplyConsignee', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OriginCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginCountryName')
            value_ = self.gds_validate_string(value_, node, 'OriginCountryName')
            self.OriginCountryName = value_
            self.OriginCountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.OriginCountryName)
        elif nodeName_ == 'CustomsCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CustomsCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'CustomsCost')
            self.CustomsCost = fval_
            self.CustomsCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.CustomsCost)
        elif nodeName_ == 'ContractCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ContractCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'ContractCurrencyCode')
            self.ContractCurrencyCode = value_
            self.ContractCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.ContractCurrencyCode)
        elif nodeName_ == 'DeliveryTerms':
            obj_ = DeliveryTermsRUType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeliveryTerms = obj_
            obj_.original_tagname_ = 'DeliveryTerms'
        elif nodeName_ == 'GoodsQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsQuantity.append(obj_)
            obj_.original_tagname_ = 'GoodsQuantity'
        elif nodeName_ == 'SupplyConsignor':
            obj_ = SupplyConsignorType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplyConsignor = obj_
            obj_.original_tagname_ = 'SupplyConsignor'
        elif nodeName_ == 'SupplyConsignee':
            obj_ = SupplyConsigneeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplyConsignee = obj_
            obj_.original_tagname_ = 'SupplyConsignee'
# end class SupplyInformationsType


class TDGuaranteeType(GeneratedsSuper):
    """TDGuaranteeType -- Г
    а
    р
    а
    н
    т
    и
    я
    д
    л
    я
    Т
    Д
    MeasureCode -- К
    о
    д
    м
    е
    р
    ы
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    м
    е
    р
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    DocNumber -- Н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocDate -- Д
    а
    т
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    GuaranteeCertificateIdDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    о
    м
    н
    о
    м
    е
    р
    е
    с
    е
    р
    т
    и
    ф
    и
    к
    а
    т
    а
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    и
    с
    п
    о
    л
    н
    е
    н
    и
    я
    о
    б
    я
    з
    а
    н
    н
    о
    с
    т
    и
    п
    о
    у
    п
    л
    а
    т
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    о
    ш
    л
    и
    н
    ,
    н
    а
    л
    о
    г
    о
    в
    TransitGuaranteeDocDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    е
    м
    п
    р
    и
    м
    е
    н
    е
    н
    и
    е
    м
    е
    р
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    с
    о
    б
    л
    ю
    д
    е
    н
    и
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    т
    р
    а
    н
    з
    и
    т
    а
    NationalGuaranteeCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    г
    а
    р
    а
    н
    т
    и
    и
    ,
    у
    к
    а
    з
    а
    н
    н
    о
    е
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    з
    а
    к
    о
    н
    о
    д
    а
    т
    е
    л
    ь
    с
    т
    в
    о
    м
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    -
    ч
    л
    е
    н
    а
    NonGuaranteeCountryCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    ,
    в
    к
    о
    т
    о
    р
    о
    й
    г
    а
    р
    а
    н
    т
    и
    я
    н
    е
    д
    е
    й
    с
    т
    в
    и
    т
    е
    л
    ь
    н
    а
    RegisterDocumentIdDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    е
    м
    в
    к
    л
    ю
    ч
    е
    н
    и
    е
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    е
    р
    е
    в
    о
    з
    ч
    и
    к
    о
    в
    и
    л
    и
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    GuaranteeName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    г
    а
    р
    а
    н
    т
    а
    UNP -- У
    ч
    е
    т
    н
    ы
    й
    н
    о
    м
    е
    р
    п
    л
    а
    т
    е
    л
    ь
    щ
    и
    к
    а
    (
    У
    Н
    П
    )
    BIC -- К
    о
    д
    М
    Ф
    О
    /
    Б
    И
    К
    GuaranteeAmount -- С
    у
    м
    м
    а
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    .
    Д
    л
    я
    Р
    Б
    GuaranteeTD -- П
    о
    р
    у
    ч
    и
    т
    е
    л
    ь
    с
    т
    в
    о
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MeasureCode=None, DocNumber=None, DocDate=None, GuaranteeCertificateIdDetails=None, TransitGuaranteeDocDetails=None, NationalGuaranteeCode=None, NonGuaranteeCountryCode=None, RegisterDocumentIdDetails=None, GuaranteeName=None, UNP=None, BIC=None, GuaranteeAmount=None, GuaranteeTD=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.MeasureCode = MeasureCode
        self.validate_GuaranteeCodeType(self.MeasureCode)
        self.MeasureCode_nsprefix_ = "cltESAD_cu"
        self.DocNumber = DocNumber
        self.validate_DocumentNumberType(self.DocNumber)
        self.DocNumber_nsprefix_ = "clt_ru"
        if isinstance(DocDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocDate
        self.DocDate = initvalue_
        self.DocDate_nsprefix_ = "clt_ru"
        self.GuaranteeCertificateIdDetails = GuaranteeCertificateIdDetails
        self.validate_GTDIDType(self.GuaranteeCertificateIdDetails)
        self.GuaranteeCertificateIdDetails_nsprefix_ = "cat_ru"
        self.TransitGuaranteeDocDetails = TransitGuaranteeDocDetails
        self.TransitGuaranteeDocDetails_nsprefix_ = "catESAD_cu"
        self.NationalGuaranteeCode = NationalGuaranteeCode
        self.validate_LetterIndicatorType(self.NationalGuaranteeCode)
        self.NationalGuaranteeCode_nsprefix_ = "clt_ru"
        if NonGuaranteeCountryCode is None:
            self.NonGuaranteeCountryCode = []
        else:
            self.NonGuaranteeCountryCode = NonGuaranteeCountryCode
        self.NonGuaranteeCountryCode_nsprefix_ = "clt_ru"
        self.RegisterDocumentIdDetails = RegisterDocumentIdDetails
        self.RegisterDocumentIdDetails_nsprefix_ = "catESAD_cu"
        self.GuaranteeName = GuaranteeName
        self.validate_NameType(self.GuaranteeName)
        self.GuaranteeName_nsprefix_ = "clt_ru"
        self.UNP = UNP
        self.validate_UNPTtype(self.UNP)
        self.UNP_nsprefix_ = "clt_ru"
        self.BIC = BIC
        self.validate_BICIDType(self.BIC)
        self.BIC_nsprefix_ = "clt_ru"
        self.GuaranteeAmount = GuaranteeAmount
        self.validate_AmountType(self.GuaranteeAmount)
        self.GuaranteeAmount_nsprefix_ = "clt_ru"
        self.GuaranteeTD = GuaranteeTD
        self.GuaranteeTD_nsprefix_ = "catESAD_cu"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TDGuaranteeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TDGuaranteeType.subclass:
            return TDGuaranteeType.subclass(*args_, **kwargs_)
        else:
            return TDGuaranteeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MeasureCode(self):
        return self.MeasureCode
    def set_MeasureCode(self, MeasureCode):
        self.MeasureCode = MeasureCode
    def get_DocNumber(self):
        return self.DocNumber
    def set_DocNumber(self, DocNumber):
        self.DocNumber = DocNumber
    def get_DocDate(self):
        return self.DocDate
    def set_DocDate(self, DocDate):
        self.DocDate = DocDate
    def get_GuaranteeCertificateIdDetails(self):
        return self.GuaranteeCertificateIdDetails
    def set_GuaranteeCertificateIdDetails(self, GuaranteeCertificateIdDetails):
        self.GuaranteeCertificateIdDetails = GuaranteeCertificateIdDetails
    def get_TransitGuaranteeDocDetails(self):
        return self.TransitGuaranteeDocDetails
    def set_TransitGuaranteeDocDetails(self, TransitGuaranteeDocDetails):
        self.TransitGuaranteeDocDetails = TransitGuaranteeDocDetails
    def get_NationalGuaranteeCode(self):
        return self.NationalGuaranteeCode
    def set_NationalGuaranteeCode(self, NationalGuaranteeCode):
        self.NationalGuaranteeCode = NationalGuaranteeCode
    def get_NonGuaranteeCountryCode(self):
        return self.NonGuaranteeCountryCode
    def set_NonGuaranteeCountryCode(self, NonGuaranteeCountryCode):
        self.NonGuaranteeCountryCode = NonGuaranteeCountryCode
    def add_NonGuaranteeCountryCode(self, value):
        self.NonGuaranteeCountryCode.append(value)
    def insert_NonGuaranteeCountryCode_at(self, index, value):
        self.NonGuaranteeCountryCode.insert(index, value)
    def replace_NonGuaranteeCountryCode_at(self, index, value):
        self.NonGuaranteeCountryCode[index] = value
    def get_RegisterDocumentIdDetails(self):
        return self.RegisterDocumentIdDetails
    def set_RegisterDocumentIdDetails(self, RegisterDocumentIdDetails):
        self.RegisterDocumentIdDetails = RegisterDocumentIdDetails
    def get_GuaranteeName(self):
        return self.GuaranteeName
    def set_GuaranteeName(self, GuaranteeName):
        self.GuaranteeName = GuaranteeName
    def get_UNP(self):
        return self.UNP
    def set_UNP(self, UNP):
        self.UNP = UNP
    def get_BIC(self):
        return self.BIC
    def set_BIC(self, BIC):
        self.BIC = BIC
    def get_GuaranteeAmount(self):
        return self.GuaranteeAmount
    def set_GuaranteeAmount(self, GuaranteeAmount):
        self.GuaranteeAmount = GuaranteeAmount
    def get_GuaranteeTD(self):
        return self.GuaranteeTD
    def set_GuaranteeTD(self, GuaranteeTD):
        self.GuaranteeTD = GuaranteeTD
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_GuaranteeCodeType(self, value):
        result = True
        # Validate type GuaranteeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_GuaranteeCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_GuaranteeCodeType_patterns_, ))
                result = False
        return result
    validate_GuaranteeCodeType_patterns_ = [['^(\\d{2})$']]
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_GTDIDType(self, value):
        result = True
        # Validate type GTDIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on GTDIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on GTDIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_UNPTtype(self, value):
        result = True
        # Validate type UNPTtype, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_UNPTtype_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_UNPTtype_patterns_, ))
                result = False
        return result
    validate_UNPTtype_patterns_ = [['^(\\d{9})$']]
    def validate_BICIDType(self, value):
        result = True
        # Validate type BICIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_BICIDType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_BICIDType_patterns_, ))
                result = False
        return result
    validate_BICIDType_patterns_ = [['^(\\d{9})$']]
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.MeasureCode is not None or
            self.DocNumber is not None or
            self.DocDate is not None or
            self.GuaranteeCertificateIdDetails is not None or
            self.TransitGuaranteeDocDetails is not None or
            self.NationalGuaranteeCode is not None or
            self.NonGuaranteeCountryCode or
            self.RegisterDocumentIdDetails is not None or
            self.GuaranteeName is not None or
            self.UNP is not None or
            self.BIC is not None or
            self.GuaranteeAmount is not None or
            self.GuaranteeTD is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='TDGuaranteeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TDGuaranteeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TDGuaranteeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TDGuaranteeType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TDGuaranteeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='TDGuaranteeType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='TDGuaranteeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasureCode is not None:
            namespaceprefix_ = self.MeasureCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureCode>%s</%sMeasureCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureCode), input_name='MeasureCode')), namespaceprefix_ , eol_))
        if self.DocNumber is not None:
            namespaceprefix_ = self.DocNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.DocNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocNumber>%s</%sDocNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocNumber), input_name='DocNumber')), namespaceprefix_ , eol_))
        if self.DocDate is not None:
            namespaceprefix_ = self.DocDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocDate>%s</%sDocDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocDate, input_name='DocDate'), namespaceprefix_ , eol_))
        if self.GuaranteeCertificateIdDetails is not None:
            namespaceprefix_ = self.GuaranteeCertificateIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeCertificateIdDetails_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteeCertificateIdDetails>%s</%sGuaranteeCertificateIdDetails>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteeCertificateIdDetails), input_name='GuaranteeCertificateIdDetails')), namespaceprefix_ , eol_))
        if self.TransitGuaranteeDocDetails is not None:
            namespaceprefix_ = self.TransitGuaranteeDocDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TransitGuaranteeDocDetails_nsprefix_) else ''
            self.TransitGuaranteeDocDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransitGuaranteeDocDetails', pretty_print=pretty_print)
        if self.NationalGuaranteeCode is not None:
            namespaceprefix_ = self.NationalGuaranteeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalGuaranteeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNationalGuaranteeCode>%s</%sNationalGuaranteeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NationalGuaranteeCode), input_name='NationalGuaranteeCode')), namespaceprefix_ , eol_))
        for NonGuaranteeCountryCode_ in self.NonGuaranteeCountryCode:
            namespaceprefix_ = self.NonGuaranteeCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NonGuaranteeCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNonGuaranteeCountryCode>%s</%sNonGuaranteeCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(NonGuaranteeCountryCode_), input_name='NonGuaranteeCountryCode')), namespaceprefix_ , eol_))
        if self.RegisterDocumentIdDetails is not None:
            namespaceprefix_ = self.RegisterDocumentIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RegisterDocumentIdDetails_nsprefix_) else ''
            self.RegisterDocumentIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RegisterDocumentIdDetails', pretty_print=pretty_print)
        if self.GuaranteeName is not None:
            namespaceprefix_ = self.GuaranteeName_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteeName>%s</%sGuaranteeName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GuaranteeName), input_name='GuaranteeName')), namespaceprefix_ , eol_))
        if self.UNP is not None:
            namespaceprefix_ = self.UNP_nsprefix_ + ':' if (UseCapturedNS_ and self.UNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUNP>%s</%sUNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UNP), input_name='UNP')), namespaceprefix_ , eol_))
        if self.BIC is not None:
            namespaceprefix_ = self.BIC_nsprefix_ + ':' if (UseCapturedNS_ and self.BIC_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBIC>%s</%sBIC>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BIC), input_name='BIC')), namespaceprefix_ , eol_))
        if self.GuaranteeAmount is not None:
            namespaceprefix_ = self.GuaranteeAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteeAmount>%s</%sGuaranteeAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.GuaranteeAmount, input_name='GuaranteeAmount'), namespaceprefix_ , eol_))
        if self.GuaranteeTD is not None:
            namespaceprefix_ = self.GuaranteeTD_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeTD_nsprefix_) else ''
            self.GuaranteeTD.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GuaranteeTD', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MeasureCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MeasureCode')
            value_ = self.gds_validate_string(value_, node, 'MeasureCode')
            self.MeasureCode = value_
            self.MeasureCode_nsprefix_ = child_.prefix
            # validate type GuaranteeCodeType
            self.validate_GuaranteeCodeType(self.MeasureCode)
        elif nodeName_ == 'DocNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocNumber')
            value_ = self.gds_validate_string(value_, node, 'DocNumber')
            self.DocNumber = value_
            self.DocNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.DocNumber)
        elif nodeName_ == 'DocDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocDate = dval_
            self.DocDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocDate)
        elif nodeName_ == 'GuaranteeCertificateIdDetails':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GuaranteeCertificateIdDetails')
            value_ = self.gds_validate_string(value_, node, 'GuaranteeCertificateIdDetails')
            self.GuaranteeCertificateIdDetails = value_
            self.GuaranteeCertificateIdDetails_nsprefix_ = child_.prefix
            # validate type GTDIDType
            self.validate_GTDIDType(self.GuaranteeCertificateIdDetails)
        elif nodeName_ == 'TransitGuaranteeDocDetails':
            class_obj_ = self.get_class_obj_(child_, DocBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransitGuaranteeDocDetails = obj_
            obj_.original_tagname_ = 'TransitGuaranteeDocDetails'
        elif nodeName_ == 'NationalGuaranteeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'NationalGuaranteeCode')
            value_ = self.gds_validate_string(value_, node, 'NationalGuaranteeCode')
            self.NationalGuaranteeCode = value_
            self.NationalGuaranteeCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.NationalGuaranteeCode)
        elif nodeName_ == 'NonGuaranteeCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'NonGuaranteeCountryCode')
            value_ = self.gds_validate_string(value_, node, 'NonGuaranteeCountryCode')
            self.NonGuaranteeCountryCode.append(value_)
            self.NonGuaranteeCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.NonGuaranteeCountryCode[-1])
        elif nodeName_ == 'RegisterDocumentIdDetails':
            obj_ = AEORegistryIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RegisterDocumentIdDetails = obj_
            obj_.original_tagname_ = 'RegisterDocumentIdDetails'
        elif nodeName_ == 'GuaranteeName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GuaranteeName')
            value_ = self.gds_validate_string(value_, node, 'GuaranteeName')
            self.GuaranteeName = value_
            self.GuaranteeName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.GuaranteeName)
        elif nodeName_ == 'UNP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'UNP')
            value_ = self.gds_validate_string(value_, node, 'UNP')
            self.UNP = value_
            self.UNP_nsprefix_ = child_.prefix
            # validate type UNPTtype
            self.validate_UNPTtype(self.UNP)
        elif nodeName_ == 'BIC':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BIC')
            value_ = self.gds_validate_string(value_, node, 'BIC')
            self.BIC = value_
            self.BIC_nsprefix_ = child_.prefix
            # validate type BICIDType
            self.validate_BICIDType(self.BIC)
        elif nodeName_ == 'GuaranteeAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'GuaranteeAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'GuaranteeAmount')
            self.GuaranteeAmount = fval_
            self.GuaranteeAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.GuaranteeAmount)
        elif nodeName_ == 'GuaranteeTD':
            obj_ = GuaranteeTDType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GuaranteeTD = obj_
            obj_.original_tagname_ = 'GuaranteeTD'
# end class TDGuaranteeType


class TIRIdDetailsType(GeneratedsSuper):
    """TIRIdDetailsType -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    TIRSeries -- С
    е
    р
    и
    я
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    TIRID -- Н
    о
    м
    е
    р
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TIRSeries=None, TIRID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.TIRSeries = TIRSeries
        self.validate_Code2Type(self.TIRSeries)
        self.TIRSeries_nsprefix_ = "clt_ru"
        self.TIRID = TIRID
        self.validate_Code8Type(self.TIRID)
        self.TIRID_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TIRIdDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TIRIdDetailsType.subclass:
            return TIRIdDetailsType.subclass(*args_, **kwargs_)
        else:
            return TIRIdDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TIRSeries(self):
        return self.TIRSeries
    def set_TIRSeries(self, TIRSeries):
        self.TIRSeries = TIRSeries
    def get_TIRID(self):
        return self.TIRID
    def set_TIRID(self, TIRID):
        self.TIRID = TIRID
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code8Type(self, value):
        result = True
        # Validate type Code8Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code8Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TIRSeries is not None or
            self.TIRID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TIRIdDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TIRIdDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TIRIdDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TIRIdDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TIRIdDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='TIRIdDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TIRIdDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TIRSeries is not None:
            namespaceprefix_ = self.TIRSeries_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRSeries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTIRSeries>%s</%sTIRSeries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TIRSeries), input_name='TIRSeries')), namespaceprefix_ , eol_))
        if self.TIRID is not None:
            namespaceprefix_ = self.TIRID_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTIRID>%s</%sTIRID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TIRID), input_name='TIRID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TIRSeries':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TIRSeries')
            value_ = self.gds_validate_string(value_, node, 'TIRSeries')
            self.TIRSeries = value_
            self.TIRSeries_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.TIRSeries)
        elif nodeName_ == 'TIRID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TIRID')
            value_ = self.gds_validate_string(value_, node, 'TIRID')
            self.TIRID = value_
            self.TIRID_nsprefix_ = child_.prefix
            # validate type Code8Type
            self.validate_Code8Type(self.TIRID)
# end class TIRIdDetailsType


class TransportMeansRegistrationIdDetailsType(TransportMeansBaseType):
    """TransportMeansRegistrationIdDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    м
    с
    р
    е
    д
    с
    т
    в
    е
    FirstTrailerRegId -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    п
    е
    р
    в
    о
    г
    о
    п
    р
    и
    ц
    е
    п
    н
    о
    г
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    SecondTrailerRegId -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    в
    т
    о
    р
    о
    г
    о
    п
    р
    и
    ц
    е
    п
    н
    о
    г
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = TransportMeansBaseType
    def __init__(self, VIN=None, TransportKindCode=None, TransportTypeName=None, TransportMarkCode=None, TransportIdentifier=None, TransportMeansNationalityCode=None, ActiveTransportIdentifier=None, TransportRegNumber=None, FirstTrailerRegId=None, SecondTrailerRegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("TransportMeansRegistrationIdDetailsType"), self).__init__(VIN, TransportKindCode, TransportTypeName, TransportMarkCode, TransportIdentifier, TransportMeansNationalityCode, ActiveTransportIdentifier, TransportRegNumber,  **kwargs_)
        self.FirstTrailerRegId = FirstTrailerRegId
        self.validate_TransportMeansIDType(self.FirstTrailerRegId)
        self.FirstTrailerRegId_nsprefix_ = "clt_ru"
        self.SecondTrailerRegId = SecondTrailerRegId
        self.validate_TransportMeansIDType(self.SecondTrailerRegId)
        self.SecondTrailerRegId_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportMeansRegistrationIdDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportMeansRegistrationIdDetailsType.subclass:
            return TransportMeansRegistrationIdDetailsType.subclass(*args_, **kwargs_)
        else:
            return TransportMeansRegistrationIdDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FirstTrailerRegId(self):
        return self.FirstTrailerRegId
    def set_FirstTrailerRegId(self, FirstTrailerRegId):
        self.FirstTrailerRegId = FirstTrailerRegId
    def get_SecondTrailerRegId(self):
        return self.SecondTrailerRegId
    def set_SecondTrailerRegId(self, SecondTrailerRegId):
        self.SecondTrailerRegId = SecondTrailerRegId
    def validate_TransportMeansIDType(self, value):
        result = True
        # Validate type TransportMeansIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TransportMeansIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TransportMeansIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.FirstTrailerRegId is not None or
            self.SecondTrailerRegId is not None or
            super(TransportMeansRegistrationIdDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportMeansRegistrationIdDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportMeansRegistrationIdDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportMeansRegistrationIdDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportMeansRegistrationIdDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportMeansRegistrationIdDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='TransportMeansRegistrationIdDetailsType'):
        super(TransportMeansRegistrationIdDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportMeansRegistrationIdDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportMeansRegistrationIdDetailsType', fromsubclass_=False, pretty_print=True):
        super(TransportMeansRegistrationIdDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FirstTrailerRegId is not None:
            namespaceprefix_ = self.FirstTrailerRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.FirstTrailerRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstTrailerRegId>%s</%sFirstTrailerRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FirstTrailerRegId), input_name='FirstTrailerRegId')), namespaceprefix_ , eol_))
        if self.SecondTrailerRegId is not None:
            namespaceprefix_ = self.SecondTrailerRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.SecondTrailerRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecondTrailerRegId>%s</%sSecondTrailerRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecondTrailerRegId), input_name='SecondTrailerRegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(TransportMeansRegistrationIdDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FirstTrailerRegId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'FirstTrailerRegId')
            value_ = self.gds_validate_string(value_, node, 'FirstTrailerRegId')
            self.FirstTrailerRegId = value_
            self.FirstTrailerRegId_nsprefix_ = child_.prefix
            # validate type TransportMeansIDType
            self.validate_TransportMeansIDType(self.FirstTrailerRegId)
        elif nodeName_ == 'SecondTrailerRegId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SecondTrailerRegId')
            value_ = self.gds_validate_string(value_, node, 'SecondTrailerRegId')
            self.SecondTrailerRegId = value_
            self.SecondTrailerRegId_nsprefix_ = child_.prefix
            # validate type TransportMeansIDType
            self.validate_TransportMeansIDType(self.SecondTrailerRegId)
        super(TransportMeansRegistrationIdDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class TransportMeansRegistrationIdDetailsType


class UITN40Type(GeneratedsSuper):
    """UITN40Type -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    м
    (
    у
    н
    и
    к
    а
    л
    ь
    н
    о
    м
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    м
    )
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    н
    о
    м
    е
    р
    е
    UITNCode -- К
    о
    д
    .
    У
    н
    и
    в
    е
    р
    с
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    .
    С
    т
    р
    о
    к
    а
    н
    е
    б
    о
    л
    е
    е
    40
    с
    и
    м
    в
    о
    л
    о
    в
    CountryCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    ,
    п
    о
    п
    р
    а
    в
    и
    л
    а
    м
    к
    о
    т
    о
    р
    о
    й
    с
    ф
    о
    р
    м
    и
    р
    о
    в
    а
    н
    у
    к
    а
    з
    а
    н
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UITNCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.UITNCode = UITNCode
        self.validate_Text40Type(self.UITNCode)
        self.UITNCode_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UITN40Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UITN40Type.subclass:
            return UITN40Type.subclass(*args_, **kwargs_)
        else:
            return UITN40Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UITNCode(self):
        return self.UITNCode
    def set_UITNCode(self, UITNCode):
        self.UITNCode = UITNCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.UITNCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UITN40Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UITN40Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UITN40Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UITN40Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UITN40Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='UITN40Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UITN40Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UITNCode is not None:
            namespaceprefix_ = self.UITNCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UITNCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUITNCode>%s</%sUITNCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UITNCode), input_name='UITNCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UITNCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UITNCode')
            value_ = self.gds_validate_string(value_, node, 'UITNCode')
            self.UITNCode = value_
            self.UITNCode_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.UITNCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
# end class UITN40Type


class UnifiedCode20Type(GeneratedsSuper):
    """UnifiedCode20Type -- С
    т
    р
    о
    к
    а
    с
    и
    м
    в
    о
    л
    о
    в
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    а
    я
    к
    р
    а
    т
    к
    о
    е
    у
    с
    л
    о
    в
    н
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    о
    б
    ъ
    е
    к
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    о
    с
    п
    р
    а
    в
    о
    ч
    н
    и
    к
    о
    м
    (
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    ),
    з
    а
    д
    а
    н
    н
    ы
    м
    с
    п
    о
    м
    о
    щ
    ь
    ю
    к
    о
    н
    т
    е
    к
    с
    т
    н
    о
    й
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    и
    ,
    с
    о
    д
    е
    р
    ж
    а
    щ
    а
    я
    н
    е
    б
    о
    л
    е
    е
    20
    с
    и
    м
    в
    о
    л
    о
    в
    UnifiedCode -- К
    о
    д
    о
    б
    ъ
    е
    к
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    в
    и
    и
    с
    о
    с
    п
    р
    а
    в
    о
    ч
    н
    и
    к
    о
    м
    (
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    )
    CodeListId -- О
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    п
    р
    а
    в
    о
    ч
    н
    и
    к
    а
    (
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    ),
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    о
    т
    о
    р
    ы
    м
    у
    к
    а
    з
    а
    н
    к
    о
    д
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnifiedCode=None, CodeListId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.UnifiedCode = UnifiedCode
        self.validate_CodeVariable20Type(self.UnifiedCode)
        self.UnifiedCode_nsprefix_ = "clt_ru"
        self.CodeListId = CodeListId
        self.validate_CodeVariable20Type(self.CodeListId)
        self.CodeListId_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnifiedCode20Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnifiedCode20Type.subclass:
            return UnifiedCode20Type.subclass(*args_, **kwargs_)
        else:
            return UnifiedCode20Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnifiedCode(self):
        return self.UnifiedCode
    def set_UnifiedCode(self, UnifiedCode):
        self.UnifiedCode = UnifiedCode
    def get_CodeListId(self):
        return self.CodeListId
    def set_CodeListId(self, CodeListId):
        self.CodeListId = CodeListId
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.UnifiedCode is not None or
            self.CodeListId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UnifiedCode20Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnifiedCode20Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnifiedCode20Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnifiedCode20Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnifiedCode20Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='UnifiedCode20Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UnifiedCode20Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnifiedCode is not None:
            namespaceprefix_ = self.UnifiedCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UnifiedCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnifiedCode>%s</%sUnifiedCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnifiedCode), input_name='UnifiedCode')), namespaceprefix_ , eol_))
        if self.CodeListId is not None:
            namespaceprefix_ = self.CodeListId_nsprefix_ + ':' if (UseCapturedNS_ and self.CodeListId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodeListId>%s</%sCodeListId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CodeListId), input_name='CodeListId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnifiedCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'UnifiedCode')
            value_ = self.gds_validate_string(value_, node, 'UnifiedCode')
            self.UnifiedCode = value_
            self.UnifiedCode_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.UnifiedCode)
        elif nodeName_ == 'CodeListId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CodeListId')
            value_ = self.gds_validate_string(value_, node, 'CodeListId')
            self.CodeListId = value_
            self.CodeListId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.CodeListId)
# end class UnifiedCode20Type


class UnifiedPhysicalMeasureType(GeneratedsSuper):
    """UnifiedPhysicalMeasureType -- Ч
    и
    с
    л
    о
    в
    а
    я
    в
    е
    л
    и
    ч
    и
    н
    а
    с
    з
    а
    д
    а
    н
    н
    о
    й
    т
    о
    ч
    н
    о
    с
    т
    ь
    ю
    ,
    о
    п
    р
    е
    д
    е
    л
    е
    н
    н
    а
    я
    в
    р
    е
    з
    у
    л
    ь
    т
    а
    т
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    ф
    и
    з
    и
    ч
    е
    с
    к
    и
    х
    п
    а
    р
    а
    м
    е
    т
    р
    о
    в
    в
    к
    а
    к
    и
    х
    -
    л
    и
    б
    о
    е
    д
    и
    н
    и
    ц
    а
    х
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasuredAmount -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierName -- У
    с
    л
    о
    в
    н
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MeasuredAmount=None, MeasureUnitQualifierName=None, MeasureUnitQualifierCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.MeasuredAmount = MeasuredAmount
        self.validate_QuantityBasis0Type(self.MeasuredAmount)
        self.MeasuredAmount_nsprefix_ = "clt_ru"
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
        self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        self.MeasureUnitQualifierName_nsprefix_ = "clt_ru"
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
        self.MeasureUnitQualifierCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnifiedPhysicalMeasureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnifiedPhysicalMeasureType.subclass:
            return UnifiedPhysicalMeasureType.subclass(*args_, **kwargs_)
        else:
            return UnifiedPhysicalMeasureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MeasuredAmount(self):
        return self.MeasuredAmount
    def set_MeasuredAmount(self, MeasuredAmount):
        self.MeasuredAmount = MeasuredAmount
    def get_MeasureUnitQualifierName(self):
        return self.MeasureUnitQualifierName
    def set_MeasureUnitQualifierName(self, MeasureUnitQualifierName):
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
    def get_MeasureUnitQualifierCode(self):
        return self.MeasureUnitQualifierCode
    def set_MeasureUnitQualifierCode(self, MeasureUnitQualifierCode):
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
    def validate_QuantityBasis0Type(self, value):
        result = True
        # Validate type QuantityBasis0Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0.000001:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasis0Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasis0Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierNameType(self, value):
        result = True
        # Validate type MeasureUnitQualifierNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 13:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on MeasureUnitQualifierNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on MeasureUnitQualifierNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.MeasuredAmount is not None or
            self.MeasureUnitQualifierName is not None or
            self.MeasureUnitQualifierCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UnifiedPhysicalMeasureType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnifiedPhysicalMeasureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnifiedPhysicalMeasureType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnifiedPhysicalMeasureType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnifiedPhysicalMeasureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='UnifiedPhysicalMeasureType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UnifiedPhysicalMeasureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasuredAmount is not None:
            namespaceprefix_ = self.MeasuredAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasuredAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasuredAmount>%s</%sMeasuredAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.MeasuredAmount, input_name='MeasuredAmount'), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierName is not None:
            namespaceprefix_ = self.MeasureUnitQualifierName_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierName>%s</%sMeasureUnitQualifierName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierName), input_name='MeasureUnitQualifierName')), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierCode is not None:
            namespaceprefix_ = self.MeasureUnitQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierCode>%s</%sMeasureUnitQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierCode), input_name='MeasureUnitQualifierCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MeasuredAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'MeasuredAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'MeasuredAmount')
            self.MeasuredAmount = fval_
            self.MeasuredAmount_nsprefix_ = child_.prefix
            # validate type QuantityBasis0Type
            self.validate_QuantityBasis0Type(self.MeasuredAmount)
        elif nodeName_ == 'MeasureUnitQualifierName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierName')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierName')
            self.MeasureUnitQualifierName = value_
            self.MeasureUnitQualifierName_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierNameType
            self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        elif nodeName_ == 'MeasureUnitQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierCode')
            self.MeasureUnitQualifierCode = value_
            self.MeasureUnitQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
# end class UnifiedPhysicalMeasureType


class WoodDescriptionDetailsType(GeneratedsSuper):
    """WoodDescriptionDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    л
    е
    с
    о
    м
    а
    т
    е
    р
    и
    а
    л
    а
    х
    WoodSortiment -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    о
    р
    т
    и
    м
    е
    н
    т
    а
    (
    д
    л
    я
    л
    е
    с
    о
    м
    а
    т
    е
    р
    и
    а
    л
    о
    в
    т
    о
    в
    а
    р
    н
    о
    й
    п
    о
    з
    и
    ц
    и
    и
    4403)
    WoodKind -- П
    о
    р
    о
    д
    а
    д
    р
    е
    в
    е
    с
    и
    н
    ы
    ProductSortName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    о
    р
    т
    а
    (
    г
    р
    у
    п
    п
    ы
    с
    о
    р
    т
    о
    в
    )
    п
    р
    о
    д
    у
    к
    т
    а
    (
    т
    о
    в
    а
    р
    а
    )
    AllowanceDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    в
    е
    л
    и
    ч
    и
    н
    е
    п
    р
    и
    п
    у
    с
    к
    а
    п
    о
    д
    л
    и
    н
    е
    ,
    ш
    и
    р
    и
    н
    е
    и
    в
    ы
    с
    о
    т
    е
    DeviationDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    в
    е
    л
    и
    ч
    и
    н
    е
    о
    т
    к
    л
    о
    н
    е
    н
    и
    й
    п
    о
    д
    л
    и
    н
    е
    ,
    ш
    и
    р
    и
    н
    е
    и
    в
    ы
    с
    о
    т
    е
    DiameterRangeDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    и
    а
    п
    а
    з
    о
    н
    е
    д
    и
    а
    м
    е
    т
    р
    о
    в
    ContractVolumeMeasure -- Н
    о
    м
    и
    н
    а
    л
    ь
    н
    ы
    й
    о
    б
    ъ
    е
    м
    т
    о
    в
    а
    р
    а
    (
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    д
    о
    г
    о
    в
    о
    р
    о
    м
    (
    к
    о
    н
    т
    р
    а
    к
    т
    о
    м
    ),
    б
    е
    з
    у
    ч
    е
    т
    а
    к
    о
    р
    ы
    ,
    п
    р
    и
    п
    у
    с
    к
    о
    в
    и
    д
    р
    .)
    FactVolumeMeasure -- Ф
    а
    к
    т
    и
    ч
    е
    с
    к
    и
    й
    о
    б
    ъ
    е
    м
    т
    о
    в
    а
    р
    а
    (c
    у
    ч
    е
    т
    о
    м
    к
    о
    р
    ы
    ,
    о
    т
    к
    л
    о
    н
    е
    н
    и
    й
    ,
    п
    р
    и
    п
    у
    с
    к
    о
    в
    и
    д
    р
    .)
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WoodSortiment=None, WoodKind=None, ProductSortName=None, AllowanceDetails=None, DeviationDetails=None, DiameterRangeDetails=None, ContractVolumeMeasure=None, FactVolumeMeasure=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.WoodSortiment = WoodSortiment
        self.validate_WoodAssortiment(self.WoodSortiment)
        self.WoodSortiment_nsprefix_ = "cltESAD_cu"
        self.WoodKind = WoodKind
        self.validate_WoodKindType(self.WoodKind)
        self.WoodKind_nsprefix_ = "cltESAD_cu"
        self.ProductSortName = ProductSortName
        self.validate_FreeText250Type(self.ProductSortName)
        self.ProductSortName_nsprefix_ = "clt_ru"
        self.AllowanceDetails = AllowanceDetails
        self.AllowanceDetails_nsprefix_ = "catESAD_cu"
        self.DeviationDetails = DeviationDetails
        self.DeviationDetails_nsprefix_ = "catESAD_cu"
        if DiameterRangeDetails is None:
            self.DiameterRangeDetails = []
        else:
            self.DiameterRangeDetails = DiameterRangeDetails
        self.DiameterRangeDetails_nsprefix_ = "catESAD_cu"
        self.ContractVolumeMeasure = ContractVolumeMeasure
        self.ContractVolumeMeasure_nsprefix_ = "cat_ru"
        self.FactVolumeMeasure = FactVolumeMeasure
        self.FactVolumeMeasure_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WoodDescriptionDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WoodDescriptionDetailsType.subclass:
            return WoodDescriptionDetailsType.subclass(*args_, **kwargs_)
        else:
            return WoodDescriptionDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WoodSortiment(self):
        return self.WoodSortiment
    def set_WoodSortiment(self, WoodSortiment):
        self.WoodSortiment = WoodSortiment
    def get_WoodKind(self):
        return self.WoodKind
    def set_WoodKind(self, WoodKind):
        self.WoodKind = WoodKind
    def get_ProductSortName(self):
        return self.ProductSortName
    def set_ProductSortName(self, ProductSortName):
        self.ProductSortName = ProductSortName
    def get_AllowanceDetails(self):
        return self.AllowanceDetails
    def set_AllowanceDetails(self, AllowanceDetails):
        self.AllowanceDetails = AllowanceDetails
    def get_DeviationDetails(self):
        return self.DeviationDetails
    def set_DeviationDetails(self, DeviationDetails):
        self.DeviationDetails = DeviationDetails
    def get_DiameterRangeDetails(self):
        return self.DiameterRangeDetails
    def set_DiameterRangeDetails(self, DiameterRangeDetails):
        self.DiameterRangeDetails = DiameterRangeDetails
    def add_DiameterRangeDetails(self, value):
        self.DiameterRangeDetails.append(value)
    def insert_DiameterRangeDetails_at(self, index, value):
        self.DiameterRangeDetails.insert(index, value)
    def replace_DiameterRangeDetails_at(self, index, value):
        self.DiameterRangeDetails[index] = value
    def get_ContractVolumeMeasure(self):
        return self.ContractVolumeMeasure
    def set_ContractVolumeMeasure(self, ContractVolumeMeasure):
        self.ContractVolumeMeasure = ContractVolumeMeasure
    def get_FactVolumeMeasure(self):
        return self.FactVolumeMeasure
    def set_FactVolumeMeasure(self, FactVolumeMeasure):
        self.FactVolumeMeasure = FactVolumeMeasure
    def validate_WoodAssortiment(self, value):
        result = True
        # Validate type WoodAssortiment, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 30:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on WoodAssortiment' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on WoodAssortiment' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_WoodKindType(self, value):
        result = True
        # Validate type WoodKindType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on WoodKindType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on WoodKindType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.WoodSortiment is not None or
            self.WoodKind is not None or
            self.ProductSortName is not None or
            self.AllowanceDetails is not None or
            self.DeviationDetails is not None or
            self.DiameterRangeDetails or
            self.ContractVolumeMeasure is not None or
            self.FactVolumeMeasure is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='WoodDescriptionDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WoodDescriptionDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WoodDescriptionDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WoodDescriptionDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WoodDescriptionDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='WoodDescriptionDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='WoodDescriptionDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WoodSortiment is not None:
            namespaceprefix_ = self.WoodSortiment_nsprefix_ + ':' if (UseCapturedNS_ and self.WoodSortiment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWoodSortiment>%s</%sWoodSortiment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WoodSortiment), input_name='WoodSortiment')), namespaceprefix_ , eol_))
        if self.WoodKind is not None:
            namespaceprefix_ = self.WoodKind_nsprefix_ + ':' if (UseCapturedNS_ and self.WoodKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWoodKind>%s</%sWoodKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WoodKind), input_name='WoodKind')), namespaceprefix_ , eol_))
        if self.ProductSortName is not None:
            namespaceprefix_ = self.ProductSortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductSortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductSortName>%s</%sProductSortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductSortName), input_name='ProductSortName')), namespaceprefix_ , eol_))
        if self.AllowanceDetails is not None:
            namespaceprefix_ = self.AllowanceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AllowanceDetails_nsprefix_) else ''
            self.AllowanceDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AllowanceDetails', pretty_print=pretty_print)
        if self.DeviationDetails is not None:
            namespaceprefix_ = self.DeviationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DeviationDetails_nsprefix_) else ''
            self.DeviationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeviationDetails', pretty_print=pretty_print)
        for DiameterRangeDetails_ in self.DiameterRangeDetails:
            namespaceprefix_ = self.DiameterRangeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DiameterRangeDetails_nsprefix_) else ''
            DiameterRangeDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DiameterRangeDetails', pretty_print=pretty_print)
        if self.ContractVolumeMeasure is not None:
            namespaceprefix_ = self.ContractVolumeMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractVolumeMeasure_nsprefix_) else ''
            self.ContractVolumeMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContractVolumeMeasure', pretty_print=pretty_print)
        if self.FactVolumeMeasure is not None:
            namespaceprefix_ = self.FactVolumeMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.FactVolumeMeasure_nsprefix_) else ''
            self.FactVolumeMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FactVolumeMeasure', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WoodSortiment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WoodSortiment')
            value_ = self.gds_validate_string(value_, node, 'WoodSortiment')
            self.WoodSortiment = value_
            self.WoodSortiment_nsprefix_ = child_.prefix
            # validate type WoodAssortiment
            self.validate_WoodAssortiment(self.WoodSortiment)
        elif nodeName_ == 'WoodKind':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WoodKind')
            value_ = self.gds_validate_string(value_, node, 'WoodKind')
            self.WoodKind = value_
            self.WoodKind_nsprefix_ = child_.prefix
            # validate type WoodKindType
            self.validate_WoodKindType(self.WoodKind)
        elif nodeName_ == 'ProductSortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductSortName')
            value_ = self.gds_validate_string(value_, node, 'ProductSortName')
            self.ProductSortName = value_
            self.ProductSortName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ProductSortName)
        elif nodeName_ == 'AllowanceDetails':
            obj_ = DimensionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AllowanceDetails = obj_
            obj_.original_tagname_ = 'AllowanceDetails'
        elif nodeName_ == 'DeviationDetails':
            obj_ = DimensionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeviationDetails = obj_
            obj_.original_tagname_ = 'DeviationDetails'
        elif nodeName_ == 'DiameterRangeDetails':
            obj_ = RangeMeasureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DiameterRangeDetails.append(obj_)
            obj_.original_tagname_ = 'DiameterRangeDetails'
        elif nodeName_ == 'ContractVolumeMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContractVolumeMeasure = obj_
            obj_.original_tagname_ = 'ContractVolumeMeasure'
        elif nodeName_ == 'FactVolumeMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FactVolumeMeasure = obj_
            obj_.original_tagname_ = 'FactVolumeMeasure'
# end class WoodDescriptionDetailsType


class WoodCodeDetailsType(GeneratedsSuper):
    """WoodCodeDetailsType -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    в
    е
    д
    е
    н
    и
    й
    о
    л
    е
    с
    о
    м
    а
    т
    е
    р
    и
    а
    л
    а
    х
    Numeric -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    п
    о
    з
    и
    ц
    и
    и
    NationalCommodityCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    п
    р
    о
    д
    у
    к
    ц
    и
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    -
    ч
    л
    е
    н
    а
    (
    О
    К
    П
    Д
    2)
    VolumeMeasure -- О
    б
    ъ
    е
    м
    т
    о
    в
    а
    р
    а
    б
    е
    з
    у
    ч
    е
    т
    а
    к
    о
    р
    ы
    и
    п
    р
    и
    п
    у
    с
    к
    о
    в
    FactVolumeMeasure -- О
    б
    ъ
    е
    м
    т
    о
    в
    а
    р
    а
    c
    у
    ч
    е
    т
    о
    м
    к
    о
    р
    ы
    и
    п
    р
    и
    п
    у
    с
    к
    о
    в
    HumidityMeasure -- В
    л
    а
    ж
    н
    о
    с
    т
    ь
    ItemQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    б
    и
    р
    о
    к
    LabelId -- Н
    о
    м
    е
    р
    б
    и
    р
    к
    и
    LabelRangeDetails -- Д
    и
    а
    п
    а
    з
    о
    н
    н
    о
    м
    е
    р
    о
    в
    б
    и
    р
    о
    к
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Numeric=None, NationalCommodityCode=None, VolumeMeasure=None, FactVolumeMeasure=None, HumidityMeasure=None, ItemQuantity=None, LabelId=None, LabelRangeDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.Numeric = Numeric
        self.validate_Count5Type(self.Numeric)
        self.Numeric_nsprefix_ = "clt_ru"
        self.NationalCommodityCode = NationalCommodityCode
        self.validate_CodeVariable14Type(self.NationalCommodityCode)
        self.NationalCommodityCode_nsprefix_ = "clt_ru"
        self.VolumeMeasure = VolumeMeasure
        self.VolumeMeasure_nsprefix_ = "cat_ru"
        self.FactVolumeMeasure = FactVolumeMeasure
        self.FactVolumeMeasure_nsprefix_ = "cat_ru"
        self.HumidityMeasure = HumidityMeasure
        self.HumidityMeasure_nsprefix_ = "cat_ru"
        self.ItemQuantity = ItemQuantity
        self.validate_Count4Type(self.ItemQuantity)
        self.ItemQuantity_nsprefix_ = "clt_ru"
        if LabelId is None:
            self.LabelId = []
        else:
            self.LabelId = LabelId
        self.LabelId_nsprefix_ = "clt_ru"
        if LabelRangeDetails is None:
            self.LabelRangeDetails = []
        else:
            self.LabelRangeDetails = LabelRangeDetails
        self.LabelRangeDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WoodCodeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WoodCodeDetailsType.subclass:
            return WoodCodeDetailsType.subclass(*args_, **kwargs_)
        else:
            return WoodCodeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Numeric(self):
        return self.Numeric
    def set_Numeric(self, Numeric):
        self.Numeric = Numeric
    def get_NationalCommodityCode(self):
        return self.NationalCommodityCode
    def set_NationalCommodityCode(self, NationalCommodityCode):
        self.NationalCommodityCode = NationalCommodityCode
    def get_VolumeMeasure(self):
        return self.VolumeMeasure
    def set_VolumeMeasure(self, VolumeMeasure):
        self.VolumeMeasure = VolumeMeasure
    def get_FactVolumeMeasure(self):
        return self.FactVolumeMeasure
    def set_FactVolumeMeasure(self, FactVolumeMeasure):
        self.FactVolumeMeasure = FactVolumeMeasure
    def get_HumidityMeasure(self):
        return self.HumidityMeasure
    def set_HumidityMeasure(self, HumidityMeasure):
        self.HumidityMeasure = HumidityMeasure
    def get_ItemQuantity(self):
        return self.ItemQuantity
    def set_ItemQuantity(self, ItemQuantity):
        self.ItemQuantity = ItemQuantity
    def get_LabelId(self):
        return self.LabelId
    def set_LabelId(self, LabelId):
        self.LabelId = LabelId
    def add_LabelId(self, value):
        self.LabelId.append(value)
    def insert_LabelId_at(self, index, value):
        self.LabelId.insert(index, value)
    def replace_LabelId_at(self, index, value):
        self.LabelId[index] = value
    def get_LabelRangeDetails(self):
        return self.LabelRangeDetails
    def set_LabelRangeDetails(self, LabelRangeDetails):
        self.LabelRangeDetails = LabelRangeDetails
    def add_LabelRangeDetails(self, value):
        self.LabelRangeDetails.append(value)
    def insert_LabelRangeDetails_at(self, index, value):
        self.LabelRangeDetails.insert(index, value)
    def replace_LabelRangeDetails_at(self, index, value):
        self.LabelRangeDetails[index] = value
    def validate_Count5Type(self, value):
        result = True
        # Validate type Count5Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable14Type(self, value):
        result = True
        # Validate type CodeVariable14Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 14:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable14Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable14Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Count4Type(self, value):
        result = True
        # Validate type Count4Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count4Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count4Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Numeric is not None or
            self.NationalCommodityCode is not None or
            self.VolumeMeasure is not None or
            self.FactVolumeMeasure is not None or
            self.HumidityMeasure is not None or
            self.ItemQuantity is not None or
            self.LabelId or
            self.LabelRangeDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='WoodCodeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WoodCodeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WoodCodeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WoodCodeDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WoodCodeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='WoodCodeDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='WoodCodeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Numeric is not None:
            namespaceprefix_ = self.Numeric_nsprefix_ + ':' if (UseCapturedNS_ and self.Numeric_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeric>%s</%sNumeric>%s' % (namespaceprefix_ , self.gds_format_integer(self.Numeric, input_name='Numeric'), namespaceprefix_ , eol_))
        if self.NationalCommodityCode is not None:
            namespaceprefix_ = self.NationalCommodityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.NationalCommodityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNationalCommodityCode>%s</%sNationalCommodityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NationalCommodityCode), input_name='NationalCommodityCode')), namespaceprefix_ , eol_))
        if self.VolumeMeasure is not None:
            namespaceprefix_ = self.VolumeMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.VolumeMeasure_nsprefix_) else ''
            self.VolumeMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='VolumeMeasure', pretty_print=pretty_print)
        if self.FactVolumeMeasure is not None:
            namespaceprefix_ = self.FactVolumeMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.FactVolumeMeasure_nsprefix_) else ''
            self.FactVolumeMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FactVolumeMeasure', pretty_print=pretty_print)
        if self.HumidityMeasure is not None:
            namespaceprefix_ = self.HumidityMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.HumidityMeasure_nsprefix_) else ''
            self.HumidityMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HumidityMeasure', pretty_print=pretty_print)
        if self.ItemQuantity is not None:
            namespaceprefix_ = self.ItemQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.ItemQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemQuantity>%s</%sItemQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.ItemQuantity, input_name='ItemQuantity'), namespaceprefix_ , eol_))
        for LabelId_ in self.LabelId:
            namespaceprefix_ = self.LabelId_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLabelId>%s</%sLabelId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(LabelId_), input_name='LabelId')), namespaceprefix_ , eol_))
        for LabelRangeDetails_ in self.LabelRangeDetails:
            namespaceprefix_ = self.LabelRangeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.LabelRangeDetails_nsprefix_) else ''
            LabelRangeDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LabelRangeDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Numeric' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Numeric')
            ival_ = self.gds_validate_integer(ival_, node, 'Numeric')
            self.Numeric = ival_
            self.Numeric_nsprefix_ = child_.prefix
            # validate type Count5Type
            self.validate_Count5Type(self.Numeric)
        elif nodeName_ == 'NationalCommodityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'NationalCommodityCode')
            value_ = self.gds_validate_string(value_, node, 'NationalCommodityCode')
            self.NationalCommodityCode = value_
            self.NationalCommodityCode_nsprefix_ = child_.prefix
            # validate type CodeVariable14Type
            self.validate_CodeVariable14Type(self.NationalCommodityCode)
        elif nodeName_ == 'VolumeMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.VolumeMeasure = obj_
            obj_.original_tagname_ = 'VolumeMeasure'
        elif nodeName_ == 'FactVolumeMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FactVolumeMeasure = obj_
            obj_.original_tagname_ = 'FactVolumeMeasure'
        elif nodeName_ == 'HumidityMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HumidityMeasure = obj_
            obj_.original_tagname_ = 'HumidityMeasure'
        elif nodeName_ == 'ItemQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ItemQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'ItemQuantity')
            self.ItemQuantity = ival_
            self.ItemQuantity_nsprefix_ = child_.prefix
            # validate type Count4Type
            self.validate_Count4Type(self.ItemQuantity)
        elif nodeName_ == 'LabelId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LabelId')
            value_ = self.gds_validate_string(value_, node, 'LabelId')
            self.LabelId.append(value_)
            self.LabelId_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.LabelId[-1])
        elif nodeName_ == 'LabelRangeDetails':
            obj_ = LabelRangeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LabelRangeDetails.append(obj_)
            obj_.original_tagname_ = 'LabelRangeDetails'
# end class WoodCodeDetailsType


class LabelRangeDetailsType(GeneratedsSuper):
    """LabelRangeDetailsType -- Д
    и
    а
    п
    а
    з
    о
    н
    н
    о
    м
    е
    р
    о
    в
    б
    и
    р
    о
    к
    FirstLabelId -- П
    е
    р
    в
    ы
    й
    н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    д
    и
    а
    п
    а
    з
    о
    н
    а
    LastLabelId -- П
    о
    с
    л
    е
    д
    н
    и
    й
    н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    д
    и
    а
    п
    а
    з
    о
    н
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FirstLabelId=None, LastLabelId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        self.FirstLabelId = FirstLabelId
        self.validate_Text50Type(self.FirstLabelId)
        self.FirstLabelId_nsprefix_ = "clt_ru"
        self.LastLabelId = LastLabelId
        self.validate_Text50Type(self.LastLabelId)
        self.LastLabelId_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LabelRangeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LabelRangeDetailsType.subclass:
            return LabelRangeDetailsType.subclass(*args_, **kwargs_)
        else:
            return LabelRangeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FirstLabelId(self):
        return self.FirstLabelId
    def set_FirstLabelId(self, FirstLabelId):
        self.FirstLabelId = FirstLabelId
    def get_LastLabelId(self):
        return self.LastLabelId
    def set_LastLabelId(self, LastLabelId):
        self.LastLabelId = LastLabelId
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.FirstLabelId is not None or
            self.LastLabelId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='LabelRangeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LabelRangeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LabelRangeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LabelRangeDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LabelRangeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='LabelRangeDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='LabelRangeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FirstLabelId is not None:
            namespaceprefix_ = self.FirstLabelId_nsprefix_ + ':' if (UseCapturedNS_ and self.FirstLabelId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstLabelId>%s</%sFirstLabelId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FirstLabelId), input_name='FirstLabelId')), namespaceprefix_ , eol_))
        if self.LastLabelId is not None:
            namespaceprefix_ = self.LastLabelId_nsprefix_ + ':' if (UseCapturedNS_ and self.LastLabelId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastLabelId>%s</%sLastLabelId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LastLabelId), input_name='LastLabelId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FirstLabelId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FirstLabelId')
            value_ = self.gds_validate_string(value_, node, 'FirstLabelId')
            self.FirstLabelId = value_
            self.FirstLabelId_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.FirstLabelId)
        elif nodeName_ == 'LastLabelId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LastLabelId')
            value_ = self.gds_validate_string(value_, node, 'LastLabelId')
            self.LastLabelId = value_
            self.LastLabelId_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.LastLabelId)
# end class LabelRangeDetailsType


class AEORegistryIdDetailsType11(GeneratedsSuper):
    """AEORegistryIdDetailsType11 -- С
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    о
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    е
    р
    е
    в
    о
    з
    ч
    и
    к
    о
    в
    и
    л
    и
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    RegistryOwnerCode -- К
    о
    д
    т
    и
    п
    а
    р
    е
    е
    с
    т
    р
    а
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    CountryA2Code -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    DocId -- Н
    о
    м
    е
    р
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    м
    о
    р
    г
    а
    н
    о
    м
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    -
    ч
    л
    е
    н
    а
    AEORegistryKindCode -- К
    о
    д
    т
    и
    п
    а
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    п
    е
    р
    а
    т
    о
    р
    а
    ReregistrationCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    п
    р
    и
    з
    н
    а
    к
    а
    п
    е
    р
    е
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegistryOwnerCode=None, CountryA2Code=None, DocId=None, AEORegistryKindCode=None, ReregistrationCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.RegistryOwnerCode = RegistryOwnerCode
        self.validate_LetterIndicatorType(self.RegistryOwnerCode)
        self.RegistryOwnerCode_nsprefix_ = "clt_ru"
        self.CountryA2Code = CountryA2Code
        self.validate_CountryA2CodeType(self.CountryA2Code)
        self.CountryA2Code_nsprefix_ = "clt_ru"
        self.DocId = DocId
        self.validate_DocumentNumberType(self.DocId)
        self.DocId_nsprefix_ = "clt_ru"
        self.AEORegistryKindCode = AEORegistryKindCode
        self.validate_LetterIndicatorType(self.AEORegistryKindCode)
        self.AEORegistryKindCode_nsprefix_ = "clt_ru"
        self.ReregistrationCode = ReregistrationCode
        self.validate_CodeVariable3Type(self.ReregistrationCode)
        self.ReregistrationCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AEORegistryIdDetailsType11)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AEORegistryIdDetailsType11.subclass:
            return AEORegistryIdDetailsType11.subclass(*args_, **kwargs_)
        else:
            return AEORegistryIdDetailsType11(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegistryOwnerCode(self):
        return self.RegistryOwnerCode
    def set_RegistryOwnerCode(self, RegistryOwnerCode):
        self.RegistryOwnerCode = RegistryOwnerCode
    def get_CountryA2Code(self):
        return self.CountryA2Code
    def set_CountryA2Code(self, CountryA2Code):
        self.CountryA2Code = CountryA2Code
    def get_DocId(self):
        return self.DocId
    def set_DocId(self, DocId):
        self.DocId = DocId
    def get_AEORegistryKindCode(self):
        return self.AEORegistryKindCode
    def set_AEORegistryKindCode(self, AEORegistryKindCode):
        self.AEORegistryKindCode = AEORegistryKindCode
    def get_ReregistrationCode(self):
        return self.ReregistrationCode
    def set_ReregistrationCode(self, ReregistrationCode):
        self.ReregistrationCode = ReregistrationCode
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable3Type(self, value):
        result = True
        # Validate type CodeVariable3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable3Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.RegistryOwnerCode is not None or
            self.CountryA2Code is not None or
            self.DocId is not None or
            self.AEORegistryKindCode is not None or
            self.ReregistrationCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AEORegistryIdDetailsType11', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AEORegistryIdDetailsType11')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AEORegistryIdDetailsType11':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AEORegistryIdDetailsType11')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AEORegistryIdDetailsType11', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='AEORegistryIdDetailsType11'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AEORegistryIdDetailsType11', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegistryOwnerCode is not None:
            namespaceprefix_ = self.RegistryOwnerCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistryOwnerCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistryOwnerCode>%s</%sRegistryOwnerCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistryOwnerCode), input_name='RegistryOwnerCode')), namespaceprefix_ , eol_))
        if self.CountryA2Code is not None:
            namespaceprefix_ = self.CountryA2Code_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryA2Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryA2Code>%s</%sCountryA2Code>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryA2Code), input_name='CountryA2Code')), namespaceprefix_ , eol_))
        if self.DocId is not None:
            namespaceprefix_ = self.DocId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocId>%s</%sDocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocId), input_name='DocId')), namespaceprefix_ , eol_))
        if self.AEORegistryKindCode is not None:
            namespaceprefix_ = self.AEORegistryKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AEORegistryKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAEORegistryKindCode>%s</%sAEORegistryKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AEORegistryKindCode), input_name='AEORegistryKindCode')), namespaceprefix_ , eol_))
        if self.ReregistrationCode is not None:
            namespaceprefix_ = self.ReregistrationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReregistrationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReregistrationCode>%s</%sReregistrationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReregistrationCode), input_name='ReregistrationCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegistryOwnerCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegistryOwnerCode')
            value_ = self.gds_validate_string(value_, node, 'RegistryOwnerCode')
            self.RegistryOwnerCode = value_
            self.RegistryOwnerCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.RegistryOwnerCode)
        elif nodeName_ == 'CountryA2Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryA2Code')
            value_ = self.gds_validate_string(value_, node, 'CountryA2Code')
            self.CountryA2Code = value_
            self.CountryA2Code_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryA2Code)
        elif nodeName_ == 'DocId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocId')
            value_ = self.gds_validate_string(value_, node, 'DocId')
            self.DocId = value_
            self.DocId_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.DocId)
        elif nodeName_ == 'AEORegistryKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AEORegistryKindCode')
            value_ = self.gds_validate_string(value_, node, 'AEORegistryKindCode')
            self.AEORegistryKindCode = value_
            self.AEORegistryKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.AEORegistryKindCode)
        elif nodeName_ == 'ReregistrationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ReregistrationCode')
            value_ = self.gds_validate_string(value_, node, 'ReregistrationCode')
            self.ReregistrationCode = value_
            self.ReregistrationCode_nsprefix_ = child_.prefix
            # validate type CodeVariable3Type
            self.validate_CodeVariable3Type(self.ReregistrationCode)
# end class AEORegistryIdDetailsType11


class AmountType12(GeneratedsSuper):
    """AmountType12 -- Д
    е
    н
    е
    ж
    н
    а
    я
    с
    у
    м
    м
    а
    и
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    Amount -- С
    у
    м
    м
    а
    CurrencyCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    К
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    а
    л
    ю
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Amount=None, CurrencyCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.Amount = Amount
        self.validate_AmountType(self.Amount)
        self.Amount_nsprefix_ = "clt_ru"
        self.CurrencyCode = CurrencyCode
        self.validate_CurrencyA3CodeType(self.CurrencyCode)
        self.CurrencyCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AmountType12)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AmountType12.subclass:
            return AmountType12.subclass(*args_, **kwargs_)
        else:
            return AmountType12(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Amount is not None or
            self.CurrencyCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AmountType12', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AmountType12')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AmountType12':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AmountType12')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AmountType12', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='AmountType12'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AmountType12', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.Amount)
        elif nodeName_ == 'CurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.CurrencyCode)
# end class AmountType12


class AmountNType(GeneratedsSuper):
    """AmountNType -- Д
    е
    н
    е
    ж
    н
    а
    я
    с
    у
    м
    м
    а
    и
    ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    Amount -- С
    у
    м
    м
    а
    CurrencyCode -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    К
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    а
    л
    ю
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Amount=None, CurrencyCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.Amount = Amount
        self.validate_AmountType(self.Amount)
        self.Amount_nsprefix_ = "clt_ru"
        self.CurrencyCode = CurrencyCode
        self.validate_CurrencyN3CodeType(self.CurrencyCode)
        self.CurrencyCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AmountNType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AmountNType.subclass:
            return AmountNType.subclass(*args_, **kwargs_)
        else:
            return AmountNType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Amount(self):
        return self.Amount
    def set_Amount(self, Amount):
        self.Amount = Amount
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyN3CodeType(self, value):
        result = True
        # Validate type CurrencyN3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CurrencyN3CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CurrencyN3CodeType_patterns_, ))
                result = False
        return result
    validate_CurrencyN3CodeType_patterns_ = [['^(\\d{3})$']]
    def has__content(self):
        if (
            self.Amount is not None or
            self.CurrencyCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AmountNType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AmountNType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AmountNType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AmountNType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AmountNType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='AmountNType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AmountNType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            namespaceprefix_ = self.Amount_nsprefix_ + ':' if (UseCapturedNS_ and self.Amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Amount, input_name='Amount'), namespaceprefix_ , eol_))
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'Amount')
            self.Amount = fval_
            self.Amount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.Amount)
        elif nodeName_ == 'CurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.CurrencyCode)
# end class AmountNType


class BusinessEntityId20Type(GeneratedsSuper):
    """BusinessEntityId20Type -- С
    т
    р
    о
    к
    а
    с
    и
    м
    в
    о
    л
    о
    в
    ,
    и
    д
    е
    н
    т
    и
    ф
    и
    ц
    и
    р
    у
    ю
    щ
    а
    я
    х
    о
    з
    я
    й
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    с
    у
    б
    ъ
    е
    к
    т
    а
    BusinessEntityId -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    х
    о
    з
    я
    й
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    с
    у
    б
    ъ
    е
    к
    т
    а
    .
    С
    т
    р
    о
    к
    а
    н
    е
    б
    о
    л
    е
    е
    20
    с
    и
    м
    в
    о
    л
    о
    в
    KindId -- М
    е
    т
    о
    д
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    х
    о
    з
    я
    й
    с
    т
    в
    у
    ю
    щ
    и
    х
    с
    у
    б
    ъ
    е
    к
    т
    о
    в
    .
    С
    т
    р
    о
    к
    а
    н
    е
    б
    о
    л
    е
    е
    20
    с
    и
    м
    в
    о
    л
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BusinessEntityId=None, KindId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.BusinessEntityId = BusinessEntityId
        self.validate_CodeVariable20Type(self.BusinessEntityId)
        self.BusinessEntityId_nsprefix_ = "clt_ru"
        self.KindId = KindId
        self.validate_CodeVariable20Type(self.KindId)
        self.KindId_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BusinessEntityId20Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BusinessEntityId20Type.subclass:
            return BusinessEntityId20Type.subclass(*args_, **kwargs_)
        else:
            return BusinessEntityId20Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BusinessEntityId(self):
        return self.BusinessEntityId
    def set_BusinessEntityId(self, BusinessEntityId):
        self.BusinessEntityId = BusinessEntityId
    def get_KindId(self):
        return self.KindId
    def set_KindId(self, KindId):
        self.KindId = KindId
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.BusinessEntityId is not None or
            self.KindId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='BusinessEntityId20Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BusinessEntityId20Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BusinessEntityId20Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BusinessEntityId20Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BusinessEntityId20Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='BusinessEntityId20Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='BusinessEntityId20Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BusinessEntityId is not None:
            namespaceprefix_ = self.BusinessEntityId_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessEntityId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBusinessEntityId>%s</%sBusinessEntityId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BusinessEntityId), input_name='BusinessEntityId')), namespaceprefix_ , eol_))
        if self.KindId is not None:
            namespaceprefix_ = self.KindId_nsprefix_ + ':' if (UseCapturedNS_ and self.KindId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKindId>%s</%sKindId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KindId), input_name='KindId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BusinessEntityId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BusinessEntityId')
            value_ = self.gds_validate_string(value_, node, 'BusinessEntityId')
            self.BusinessEntityId = value_
            self.BusinessEntityId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.BusinessEntityId)
        elif nodeName_ == 'KindId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'KindId')
            value_ = self.gds_validate_string(value_, node, 'KindId')
            self.KindId = value_
            self.KindId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.KindId)
# end class BusinessEntityId20Type


class CarrierRepresentativeDetailsType(PersonBaseType):
    """CarrierRepresentativeDetailsType -- C
    в
    е
    д
    е
    н
    и
    я
    о
    л
    и
    ц
    е
    ,
    я
    в
    л
    я
    ю
    щ
    е
    м
    с
    я
    с
    о
    т
    р
    у
    д
    н
    и
    к
    о
    м
    и
    л
    и
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    м
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    м
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    -
    п
    е
    р
    е
    в
    о
    з
    ч
    и
    к
    а
    CommunicationDetails -- К
    о
    н
    т
    а
    к
    т
    н
    ы
    й
    р
    е
    к
    в
    и
    з
    и
    т
    л
    и
    ц
    а
    IdentityCard -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    RoleCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    р
    о
    л
    и
    ,
    в
    ы
    п
    о
    л
    н
    я
    е
    м
    о
    й
    л
    и
    ц
    о
    м
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PersonBaseType
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, CommunicationDetails=None, IdentityCard=None, RoleCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("CarrierRepresentativeDetailsType"), self).__init__(PersonSurname, PersonName, PersonMiddleName, PersonPost,  **kwargs_)
        self.CommunicationDetails = CommunicationDetails
        self.CommunicationDetails_nsprefix_ = "cat_ru"
        self.IdentityCard = IdentityCard
        self.IdentityCard_nsprefix_ = "RUScat_ru"
        self.RoleCode = RoleCode
        self.validate_CodeVariable20Type(self.RoleCode)
        self.RoleCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierRepresentativeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierRepresentativeDetailsType.subclass:
            return CarrierRepresentativeDetailsType.subclass(*args_, **kwargs_)
        else:
            return CarrierRepresentativeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CommunicationDetails(self):
        return self.CommunicationDetails
    def set_CommunicationDetails(self, CommunicationDetails):
        self.CommunicationDetails = CommunicationDetails
    def get_IdentityCard(self):
        return self.IdentityCard
    def set_IdentityCard(self, IdentityCard):
        self.IdentityCard = IdentityCard
    def get_RoleCode(self):
        return self.RoleCode
    def set_RoleCode(self, RoleCode):
        self.RoleCode = RoleCode
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CommunicationDetails is not None or
            self.IdentityCard is not None or
            self.RoleCode is not None or
            super(CarrierRepresentativeDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CarrierRepresentativeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CarrierRepresentativeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CarrierRepresentativeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CarrierRepresentativeDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CarrierRepresentativeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='CarrierRepresentativeDetailsType'):
        super(CarrierRepresentativeDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CarrierRepresentativeDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CarrierRepresentativeDetailsType', fromsubclass_=False, pretty_print=True):
        super(CarrierRepresentativeDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommunicationDetails is not None:
            namespaceprefix_ = self.CommunicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CommunicationDetails_nsprefix_) else ''
            self.CommunicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommunicationDetails', pretty_print=pretty_print)
        if self.IdentityCard is not None:
            namespaceprefix_ = self.IdentityCard_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCard_nsprefix_) else ''
            self.IdentityCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentityCard', pretty_print=pretty_print)
        if self.RoleCode is not None:
            namespaceprefix_ = self.RoleCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RoleCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoleCode>%s</%sRoleCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RoleCode), input_name='RoleCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CarrierRepresentativeDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CommunicationDetails':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommunicationDetails = obj_
            obj_.original_tagname_ = 'CommunicationDetails'
        elif nodeName_ == 'IdentityCard':
            class_obj_ = self.get_class_obj_(child_, RUIdentityCardType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentityCard = obj_
            obj_.original_tagname_ = 'IdentityCard'
        elif nodeName_ == 'RoleCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RoleCode')
            value_ = self.gds_validate_string(value_, node, 'RoleCode')
            self.RoleCode = value_
            self.RoleCode_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.RoleCode)
        super(CarrierRepresentativeDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class CarrierRepresentativeDetailsType


class CountryDetailsType13(GeneratedsSuper):
    """CountryDetailsType13 -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    р
    а
    н
    е
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    CountryName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, CountryName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.CountryName = CountryName
        self.validate_CountryNameType(self.CountryName)
        self.CountryName_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountryDetailsType13)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountryDetailsType13.subclass:
            return CountryDetailsType13.subclass(*args_, **kwargs_)
        else:
            return CountryDetailsType13(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CountryName(self):
        return self.CountryName
    def set_CountryName(self, CountryName):
        self.CountryName = CountryName
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CountryCode is not None or
            self.CountryName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CountryDetailsType13', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountryDetailsType13')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CountryDetailsType13':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CountryDetailsType13')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CountryDetailsType13', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='CountryDetailsType13'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CountryDetailsType13', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CountryName is not None:
            namespaceprefix_ = self.CountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryName>%s</%sCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'CountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryName')
            value_ = self.gds_validate_string(value_, node, 'CountryName')
            self.CountryName = value_
            self.CountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.CountryName)
# end class CountryDetailsType13


class CountryDetailsV3Type(GeneratedsSuper):
    """CountryDetailsV3Type -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    р
    а
    н
    е
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    CountryName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    TerritoryCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, CountryName=None, TerritoryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.CountryName = CountryName
        self.validate_CountryNameType(self.CountryName)
        self.CountryName_nsprefix_ = "clt_ru"
        self.TerritoryCode = TerritoryCode
        self.validate_TerritoryCodeType(self.TerritoryCode)
        self.TerritoryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CountryDetailsV3Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CountryDetailsV3Type.subclass:
            return CountryDetailsV3Type.subclass(*args_, **kwargs_)
        else:
            return CountryDetailsV3Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CountryName(self):
        return self.CountryName
    def set_CountryName(self, CountryName):
        self.CountryName = CountryName
    def get_TerritoryCode(self):
        return self.TerritoryCode
    def set_TerritoryCode(self, TerritoryCode):
        self.TerritoryCode = TerritoryCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_TerritoryCodeType(self, value):
        result = True
        # Validate type TerritoryCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TerritoryCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TerritoryCodeType_patterns_, ))
                result = False
        return result
    validate_TerritoryCodeType_patterns_ = [['^(\\d{8,17})$']]
    def has__content(self):
        if (
            self.CountryCode is not None or
            self.CountryName is not None or
            self.TerritoryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CountryDetailsV3Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CountryDetailsV3Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CountryDetailsV3Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CountryDetailsV3Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CountryDetailsV3Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='CountryDetailsV3Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CountryDetailsV3Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CountryName is not None:
            namespaceprefix_ = self.CountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryName>%s</%sCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), namespaceprefix_ , eol_))
        if self.TerritoryCode is not None:
            namespaceprefix_ = self.TerritoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TerritoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTerritoryCode>%s</%sTerritoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TerritoryCode), input_name='TerritoryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'CountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryName')
            value_ = self.gds_validate_string(value_, node, 'CountryName')
            self.CountryName = value_
            self.CountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.CountryName)
        elif nodeName_ == 'TerritoryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TerritoryCode')
            value_ = self.gds_validate_string(value_, node, 'TerritoryCode')
            self.TerritoryCode = value_
            self.TerritoryCode_nsprefix_ = child_.prefix
            # validate type TerritoryCodeType
            self.validate_TerritoryCodeType(self.TerritoryCode)
# end class CountryDetailsV3Type


class CustomsPersonDetails(PersonBaseType):
    """CustomsPersonDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    л
    ж
    н
    о
    с
    т
    н
    о
    м
    л
    и
    ц
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    LNP -- Л
    Н
    П
    д
    о
    л
    ж
    н
    о
    с
    т
    н
    о
    г
    о
    л
    и
    ц
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    CustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    ,
    у
    к
    а
    з
    а
    н
    н
    ы
    й
    н
    а
    о
    т
    т
    и
    с
    к
    е
    Л
    Н
    П
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PersonBaseType
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, LNP=None, CustomsCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("CustomsPersonDetails"), self).__init__(PersonSurname, PersonName, PersonMiddleName, PersonPost,  **kwargs_)
        self.LNP = LNP
        self.validate_LNPIDType(self.LNP)
        self.LNP_nsprefix_ = "clt_ru"
        self.CustomsCode = CustomsCode
        self.validate_CustomsCodeType(self.CustomsCode)
        self.CustomsCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsPersonDetails)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsPersonDetails.subclass:
            return CustomsPersonDetails.subclass(*args_, **kwargs_)
        else:
            return CustomsPersonDetails(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LNP(self):
        return self.LNP
    def set_LNP(self, LNP):
        self.LNP = LNP
    def get_CustomsCode(self):
        return self.CustomsCode
    def set_CustomsCode(self, CustomsCode):
        self.CustomsCode = CustomsCode
    def validate_LNPIDType(self, value):
        result = True
        # Validate type LNPIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on LNPIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on LNPIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def has__content(self):
        if (
            self.LNP is not None or
            self.CustomsCode is not None or
            super(CustomsPersonDetails, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CustomsPersonDetails', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsPersonDetails')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsPersonDetails':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsPersonDetails')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsPersonDetails', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='CustomsPersonDetails'):
        super(CustomsPersonDetails, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsPersonDetails')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CustomsPersonDetails', fromsubclass_=False, pretty_print=True):
        super(CustomsPersonDetails, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LNP is not None:
            namespaceprefix_ = self.LNP_nsprefix_ + ':' if (UseCapturedNS_ and self.LNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLNP>%s</%sLNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LNP), input_name='LNP')), namespaceprefix_ , eol_))
        if self.CustomsCode is not None:
            namespaceprefix_ = self.CustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCode>%s</%sCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCode), input_name='CustomsCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CustomsPersonDetails, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LNP':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LNP')
            value_ = self.gds_validate_string(value_, node, 'LNP')
            self.LNP = value_
            self.LNP_nsprefix_ = child_.prefix
            # validate type LNPIDType
            self.validate_LNPIDType(self.LNP)
        elif nodeName_ == 'CustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCode')
            self.CustomsCode = value_
            self.CustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsCode)
        super(CustomsPersonDetails, self)._buildChildren(child_, node, nodeName_, True)
# end class CustomsPersonDetails


class DeliveryTermsType14(GeneratedsSuper):
    """DeliveryTermsType14 -- У
    с
    л
    о
    в
    и
    я
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    DeliveryPlace -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    г
    е
    о
    г
    р
    а
    ф
    и
    ч
    е
    с
    к
    о
    г
    о
    п
    у
    н
    к
    т
    а
    и
    л
    и
    м
    е
    с
    т
    а
    п
    е
    р
    е
    д
    а
    ч
    и
    т
    о
    в
    а
    р
    о
    в
    DeliveryTermsStringCode -- К
    о
    д
    у
    с
    л
    о
    в
    и
    й
    п
    о
    с
    т
    а
    в
    к
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    у
    с
    л
    о
    в
    и
    й
    п
    о
    с
    т
    а
    в
    к
    и
    DeliveryTermsRBCode -- К
    о
    д
    в
    и
    д
    а
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    п
    о
    с
    т
    а
    в
    о
    к
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    о
    д
    л
    е
    ж
    а
    щ
    и
    х
    у
    ч
    е
    т
    у
    п
    р
    и
    о
    с
    у
    щ
    е
    с
    т
    в
    л
    е
    н
    и
    и
    э
    к
    с
    п
    о
    р
    т
    н
    ы
    х
    о
    п
    е
    р
    а
    ц
    и
    й
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DeliveryPlace=None, DeliveryTermsStringCode=None, DeliveryTermsRBCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.DeliveryPlace = DeliveryPlace
        self.validate_Text50Type(self.DeliveryPlace)
        self.DeliveryPlace_nsprefix_ = "clt_ru"
        self.DeliveryTermsStringCode = DeliveryTermsStringCode
        self.validate_IncotermsDeliveryStringCodeType(self.DeliveryTermsStringCode)
        self.DeliveryTermsStringCode_nsprefix_ = "clt_ru"
        self.DeliveryTermsRBCode = DeliveryTermsRBCode
        self.validate_Code2Type(self.DeliveryTermsRBCode)
        self.DeliveryTermsRBCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeliveryTermsType14)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeliveryTermsType14.subclass:
            return DeliveryTermsType14.subclass(*args_, **kwargs_)
        else:
            return DeliveryTermsType14(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DeliveryPlace(self):
        return self.DeliveryPlace
    def set_DeliveryPlace(self, DeliveryPlace):
        self.DeliveryPlace = DeliveryPlace
    def get_DeliveryTermsStringCode(self):
        return self.DeliveryTermsStringCode
    def set_DeliveryTermsStringCode(self, DeliveryTermsStringCode):
        self.DeliveryTermsStringCode = DeliveryTermsStringCode
    def get_DeliveryTermsRBCode(self):
        return self.DeliveryTermsRBCode
    def set_DeliveryTermsRBCode(self, DeliveryTermsRBCode):
        self.DeliveryTermsRBCode = DeliveryTermsRBCode
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IncotermsDeliveryStringCodeType(self, value):
        result = True
        # Validate type IncotermsDeliveryStringCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_IncotermsDeliveryStringCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_IncotermsDeliveryStringCodeType_patterns_, ))
                result = False
        return result
    validate_IncotermsDeliveryStringCodeType_patterns_ = [['^(\\D{3})$']]
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DeliveryPlace is not None or
            self.DeliveryTermsStringCode is not None or
            self.DeliveryTermsRBCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DeliveryTermsType14', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeliveryTermsType14')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeliveryTermsType14':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeliveryTermsType14')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeliveryTermsType14', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='DeliveryTermsType14'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DeliveryTermsType14', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeliveryPlace is not None:
            namespaceprefix_ = self.DeliveryPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryPlace_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryPlace>%s</%sDeliveryPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryPlace), input_name='DeliveryPlace')), namespaceprefix_ , eol_))
        if self.DeliveryTermsStringCode is not None:
            namespaceprefix_ = self.DeliveryTermsStringCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTermsStringCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTermsStringCode>%s</%sDeliveryTermsStringCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryTermsStringCode), input_name='DeliveryTermsStringCode')), namespaceprefix_ , eol_))
        if self.DeliveryTermsRBCode is not None:
            namespaceprefix_ = self.DeliveryTermsRBCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTermsRBCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTermsRBCode>%s</%sDeliveryTermsRBCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeliveryTermsRBCode), input_name='DeliveryTermsRBCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DeliveryPlace':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DeliveryPlace')
            value_ = self.gds_validate_string(value_, node, 'DeliveryPlace')
            self.DeliveryPlace = value_
            self.DeliveryPlace_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.DeliveryPlace)
        elif nodeName_ == 'DeliveryTermsStringCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DeliveryTermsStringCode')
            value_ = self.gds_validate_string(value_, node, 'DeliveryTermsStringCode')
            self.DeliveryTermsStringCode = value_
            self.DeliveryTermsStringCode_nsprefix_ = child_.prefix
            # validate type IncotermsDeliveryStringCodeType
            self.validate_IncotermsDeliveryStringCodeType(self.DeliveryTermsStringCode)
        elif nodeName_ == 'DeliveryTermsRBCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DeliveryTermsRBCode')
            value_ = self.gds_validate_string(value_, node, 'DeliveryTermsRBCode')
            self.DeliveryTermsRBCode = value_
            self.DeliveryTermsRBCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.DeliveryTermsRBCode)
# end class DeliveryTermsType14


class DocBaseType15(DocumentBaseType):
    """DocBaseType15 -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    б
    а
    з
    о
    в
    ы
    х
    р
    е
    к
    в
    и
    з
    и
    т
    а
    х
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocStartDate -- Д
    а
    т
    а
    н
    а
    ч
    а
    л
    а
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    DocValidityDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocStartDate=None, DocValidityDate=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("DocBaseType15"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate,  **kwargs_)
        if isinstance(DocStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocStartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocStartDate
        self.DocStartDate = initvalue_
        self.DocStartDate_nsprefix_ = "clt_ru"
        if isinstance(DocValidityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocValidityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocValidityDate
        self.DocValidityDate = initvalue_
        self.DocValidityDate_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocBaseType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocBaseType15.subclass:
            return DocBaseType15.subclass(*args_, **kwargs_)
        else:
            return DocBaseType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocStartDate(self):
        return self.DocStartDate
    def set_DocStartDate(self, DocStartDate):
        self.DocStartDate = DocStartDate
    def get_DocValidityDate(self):
        return self.DocValidityDate
    def set_DocValidityDate(self, DocValidityDate):
        self.DocValidityDate = DocValidityDate
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.DocStartDate is not None or
            self.DocValidityDate is not None or
            self.CountryCode is not None or
            super(DocBaseType15, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocBaseType15', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocBaseType15')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocBaseType15':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBaseType15')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocBaseType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='DocBaseType15'):
        super(DocBaseType15, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBaseType15')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocBaseType15', fromsubclass_=False, pretty_print=True):
        super(DocBaseType15, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocStartDate is not None:
            namespaceprefix_ = self.DocStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocStartDate>%s</%sDocStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocStartDate, input_name='DocStartDate'), namespaceprefix_ , eol_))
        if self.DocValidityDate is not None:
            namespaceprefix_ = self.DocValidityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocValidityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocValidityDate>%s</%sDocValidityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocValidityDate, input_name='DocValidityDate'), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(DocBaseType15, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocStartDate = dval_
            self.DocStartDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocStartDate)
        elif nodeName_ == 'DocValidityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocValidityDate = dval_
            self.DocValidityDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocValidityDate)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        super(DocBaseType15, self)._buildChildren(child_, node, nodeName_, True)
# end class DocBaseType15


class DocBaseV2Type(DocumentBaseType):
    """DocBaseV2Type -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    б
    а
    з
    о
    в
    ы
    х
    р
    е
    к
    в
    и
    з
    и
    т
    а
    х
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocStartDate -- Д
    а
    т
    а
    н
    а
    ч
    а
    л
    а
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    DocValidityDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    DocKindCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocStartDate=None, DocValidityDate=None, DocKindCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("DocBaseV2Type"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, extensiontype_,  **kwargs_)
        if isinstance(DocStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocStartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocStartDate
        self.DocStartDate = initvalue_
        self.DocStartDate_nsprefix_ = "clt_ru"
        if isinstance(DocValidityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocValidityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocValidityDate
        self.DocValidityDate = initvalue_
        self.DocValidityDate_nsprefix_ = "clt_ru"
        self.DocKindCode = DocKindCode
        self.validate_CustomsDocumentCodeType(self.DocKindCode)
        self.DocKindCode_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocBaseV2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocBaseV2Type.subclass:
            return DocBaseV2Type.subclass(*args_, **kwargs_)
        else:
            return DocBaseV2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocStartDate(self):
        return self.DocStartDate
    def set_DocStartDate(self, DocStartDate):
        self.DocStartDate = DocStartDate
    def get_DocValidityDate(self):
        return self.DocValidityDate
    def set_DocValidityDate(self, DocValidityDate):
        self.DocValidityDate = DocValidityDate
    def get_DocKindCode(self):
        return self.DocKindCode
    def set_DocKindCode(self, DocKindCode):
        self.DocKindCode = DocKindCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocStartDate is not None or
            self.DocValidityDate is not None or
            self.DocKindCode is not None or
            super(DocBaseV2Type, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocBaseV2Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocBaseV2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocBaseV2Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBaseV2Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocBaseV2Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='DocBaseV2Type'):
        super(DocBaseV2Type, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBaseV2Type')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocBaseV2Type', fromsubclass_=False, pretty_print=True):
        super(DocBaseV2Type, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocStartDate is not None:
            namespaceprefix_ = self.DocStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocStartDate>%s</%sDocStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocStartDate, input_name='DocStartDate'), namespaceprefix_ , eol_))
        if self.DocValidityDate is not None:
            namespaceprefix_ = self.DocValidityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocValidityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocValidityDate>%s</%sDocValidityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocValidityDate, input_name='DocValidityDate'), namespaceprefix_ , eol_))
        if self.DocKindCode is not None:
            namespaceprefix_ = self.DocKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocKindCode>%s</%sDocKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocKindCode), input_name='DocKindCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(DocBaseV2Type, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocStartDate = dval_
            self.DocStartDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocStartDate)
        elif nodeName_ == 'DocValidityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocValidityDate = dval_
            self.DocValidityDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocValidityDate)
        elif nodeName_ == 'DocKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocKindCode')
            value_ = self.gds_validate_string(value_, node, 'DocKindCode')
            self.DocKindCode = value_
            self.DocKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocKindCode)
        super(DocBaseV2Type, self)._buildChildren(child_, node, nodeName_, True)
# end class DocBaseV2Type


class DocBaseV4Type(DocumentBaseType):
    """DocBaseV4Type -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    д
    е
    т
    а
    л
    и
    з
    и
    р
    о
    в
    а
    н
    н
    у
    ю
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    ю
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    DocKindCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocKindCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("DocBaseV4Type"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate,  **kwargs_)
        self.DocKindCode = DocKindCode
        self.validate_CustomsDocumentCodeType(self.DocKindCode)
        self.DocKindCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocBaseV4Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocBaseV4Type.subclass:
            return DocBaseV4Type.subclass(*args_, **kwargs_)
        else:
            return DocBaseV4Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocKindCode(self):
        return self.DocKindCode
    def set_DocKindCode(self, DocKindCode):
        self.DocKindCode = DocKindCode
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocKindCode is not None or
            super(DocBaseV4Type, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocBaseV4Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocBaseV4Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocBaseV4Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBaseV4Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocBaseV4Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='DocBaseV4Type'):
        super(DocBaseV4Type, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBaseV4Type')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocBaseV4Type', fromsubclass_=False, pretty_print=True):
        super(DocBaseV4Type, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocKindCode is not None:
            namespaceprefix_ = self.DocKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocKindCode>%s</%sDocKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocKindCode), input_name='DocKindCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(DocBaseV4Type, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocKindCode')
            value_ = self.gds_validate_string(value_, node, 'DocKindCode')
            self.DocKindCode = value_
            self.DocKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocKindCode)
        super(DocBaseV4Type, self)._buildChildren(child_, node, nodeName_, True)
# end class DocBaseV4Type


class DocNumberType(GeneratedsSuper):
    """DocNumberType -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    AddNumber -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    а
    я
    с
    о
    с
    т
    а
    в
    л
    я
    ю
    щ
    а
    я
    н
    о
    м
    е
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.AddNumber = AddNumber
        self.validate_CodeVariable2Type(self.AddNumber)
        self.AddNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocNumberType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocNumberType.subclass:
            return DocNumberType.subclass(*args_, **kwargs_)
        else:
            return DocNumberType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddNumber(self):
        return self.AddNumber
    def set_AddNumber(self, AddNumber):
        self.AddNumber = AddNumber
    def validate_CodeVariable2Type(self, value):
        result = True
        # Validate type CodeVariable2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable2Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.AddNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocNumberType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocNumberType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocNumberType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocNumberType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocNumberType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='DocNumberType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocNumberType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddNumber is not None:
            namespaceprefix_ = self.AddNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.AddNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddNumber>%s</%sAddNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddNumber), input_name='AddNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AddNumber')
            value_ = self.gds_validate_string(value_, node, 'AddNumber')
            self.AddNumber = value_
            self.AddNumber_nsprefix_ = child_.prefix
            # validate type CodeVariable2Type
            self.validate_CodeVariable2Type(self.AddNumber)
        super(DocNumberType, self)._buildChildren(child_, node, nodeName_, True)
# end class DocNumberType


class DocumentBaseType16(GeneratedsSuper):
    """DocumentBaseType16 -- Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    д
    л
    я
    у
    к
    а
    з
    а
    н
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    .
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    ,
    н
    о
    м
    е
    р
    ,
    д
    а
    т
    а
    (
    в
    с
    е
    э
    л
    е
    м
    е
    н
    т
    ы
    о
    б
    я
    з
    а
    т
    е
    л
    ь
    н
    ы
    д
    л
    я
    з
    а
    п
    о
    л
    н
    е
    н
    и
    я
    )
    PrDocumentName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrDocumentNumber -- Н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrDocumentDate -- Д
    а
    т
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.PrDocumentName = PrDocumentName
        self.validate_DocumentNameType(self.PrDocumentName)
        self.PrDocumentName_nsprefix_ = "clt_ru"
        self.PrDocumentNumber = PrDocumentNumber
        self.validate_DocumentNumberType(self.PrDocumentNumber)
        self.PrDocumentNumber_nsprefix_ = "clt_ru"
        if isinstance(PrDocumentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PrDocumentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PrDocumentDate
        self.PrDocumentDate = initvalue_
        self.PrDocumentDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentBaseType16)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentBaseType16.subclass:
            return DocumentBaseType16.subclass(*args_, **kwargs_)
        else:
            return DocumentBaseType16(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrDocumentName(self):
        return self.PrDocumentName
    def set_PrDocumentName(self, PrDocumentName):
        self.PrDocumentName = PrDocumentName
    def get_PrDocumentNumber(self):
        return self.PrDocumentNumber
    def set_PrDocumentNumber(self, PrDocumentNumber):
        self.PrDocumentNumber = PrDocumentNumber
    def get_PrDocumentDate(self):
        return self.PrDocumentDate
    def set_PrDocumentDate(self, PrDocumentDate):
        self.PrDocumentDate = PrDocumentDate
    def validate_DocumentNameType(self, value):
        result = True
        # Validate type DocumentNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.PrDocumentName is not None or
            self.PrDocumentNumber is not None or
            self.PrDocumentDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocumentBaseType16', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentBaseType16')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentBaseType16':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentBaseType16')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentBaseType16', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='DocumentBaseType16'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocumentBaseType16', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrDocumentName is not None:
            namespaceprefix_ = self.PrDocumentName_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentName>%s</%sPrDocumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrDocumentName), input_name='PrDocumentName')), namespaceprefix_ , eol_))
        if self.PrDocumentNumber is not None:
            namespaceprefix_ = self.PrDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentNumber>%s</%sPrDocumentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrDocumentNumber), input_name='PrDocumentNumber')), namespaceprefix_ , eol_))
        if self.PrDocumentDate is not None:
            namespaceprefix_ = self.PrDocumentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentDate>%s</%sPrDocumentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PrDocumentDate, input_name='PrDocumentDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrDocumentName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrDocumentName')
            value_ = self.gds_validate_string(value_, node, 'PrDocumentName')
            self.PrDocumentName = value_
            self.PrDocumentName_nsprefix_ = child_.prefix
            # validate type DocumentNameType
            self.validate_DocumentNameType(self.PrDocumentName)
        elif nodeName_ == 'PrDocumentNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrDocumentNumber')
            value_ = self.gds_validate_string(value_, node, 'PrDocumentNumber')
            self.PrDocumentNumber = value_
            self.PrDocumentNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.PrDocumentNumber)
        elif nodeName_ == 'PrDocumentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PrDocumentDate = dval_
            self.PrDocumentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.PrDocumentDate)
# end class DocumentBaseType16


class DocumentBaseV1Type(GeneratedsSuper):
    """DocumentBaseV1Type -- Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    д
    л
    я
    у
    к
    а
    з
    а
    н
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    .
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    ,
    н
    о
    м
    е
    р
    ,
    д
    а
    т
    а
    (
    н
    о
    м
    е
    р
    и
    д
    а
    т
    а
    о
    б
    я
    з
    а
    т
    е
    л
    ь
    н
    ы
    д
    л
    я
    з
    а
    п
    о
    л
    н
    е
    н
    и
    я
    )
    PrDocumentName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrDocumentNumber -- Н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrDocumentDate -- Д
    а
    т
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.PrDocumentName = PrDocumentName
        self.validate_DocumentNameType(self.PrDocumentName)
        self.PrDocumentName_nsprefix_ = "clt_ru"
        self.PrDocumentNumber = PrDocumentNumber
        self.validate_DocumentNumberType(self.PrDocumentNumber)
        self.PrDocumentNumber_nsprefix_ = "clt_ru"
        if isinstance(PrDocumentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PrDocumentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PrDocumentDate
        self.PrDocumentDate = initvalue_
        self.PrDocumentDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentBaseV1Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentBaseV1Type.subclass:
            return DocumentBaseV1Type.subclass(*args_, **kwargs_)
        else:
            return DocumentBaseV1Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrDocumentName(self):
        return self.PrDocumentName
    def set_PrDocumentName(self, PrDocumentName):
        self.PrDocumentName = PrDocumentName
    def get_PrDocumentNumber(self):
        return self.PrDocumentNumber
    def set_PrDocumentNumber(self, PrDocumentNumber):
        self.PrDocumentNumber = PrDocumentNumber
    def get_PrDocumentDate(self):
        return self.PrDocumentDate
    def set_PrDocumentDate(self, PrDocumentDate):
        self.PrDocumentDate = PrDocumentDate
    def validate_DocumentNameType(self, value):
        result = True
        # Validate type DocumentNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.PrDocumentName is not None or
            self.PrDocumentNumber is not None or
            self.PrDocumentDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocumentBaseV1Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentBaseV1Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentBaseV1Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentBaseV1Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentBaseV1Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='DocumentBaseV1Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocumentBaseV1Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrDocumentName is not None:
            namespaceprefix_ = self.PrDocumentName_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentName>%s</%sPrDocumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrDocumentName), input_name='PrDocumentName')), namespaceprefix_ , eol_))
        if self.PrDocumentNumber is not None:
            namespaceprefix_ = self.PrDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentNumber>%s</%sPrDocumentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrDocumentNumber), input_name='PrDocumentNumber')), namespaceprefix_ , eol_))
        if self.PrDocumentDate is not None:
            namespaceprefix_ = self.PrDocumentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PrDocumentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrDocumentDate>%s</%sPrDocumentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PrDocumentDate, input_name='PrDocumentDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrDocumentName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrDocumentName')
            value_ = self.gds_validate_string(value_, node, 'PrDocumentName')
            self.PrDocumentName = value_
            self.PrDocumentName_nsprefix_ = child_.prefix
            # validate type DocumentNameType
            self.validate_DocumentNameType(self.PrDocumentName)
        elif nodeName_ == 'PrDocumentNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrDocumentNumber')
            value_ = self.gds_validate_string(value_, node, 'PrDocumentNumber')
            self.PrDocumentNumber = value_
            self.PrDocumentNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.PrDocumentNumber)
        elif nodeName_ == 'PrDocumentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PrDocumentDate = dval_
            self.PrDocumentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.PrDocumentDate)
# end class DocumentBaseV1Type


class EECCustomsType17(CustomsType):
    """EECCustomsType17 -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    Е
    А
    Э
    С
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CustomsType
    def __init__(self, Code=None, OfficeName=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("EECCustomsType17"), self).__init__(Code, OfficeName,  **kwargs_)
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EECCustomsType17)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EECCustomsType17.subclass:
            return EECCustomsType17.subclass(*args_, **kwargs_)
        else:
            return EECCustomsType17(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.CountryCode is not None or
            super(EECCustomsType17, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECCustomsType17', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EECCustomsType17')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EECCustomsType17':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECCustomsType17')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EECCustomsType17', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='EECCustomsType17'):
        super(EECCustomsType17, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECCustomsType17')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECCustomsType17', fromsubclass_=False, pretty_print=True):
        super(EECCustomsType17, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(EECCustomsType17, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        super(EECCustomsType17, self)._buildChildren(child_, node, nodeName_, True)
# end class EECCustomsType17


class EECEDocHeaderAddInfoType(GeneratedsSuper):
    """EECEDocHeaderAddInfoType -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    и
    е
    р
    е
    к
    в
    и
    з
    и
    т
    ы
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    (
    с
    в
    е
    д
    е
    н
    и
    й
    )
    InfEnvelopeCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    о
    о
    б
    щ
    е
    н
    и
    я
    о
    б
    щ
    е
    г
    о
    п
    р
    о
    ц
    е
    с
    с
    а
    EDocCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    (
    с
    в
    е
    д
    е
    н
    и
    й
    )
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    р
    е
    е
    с
    т
    р
    о
    м
    с
    т
    р
    у
    к
    т
    у
    р
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    EDocDateTime -- Д
    а
    т
    а
    и
    в
    р
    е
    м
    я
    с
    о
    з
    д
    а
    н
    и
    я
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    (
    с
    в
    е
    д
    е
    н
    и
    й
    )
    LanguageCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    я
    з
    ы
    к
    а
    SourceCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    -
    о
    т
    п
    р
    а
    в
    и
    т
    е
    л
    я
    с
    о
    о
    б
    щ
    е
    н
    и
    я
    alpha-2 (
    д
    в
    е
    б
    у
    к
    в
    ы
    л
    а
    т
    и
    н
    с
    к
    о
    г
    о
    а
    л
    ф
    а
    в
    и
    т
    а
    )
    DestinationCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    -
    п
    о
    л
    у
    ч
    а
    т
    е
    л
    я
    с
    о
    о
    б
    щ
    е
    н
    и
    я
    alpha-2 (
    д
    в
    е
    б
    у
    к
    в
    ы
    л
    а
    т
    и
    н
    с
    к
    о
    г
    о
    а
    л
    ф
    а
    в
    и
    т
    а
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InfEnvelopeCode=None, EDocCode=None, EDocDateTime=None, LanguageCode=None, SourceCountryCode=None, DestinationCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.InfEnvelopeCode = InfEnvelopeCode
        self.validate_InfEnvelopeCodeType(self.InfEnvelopeCode)
        self.InfEnvelopeCode_nsprefix_ = "RUSclt_ru"
        self.EDocCode = EDocCode
        self.validate_EDocCodeType(self.EDocCode)
        self.EDocCode_nsprefix_ = "RUSclt_ru"
        if isinstance(EDocDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EDocDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EDocDateTime
        self.EDocDateTime = initvalue_
        self.EDocDateTime_nsprefix_ = "clt_ru"
        self.LanguageCode = LanguageCode
        self.validate_LanguageCodeType(self.LanguageCode)
        self.LanguageCode_nsprefix_ = "clt_ru"
        self.SourceCountryCode = SourceCountryCode
        self.validate_CountryA2CodeType(self.SourceCountryCode)
        self.SourceCountryCode_nsprefix_ = "clt_ru"
        self.DestinationCountryCode = DestinationCountryCode
        self.validate_CountryA2CodeType(self.DestinationCountryCode)
        self.DestinationCountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EECEDocHeaderAddInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EECEDocHeaderAddInfoType.subclass:
            return EECEDocHeaderAddInfoType.subclass(*args_, **kwargs_)
        else:
            return EECEDocHeaderAddInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InfEnvelopeCode(self):
        return self.InfEnvelopeCode
    def set_InfEnvelopeCode(self, InfEnvelopeCode):
        self.InfEnvelopeCode = InfEnvelopeCode
    def get_EDocCode(self):
        return self.EDocCode
    def set_EDocCode(self, EDocCode):
        self.EDocCode = EDocCode
    def get_EDocDateTime(self):
        return self.EDocDateTime
    def set_EDocDateTime(self, EDocDateTime):
        self.EDocDateTime = EDocDateTime
    def get_LanguageCode(self):
        return self.LanguageCode
    def set_LanguageCode(self, LanguageCode):
        self.LanguageCode = LanguageCode
    def get_SourceCountryCode(self):
        return self.SourceCountryCode
    def set_SourceCountryCode(self, SourceCountryCode):
        self.SourceCountryCode = SourceCountryCode
    def get_DestinationCountryCode(self):
        return self.DestinationCountryCode
    def set_DestinationCountryCode(self, DestinationCountryCode):
        self.DestinationCountryCode = DestinationCountryCode
    def validate_InfEnvelopeCodeType(self, value):
        result = True
        # Validate type InfEnvelopeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_InfEnvelopeCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_InfEnvelopeCodeType_patterns_, ))
                result = False
        return result
    validate_InfEnvelopeCodeType_patterns_ = [['^(P\\.[A-Z]{2}\\.[0-9]{2}\\.MSG\\.[0-9]{3})$']]
    def validate_EDocCodeType(self, value):
        result = True
        # Validate type EDocCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_EDocCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_EDocCodeType_patterns_, ))
                result = False
        return result
    validate_EDocCodeType_patterns_ = [['^(R(\\.[A-Z]{2}\\.[A-Z]{2}\\.[0-9]{2})?\\.[0-9]{3})$']]
    def validate_DateTimeCustType(self, value):
        result = True
        # Validate type DateTimeCustType, a restriction on CategoryCust:DateTimeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.datetime):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.datetime)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_LanguageCodeType(self, value):
        result = True
        # Validate type LanguageCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_LanguageCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_LanguageCodeType_patterns_, ))
                result = False
        return result
    validate_LanguageCodeType_patterns_ = [['^([A-Z]{2})$']]
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.InfEnvelopeCode is not None or
            self.EDocCode is not None or
            self.EDocDateTime is not None or
            self.LanguageCode is not None or
            self.SourceCountryCode is not None or
            self.DestinationCountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECEDocHeaderAddInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EECEDocHeaderAddInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EECEDocHeaderAddInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECEDocHeaderAddInfoType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EECEDocHeaderAddInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='EECEDocHeaderAddInfoType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECEDocHeaderAddInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InfEnvelopeCode is not None:
            namespaceprefix_ = self.InfEnvelopeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.InfEnvelopeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInfEnvelopeCode>%s</%sInfEnvelopeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InfEnvelopeCode), input_name='InfEnvelopeCode')), namespaceprefix_ , eol_))
        if self.EDocCode is not None:
            namespaceprefix_ = self.EDocCode_nsprefix_ + ':' if (UseCapturedNS_ and self.EDocCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEDocCode>%s</%sEDocCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EDocCode), input_name='EDocCode')), namespaceprefix_ , eol_))
        if self.EDocDateTime is not None:
            namespaceprefix_ = self.EDocDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.EDocDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEDocDateTime>%s</%sEDocDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EDocDateTime, input_name='EDocDateTime'), namespaceprefix_ , eol_))
        if self.LanguageCode is not None:
            namespaceprefix_ = self.LanguageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageCode>%s</%sLanguageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LanguageCode), input_name='LanguageCode')), namespaceprefix_ , eol_))
        if self.SourceCountryCode is not None:
            namespaceprefix_ = self.SourceCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SourceCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSourceCountryCode>%s</%sSourceCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SourceCountryCode), input_name='SourceCountryCode')), namespaceprefix_ , eol_))
        if self.DestinationCountryCode is not None:
            namespaceprefix_ = self.DestinationCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDestinationCountryCode>%s</%sDestinationCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DestinationCountryCode), input_name='DestinationCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InfEnvelopeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'InfEnvelopeCode')
            value_ = self.gds_validate_string(value_, node, 'InfEnvelopeCode')
            self.InfEnvelopeCode = value_
            self.InfEnvelopeCode_nsprefix_ = child_.prefix
            # validate type InfEnvelopeCodeType
            self.validate_InfEnvelopeCodeType(self.InfEnvelopeCode)
        elif nodeName_ == 'EDocCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EDocCode')
            value_ = self.gds_validate_string(value_, node, 'EDocCode')
            self.EDocCode = value_
            self.EDocCode_nsprefix_ = child_.prefix
            # validate type EDocCodeType
            self.validate_EDocCodeType(self.EDocCode)
        elif nodeName_ == 'EDocDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EDocDateTime = dval_
            self.EDocDateTime_nsprefix_ = child_.prefix
            # validate type DateTimeCustType
            self.validate_DateTimeCustType(self.EDocDateTime)
        elif nodeName_ == 'LanguageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LanguageCode')
            value_ = self.gds_validate_string(value_, node, 'LanguageCode')
            self.LanguageCode = value_
            self.LanguageCode_nsprefix_ = child_.prefix
            # validate type LanguageCodeType
            self.validate_LanguageCodeType(self.LanguageCode)
        elif nodeName_ == 'SourceCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SourceCountryCode')
            value_ = self.gds_validate_string(value_, node, 'SourceCountryCode')
            self.SourceCountryCode = value_
            self.SourceCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.SourceCountryCode)
        elif nodeName_ == 'DestinationCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DestinationCountryCode')
            value_ = self.gds_validate_string(value_, node, 'DestinationCountryCode')
            self.DestinationCountryCode = value_
            self.DestinationCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.DestinationCountryCode)
# end class EECEDocHeaderAddInfoType


class EECGoodsBaseType(GeneratedsSuper):
    """EECGoodsBaseType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    б
    а
    з
    о
    в
    ы
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    е
    GoodsNumeric -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    GoodsTNVEDCode -- К
    о
    д
    т
    о
    в
    а
    р
    а
    п
    о
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    GoodsDescription -- О
    п
    и
    с
    а
    н
    и
    е
    т
    о
    в
    а
    р
    а
    ,
    в
    к
    л
    ю
    ч
    а
    я
    т
    о
    р
    г
    о
    в
    о
    е
    ,
    к
    о
    м
    м
    е
    р
    ч
    е
    с
    к
    о
    е
    и
    л
    и
    и
    н
    о
    е
    т
    р
    а
    д
    и
    ц
    и
    о
    н
    н
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    т
    о
    в
    а
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsNumeric=None, GoodsTNVEDCode=None, GoodsDescription=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.GoodsNumeric = GoodsNumeric
        self.validate_Count3Type(self.GoodsNumeric)
        self.GoodsNumeric_nsprefix_ = "clt_ru"
        self.GoodsTNVEDCode = GoodsTNVEDCode
        self.validate_GoodsNomenclatureCodeType(self.GoodsTNVEDCode)
        self.GoodsTNVEDCode_nsprefix_ = "clt_ru"
        if GoodsDescription is None:
            self.GoodsDescription = []
        else:
            self.GoodsDescription = GoodsDescription
        self.GoodsDescription_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EECGoodsBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EECGoodsBaseType.subclass:
            return EECGoodsBaseType.subclass(*args_, **kwargs_)
        else:
            return EECGoodsBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsNumeric(self):
        return self.GoodsNumeric
    def set_GoodsNumeric(self, GoodsNumeric):
        self.GoodsNumeric = GoodsNumeric
    def get_GoodsTNVEDCode(self):
        return self.GoodsTNVEDCode
    def set_GoodsTNVEDCode(self, GoodsTNVEDCode):
        self.GoodsTNVEDCode = GoodsTNVEDCode
    def get_GoodsDescription(self):
        return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription):
        self.GoodsDescription = GoodsDescription
    def add_GoodsDescription(self, value):
        self.GoodsDescription.append(value)
    def insert_GoodsDescription_at(self, index, value):
        self.GoodsDescription.insert(index, value)
    def replace_GoodsDescription_at(self, index, value):
        self.GoodsDescription[index] = value
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_GoodsNomenclatureCodeType(self, value):
        result = True
        # Validate type GoodsNomenclatureCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_GoodsNomenclatureCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_GoodsNomenclatureCodeType_patterns_, ))
                result = False
        return result
    validate_GoodsNomenclatureCodeType_patterns_ = [['^(\\d{4,10})$']]
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsNumeric is not None or
            self.GoodsTNVEDCode is not None or
            self.GoodsDescription
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECGoodsBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EECGoodsBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EECGoodsBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECGoodsBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EECGoodsBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='EECGoodsBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECGoodsBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsNumeric is not None:
            namespaceprefix_ = self.GoodsNumeric_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsNumeric_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsNumeric>%s</%sGoodsNumeric>%s' % (namespaceprefix_ , self.gds_format_integer(self.GoodsNumeric, input_name='GoodsNumeric'), namespaceprefix_ , eol_))
        if self.GoodsTNVEDCode is not None:
            namespaceprefix_ = self.GoodsTNVEDCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsTNVEDCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsTNVEDCode>%s</%sGoodsTNVEDCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsTNVEDCode), input_name='GoodsTNVEDCode')), namespaceprefix_ , eol_))
        for GoodsDescription_ in self.GoodsDescription:
            namespaceprefix_ = self.GoodsDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDescription>%s</%sGoodsDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsDescription_), input_name='GoodsDescription')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsNumeric' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'GoodsNumeric')
            ival_ = self.gds_validate_integer(ival_, node, 'GoodsNumeric')
            self.GoodsNumeric = ival_
            self.GoodsNumeric_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.GoodsNumeric)
        elif nodeName_ == 'GoodsTNVEDCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsTNVEDCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsTNVEDCode')
            self.GoodsTNVEDCode = value_
            self.GoodsTNVEDCode_nsprefix_ = child_.prefix
            # validate type GoodsNomenclatureCodeType
            self.validate_GoodsNomenclatureCodeType(self.GoodsTNVEDCode)
        elif nodeName_ == 'GoodsDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsDescription')
            value_ = self.gds_validate_string(value_, node, 'GoodsDescription')
            self.GoodsDescription.append(value_)
            self.GoodsDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsDescription[-1])
# end class EECGoodsBaseType


class EECGoodsManufacturerDetailsType(GeneratedsSuper):
    """EECGoodsManufacturerDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    п
    р
    о
    и
    з
    в
    о
    д
    и
    т
    е
    л
    е
    т
    о
    в
    а
    р
    а
    ManufacturerName -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    р
    о
    и
    з
    в
    о
    д
    и
    т
    е
    л
    е
    т
    о
    в
    а
    р
    а
    TradeMarkName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    т
    о
    в
    а
    р
    н
    о
    г
    о
    з
    н
    а
    к
    а
    ,
    о
    б
    ъ
    е
    к
    т
    а
    а
    в
    т
    о
    р
    с
    к
    о
    г
    о
    п
    р
    а
    в
    а
    ,
    с
    м
    е
    ж
    н
    ы
    х
    п
    р
    а
    в
    ,
    п
    а
    т
    е
    н
    т
    а
    ProductionPlaceName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    е
    с
    т
    а
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ManufacturerName=None, TradeMarkName=None, ProductionPlaceName=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.ManufacturerName = ManufacturerName
        self.validate_FreeText250Type(self.ManufacturerName)
        self.ManufacturerName_nsprefix_ = "clt_ru"
        self.TradeMarkName = TradeMarkName
        self.validate_FreeText250Type(self.TradeMarkName)
        self.TradeMarkName_nsprefix_ = "clt_ru"
        self.ProductionPlaceName = ProductionPlaceName
        self.validate_FreeText250Type(self.ProductionPlaceName)
        self.ProductionPlaceName_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EECGoodsManufacturerDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EECGoodsManufacturerDetailsType.subclass:
            return EECGoodsManufacturerDetailsType.subclass(*args_, **kwargs_)
        else:
            return EECGoodsManufacturerDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ManufacturerName(self):
        return self.ManufacturerName
    def set_ManufacturerName(self, ManufacturerName):
        self.ManufacturerName = ManufacturerName
    def get_TradeMarkName(self):
        return self.TradeMarkName
    def set_TradeMarkName(self, TradeMarkName):
        self.TradeMarkName = TradeMarkName
    def get_ProductionPlaceName(self):
        return self.ProductionPlaceName
    def set_ProductionPlaceName(self, ProductionPlaceName):
        self.ProductionPlaceName = ProductionPlaceName
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ManufacturerName is not None or
            self.TradeMarkName is not None or
            self.ProductionPlaceName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECGoodsManufacturerDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EECGoodsManufacturerDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EECGoodsManufacturerDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECGoodsManufacturerDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EECGoodsManufacturerDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='EECGoodsManufacturerDetailsType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='EECGoodsManufacturerDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ManufacturerName is not None:
            namespaceprefix_ = self.ManufacturerName_nsprefix_ + ':' if (UseCapturedNS_ and self.ManufacturerName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerName>%s</%sManufacturerName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ManufacturerName), input_name='ManufacturerName')), namespaceprefix_ , eol_))
        if self.TradeMarkName is not None:
            namespaceprefix_ = self.TradeMarkName_nsprefix_ + ':' if (UseCapturedNS_ and self.TradeMarkName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTradeMarkName>%s</%sTradeMarkName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TradeMarkName), input_name='TradeMarkName')), namespaceprefix_ , eol_))
        if self.ProductionPlaceName is not None:
            namespaceprefix_ = self.ProductionPlaceName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductionPlaceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductionPlaceName>%s</%sProductionPlaceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductionPlaceName), input_name='ProductionPlaceName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ManufacturerName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ManufacturerName')
            value_ = self.gds_validate_string(value_, node, 'ManufacturerName')
            self.ManufacturerName = value_
            self.ManufacturerName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ManufacturerName)
        elif nodeName_ == 'TradeMarkName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TradeMarkName')
            value_ = self.gds_validate_string(value_, node, 'TradeMarkName')
            self.TradeMarkName = value_
            self.TradeMarkName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.TradeMarkName)
        elif nodeName_ == 'ProductionPlaceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductionPlaceName')
            value_ = self.gds_validate_string(value_, node, 'ProductionPlaceName')
            self.ProductionPlaceName = value_
            self.ProductionPlaceName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ProductionPlaceName)
# end class EECGoodsManufacturerDetailsType


class ExchangeRateWithCurrencyA3Type(GeneratedsSuper):
    """ExchangeRateWithCurrencyA3Type -- К
    у
    р
    с
    в
    а
    л
    ю
    т
    ы
    CurrencyRate -- К
    у
    р
    с
    в
    а
    л
    ю
    т
    ы
    .
    Ч
    и
    с
    л
    о
    .
    В
    с
    е
    г
    о
    20
    ц
    и
    ф
    р
    и
    з
    н
    и
    х
    д
    о
    4
    з
    н
    а
    к
    о
    в
    п
    о
    с
    л
    е
    з
    а
    п
    я
    т
    о
    й
    CurrencyA3Code -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    К
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    а
    л
    ю
    т
    ScaleNumber -- М
    а
    с
    ш
    т
    а
    б
    д
    е
    н
    е
    ж
    н
    о
    й
    с
    у
    м
    м
    ы
    в
    д
    е
    с
    я
    т
    и
    ч
    н
    о
    й
    с
    и
    с
    т
    е
    м
    е
    с
    ч
    и
    с
    л
    е
    н
    и
    я
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    й
    в
    в
    и
    д
    е
    п
    о
    к
    а
    з
    а
    т
    е
    л
    я
    с
    т
    е
    п
    е
    н
    и
    ч
    и
    с
    л
    а
    10
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CurrencyRate=None, CurrencyA3Code=None, ScaleNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.CurrencyRate = CurrencyRate
        self.validate_RUCurrencyRateType(self.CurrencyRate)
        self.CurrencyRate_nsprefix_ = "RUSclt_ru"
        self.CurrencyA3Code = CurrencyA3Code
        self.validate_CurrencyA3CodeType(self.CurrencyA3Code)
        self.CurrencyA3Code_nsprefix_ = "clt_ru"
        self.ScaleNumber = ScaleNumber
        self.validate_Quantity2Type(self.ScaleNumber)
        self.ScaleNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ExchangeRateWithCurrencyA3Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ExchangeRateWithCurrencyA3Type.subclass:
            return ExchangeRateWithCurrencyA3Type.subclass(*args_, **kwargs_)
        else:
            return ExchangeRateWithCurrencyA3Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CurrencyRate(self):
        return self.CurrencyRate
    def set_CurrencyRate(self, CurrencyRate):
        self.CurrencyRate = CurrencyRate
    def get_CurrencyA3Code(self):
        return self.CurrencyA3Code
    def set_CurrencyA3Code(self, CurrencyA3Code):
        self.CurrencyA3Code = CurrencyA3Code
    def get_ScaleNumber(self):
        return self.ScaleNumber
    def set_ScaleNumber(self, ScaleNumber):
        self.ScaleNumber = ScaleNumber
    def validate_RUCurrencyRateType(self, value):
        result = True
        # Validate type RUCurrencyRateType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on RUCurrencyRateType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on RUCurrencyRateType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Quantity2Type(self, value):
        result = True
        # Validate type Quantity2Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CurrencyRate is not None or
            self.CurrencyA3Code is not None or
            self.ScaleNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ExchangeRateWithCurrencyA3Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ExchangeRateWithCurrencyA3Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ExchangeRateWithCurrencyA3Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ExchangeRateWithCurrencyA3Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ExchangeRateWithCurrencyA3Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='ExchangeRateWithCurrencyA3Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ExchangeRateWithCurrencyA3Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CurrencyRate is not None:
            namespaceprefix_ = self.CurrencyRate_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyRate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyRate>%s</%sCurrencyRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CurrencyRate, input_name='CurrencyRate'), namespaceprefix_ , eol_))
        if self.CurrencyA3Code is not None:
            namespaceprefix_ = self.CurrencyA3Code_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyA3Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyA3Code>%s</%sCurrencyA3Code>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyA3Code), input_name='CurrencyA3Code')), namespaceprefix_ , eol_))
        if self.ScaleNumber is not None:
            namespaceprefix_ = self.ScaleNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ScaleNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sScaleNumber>%s</%sScaleNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.ScaleNumber, input_name='ScaleNumber'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CurrencyRate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CurrencyRate')
            fval_ = self.gds_validate_decimal(fval_, node, 'CurrencyRate')
            self.CurrencyRate = fval_
            self.CurrencyRate_nsprefix_ = child_.prefix
            # validate type RUCurrencyRateType
            self.validate_RUCurrencyRateType(self.CurrencyRate)
        elif nodeName_ == 'CurrencyA3Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CurrencyA3Code')
            value_ = self.gds_validate_string(value_, node, 'CurrencyA3Code')
            self.CurrencyA3Code = value_
            self.CurrencyA3Code_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.CurrencyA3Code)
        elif nodeName_ == 'ScaleNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ScaleNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'ScaleNumber')
            self.ScaleNumber = ival_
            self.ScaleNumber_nsprefix_ = child_.prefix
            # validate type Quantity2Type
            self.validate_Quantity2Type(self.ScaleNumber)
# end class ExchangeRateWithCurrencyA3Type


class GoodLocationTransportMeansDetailsType(GeneratedsSuper):
    """GoodLocationTransportMeansDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    м
    с
    р
    е
    д
    с
    т
    в
    е
    в
    /
    н
    а
    к
    о
    т
    о
    р
    о
    м
    н
    а
    х
    о
    д
    я
    т
    с
    я
    т
    о
    в
    а
    р
    ы
    UnifiedTransportModeCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    а
    TransportMeansRegId -- И
    н
    д
    и
    в
    и
    д
    у
    а
    л
    ь
    н
    о
    е
    б
    у
    к
    в
    е
    н
    н
    о
    -
    ц
    и
    ф
    р
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    о
    е
    р
    е
    г
    и
    с
    т
    р
    и
    р
    у
    ю
    щ
    и
    м
    о
    р
    г
    а
    н
    о
    м
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    м
    у
    с
    р
    е
    д
    с
    т
    в
    у
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnifiedTransportModeCode=None, TransportMeansRegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.UnifiedTransportModeCode = UnifiedTransportModeCode
        self.validate_TransportModeCodeType(self.UnifiedTransportModeCode)
        self.UnifiedTransportModeCode_nsprefix_ = "clt_ru"
        if TransportMeansRegId is None:
            self.TransportMeansRegId = []
        else:
            self.TransportMeansRegId = TransportMeansRegId
        self.TransportMeansRegId_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodLocationTransportMeansDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodLocationTransportMeansDetailsType.subclass:
            return GoodLocationTransportMeansDetailsType.subclass(*args_, **kwargs_)
        else:
            return GoodLocationTransportMeansDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnifiedTransportModeCode(self):
        return self.UnifiedTransportModeCode
    def set_UnifiedTransportModeCode(self, UnifiedTransportModeCode):
        self.UnifiedTransportModeCode = UnifiedTransportModeCode
    def get_TransportMeansRegId(self):
        return self.TransportMeansRegId
    def set_TransportMeansRegId(self, TransportMeansRegId):
        self.TransportMeansRegId = TransportMeansRegId
    def add_TransportMeansRegId(self, value):
        self.TransportMeansRegId.append(value)
    def insert_TransportMeansRegId_at(self, index, value):
        self.TransportMeansRegId.insert(index, value)
    def replace_TransportMeansRegId_at(self, index, value):
        self.TransportMeansRegId[index] = value
    def validate_TransportModeCodeType(self, value):
        result = True
        # Validate type TransportModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TransportModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.UnifiedTransportModeCode is not None or
            self.TransportMeansRegId
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodLocationTransportMeansDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodLocationTransportMeansDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodLocationTransportMeansDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodLocationTransportMeansDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodLocationTransportMeansDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='GoodLocationTransportMeansDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodLocationTransportMeansDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnifiedTransportModeCode is not None:
            namespaceprefix_ = self.UnifiedTransportModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UnifiedTransportModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnifiedTransportModeCode>%s</%sUnifiedTransportModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnifiedTransportModeCode), input_name='UnifiedTransportModeCode')), namespaceprefix_ , eol_))
        for TransportMeansRegId_ in self.TransportMeansRegId:
            namespaceprefix_ = self.TransportMeansRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportMeansRegId_nsprefix_) else ''
            TransportMeansRegId_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransportMeansRegId', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnifiedTransportModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'UnifiedTransportModeCode')
            value_ = self.gds_validate_string(value_, node, 'UnifiedTransportModeCode')
            self.UnifiedTransportModeCode = value_
            self.UnifiedTransportModeCode_nsprefix_ = child_.prefix
            # validate type TransportModeCodeType
            self.validate_TransportModeCodeType(self.UnifiedTransportModeCode)
        elif nodeName_ == 'TransportMeansRegId':
            obj_ = TransportMeansRegIdType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransportMeansRegId.append(obj_)
            obj_.original_tagname_ = 'TransportMeansRegId'
# end class GoodLocationTransportMeansDetailsType


class InvoiceValueBaseDetailsType(GeneratedsSuper):
    """InvoiceValueBaseDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    б
    а
    з
    о
    в
    ы
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    о
    и
    м
    о
    с
    т
    и
    т
    о
    в
    а
    р
    а
    п
    о
    к
    о
    н
    т
    р
    а
    к
    т
    у
    ValueAmount -- О
    б
    щ
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    о
    в
    а
    р
    о
    в
    в
    в
    а
    л
    ю
    т
    е
    ц
    е
    н
    ы
    д
    о
    г
    о
    в
    о
    р
    а
    и
    л
    и
    в
    в
    а
    л
    ю
    т
    е
    п
    л
    а
    т
    е
    ж
    а
    (
    о
    ц
    е
    н
    к
    и
    )
    ExchangeRate -- К
    у
    р
    с
    в
    а
    л
    ю
    т
    ы
    ц
    е
    н
    ы
    д
    о
    г
    о
    в
    о
    р
    а
    и
    л
    и
    в
    а
    л
    ю
    т
    ы
    п
    л
    а
    т
    е
    ж
    а
    (
    о
    ц
    е
    н
    к
    и
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ValueAmount=None, ExchangeRate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.ValueAmount = ValueAmount
        self.validate_AmountType(self.ValueAmount)
        self.ValueAmount_nsprefix_ = "RUScat_ru"
        self.ExchangeRate = ExchangeRate
        self.ExchangeRate_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InvoiceValueBaseDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InvoiceValueBaseDetailsType.subclass:
            return InvoiceValueBaseDetailsType.subclass(*args_, **kwargs_)
        else:
            return InvoiceValueBaseDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ValueAmount(self):
        return self.ValueAmount
    def set_ValueAmount(self, ValueAmount):
        self.ValueAmount = ValueAmount
    def get_ExchangeRate(self):
        return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate):
        self.ExchangeRate = ExchangeRate
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ValueAmount is not None or
            self.ExchangeRate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"', name_='InvoiceValueBaseDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InvoiceValueBaseDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InvoiceValueBaseDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InvoiceValueBaseDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InvoiceValueBaseDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='InvoiceValueBaseDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"', name_='InvoiceValueBaseDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ValueAmount is not None:
            namespaceprefix_ = self.ValueAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.ValueAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValueAmount>%s</%sValueAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ValueAmount, input_name='ValueAmount'), namespaceprefix_ , eol_))
        if self.ExchangeRate is not None:
            namespaceprefix_ = self.ExchangeRate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExchangeRate_nsprefix_) else ''
            self.ExchangeRate.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ExchangeRate', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ValueAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ValueAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'ValueAmount')
            self.ValueAmount = fval_
            self.ValueAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.ValueAmount)
        elif nodeName_ == 'ExchangeRate':
            obj_ = ExchangeRateWithCurrencyA3Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ExchangeRate = obj_
            obj_.original_tagname_ = 'ExchangeRate'
# end class InvoiceValueBaseDetailsType


class OrganizationType18(SubjectBaseDetailsType):
    """OrganizationType18 -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    о
    м
    л
    и
    ц
    е
    SubjectAddressDetails -- А
    д
    р
    е
    с
    CommunicationDetails -- К
    о
    н
    т
    а
    к
    т
    н
    ы
    й
    р
    е
    к
    в
    и
    з
    и
    т
    с
    у
    б
    ъ
    е
    к
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectBaseDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, SubjectAddressDetails=None, CommunicationDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("OrganizationType18"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN,  **kwargs_)
        self.SubjectAddressDetails = SubjectAddressDetails
        self.SubjectAddressDetails_nsprefix_ = "RUScat_ru"
        self.CommunicationDetails = CommunicationDetails
        self.CommunicationDetails_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrganizationType18)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrganizationType18.subclass:
            return OrganizationType18.subclass(*args_, **kwargs_)
        else:
            return OrganizationType18(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SubjectAddressDetails(self):
        return self.SubjectAddressDetails
    def set_SubjectAddressDetails(self, SubjectAddressDetails):
        self.SubjectAddressDetails = SubjectAddressDetails
    def get_CommunicationDetails(self):
        return self.CommunicationDetails
    def set_CommunicationDetails(self, CommunicationDetails):
        self.CommunicationDetails = CommunicationDetails
    def has__content(self):
        if (
            self.SubjectAddressDetails is not None or
            self.CommunicationDetails is not None or
            super(OrganizationType18, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='OrganizationType18', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrganizationType18')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrganizationType18':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationType18')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrganizationType18', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='OrganizationType18'):
        super(OrganizationType18, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationType18')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='OrganizationType18', fromsubclass_=False, pretty_print=True):
        super(OrganizationType18, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SubjectAddressDetails is not None:
            namespaceprefix_ = self.SubjectAddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SubjectAddressDetails_nsprefix_) else ''
            self.SubjectAddressDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SubjectAddressDetails', pretty_print=pretty_print)
        if self.CommunicationDetails is not None:
            namespaceprefix_ = self.CommunicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CommunicationDetails_nsprefix_) else ''
            self.CommunicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommunicationDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(OrganizationType18, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SubjectAddressDetails':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SubjectAddressDetails = obj_
            obj_.original_tagname_ = 'SubjectAddressDetails'
        elif nodeName_ == 'CommunicationDetails':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommunicationDetails = obj_
            obj_.original_tagname_ = 'CommunicationDetails'
        super(OrganizationType18, self)._buildChildren(child_, node, nodeName_, True)
# end class OrganizationType18


class PeriodDetailsType(GeneratedsSuper):
    """PeriodDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    п
    р
    о
    м
    е
    ж
    у
    т
    о
    к
    в
    р
    е
    м
    е
    н
    и
    с
    у
    к
    а
    з
    а
    н
    и
    е
    м
    н
    а
    ч
    а
    л
    ь
    н
    о
    й
    и
    к
    о
    н
    е
    ч
    н
    о
    й
    д
    а
    т
    и
    в
    р
    е
    м
    е
    н
    и
    StartDateTime -- Д
    а
    т
    а
    и
    в
    р
    е
    м
    я
    н
    а
    ч
    а
    л
    а
    д
    е
    й
    с
    т
    в
    и
    я
    EndDateTime -- Д
    а
    т
    а
    и
    в
    р
    е
    м
    я
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    д
    е
    й
    с
    т
    в
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StartDateTime=None, EndDateTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        if isinstance(StartDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StartDateTime
        self.StartDateTime = initvalue_
        self.StartDateTime_nsprefix_ = "clt_ru"
        if isinstance(EndDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EndDateTime
        self.EndDateTime = initvalue_
        self.EndDateTime_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PeriodDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PeriodDetailsType.subclass:
            return PeriodDetailsType.subclass(*args_, **kwargs_)
        else:
            return PeriodDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StartDateTime(self):
        return self.StartDateTime
    def set_StartDateTime(self, StartDateTime):
        self.StartDateTime = StartDateTime
    def get_EndDateTime(self):
        return self.EndDateTime
    def set_EndDateTime(self, EndDateTime):
        self.EndDateTime = EndDateTime
    def validate_DateTimeCustType(self, value):
        result = True
        # Validate type DateTimeCustType, a restriction on CategoryCust:DateTimeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.datetime):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.datetime)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.StartDateTime is not None or
            self.EndDateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PeriodDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PeriodDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PeriodDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PeriodDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PeriodDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='PeriodDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PeriodDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.StartDateTime is not None:
            namespaceprefix_ = self.StartDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.StartDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartDateTime>%s</%sStartDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.StartDateTime, input_name='StartDateTime'), namespaceprefix_ , eol_))
        if self.EndDateTime is not None:
            namespaceprefix_ = self.EndDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDateTime>%s</%sEndDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EndDateTime, input_name='EndDateTime'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StartDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StartDateTime = dval_
            self.StartDateTime_nsprefix_ = child_.prefix
            # validate type DateTimeCustType
            self.validate_DateTimeCustType(self.StartDateTime)
        elif nodeName_ == 'EndDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EndDateTime = dval_
            self.EndDateTime_nsprefix_ = child_.prefix
            # validate type DateTimeCustType
            self.validate_DateTimeCustType(self.EndDateTime)
# end class PeriodDetailsType


class RegisterDocumentIdDetailsType(GeneratedsSuper):
    """RegisterDocumentIdDetailsType -- С
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    о
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    CountryA2Code -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    RegistrationNumberId -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    в
    р
    е
    е
    с
    т
    р
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    й
    и
    л
    и
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    л
    и
    ц
    а
    в
    и
    н
    о
    м
    р
    е
    е
    с
    т
    р
    е
    ReregistrationCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    п
    р
    и
    з
    н
    а
    к
    а
    п
    е
    р
    е
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    AEORegistryKindCode -- К
    о
    д
    т
    и
    п
    а
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    п
    е
    р
    а
    т
    о
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryA2Code=None, RegistrationNumberId=None, ReregistrationCode=None, AEORegistryKindCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.CountryA2Code = CountryA2Code
        self.validate_CountryA2CodeType(self.CountryA2Code)
        self.CountryA2Code_nsprefix_ = "clt_ru"
        self.RegistrationNumberId = RegistrationNumberId
        self.validate_Id25Type(self.RegistrationNumberId)
        self.RegistrationNumberId_nsprefix_ = "RUSclt_ru"
        self.ReregistrationCode = ReregistrationCode
        self.validate_LetterIndicatorType(self.ReregistrationCode)
        self.ReregistrationCode_nsprefix_ = "clt_ru"
        self.AEORegistryKindCode = AEORegistryKindCode
        self.validate_LetterIndicatorType(self.AEORegistryKindCode)
        self.AEORegistryKindCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegisterDocumentIdDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegisterDocumentIdDetailsType.subclass:
            return RegisterDocumentIdDetailsType.subclass(*args_, **kwargs_)
        else:
            return RegisterDocumentIdDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryA2Code(self):
        return self.CountryA2Code
    def set_CountryA2Code(self, CountryA2Code):
        self.CountryA2Code = CountryA2Code
    def get_RegistrationNumberId(self):
        return self.RegistrationNumberId
    def set_RegistrationNumberId(self, RegistrationNumberId):
        self.RegistrationNumberId = RegistrationNumberId
    def get_ReregistrationCode(self):
        return self.ReregistrationCode
    def set_ReregistrationCode(self, ReregistrationCode):
        self.ReregistrationCode = ReregistrationCode
    def get_AEORegistryKindCode(self):
        return self.AEORegistryKindCode
    def set_AEORegistryKindCode(self, AEORegistryKindCode):
        self.AEORegistryKindCode = AEORegistryKindCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Id25Type(self, value):
        result = True
        # Validate type Id25Type, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Id25Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Id25Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CountryA2Code is not None or
            self.RegistrationNumberId is not None or
            self.ReregistrationCode is not None or
            self.AEORegistryKindCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='RegisterDocumentIdDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegisterDocumentIdDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegisterDocumentIdDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegisterDocumentIdDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegisterDocumentIdDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='RegisterDocumentIdDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='RegisterDocumentIdDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryA2Code is not None:
            namespaceprefix_ = self.CountryA2Code_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryA2Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryA2Code>%s</%sCountryA2Code>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryA2Code), input_name='CountryA2Code')), namespaceprefix_ , eol_))
        if self.RegistrationNumberId is not None:
            namespaceprefix_ = self.RegistrationNumberId_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationNumberId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationNumberId>%s</%sRegistrationNumberId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumberId), input_name='RegistrationNumberId')), namespaceprefix_ , eol_))
        if self.ReregistrationCode is not None:
            namespaceprefix_ = self.ReregistrationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReregistrationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReregistrationCode>%s</%sReregistrationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReregistrationCode), input_name='ReregistrationCode')), namespaceprefix_ , eol_))
        if self.AEORegistryKindCode is not None:
            namespaceprefix_ = self.AEORegistryKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AEORegistryKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAEORegistryKindCode>%s</%sAEORegistryKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AEORegistryKindCode), input_name='AEORegistryKindCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryA2Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryA2Code')
            value_ = self.gds_validate_string(value_, node, 'CountryA2Code')
            self.CountryA2Code = value_
            self.CountryA2Code_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryA2Code)
        elif nodeName_ == 'RegistrationNumberId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegistrationNumberId')
            value_ = self.gds_validate_string(value_, node, 'RegistrationNumberId')
            self.RegistrationNumberId = value_
            self.RegistrationNumberId_nsprefix_ = child_.prefix
            # validate type Id25Type
            self.validate_Id25Type(self.RegistrationNumberId)
        elif nodeName_ == 'ReregistrationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ReregistrationCode')
            value_ = self.gds_validate_string(value_, node, 'ReregistrationCode')
            self.ReregistrationCode = value_
            self.ReregistrationCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.ReregistrationCode)
        elif nodeName_ == 'AEORegistryKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AEORegistryKindCode')
            value_ = self.gds_validate_string(value_, node, 'AEORegistryKindCode')
            self.AEORegistryKindCode = value_
            self.AEORegistryKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.AEORegistryKindCode)
# end class RegisterDocumentIdDetailsType


class RegisterOrganizationDetailsType(SubjectBaseDetailsType):
    """RegisterOrganizationDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    р
    е
    к
    в
    и
    з
    и
    т
    а
    х
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    ,
    в
    к
    л
    ю
    ч
    е
    н
    н
    о
    г
    о
    в
    р
    е
    е
    с
    т
    р
    AddressDetails -- А
    д
    р
    е
    с
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    CommunicationDetails -- К
    о
    н
    т
    а
    к
    т
    н
    ы
    й
    р
    е
    к
    в
    и
    з
    и
    т
      
    * PostalAddressDetails -- И
      н
      ф
      о
      р
      м
      а
      ц
      и
      я
      о
      п
      о
      ч
      т
      о
      в
      о
      м
      а
      д
      р
      е
      с
      е
      ю
      р
      и
      д
      и
      ч
      е
      с
      к
      о
      г
      о
      л
      и
      ц
      а
    * BranchFlagCode -- П
      р
      и
      з
      н
      а
      к
      ф
      и
      л
      и
      а
      л
      а
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      : 0 -
      г
      о
      л
      о
      в
      н
      а
      я
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      я
      (
      о
      с
      н
      о
      в
      н
      о
      е
      п
      о
      д
      р
      а
      з
      д
      е
      л
      е
      н
      и
      е
      ); 1 -
      ф
      и
      л
      и
      а
      л
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      (
      с
      т
      р
      у
      к
      т
      у
      р
      н
      о
      е
      п
      о
      д
      р
      а
      з
      д
      е
      л
      е
      н
      и
      е
      )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectBaseDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, AddressDetails=None, CommunicationDetails=None, PostalAddressDetails=None, BranchFlagCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("RegisterOrganizationDetailsType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN,  **kwargs_)
        self.AddressDetails = AddressDetails
        self.AddressDetails_nsprefix_ = "RUScat_ru"
        if CommunicationDetails is None:
            self.CommunicationDetails = []
        else:
            self.CommunicationDetails = CommunicationDetails
        self.CommunicationDetails_nsprefix_ = "cat_ru"
        self.PostalAddressDetails = PostalAddressDetails
        self.PostalAddressDetails_nsprefix_ = "RUScat_ru"
        self.BranchFlagCode = BranchFlagCode
        self.validate_LetterIndicatorType(self.BranchFlagCode)
        self.BranchFlagCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegisterOrganizationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegisterOrganizationDetailsType.subclass:
            return RegisterOrganizationDetailsType.subclass(*args_, **kwargs_)
        else:
            return RegisterOrganizationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressDetails(self):
        return self.AddressDetails
    def set_AddressDetails(self, AddressDetails):
        self.AddressDetails = AddressDetails
    def get_CommunicationDetails(self):
        return self.CommunicationDetails
    def set_CommunicationDetails(self, CommunicationDetails):
        self.CommunicationDetails = CommunicationDetails
    def add_CommunicationDetails(self, value):
        self.CommunicationDetails.append(value)
    def insert_CommunicationDetails_at(self, index, value):
        self.CommunicationDetails.insert(index, value)
    def replace_CommunicationDetails_at(self, index, value):
        self.CommunicationDetails[index] = value
    def get_PostalAddressDetails(self):
        return self.PostalAddressDetails
    def set_PostalAddressDetails(self, PostalAddressDetails):
        self.PostalAddressDetails = PostalAddressDetails
    def get_BranchFlagCode(self):
        return self.BranchFlagCode
    def set_BranchFlagCode(self, BranchFlagCode):
        self.BranchFlagCode = BranchFlagCode
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.AddressDetails is not None or
            self.CommunicationDetails or
            self.PostalAddressDetails is not None or
            self.BranchFlagCode is not None or
            super(RegisterOrganizationDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RegisterOrganizationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegisterOrganizationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegisterOrganizationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegisterOrganizationDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegisterOrganizationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='RegisterOrganizationDetailsType'):
        super(RegisterOrganizationDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegisterOrganizationDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RegisterOrganizationDetailsType', fromsubclass_=False, pretty_print=True):
        super(RegisterOrganizationDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressDetails is not None:
            namespaceprefix_ = self.AddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressDetails_nsprefix_) else ''
            self.AddressDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddressDetails', pretty_print=pretty_print)
        for CommunicationDetails_ in self.CommunicationDetails:
            namespaceprefix_ = self.CommunicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CommunicationDetails_nsprefix_) else ''
            CommunicationDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommunicationDetails', pretty_print=pretty_print)
        if self.PostalAddressDetails is not None:
            namespaceprefix_ = self.PostalAddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalAddressDetails_nsprefix_) else ''
            self.PostalAddressDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PostalAddressDetails', pretty_print=pretty_print)
        if self.BranchFlagCode is not None:
            namespaceprefix_ = self.BranchFlagCode_nsprefix_ + ':' if (UseCapturedNS_ and self.BranchFlagCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBranchFlagCode>%s</%sBranchFlagCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BranchFlagCode), input_name='BranchFlagCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(RegisterOrganizationDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressDetails':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddressDetails = obj_
            obj_.original_tagname_ = 'AddressDetails'
        elif nodeName_ == 'CommunicationDetails':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommunicationDetails.append(obj_)
            obj_.original_tagname_ = 'CommunicationDetails'
        elif nodeName_ == 'PostalAddressDetails':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PostalAddressDetails = obj_
            obj_.original_tagname_ = 'PostalAddressDetails'
        elif nodeName_ == 'BranchFlagCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BranchFlagCode')
            value_ = self.gds_validate_string(value_, node, 'BranchFlagCode')
            self.BranchFlagCode = value_
            self.BranchFlagCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.BranchFlagCode)
        super(RegisterOrganizationDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class RegisterOrganizationDetailsType


class ResourceItemStatusDetailsType(GeneratedsSuper):
    """ResourceItemStatusDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    д
    е
    т
    а
    л
    и
    з
    и
    р
    о
    в
    а
    н
    н
    у
    ю
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    ю
    о
    с
    о
    с
    т
    о
    я
    н
    и
    и
    з
    а
    п
    и
    с
    и
    о
    б
    щ
    е
    г
    о
    р
    е
    с
    у
    р
    с
    а
    ValidityPeriodDetails -- П
    е
    р
    и
    о
    д
    д
    е
    й
    с
    т
    в
    и
    я
    з
    а
    п
    и
    с
    и
    о
    б
    щ
    е
    г
    о
    р
    е
    с
    у
    р
    с
    а
    (
    р
    е
    е
    с
    т
    р
    а
    ,
    п
    е
    р
    е
    ч
    н
    я
    ,
    б
    а
    з
    ы
    д
    а
    н
    н
    ы
    х
    )
    UpdateDateTime -- Д
    а
    т
    а
    и
    в
    р
    е
    м
    я
    о
    б
    н
    о
    в
    л
    е
    н
    и
    я
    з
    а
    п
    и
    с
    и
    о
    б
    щ
    е
    г
    о
    р
    е
    с
    у
    р
    с
    а
    (
    р
    е
    е
    с
    т
    р
    а
    ,
    п
    е
    р
    е
    ч
    н
    я
    ,
    б
    а
    з
    ы
    д
    а
    н
    н
    ы
    х
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ValidityPeriodDetails=None, UpdateDateTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.ValidityPeriodDetails = ValidityPeriodDetails
        self.ValidityPeriodDetails_nsprefix_ = "RUScat_ru"
        if isinstance(UpdateDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(UpdateDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = UpdateDateTime
        self.UpdateDateTime = initvalue_
        self.UpdateDateTime_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ResourceItemStatusDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ResourceItemStatusDetailsType.subclass:
            return ResourceItemStatusDetailsType.subclass(*args_, **kwargs_)
        else:
            return ResourceItemStatusDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ValidityPeriodDetails(self):
        return self.ValidityPeriodDetails
    def set_ValidityPeriodDetails(self, ValidityPeriodDetails):
        self.ValidityPeriodDetails = ValidityPeriodDetails
    def get_UpdateDateTime(self):
        return self.UpdateDateTime
    def set_UpdateDateTime(self, UpdateDateTime):
        self.UpdateDateTime = UpdateDateTime
    def validate_DateTimeCustType(self, value):
        result = True
        # Validate type DateTimeCustType, a restriction on CategoryCust:DateTimeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.datetime):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.datetime)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.ValidityPeriodDetails is not None or
            self.UpdateDateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ResourceItemStatusDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ResourceItemStatusDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ResourceItemStatusDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ResourceItemStatusDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ResourceItemStatusDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='ResourceItemStatusDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ResourceItemStatusDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ValidityPeriodDetails is not None:
            namespaceprefix_ = self.ValidityPeriodDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ValidityPeriodDetails_nsprefix_) else ''
            self.ValidityPeriodDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ValidityPeriodDetails', pretty_print=pretty_print)
        if self.UpdateDateTime is not None:
            namespaceprefix_ = self.UpdateDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.UpdateDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUpdateDateTime>%s</%sUpdateDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.UpdateDateTime, input_name='UpdateDateTime'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ValidityPeriodDetails':
            obj_ = PeriodDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ValidityPeriodDetails = obj_
            obj_.original_tagname_ = 'ValidityPeriodDetails'
        elif nodeName_ == 'UpdateDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.UpdateDateTime = dval_
            self.UpdateDateTime_nsprefix_ = child_.prefix
            # validate type DateTimeCustType
            self.validate_DateTimeCustType(self.UpdateDateTime)
# end class ResourceItemStatusDetailsType


class RUAddressType(GeneratedsSuper):
    """RUAddressType -- А
    д
    р
    е
    с
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    /
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    AddressKindCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    а
    д
    р
    е
    с
    а
    : "1" -
    а
    д
    р
    е
    с
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    ; "2" -
    ф
    а
    к
    т
    и
    ч
    е
    с
    к
    и
    й
    а
    д
    р
    е
    с
    ; "3" -
    п
    о
    ч
    т
    о
    в
    ы
    й
    а
    д
    р
    е
    с
    PostalCode -- П
    о
    ч
    т
    о
    в
    ы
    й
    и
    н
    д
    е
    к
    с
    CountryCode -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    CounryName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    з
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    Region -- Р
    е
    г
    и
    о
    н
    (
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    п
    е
    р
    в
    о
    г
    о
    у
    р
    о
    в
    н
    я
    )
    District -- Р
    а
    й
    о
    н
    (
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    в
    т
    о
    р
    о
    г
    о
    у
    р
    о
    в
    н
    я
    )
    Town -- Г
    о
    р
    о
    д
    City -- Н
    а
    с
    е
    л
    е
    н
    н
    ы
    й
    п
    у
    н
    к
    т
    StreetHouse -- У
    л
    и
    ц
    а
    (
    Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    э
    л
    е
    м
    е
    н
    т
    а
    у
    л
    и
    ч
    н
    о
    -
    д
    о
    р
    о
    ж
    н
    о
    й
    с
    е
    т
    и
    г
    о
    р
    о
    д
    с
    к
    о
    й
    и
    н
    ф
    р
    а
    с
    т
    р
    у
    к
    т
    у
    р
    ы
    )
    House -- О
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    д
    о
    м
    а
    ,
    к
    о
    р
    п
    у
    с
    а
    ,
    с
    т
    р
    о
    е
    н
    и
    я
    Room -- О
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    о
    ф
    и
    с
    а
    и
    л
    и
    к
    в
    а
    р
    т
    и
    р
    ы
    AddressText -- Н
    а
    б
    о
    р
    э
    л
    е
    м
    е
    н
    т
    о
    в
    а
    д
    р
    е
    с
    а
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    х
    в
    с
    в
    о
    б
    о
    д
    н
    о
    й
    ф
    о
    р
    м
    е
    в
    в
    и
    д
    е
    т
    е
    к
    с
    т
    а
    .
    OKTMO -- К
    о
    д
    О
    К
    Т
    М
    О
    (
    О
    б
    щ
    е
    р
    о
    с
    с
    и
    й
    с
    к
    и
    й
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    т
    е
    р
    р
    и
    т
    о
    р
    и
    й
    м
    у
    н
    и
    ц
    и
    п
    а
    л
    ь
    н
    ы
    х
    о
    б
    р
    а
    з
    о
    в
    а
    н
    и
    й
    )
    OKATO -- К
    о
    д
    О
    К
    А
    Т
    О
    (
    О
    б
    щ
    е
    р
    о
    с
    с
    и
    й
    с
    к
    и
    й
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    б
    ъ
    е
    к
    т
    о
    в
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    )
    KLADR -- К
    о
    д
    К
    Л
    А
    Д
    Р
    AOGUID -- Г
    л
    о
    б
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    д
    р
    е
    с
    н
    о
    г
    о
    о
    б
    ъ
    е
    к
    т
    а
    п
    о
    Ф
    И
    А
    С
    AOID -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    д
    р
    е
    с
    н
    о
    г
    о
    о
    б
    ъ
    е
    к
    т
    а
    п
    о
    Ф
    И
    А
    С
    TerritoryCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    PostOfficeBoxId -- Н
    о
    м
    е
    р
    а
    б
    о
    н
    е
    н
    т
    с
    к
    о
    г
    о
    я
    щ
    и
    к
    а
    н
    а
    п
    р
    е
    д
    п
    р
    и
    я
    т
    и
    и
    п
    о
    ч
    т
    о
    в
    о
    й
    с
    в
    я
    з
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressKindCode=None, PostalCode=None, CountryCode=None, CounryName=None, Region=None, District=None, Town=None, City=None, StreetHouse=None, House=None, Room=None, AddressText=None, OKTMO=None, OKATO=None, KLADR=None, AOGUID=None, AOID=None, TerritoryCode=None, PostOfficeBoxId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.AddressKindCode = AddressKindCode
        self.validate_CodeVariable20Type(self.AddressKindCode)
        self.AddressKindCode_nsprefix_ = "clt_ru"
        self.PostalCode = PostalCode
        self.validate_PostalCodeType(self.PostalCode)
        self.PostalCode_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.CounryName = CounryName
        self.validate_Name120Type(self.CounryName)
        self.CounryName_nsprefix_ = "RUSclt_ru"
        self.Region = Region
        self.validate_RegionType(self.Region)
        self.Region_nsprefix_ = "RUSclt_ru"
        self.District = District
        self.validate_DistrictType(self.District)
        self.District_nsprefix_ = "RUSclt_ru"
        self.Town = Town
        self.validate_TownNameType(self.Town)
        self.Town_nsprefix_ = "RUSclt_ru"
        self.City = City
        self.validate_CityNameType(self.City)
        self.City_nsprefix_ = "RUSclt_ru"
        self.StreetHouse = StreetHouse
        self.validate_StreetHouseType(self.StreetHouse)
        self.StreetHouse_nsprefix_ = "RUSclt_ru"
        self.House = House
        self.validate_HouseType(self.House)
        self.House_nsprefix_ = "RUSclt_ru"
        self.Room = Room
        self.validate_RoomType(self.Room)
        self.Room_nsprefix_ = "RUSclt_ru"
        self.AddressText = AddressText
        self.validate_AddressTextType(self.AddressText)
        self.AddressText_nsprefix_ = "RUSclt_ru"
        self.OKTMO = OKTMO
        self.validate_CodeVariable11Type(self.OKTMO)
        self.OKTMO_nsprefix_ = "clt_ru"
        self.OKATO = OKATO
        self.validate_OKATOCodeType(self.OKATO)
        self.OKATO_nsprefix_ = "clt_ru"
        self.KLADR = KLADR
        self.validate_CodeVariable20Type(self.KLADR)
        self.KLADR_nsprefix_ = "clt_ru"
        self.AOGUID = AOGUID
        self.validate_DocumentIDType(self.AOGUID)
        self.AOGUID_nsprefix_ = "clt_ru"
        self.AOID = AOID
        self.validate_DocumentIDType(self.AOID)
        self.AOID_nsprefix_ = "clt_ru"
        self.TerritoryCode = TerritoryCode
        self.validate_TerritoryCodeType(self.TerritoryCode)
        self.TerritoryCode_nsprefix_ = "RUSclt_ru"
        self.PostOfficeBoxId = PostOfficeBoxId
        self.validate_CodeVariable20Type(self.PostOfficeBoxId)
        self.PostOfficeBoxId_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RUAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RUAddressType.subclass:
            return RUAddressType.subclass(*args_, **kwargs_)
        else:
            return RUAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressKindCode(self):
        return self.AddressKindCode
    def set_AddressKindCode(self, AddressKindCode):
        self.AddressKindCode = AddressKindCode
    def get_PostalCode(self):
        return self.PostalCode
    def set_PostalCode(self, PostalCode):
        self.PostalCode = PostalCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_CounryName(self):
        return self.CounryName
    def set_CounryName(self, CounryName):
        self.CounryName = CounryName
    def get_Region(self):
        return self.Region
    def set_Region(self, Region):
        self.Region = Region
    def get_District(self):
        return self.District
    def set_District(self, District):
        self.District = District
    def get_Town(self):
        return self.Town
    def set_Town(self, Town):
        self.Town = Town
    def get_City(self):
        return self.City
    def set_City(self, City):
        self.City = City
    def get_StreetHouse(self):
        return self.StreetHouse
    def set_StreetHouse(self, StreetHouse):
        self.StreetHouse = StreetHouse
    def get_House(self):
        return self.House
    def set_House(self, House):
        self.House = House
    def get_Room(self):
        return self.Room
    def set_Room(self, Room):
        self.Room = Room
    def get_AddressText(self):
        return self.AddressText
    def set_AddressText(self, AddressText):
        self.AddressText = AddressText
    def get_OKTMO(self):
        return self.OKTMO
    def set_OKTMO(self, OKTMO):
        self.OKTMO = OKTMO
    def get_OKATO(self):
        return self.OKATO
    def set_OKATO(self, OKATO):
        self.OKATO = OKATO
    def get_KLADR(self):
        return self.KLADR
    def set_KLADR(self, KLADR):
        self.KLADR = KLADR
    def get_AOGUID(self):
        return self.AOGUID
    def set_AOGUID(self, AOGUID):
        self.AOGUID = AOGUID
    def get_AOID(self):
        return self.AOID
    def set_AOID(self, AOID):
        self.AOID = AOID
    def get_TerritoryCode(self):
        return self.TerritoryCode
    def set_TerritoryCode(self, TerritoryCode):
        self.TerritoryCode = TerritoryCode
    def get_PostOfficeBoxId(self):
        return self.PostOfficeBoxId
    def set_PostOfficeBoxId(self, PostOfficeBoxId):
        self.PostOfficeBoxId = PostOfficeBoxId
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_PostalCodeType(self, value):
        result = True
        # Validate type PostalCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PostalCodeType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PostalCodeType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Name120Type(self, value):
        result = True
        # Validate type Name120Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Name120Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Name120Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_RegionType(self, value):
        result = True
        # Validate type RegionType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on RegionType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on RegionType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DistrictType(self, value):
        result = True
        # Validate type DistrictType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DistrictType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DistrictType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_TownNameType(self, value):
        result = True
        # Validate type TownNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TownNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TownNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CityNameType(self, value):
        result = True
        # Validate type CityNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CityNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CityNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_StreetHouseType(self, value):
        result = True
        # Validate type StreetHouseType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on StreetHouseType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on StreetHouseType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_HouseType(self, value):
        result = True
        # Validate type HouseType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on HouseType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on HouseType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_RoomType(self, value):
        result = True
        # Validate type RoomType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on RoomType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on RoomType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_AddressTextType(self, value):
        result = True
        # Validate type AddressTextType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 1000:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on AddressTextType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on AddressTextType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable11Type(self, value):
        result = True
        # Validate type CodeVariable11Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable11Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable11Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_OKATOCodeType(self, value):
        result = True
        # Validate type OKATOCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_OKATOCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_OKATOCodeType_patterns_, ))
                result = False
        return result
    validate_OKATOCodeType_patterns_ = [['^(\\d{5,11})$']]
    def validate_DocumentIDType(self, value):
        result = True
        # Validate type DocumentIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 36:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_TerritoryCodeType(self, value):
        result = True
        # Validate type TerritoryCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TerritoryCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TerritoryCodeType_patterns_, ))
                result = False
        return result
    validate_TerritoryCodeType_patterns_ = [['^(\\d{8,17})$']]
    def has__content(self):
        if (
            self.AddressKindCode is not None or
            self.PostalCode is not None or
            self.CountryCode is not None or
            self.CounryName is not None or
            self.Region is not None or
            self.District is not None or
            self.Town is not None or
            self.City is not None or
            self.StreetHouse is not None or
            self.House is not None or
            self.Room is not None or
            self.AddressText is not None or
            self.OKTMO is not None or
            self.OKATO is not None or
            self.KLADR is not None or
            self.AOGUID is not None or
            self.AOID is not None or
            self.TerritoryCode is not None or
            self.PostOfficeBoxId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='RUAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RUAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RUAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RUAddressType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RUAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='RUAddressType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='RUAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressKindCode is not None:
            namespaceprefix_ = self.AddressKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressKindCode>%s</%sAddressKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressKindCode), input_name='AddressKindCode')), namespaceprefix_ , eol_))
        if self.PostalCode is not None:
            namespaceprefix_ = self.PostalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PostalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostalCode), input_name='PostalCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.CounryName is not None:
            namespaceprefix_ = self.CounryName_nsprefix_ + ':' if (UseCapturedNS_ and self.CounryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCounryName>%s</%sCounryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CounryName), input_name='CounryName')), namespaceprefix_ , eol_))
        if self.Region is not None:
            namespaceprefix_ = self.Region_nsprefix_ + ':' if (UseCapturedNS_ and self.Region_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegion>%s</%sRegion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Region), input_name='Region')), namespaceprefix_ , eol_))
        if self.District is not None:
            namespaceprefix_ = self.District_nsprefix_ + ':' if (UseCapturedNS_ and self.District_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDistrict>%s</%sDistrict>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.District), input_name='District')), namespaceprefix_ , eol_))
        if self.Town is not None:
            namespaceprefix_ = self.Town_nsprefix_ + ':' if (UseCapturedNS_ and self.Town_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTown>%s</%sTown>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Town), input_name='Town')), namespaceprefix_ , eol_))
        if self.City is not None:
            namespaceprefix_ = self.City_nsprefix_ + ':' if (UseCapturedNS_ and self.City_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.City), input_name='City')), namespaceprefix_ , eol_))
        if self.StreetHouse is not None:
            namespaceprefix_ = self.StreetHouse_nsprefix_ + ':' if (UseCapturedNS_ and self.StreetHouse_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStreetHouse>%s</%sStreetHouse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StreetHouse), input_name='StreetHouse')), namespaceprefix_ , eol_))
        if self.House is not None:
            namespaceprefix_ = self.House_nsprefix_ + ':' if (UseCapturedNS_ and self.House_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHouse>%s</%sHouse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.House), input_name='House')), namespaceprefix_ , eol_))
        if self.Room is not None:
            namespaceprefix_ = self.Room_nsprefix_ + ':' if (UseCapturedNS_ and self.Room_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRoom>%s</%sRoom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Room), input_name='Room')), namespaceprefix_ , eol_))
        if self.AddressText is not None:
            namespaceprefix_ = self.AddressText_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddressText>%s</%sAddressText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AddressText), input_name='AddressText')), namespaceprefix_ , eol_))
        if self.OKTMO is not None:
            namespaceprefix_ = self.OKTMO_nsprefix_ + ':' if (UseCapturedNS_ and self.OKTMO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOKTMO>%s</%sOKTMO>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OKTMO), input_name='OKTMO')), namespaceprefix_ , eol_))
        if self.OKATO is not None:
            namespaceprefix_ = self.OKATO_nsprefix_ + ':' if (UseCapturedNS_ and self.OKATO_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOKATO>%s</%sOKATO>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OKATO), input_name='OKATO')), namespaceprefix_ , eol_))
        if self.KLADR is not None:
            namespaceprefix_ = self.KLADR_nsprefix_ + ':' if (UseCapturedNS_ and self.KLADR_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKLADR>%s</%sKLADR>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KLADR), input_name='KLADR')), namespaceprefix_ , eol_))
        if self.AOGUID is not None:
            namespaceprefix_ = self.AOGUID_nsprefix_ + ':' if (UseCapturedNS_ and self.AOGUID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAOGUID>%s</%sAOGUID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AOGUID), input_name='AOGUID')), namespaceprefix_ , eol_))
        if self.AOID is not None:
            namespaceprefix_ = self.AOID_nsprefix_ + ':' if (UseCapturedNS_ and self.AOID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAOID>%s</%sAOID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AOID), input_name='AOID')), namespaceprefix_ , eol_))
        if self.TerritoryCode is not None:
            namespaceprefix_ = self.TerritoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TerritoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTerritoryCode>%s</%sTerritoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TerritoryCode), input_name='TerritoryCode')), namespaceprefix_ , eol_))
        if self.PostOfficeBoxId is not None:
            namespaceprefix_ = self.PostOfficeBoxId_nsprefix_ + ':' if (UseCapturedNS_ and self.PostOfficeBoxId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostOfficeBoxId>%s</%sPostOfficeBoxId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PostOfficeBoxId), input_name='PostOfficeBoxId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AddressKindCode')
            value_ = self.gds_validate_string(value_, node, 'AddressKindCode')
            self.AddressKindCode = value_
            self.AddressKindCode_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.AddressKindCode)
        elif nodeName_ == 'PostalCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PostalCode')
            value_ = self.gds_validate_string(value_, node, 'PostalCode')
            self.PostalCode = value_
            self.PostalCode_nsprefix_ = child_.prefix
            # validate type PostalCodeType
            self.validate_PostalCodeType(self.PostalCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'CounryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CounryName')
            value_ = self.gds_validate_string(value_, node, 'CounryName')
            self.CounryName = value_
            self.CounryName_nsprefix_ = child_.prefix
            # validate type Name120Type
            self.validate_Name120Type(self.CounryName)
        elif nodeName_ == 'Region':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Region')
            value_ = self.gds_validate_string(value_, node, 'Region')
            self.Region = value_
            self.Region_nsprefix_ = child_.prefix
            # validate type RegionType
            self.validate_RegionType(self.Region)
        elif nodeName_ == 'District':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'District')
            value_ = self.gds_validate_string(value_, node, 'District')
            self.District = value_
            self.District_nsprefix_ = child_.prefix
            # validate type DistrictType
            self.validate_DistrictType(self.District)
        elif nodeName_ == 'Town':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Town')
            value_ = self.gds_validate_string(value_, node, 'Town')
            self.Town = value_
            self.Town_nsprefix_ = child_.prefix
            # validate type TownNameType
            self.validate_TownNameType(self.Town)
        elif nodeName_ == 'City':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'City')
            value_ = self.gds_validate_string(value_, node, 'City')
            self.City = value_
            self.City_nsprefix_ = child_.prefix
            # validate type CityNameType
            self.validate_CityNameType(self.City)
        elif nodeName_ == 'StreetHouse':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StreetHouse')
            value_ = self.gds_validate_string(value_, node, 'StreetHouse')
            self.StreetHouse = value_
            self.StreetHouse_nsprefix_ = child_.prefix
            # validate type StreetHouseType
            self.validate_StreetHouseType(self.StreetHouse)
        elif nodeName_ == 'House':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'House')
            value_ = self.gds_validate_string(value_, node, 'House')
            self.House = value_
            self.House_nsprefix_ = child_.prefix
            # validate type HouseType
            self.validate_HouseType(self.House)
        elif nodeName_ == 'Room':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Room')
            value_ = self.gds_validate_string(value_, node, 'Room')
            self.Room = value_
            self.Room_nsprefix_ = child_.prefix
            # validate type RoomType
            self.validate_RoomType(self.Room)
        elif nodeName_ == 'AddressText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AddressText')
            value_ = self.gds_validate_string(value_, node, 'AddressText')
            self.AddressText = value_
            self.AddressText_nsprefix_ = child_.prefix
            # validate type AddressTextType
            self.validate_AddressTextType(self.AddressText)
        elif nodeName_ == 'OKTMO':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OKTMO')
            value_ = self.gds_validate_string(value_, node, 'OKTMO')
            self.OKTMO = value_
            self.OKTMO_nsprefix_ = child_.prefix
            # validate type CodeVariable11Type
            self.validate_CodeVariable11Type(self.OKTMO)
        elif nodeName_ == 'OKATO':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OKATO')
            value_ = self.gds_validate_string(value_, node, 'OKATO')
            self.OKATO = value_
            self.OKATO_nsprefix_ = child_.prefix
            # validate type OKATOCodeType
            self.validate_OKATOCodeType(self.OKATO)
        elif nodeName_ == 'KLADR':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'KLADR')
            value_ = self.gds_validate_string(value_, node, 'KLADR')
            self.KLADR = value_
            self.KLADR_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.KLADR)
        elif nodeName_ == 'AOGUID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AOGUID')
            value_ = self.gds_validate_string(value_, node, 'AOGUID')
            self.AOGUID = value_
            self.AOGUID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.AOGUID)
        elif nodeName_ == 'AOID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AOID')
            value_ = self.gds_validate_string(value_, node, 'AOID')
            self.AOID = value_
            self.AOID_nsprefix_ = child_.prefix
            # validate type DocumentIDType
            self.validate_DocumentIDType(self.AOID)
        elif nodeName_ == 'TerritoryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TerritoryCode')
            value_ = self.gds_validate_string(value_, node, 'TerritoryCode')
            self.TerritoryCode = value_
            self.TerritoryCode_nsprefix_ = child_.prefix
            # validate type TerritoryCodeType
            self.validate_TerritoryCodeType(self.TerritoryCode)
        elif nodeName_ == 'PostOfficeBoxId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PostOfficeBoxId')
            value_ = self.gds_validate_string(value_, node, 'PostOfficeBoxId')
            self.PostOfficeBoxId = value_
            self.PostOfficeBoxId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.PostOfficeBoxId)
# end class RUAddressType


class RUIdentityCardType(GeneratedsSuper):
    """RUIdentityCardType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    м
    л
    и
    ч
    н
    о
    с
    т
    ь
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    IdentityCardCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    ,
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    х
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    FullIdentityCardName -- П
    о
    л
    н
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardSeries -- С
    е
    р
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardNumber -- Н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    IdentityCardDate -- Д
    а
    т
    а
    в
    ы
    д
    а
    ч
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    л
    и
    ч
    н
    о
    с
    т
    ь
    DocValidityDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    OrganizationName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ,
    в
    ы
    д
    а
    в
    ш
    е
    й
    д
    о
    к
    у
    м
    е
    н
    т
    IssuerCode -- К
    о
    д
    п
    о
    д
    р
    а
    з
    д
    е
    л
    е
    н
    и
    я
    о
    р
    г
    а
    н
    а
    ,
    в
    ы
    д
    а
    в
    ш
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    AuthorityId -- С
    т
    р
    о
    к
    а
    ,
    и
    д
    е
    н
    т
    и
    ф
    и
    ц
    и
    р
    у
    ю
    щ
    а
    я
    о
    р
    г
    а
    н
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    й
    в
    л
    а
    с
    т
    и
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    -
    ч
    л
    е
    н
    а
    л
    и
    б
    о
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    у
    ю
    и
    м
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    ю
    ,
    в
    ы
    д
    а
    в
    ш
    у
    ю
    д
    о
    к
    у
    м
    е
    н
    т
    CountryCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IdentityCardCode=None, IdentityCardName=None, FullIdentityCardName=None, IdentityCardSeries=None, IdentityCardNumber=None, IdentityCardDate=None, DocValidityDate=None, OrganizationName=None, IssuerCode=None, AuthorityId=None, CountryCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.IdentityCardCode = IdentityCardCode
        self.validate_RUIdentityCardCodeType(self.IdentityCardCode)
        self.IdentityCardCode_nsprefix_ = "RUSclt_ru"
        self.IdentityCardName = IdentityCardName
        self.validate_Text40Type(self.IdentityCardName)
        self.IdentityCardName_nsprefix_ = "clt_ru"
        self.FullIdentityCardName = FullIdentityCardName
        self.validate_FreeText250Type(self.FullIdentityCardName)
        self.FullIdentityCardName_nsprefix_ = "clt_ru"
        self.IdentityCardSeries = IdentityCardSeries
        self.validate_IdentityCardSeriesType(self.IdentityCardSeries)
        self.IdentityCardSeries_nsprefix_ = "clt_ru"
        self.IdentityCardNumber = IdentityCardNumber
        self.validate_IdentityCardNumberType(self.IdentityCardNumber)
        self.IdentityCardNumber_nsprefix_ = "clt_ru"
        if isinstance(IdentityCardDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(IdentityCardDate, '%Y-%m-%d').date()
        else:
            initvalue_ = IdentityCardDate
        self.IdentityCardDate = initvalue_
        self.IdentityCardDate_nsprefix_ = "clt_ru"
        if isinstance(DocValidityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocValidityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocValidityDate
        self.DocValidityDate = initvalue_
        self.DocValidityDate_nsprefix_ = "clt_ru"
        self.OrganizationName = OrganizationName
        self.validate_NameType(self.OrganizationName)
        self.OrganizationName_nsprefix_ = "clt_ru"
        self.IssuerCode = IssuerCode
        self.validate_CodeVariable7Type(self.IssuerCode)
        self.IssuerCode_nsprefix_ = "clt_ru"
        self.AuthorityId = AuthorityId
        self.validate_CodeVariable20Type(self.AuthorityId)
        self.AuthorityId_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RUIdentityCardType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RUIdentityCardType.subclass:
            return RUIdentityCardType.subclass(*args_, **kwargs_)
        else:
            return RUIdentityCardType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IdentityCardCode(self):
        return self.IdentityCardCode
    def set_IdentityCardCode(self, IdentityCardCode):
        self.IdentityCardCode = IdentityCardCode
    def get_IdentityCardName(self):
        return self.IdentityCardName
    def set_IdentityCardName(self, IdentityCardName):
        self.IdentityCardName = IdentityCardName
    def get_FullIdentityCardName(self):
        return self.FullIdentityCardName
    def set_FullIdentityCardName(self, FullIdentityCardName):
        self.FullIdentityCardName = FullIdentityCardName
    def get_IdentityCardSeries(self):
        return self.IdentityCardSeries
    def set_IdentityCardSeries(self, IdentityCardSeries):
        self.IdentityCardSeries = IdentityCardSeries
    def get_IdentityCardNumber(self):
        return self.IdentityCardNumber
    def set_IdentityCardNumber(self, IdentityCardNumber):
        self.IdentityCardNumber = IdentityCardNumber
    def get_IdentityCardDate(self):
        return self.IdentityCardDate
    def set_IdentityCardDate(self, IdentityCardDate):
        self.IdentityCardDate = IdentityCardDate
    def get_DocValidityDate(self):
        return self.DocValidityDate
    def set_DocValidityDate(self, DocValidityDate):
        self.DocValidityDate = DocValidityDate
    def get_OrganizationName(self):
        return self.OrganizationName
    def set_OrganizationName(self, OrganizationName):
        self.OrganizationName = OrganizationName
    def get_IssuerCode(self):
        return self.IssuerCode
    def set_IssuerCode(self, IssuerCode):
        self.IssuerCode = IssuerCode
    def get_AuthorityId(self):
        return self.AuthorityId
    def set_AuthorityId(self, AuthorityId):
        self.AuthorityId = AuthorityId
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_RUIdentityCardCodeType(self, value):
        result = True
        # Validate type RUIdentityCardCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RUIdentityCardCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RUIdentityCardCodeType_patterns_, ))
                result = False
        return result
    validate_RUIdentityCardCodeType_patterns_ = [['^((\\d{2})|([A-Z]{2}\\d{5}))$']]
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IdentityCardSeriesType(self, value):
        result = True
        # Validate type IdentityCardSeriesType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 11:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on IdentityCardSeriesType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on IdentityCardSeriesType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_IdentityCardNumberType(self, value):
        result = True
        # Validate type IdentityCardNumberType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on IdentityCardNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on IdentityCardNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable7Type(self, value):
        result = True
        # Validate type CodeVariable7Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable7Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable7Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.IdentityCardCode is not None or
            self.IdentityCardName is not None or
            self.FullIdentityCardName is not None or
            self.IdentityCardSeries is not None or
            self.IdentityCardNumber is not None or
            self.IdentityCardDate is not None or
            self.DocValidityDate is not None or
            self.OrganizationName is not None or
            self.IssuerCode is not None or
            self.AuthorityId is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RUIdentityCardType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RUIdentityCardType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RUIdentityCardType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RUIdentityCardType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RUIdentityCardType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='RUIdentityCardType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RUIdentityCardType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentityCardCode is not None:
            namespaceprefix_ = self.IdentityCardCode_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardCode>%s</%sIdentityCardCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardCode), input_name='IdentityCardCode')), namespaceprefix_ , eol_))
        if self.IdentityCardName is not None:
            namespaceprefix_ = self.IdentityCardName_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardName>%s</%sIdentityCardName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardName), input_name='IdentityCardName')), namespaceprefix_ , eol_))
        if self.FullIdentityCardName is not None:
            namespaceprefix_ = self.FullIdentityCardName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullIdentityCardName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullIdentityCardName>%s</%sFullIdentityCardName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullIdentityCardName), input_name='FullIdentityCardName')), namespaceprefix_ , eol_))
        if self.IdentityCardSeries is not None:
            namespaceprefix_ = self.IdentityCardSeries_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardSeries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardSeries>%s</%sIdentityCardSeries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardSeries), input_name='IdentityCardSeries')), namespaceprefix_ , eol_))
        if self.IdentityCardNumber is not None:
            namespaceprefix_ = self.IdentityCardNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardNumber>%s</%sIdentityCardNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityCardNumber), input_name='IdentityCardNumber')), namespaceprefix_ , eol_))
        if self.IdentityCardDate is not None:
            namespaceprefix_ = self.IdentityCardDate_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCardDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityCardDate>%s</%sIdentityCardDate>%s' % (namespaceprefix_ , self.gds_format_date(self.IdentityCardDate, input_name='IdentityCardDate'), namespaceprefix_ , eol_))
        if self.DocValidityDate is not None:
            namespaceprefix_ = self.DocValidityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocValidityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocValidityDate>%s</%sDocValidityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocValidityDate, input_name='DocValidityDate'), namespaceprefix_ , eol_))
        if self.OrganizationName is not None:
            namespaceprefix_ = self.OrganizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationName>%s</%sOrganizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationName), input_name='OrganizationName')), namespaceprefix_ , eol_))
        if self.IssuerCode is not None:
            namespaceprefix_ = self.IssuerCode_nsprefix_ + ':' if (UseCapturedNS_ and self.IssuerCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIssuerCode>%s</%sIssuerCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IssuerCode), input_name='IssuerCode')), namespaceprefix_ , eol_))
        if self.AuthorityId is not None:
            namespaceprefix_ = self.AuthorityId_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorityId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorityId>%s</%sAuthorityId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorityId), input_name='AuthorityId')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IdentityCardCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardCode')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardCode')
            self.IdentityCardCode = value_
            self.IdentityCardCode_nsprefix_ = child_.prefix
            # validate type RUIdentityCardCodeType
            self.validate_RUIdentityCardCodeType(self.IdentityCardCode)
        elif nodeName_ == 'IdentityCardName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IdentityCardName')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardName')
            self.IdentityCardName = value_
            self.IdentityCardName_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.IdentityCardName)
        elif nodeName_ == 'FullIdentityCardName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullIdentityCardName')
            value_ = self.gds_validate_string(value_, node, 'FullIdentityCardName')
            self.FullIdentityCardName = value_
            self.FullIdentityCardName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.FullIdentityCardName)
        elif nodeName_ == 'IdentityCardSeries':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardSeries')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardSeries')
            self.IdentityCardSeries = value_
            self.IdentityCardSeries_nsprefix_ = child_.prefix
            # validate type IdentityCardSeriesType
            self.validate_IdentityCardSeriesType(self.IdentityCardSeries)
        elif nodeName_ == 'IdentityCardNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IdentityCardNumber')
            value_ = self.gds_validate_string(value_, node, 'IdentityCardNumber')
            self.IdentityCardNumber = value_
            self.IdentityCardNumber_nsprefix_ = child_.prefix
            # validate type IdentityCardNumberType
            self.validate_IdentityCardNumberType(self.IdentityCardNumber)
        elif nodeName_ == 'IdentityCardDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.IdentityCardDate = dval_
            self.IdentityCardDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.IdentityCardDate)
        elif nodeName_ == 'DocValidityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocValidityDate = dval_
            self.DocValidityDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocValidityDate)
        elif nodeName_ == 'OrganizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationName')
            value_ = self.gds_validate_string(value_, node, 'OrganizationName')
            self.OrganizationName = value_
            self.OrganizationName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.OrganizationName)
        elif nodeName_ == 'IssuerCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IssuerCode')
            value_ = self.gds_validate_string(value_, node, 'IssuerCode')
            self.IssuerCode = value_
            self.IssuerCode_nsprefix_ = child_.prefix
            # validate type CodeVariable7Type
            self.validate_CodeVariable7Type(self.IssuerCode)
        elif nodeName_ == 'AuthorityId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AuthorityId')
            value_ = self.gds_validate_string(value_, node, 'AuthorityId')
            self.AuthorityId = value_
            self.AuthorityId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.AuthorityId)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
# end class RUIdentityCardType


class RUOrganizationBaseType(GeneratedsSuper):
    """RUOrganizationBaseType -- Р
    е
    к
    в
    и
    з
    и
    т
    ы
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    Б
    а
    з
    о
    в
    ы
    й
    к
    л
    а
    с
    с
    OrganizationName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    /
    Ф
    И
    О
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    ShortName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    OrganizationLanguage -- К
    о
    д
    я
    з
    ы
    к
    а
    д
    л
    я
    з
    а
    п
    о
    л
    н
    е
    н
    и
    я
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    я
      
    * RFOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      Р
      о
      с
      с
      и
      й
      с
      к
      о
      й
      Ф
      е
      д
      е
      р
      а
      ц
      и
      и
    * RKOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      Р
      е
      с
      п
      у
      б
      л
      и
      к
      и
      К
      а
      з
      а
      х
      с
      т
      а
      н
    * RBOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      Р
      е
      с
      п
      у
      б
      л
      и
      к
      и
      Б
      е
      л
      а
      р
      у
      с
      ь
    * RAOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      Р
      е
      с
      п
      у
      б
      л
      и
      к
      и
      А
      р
      м
      е
      н
      и
      я
    * KGOrganizationFeatures -- С
      в
      е
      д
      е
      н
      и
      я
      о
      б
      о
      р
      г
      а
      н
      и
      з
      а
      ц
      и
      и
      .
      О
      с
      о
      б
      е
      н
      н
      о
      с
      т
      и
      К
      ы
      р
      г
      ы
      з
      с
      к
      о
      й
      Р
      е
      с
      п
      у
      б
      л
      и
      к
      и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        if OrganizationName is None:
            self.OrganizationName = []
        else:
            self.OrganizationName = OrganizationName
        self.OrganizationName_nsprefix_ = "clt_ru"
        self.ShortName = ShortName
        self.validate_ShortNameType(self.ShortName)
        self.ShortName_nsprefix_ = "clt_ru"
        self.OrganizationLanguage = OrganizationLanguage
        self.validate_LanguageCodeType(self.OrganizationLanguage)
        self.OrganizationLanguage_nsprefix_ = "clt_ru"
        self.RFOrganizationFeatures = RFOrganizationFeatures
        self.RFOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RKOrganizationFeatures = RKOrganizationFeatures
        self.RKOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RBOrganizationFeatures = RBOrganizationFeatures
        self.RBOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RAOrganizationFeatures = RAOrganizationFeatures
        self.RAOrganizationFeatures_nsprefix_ = "cat_ru"
        self.KGOrganizationFeatures = KGOrganizationFeatures
        self.KGOrganizationFeatures_nsprefix_ = "cat_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RUOrganizationBaseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RUOrganizationBaseType.subclass:
            return RUOrganizationBaseType.subclass(*args_, **kwargs_)
        else:
            return RUOrganizationBaseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OrganizationName(self):
        return self.OrganizationName
    def set_OrganizationName(self, OrganizationName):
        self.OrganizationName = OrganizationName
    def add_OrganizationName(self, value):
        self.OrganizationName.append(value)
    def insert_OrganizationName_at(self, index, value):
        self.OrganizationName.insert(index, value)
    def replace_OrganizationName_at(self, index, value):
        self.OrganizationName[index] = value
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_OrganizationLanguage(self):
        return self.OrganizationLanguage
    def set_OrganizationLanguage(self, OrganizationLanguage):
        self.OrganizationLanguage = OrganizationLanguage
    def get_RFOrganizationFeatures(self):
        return self.RFOrganizationFeatures
    def set_RFOrganizationFeatures(self, RFOrganizationFeatures):
        self.RFOrganizationFeatures = RFOrganizationFeatures
    def get_RKOrganizationFeatures(self):
        return self.RKOrganizationFeatures
    def set_RKOrganizationFeatures(self, RKOrganizationFeatures):
        self.RKOrganizationFeatures = RKOrganizationFeatures
    def get_RBOrganizationFeatures(self):
        return self.RBOrganizationFeatures
    def set_RBOrganizationFeatures(self, RBOrganizationFeatures):
        self.RBOrganizationFeatures = RBOrganizationFeatures
    def get_RAOrganizationFeatures(self):
        return self.RAOrganizationFeatures
    def set_RAOrganizationFeatures(self, RAOrganizationFeatures):
        self.RAOrganizationFeatures = RAOrganizationFeatures
    def get_KGOrganizationFeatures(self):
        return self.KGOrganizationFeatures
    def set_KGOrganizationFeatures(self, KGOrganizationFeatures):
        self.KGOrganizationFeatures = KGOrganizationFeatures
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_FreeText500Type(self, value):
        result = True
        # Validate type FreeText500Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 500:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText500Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText500Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_ShortNameType(self, value):
        result = True
        # Validate type ShortNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on ShortNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on ShortNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LanguageCodeType(self, value):
        result = True
        # Validate type LanguageCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_LanguageCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_LanguageCodeType_patterns_, ))
                result = False
        return result
    validate_LanguageCodeType_patterns_ = [['^([A-Z]{2})$']]
    def has__content(self):
        if (
            self.OrganizationName or
            self.ShortName is not None or
            self.OrganizationLanguage is not None or
            self.RFOrganizationFeatures is not None or
            self.RKOrganizationFeatures is not None or
            self.RBOrganizationFeatures is not None or
            self.RAOrganizationFeatures is not None or
            self.KGOrganizationFeatures is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='RUOrganizationBaseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RUOrganizationBaseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RUOrganizationBaseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RUOrganizationBaseType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RUOrganizationBaseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='RUOrganizationBaseType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='RUOrganizationBaseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OrganizationName_ in self.OrganizationName:
            namespaceprefix_ = self.OrganizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationName>%s</%sOrganizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(OrganizationName_), input_name='OrganizationName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.OrganizationLanguage is not None:
            namespaceprefix_ = self.OrganizationLanguage_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationLanguage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationLanguage>%s</%sOrganizationLanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationLanguage), input_name='OrganizationLanguage')), namespaceprefix_ , eol_))
        if self.RFOrganizationFeatures is not None:
            namespaceprefix_ = self.RFOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RFOrganizationFeatures_nsprefix_) else ''
            self.RFOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFOrganizationFeatures', pretty_print=pretty_print)
        if self.RKOrganizationFeatures is not None:
            namespaceprefix_ = self.RKOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RKOrganizationFeatures_nsprefix_) else ''
            self.RKOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RKOrganizationFeatures', pretty_print=pretty_print)
        if self.RBOrganizationFeatures is not None:
            namespaceprefix_ = self.RBOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RBOrganizationFeatures_nsprefix_) else ''
            self.RBOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RBOrganizationFeatures', pretty_print=pretty_print)
        if self.RAOrganizationFeatures is not None:
            namespaceprefix_ = self.RAOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RAOrganizationFeatures_nsprefix_) else ''
            self.RAOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RAOrganizationFeatures', pretty_print=pretty_print)
        if self.KGOrganizationFeatures is not None:
            namespaceprefix_ = self.KGOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.KGOrganizationFeatures_nsprefix_) else ''
            self.KGOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='KGOrganizationFeatures', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OrganizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationName')
            value_ = self.gds_validate_string(value_, node, 'OrganizationName')
            self.OrganizationName.append(value_)
            self.OrganizationName_nsprefix_ = child_.prefix
            # validate type FreeText500Type
            self.validate_FreeText500Type(self.OrganizationName[-1])
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType
            self.validate_ShortNameType(self.ShortName)
        elif nodeName_ == 'OrganizationLanguage':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OrganizationLanguage')
            value_ = self.gds_validate_string(value_, node, 'OrganizationLanguage')
            self.OrganizationLanguage = value_
            self.OrganizationLanguage_nsprefix_ = child_.prefix
            # validate type LanguageCodeType
            self.validate_LanguageCodeType(self.OrganizationLanguage)
        elif nodeName_ == 'RFOrganizationFeatures':
            obj_ = RFOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RFOrganizationFeatures'
        elif nodeName_ == 'RKOrganizationFeatures':
            obj_ = RKOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RKOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RKOrganizationFeatures'
        elif nodeName_ == 'RBOrganizationFeatures':
            obj_ = RBOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RBOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RBOrganizationFeatures'
        elif nodeName_ == 'RAOrganizationFeatures':
            obj_ = RAOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RAOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RAOrganizationFeatures'
        elif nodeName_ == 'KGOrganizationFeatures':
            obj_ = KGOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.KGOrganizationFeatures = obj_
            obj_.original_tagname_ = 'KGOrganizationFeatures'
# end class RUOrganizationBaseType


class RUOrganizationNameAddrType(RUOrganizationBaseType):
    """RUOrganizationNameAddrType -- Р
    е
    к
    в
    и
    з
    и
    т
    ы
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    и
    а
    д
    р
    е
    с
    о
    д
    н
    о
    й
    с
    т
    р
    о
    к
    о
    й
    Address -- Ю
    р
    и
    д
    и
    ч
    е
    с
    к
    и
    й
    а
    д
    р
    е
    с
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = RUOrganizationBaseType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("RUOrganizationNameAddrType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures,  **kwargs_)
        self.Address = Address
        self.validate_FreeText500Type(self.Address)
        self.Address_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RUOrganizationNameAddrType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RUOrganizationNameAddrType.subclass:
            return RUOrganizationNameAddrType.subclass(*args_, **kwargs_)
        else:
            return RUOrganizationNameAddrType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def validate_FreeText500Type(self, value):
        result = True
        # Validate type FreeText500Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 500:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText500Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText500Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Address is not None or
            super(RUOrganizationNameAddrType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RUOrganizationNameAddrType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RUOrganizationNameAddrType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RUOrganizationNameAddrType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RUOrganizationNameAddrType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RUOrganizationNameAddrType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='RUOrganizationNameAddrType'):
        super(RUOrganizationNameAddrType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RUOrganizationNameAddrType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RUOrganizationNameAddrType', fromsubclass_=False, pretty_print=True):
        super(RUOrganizationNameAddrType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddress>%s</%sAddress>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Address), input_name='Address')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(RUOrganizationNameAddrType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Address':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Address')
            value_ = self.gds_validate_string(value_, node, 'Address')
            self.Address = value_
            self.Address_nsprefix_ = child_.prefix
            # validate type FreeText500Type
            self.validate_FreeText500Type(self.Address)
        super(RUOrganizationNameAddrType, self)._buildChildren(child_, node, nodeName_, True)
# end class RUOrganizationNameAddrType


class RUOrganizationType(RUOrganizationBaseType):
    """RUOrganizationType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    Address -- А
    д
    р
    е
    с
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    IdentityCard -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    Contact -- К
    о
    н
    т
    а
    к
    т
    н
    а
    я
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    OrganizationFullDatas -- П
    о
    л
    н
    ы
    е
    д
    а
    н
    н
    ы
    е
    п
    о
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    о
    д
    н
    о
    й
    с
    т
    р
    о
    к
    о
    й
    (
    п
    р
    и
    о
    т
    с
    у
    т
    с
    т
    в
    и
    и
    д
    е
    т
    а
    л
    и
    з
    а
    ц
    и
    и
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = RUOrganizationBaseType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, Address=None, IdentityCard=None, Contact=None, OrganizationFullDatas=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("RUOrganizationType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures,  **kwargs_)
        self.Address = Address
        self.Address_nsprefix_ = "RUScat_ru"
        self.IdentityCard = IdentityCard
        self.IdentityCard_nsprefix_ = "RUScat_ru"
        self.Contact = Contact
        self.Contact_nsprefix_ = "cat_ru"
        if OrganizationFullDatas is None:
            self.OrganizationFullDatas = []
        else:
            self.OrganizationFullDatas = OrganizationFullDatas
        self.OrganizationFullDatas_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RUOrganizationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RUOrganizationType.subclass:
            return RUOrganizationType.subclass(*args_, **kwargs_)
        else:
            return RUOrganizationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_IdentityCard(self):
        return self.IdentityCard
    def set_IdentityCard(self, IdentityCard):
        self.IdentityCard = IdentityCard
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def get_OrganizationFullDatas(self):
        return self.OrganizationFullDatas
    def set_OrganizationFullDatas(self, OrganizationFullDatas):
        self.OrganizationFullDatas = OrganizationFullDatas
    def add_OrganizationFullDatas(self, value):
        self.OrganizationFullDatas.append(value)
    def insert_OrganizationFullDatas_at(self, index, value):
        self.OrganizationFullDatas.insert(index, value)
    def replace_OrganizationFullDatas_at(self, index, value):
        self.OrganizationFullDatas[index] = value
    def validate_FreeText500Type(self, value):
        result = True
        # Validate type FreeText500Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 500:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText500Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText500Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Address is not None or
            self.IdentityCard is not None or
            self.Contact is not None or
            self.OrganizationFullDatas or
            super(RUOrganizationType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RUOrganizationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RUOrganizationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RUOrganizationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RUOrganizationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RUOrganizationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='RUOrganizationType'):
        super(RUOrganizationType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RUOrganizationType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RUOrganizationType', fromsubclass_=False, pretty_print=True):
        super(RUOrganizationType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.IdentityCard is not None:
            namespaceprefix_ = self.IdentityCard_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCard_nsprefix_) else ''
            self.IdentityCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentityCard', pretty_print=pretty_print)
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
        for OrganizationFullDatas_ in self.OrganizationFullDatas:
            namespaceprefix_ = self.OrganizationFullDatas_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationFullDatas_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationFullDatas>%s</%sOrganizationFullDatas>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(OrganizationFullDatas_), input_name='OrganizationFullDatas')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(RUOrganizationType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Address':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'IdentityCard':
            class_obj_ = self.get_class_obj_(child_, RUIdentityCardType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentityCard = obj_
            obj_.original_tagname_ = 'IdentityCard'
        elif nodeName_ == 'Contact':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        elif nodeName_ == 'OrganizationFullDatas':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationFullDatas')
            value_ = self.gds_validate_string(value_, node, 'OrganizationFullDatas')
            self.OrganizationFullDatas.append(value_)
            self.OrganizationFullDatas_nsprefix_ = child_.prefix
            # validate type FreeText500Type
            self.validate_FreeText500Type(self.OrganizationFullDatas[-1])
        super(RUOrganizationType, self)._buildChildren(child_, node, nodeName_, True)
# end class RUOrganizationType


class SigningDetailsType(PersonBaseType):
    """SigningDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    д
    е
    т
    а
    л
    и
    з
    и
    р
    о
    в
    а
    н
    н
    у
    ю
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    ю
    о
    п
    о
    д
    п
    и
    с
    а
    н
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    CommunicationDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    н
    т
    а
    к
    т
    н
    ы
    х
    р
    е
    к
    в
    и
    з
    и
    т
    а
    х
    SigningDate -- Д
    а
    т
    а
    п
    о
    д
    п
    и
    с
    а
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PersonBaseType
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, CommunicationDetails=None, SigningDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("SigningDetailsType"), self).__init__(PersonSurname, PersonName, PersonMiddleName, PersonPost,  **kwargs_)
        self.CommunicationDetails = CommunicationDetails
        self.CommunicationDetails_nsprefix_ = "cat_ru"
        if isinstance(SigningDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(SigningDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = SigningDate
        self.SigningDate = initvalue_
        self.SigningDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SigningDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SigningDetailsType.subclass:
            return SigningDetailsType.subclass(*args_, **kwargs_)
        else:
            return SigningDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CommunicationDetails(self):
        return self.CommunicationDetails
    def set_CommunicationDetails(self, CommunicationDetails):
        self.CommunicationDetails = CommunicationDetails
    def get_SigningDate(self):
        return self.SigningDate
    def set_SigningDate(self, SigningDate):
        self.SigningDate = SigningDate
    def validate_DateTimeCustType(self, value):
        result = True
        # Validate type DateTimeCustType, a restriction on CategoryCust:DateTimeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.datetime):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.datetime)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.CommunicationDetails is not None or
            self.SigningDate is not None or
            super(SigningDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SigningDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SigningDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SigningDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SigningDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SigningDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='SigningDetailsType'):
        super(SigningDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SigningDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SigningDetailsType', fromsubclass_=False, pretty_print=True):
        super(SigningDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CommunicationDetails is not None:
            namespaceprefix_ = self.CommunicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CommunicationDetails_nsprefix_) else ''
            self.CommunicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommunicationDetails', pretty_print=pretty_print)
        if self.SigningDate is not None:
            namespaceprefix_ = self.SigningDate_nsprefix_ + ':' if (UseCapturedNS_ and self.SigningDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSigningDate>%s</%sSigningDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.SigningDate, input_name='SigningDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(SigningDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CommunicationDetails':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommunicationDetails = obj_
            obj_.original_tagname_ = 'CommunicationDetails'
        elif nodeName_ == 'SigningDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.SigningDate = dval_
            self.SigningDate_nsprefix_ = child_.prefix
            # validate type DateTimeCustType
            self.validate_DateTimeCustType(self.SigningDate)
        super(SigningDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class SigningDetailsType


class SubjectBaseDetailsType19(OrganizationBaseType):
    """SubjectBaseDetailsType19 -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    б
    а
    з
    о
    в
    ы
    й
    н
    а
    б
    о
    р
    с
    в
    е
    д
    е
    н
    и
    й
    о
    с
    у
    б
    ъ
    е
    к
    т
    е
    CountryA2Code -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    BusinessEntityTypeCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    о
    н
    н
    о
    -
    п
    р
    а
    в
    о
    в
    о
    й
    ф
    о
    р
    м
    ы
    ,
    в
    к
    о
    т
    о
    р
    о
    й
    з
    а
    р
    е
    г
    и
    с
    т
    р
    и
    р
    о
    в
    а
    н
    х
    о
    з
    я
    й
    с
    т
    в
    у
    ю
    щ
    и
    й
    с
    у
    б
    ъ
    е
    к
    т
    BusinessEntityTypeName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    о
    н
    н
    о
    -
    п
    р
    а
    в
    о
    в
    о
    й
    ф
    о
    р
    м
    ы
    ,
    в
    к
    о
    т
    о
    р
    о
    й
    з
    а
    р
    е
    г
    и
    с
    т
    р
    и
    р
    о
    в
    а
    н
    х
    о
    з
    я
    й
    с
    т
    в
    у
    ю
    щ
    и
    й
    с
    у
    б
    ъ
    е
    к
    т
    UITN -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    о
    м
    у
    и
    л
    и
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    м
    у
    л
    и
    ц
    у
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = OrganizationBaseType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("SubjectBaseDetailsType19"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures,  **kwargs_)
        self.CountryA2Code = CountryA2Code
        self.validate_CountryA2CodeType(self.CountryA2Code)
        self.CountryA2Code_nsprefix_ = "clt_ru"
        self.BusinessEntityTypeCode = BusinessEntityTypeCode
        self.BusinessEntityTypeCode_nsprefix_ = "RUScat_ru"
        self.BusinessEntityTypeName = BusinessEntityTypeName
        self.validate_Name300Type(self.BusinessEntityTypeName)
        self.BusinessEntityTypeName_nsprefix_ = "RUSclt_ru"
        self.UITN = UITN
        self.UITN_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SubjectBaseDetailsType19)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SubjectBaseDetailsType19.subclass:
            return SubjectBaseDetailsType19.subclass(*args_, **kwargs_)
        else:
            return SubjectBaseDetailsType19(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryA2Code(self):
        return self.CountryA2Code
    def set_CountryA2Code(self, CountryA2Code):
        self.CountryA2Code = CountryA2Code
    def get_BusinessEntityTypeCode(self):
        return self.BusinessEntityTypeCode
    def set_BusinessEntityTypeCode(self, BusinessEntityTypeCode):
        self.BusinessEntityTypeCode = BusinessEntityTypeCode
    def get_BusinessEntityTypeName(self):
        return self.BusinessEntityTypeName
    def set_BusinessEntityTypeName(self, BusinessEntityTypeName):
        self.BusinessEntityTypeName = BusinessEntityTypeName
    def get_UITN(self):
        return self.UITN
    def set_UITN(self, UITN):
        self.UITN = UITN
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Name300Type(self, value):
        result = True
        # Validate type Name300Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Name300Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Name300Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CountryA2Code is not None or
            self.BusinessEntityTypeCode is not None or
            self.BusinessEntityTypeName is not None or
            self.UITN is not None or
            super(SubjectBaseDetailsType19, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='SubjectBaseDetailsType19', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SubjectBaseDetailsType19')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SubjectBaseDetailsType19':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectBaseDetailsType19')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SubjectBaseDetailsType19', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='SubjectBaseDetailsType19'):
        super(SubjectBaseDetailsType19, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectBaseDetailsType19')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='SubjectBaseDetailsType19', fromsubclass_=False, pretty_print=True):
        super(SubjectBaseDetailsType19, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryA2Code is not None:
            namespaceprefix_ = self.CountryA2Code_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryA2Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryA2Code>%s</%sCountryA2Code>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryA2Code), input_name='CountryA2Code')), namespaceprefix_ , eol_))
        if self.BusinessEntityTypeCode is not None:
            namespaceprefix_ = self.BusinessEntityTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessEntityTypeCode_nsprefix_) else ''
            self.BusinessEntityTypeCode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BusinessEntityTypeCode', pretty_print=pretty_print)
        if self.BusinessEntityTypeName is not None:
            namespaceprefix_ = self.BusinessEntityTypeName_nsprefix_ + ':' if (UseCapturedNS_ and self.BusinessEntityTypeName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBusinessEntityTypeName>%s</%sBusinessEntityTypeName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BusinessEntityTypeName), input_name='BusinessEntityTypeName')), namespaceprefix_ , eol_))
        if self.UITN is not None:
            namespaceprefix_ = self.UITN_nsprefix_ + ':' if (UseCapturedNS_ and self.UITN_nsprefix_) else ''
            self.UITN.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UITN', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(SubjectBaseDetailsType19, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryA2Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryA2Code')
            value_ = self.gds_validate_string(value_, node, 'CountryA2Code')
            self.CountryA2Code = value_
            self.CountryA2Code_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryA2Code)
        elif nodeName_ == 'BusinessEntityTypeCode':
            obj_ = UnifiedCode20Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BusinessEntityTypeCode = obj_
            obj_.original_tagname_ = 'BusinessEntityTypeCode'
        elif nodeName_ == 'BusinessEntityTypeName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BusinessEntityTypeName')
            value_ = self.gds_validate_string(value_, node, 'BusinessEntityTypeName')
            self.BusinessEntityTypeName = value_
            self.BusinessEntityTypeName_nsprefix_ = child_.prefix
            # validate type Name300Type
            self.validate_Name300Type(self.BusinessEntityTypeName)
        elif nodeName_ == 'UITN':
            obj_ = UITN40Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UITN = obj_
            obj_.original_tagname_ = 'UITN'
        super(SubjectBaseDetailsType19, self)._buildChildren(child_, node, nodeName_, True)
# end class SubjectBaseDetailsType19


class SubjectDetailsType(SubjectBaseDetailsType):
    """SubjectDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    д
    е
    т
    а
    л
    и
    з
    и
    р
    о
    в
    а
    н
    н
    у
    ю
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    ю
    о
    с
    у
    б
    ъ
    е
    к
    т
    е
    PersonId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    IdentityCard -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    м
    л
    и
    ч
    н
    о
    с
    т
    ь
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    SubjectAddressDetails -- А
    д
    р
    е
    с
    CommunicationDetails -- К
    о
    н
    т
    а
    к
    т
    н
    ы
    й
    р
    е
    к
    в
    и
    з
    и
    т
    с
    у
    б
    ъ
    е
    к
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectBaseDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, IdentityCard=None, SubjectAddressDetails=None, CommunicationDetails=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("SubjectDetailsType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN, extensiontype_,  **kwargs_)
        self.PersonId = PersonId
        self.validate_PersonIdType(self.PersonId)
        self.PersonId_nsprefix_ = "RUSclt_ru"
        self.IdentityCard = IdentityCard
        self.IdentityCard_nsprefix_ = "RUScat_ru"
        if SubjectAddressDetails is None:
            self.SubjectAddressDetails = []
        else:
            self.SubjectAddressDetails = SubjectAddressDetails
        self.SubjectAddressDetails_nsprefix_ = "RUScat_ru"
        self.CommunicationDetails = CommunicationDetails
        self.CommunicationDetails_nsprefix_ = "cat_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SubjectDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SubjectDetailsType.subclass:
            return SubjectDetailsType.subclass(*args_, **kwargs_)
        else:
            return SubjectDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PersonId(self):
        return self.PersonId
    def set_PersonId(self, PersonId):
        self.PersonId = PersonId
    def get_IdentityCard(self):
        return self.IdentityCard
    def set_IdentityCard(self, IdentityCard):
        self.IdentityCard = IdentityCard
    def get_SubjectAddressDetails(self):
        return self.SubjectAddressDetails
    def set_SubjectAddressDetails(self, SubjectAddressDetails):
        self.SubjectAddressDetails = SubjectAddressDetails
    def add_SubjectAddressDetails(self, value):
        self.SubjectAddressDetails.append(value)
    def insert_SubjectAddressDetails_at(self, index, value):
        self.SubjectAddressDetails.insert(index, value)
    def replace_SubjectAddressDetails_at(self, index, value):
        self.SubjectAddressDetails[index] = value
    def get_CommunicationDetails(self):
        return self.CommunicationDetails
    def set_CommunicationDetails(self, CommunicationDetails):
        self.CommunicationDetails = CommunicationDetails
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_PersonIdType(self, value):
        result = True
        # Validate type PersonIdType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PersonIdType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PersonIdType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PersonId is not None or
            self.IdentityCard is not None or
            self.SubjectAddressDetails or
            self.CommunicationDetails is not None or
            super(SubjectDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='SubjectDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SubjectDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SubjectDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SubjectDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='SubjectDetailsType'):
        super(SubjectDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectDetailsType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='SubjectDetailsType', fromsubclass_=False, pretty_print=True):
        super(SubjectDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonId is not None:
            namespaceprefix_ = self.PersonId_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonId>%s</%sPersonId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonId), input_name='PersonId')), namespaceprefix_ , eol_))
        if self.IdentityCard is not None:
            namespaceprefix_ = self.IdentityCard_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCard_nsprefix_) else ''
            self.IdentityCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentityCard', pretty_print=pretty_print)
        for SubjectAddressDetails_ in self.SubjectAddressDetails:
            namespaceprefix_ = self.SubjectAddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SubjectAddressDetails_nsprefix_) else ''
            SubjectAddressDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SubjectAddressDetails', pretty_print=pretty_print)
        if self.CommunicationDetails is not None:
            namespaceprefix_ = self.CommunicationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CommunicationDetails_nsprefix_) else ''
            self.CommunicationDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommunicationDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(SubjectDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PersonId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonId')
            value_ = self.gds_validate_string(value_, node, 'PersonId')
            self.PersonId = value_
            self.PersonId_nsprefix_ = child_.prefix
            # validate type PersonIdType
            self.validate_PersonIdType(self.PersonId)
        elif nodeName_ == 'IdentityCard':
            class_obj_ = self.get_class_obj_(child_, RUIdentityCardType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentityCard = obj_
            obj_.original_tagname_ = 'IdentityCard'
        elif nodeName_ == 'SubjectAddressDetails':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SubjectAddressDetails.append(obj_)
            obj_.original_tagname_ = 'SubjectAddressDetails'
        elif nodeName_ == 'CommunicationDetails':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommunicationDetails = obj_
            obj_.original_tagname_ = 'CommunicationDetails'
        super(SubjectDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class SubjectDetailsType


class SubjectDetailsBankType(SubjectDetailsType):
    """SubjectDetailsBankType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ,
    в
    к
    л
    ю
    ч
    а
    я
    б
    а
    н
    к
    о
    в
    с
    к
    и
    е
    с
    ч
    е
    т
    а
    BankInformation -- И
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    о
    б
    а
    н
    к
    о
    в
    с
    к
    и
    х
    с
    ч
    е
    т
    а
    х
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, IdentityCard=None, SubjectAddressDetails=None, CommunicationDetails=None, BankInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("SubjectDetailsBankType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN, PersonId, IdentityCard, SubjectAddressDetails, CommunicationDetails,  **kwargs_)
        if BankInformation is None:
            self.BankInformation = []
        else:
            self.BankInformation = BankInformation
        self.BankInformation_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SubjectDetailsBankType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SubjectDetailsBankType.subclass:
            return SubjectDetailsBankType.subclass(*args_, **kwargs_)
        else:
            return SubjectDetailsBankType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BankInformation(self):
        return self.BankInformation
    def set_BankInformation(self, BankInformation):
        self.BankInformation = BankInformation
    def add_BankInformation(self, value):
        self.BankInformation.append(value)
    def insert_BankInformation_at(self, index, value):
        self.BankInformation.insert(index, value)
    def replace_BankInformation_at(self, index, value):
        self.BankInformation[index] = value
    def has__content(self):
        if (
            self.BankInformation or
            super(SubjectDetailsBankType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='SubjectDetailsBankType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SubjectDetailsBankType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SubjectDetailsBankType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectDetailsBankType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SubjectDetailsBankType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='SubjectDetailsBankType'):
        super(SubjectDetailsBankType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectDetailsBankType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='SubjectDetailsBankType', fromsubclass_=False, pretty_print=True):
        super(SubjectDetailsBankType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for BankInformation_ in self.BankInformation:
            namespaceprefix_ = self.BankInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.BankInformation_nsprefix_) else ''
            BankInformation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BankInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(SubjectDetailsBankType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BankInformation':
            obj_ = BankInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BankInformation.append(obj_)
            obj_.original_tagname_ = 'BankInformation'
        super(SubjectDetailsBankType, self)._buildChildren(child_, node, nodeName_, True)
# end class SubjectDetailsBankType


class SupplementaryQuantity24point8Type(GeneratedsSuper):
    """SupplementaryQuantity24point8Type -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    в
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    GoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierName -- У
    с
    л
    о
    в
    н
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    е
    д
    и
    н
    и
    ц
    а
    м
    и
    и
    з
    м
    е
    р
    е
    н
    и
    я
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    и
    в
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsQuantity=None, MeasureUnitQualifierName=None, MeasureUnitQualifierCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.GoodsQuantity = GoodsQuantity
        self.validate_Quantity24point8Type(self.GoodsQuantity)
        self.GoodsQuantity_nsprefix_ = "RUSclt_ru"
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
        self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        self.MeasureUnitQualifierName_nsprefix_ = "clt_ru"
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
        self.MeasureUnitQualifierCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SupplementaryQuantity24point8Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SupplementaryQuantity24point8Type.subclass:
            return SupplementaryQuantity24point8Type.subclass(*args_, **kwargs_)
        else:
            return SupplementaryQuantity24point8Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsQuantity(self):
        return self.GoodsQuantity
    def set_GoodsQuantity(self, GoodsQuantity):
        self.GoodsQuantity = GoodsQuantity
    def get_MeasureUnitQualifierName(self):
        return self.MeasureUnitQualifierName
    def set_MeasureUnitQualifierName(self, MeasureUnitQualifierName):
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
    def get_MeasureUnitQualifierCode(self):
        return self.MeasureUnitQualifierCode
    def set_MeasureUnitQualifierCode(self, MeasureUnitQualifierCode):
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
    def validate_Quantity24point8Type(self, value):
        result = True
        # Validate type Quantity24point8Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity24point8Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity24point8Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierNameType(self, value):
        result = True
        # Validate type MeasureUnitQualifierNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 13:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on MeasureUnitQualifierNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on MeasureUnitQualifierNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsQuantity is not None or
            self.MeasureUnitQualifierName is not None or
            self.MeasureUnitQualifierCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SupplementaryQuantity24point8Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SupplementaryQuantity24point8Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SupplementaryQuantity24point8Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SupplementaryQuantity24point8Type')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SupplementaryQuantity24point8Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='SupplementaryQuantity24point8Type'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SupplementaryQuantity24point8Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsQuantity is not None:
            namespaceprefix_ = self.GoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsQuantity>%s</%sGoodsQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.GoodsQuantity, input_name='GoodsQuantity'), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierName is not None:
            namespaceprefix_ = self.MeasureUnitQualifierName_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierName>%s</%sMeasureUnitQualifierName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierName), input_name='MeasureUnitQualifierName')), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierCode is not None:
            namespaceprefix_ = self.MeasureUnitQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierCode>%s</%sMeasureUnitQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierCode), input_name='MeasureUnitQualifierCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'GoodsQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'GoodsQuantity')
            self.GoodsQuantity = fval_
            self.GoodsQuantity_nsprefix_ = child_.prefix
            # validate type Quantity24point8Type
            self.validate_Quantity24point8Type(self.GoodsQuantity)
        elif nodeName_ == 'MeasureUnitQualifierName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierName')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierName')
            self.MeasureUnitQualifierName = value_
            self.MeasureUnitQualifierName_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierNameType
            self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        elif nodeName_ == 'MeasureUnitQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierCode')
            self.MeasureUnitQualifierCode = value_
            self.MeasureUnitQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
# end class SupplementaryQuantity24point8Type


class TradeCountryDetailsType(GeneratedsSuper):
    """TradeCountryDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    р
    г
    у
    ю
    щ
    е
    й
    с
    т
    р
    а
    н
    е
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    TerritoryCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryCode=None, TerritoryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.TerritoryCode = TerritoryCode
        self.validate_TerritoryCodeType(self.TerritoryCode)
        self.TerritoryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TradeCountryDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TradeCountryDetailsType.subclass:
            return TradeCountryDetailsType.subclass(*args_, **kwargs_)
        else:
            return TradeCountryDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_TerritoryCode(self):
        return self.TerritoryCode
    def set_TerritoryCode(self, TerritoryCode):
        self.TerritoryCode = TerritoryCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_TerritoryCodeType(self, value):
        result = True
        # Validate type TerritoryCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TerritoryCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TerritoryCodeType_patterns_, ))
                result = False
        return result
    validate_TerritoryCodeType_patterns_ = [['^(\\d{8,17})$']]
    def has__content(self):
        if (
            self.CountryCode is not None or
            self.TerritoryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TradeCountryDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TradeCountryDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TradeCountryDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TradeCountryDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TradeCountryDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='TradeCountryDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TradeCountryDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.TerritoryCode is not None:
            namespaceprefix_ = self.TerritoryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TerritoryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTerritoryCode>%s</%sTerritoryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TerritoryCode), input_name='TerritoryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'TerritoryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TerritoryCode')
            value_ = self.gds_validate_string(value_, node, 'TerritoryCode')
            self.TerritoryCode = value_
            self.TerritoryCode_nsprefix_ = child_.prefix
            # validate type TerritoryCodeType
            self.validate_TerritoryCodeType(self.TerritoryCode)
# end class TradeCountryDetailsType


class TransportMeansRegIdType(GeneratedsSuper):
    """TransportMeansRegIdType -- И
    н
    д
    и
    в
    и
    д
    у
    а
    л
    ь
    н
    о
    е
    б
    у
    к
    в
    е
    н
    н
    о
    -
    ц
    и
    ф
    р
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    о
    е
    р
    е
    г
    и
    с
    т
    р
    и
    р
    у
    ю
    щ
    и
    м
    о
    р
    г
    а
    н
    о
    м
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    м
    у
    с
    р
    е
    д
    с
    т
    в
    у
    TransportMeansRegIdNumber -- С
    т
    р
    о
    к
    а
    с
    и
    м
    в
    о
    л
    о
    в
    ,
    и
    д
    е
    н
    т
    и
    ф
    и
    ц
    и
    р
    у
    ю
    щ
    а
    я
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    CountryCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    ,
    п
    о
    п
    р
    а
    в
    и
    л
    а
    м
    к
    о
    т
    о
    р
    о
    й
    с
    ф
    о
    р
    м
    и
    р
    о
    в
    а
    н
    у
    к
    а
    з
    а
    н
    н
    ы
    й
    к
    о
    д
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransportMeansRegIdNumber=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.TransportMeansRegIdNumber = TransportMeansRegIdNumber
        self.validate_TransportMeansRegIdNumberType(self.TransportMeansRegIdNumber)
        self.TransportMeansRegIdNumber_nsprefix_ = "RUSclt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportMeansRegIdType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportMeansRegIdType.subclass:
            return TransportMeansRegIdType.subclass(*args_, **kwargs_)
        else:
            return TransportMeansRegIdType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportMeansRegIdNumber(self):
        return self.TransportMeansRegIdNumber
    def set_TransportMeansRegIdNumber(self, TransportMeansRegIdNumber):
        self.TransportMeansRegIdNumber = TransportMeansRegIdNumber
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_TransportMeansRegIdNumberType(self, value):
        result = True
        # Validate type TransportMeansRegIdNumberType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TransportMeansRegIdNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TransportMeansRegIdNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.TransportMeansRegIdNumber is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportMeansRegIdType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportMeansRegIdType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportMeansRegIdType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportMeansRegIdType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportMeansRegIdType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='TransportMeansRegIdType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TransportMeansRegIdType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportMeansRegIdNumber is not None:
            namespaceprefix_ = self.TransportMeansRegIdNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportMeansRegIdNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportMeansRegIdNumber>%s</%sTransportMeansRegIdNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportMeansRegIdNumber), input_name='TransportMeansRegIdNumber')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportMeansRegIdNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportMeansRegIdNumber')
            value_ = self.gds_validate_string(value_, node, 'TransportMeansRegIdNumber')
            self.TransportMeansRegIdNumber = value_
            self.TransportMeansRegIdNumber_nsprefix_ = child_.prefix
            # validate type TransportMeansRegIdNumberType
            self.validate_TransportMeansRegIdNumberType(self.TransportMeansRegIdNumber)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
# end class TransportMeansRegIdType


class UITN40Type20(GeneratedsSuper):
    """UITN40Type20 -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    м
    (
    у
    н
    и
    к
    а
    л
    ь
    н
    о
    м
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    м
    )
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    н
    о
    м
    е
    р
    е
    UITNCode -- К
    о
    д
    .
    У
    н
    и
    в
    е
    р
    с
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    .
    С
    т
    р
    о
    к
    а
    н
    е
    б
    о
    л
    е
    е
    40
    с
    и
    м
    в
    о
    л
    о
    в
    CountryCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    ,
    п
    о
    п
    р
    а
    в
    и
    л
    а
    м
    к
    о
    т
    о
    р
    о
    й
    с
    ф
    о
    р
    м
    и
    р
    о
    в
    а
    н
    у
    к
    а
    з
    а
    н
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UITNCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.UITNCode = UITNCode
        self.validate_UITNCode40Type(self.UITNCode)
        self.UITNCode_nsprefix_ = "RUSclt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UITN40Type20)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UITN40Type20.subclass:
            return UITN40Type20.subclass(*args_, **kwargs_)
        else:
            return UITN40Type20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UITNCode(self):
        return self.UITNCode
    def set_UITNCode(self, UITNCode):
        self.UITNCode = UITNCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_UITNCode40Type(self, value):
        result = True
        # Validate type UITNCode40Type, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on UITNCode40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on UITNCode40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.UITNCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UITN40Type20', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UITN40Type20')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UITN40Type20':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UITN40Type20')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UITN40Type20', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='UITN40Type20'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UITN40Type20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UITNCode is not None:
            namespaceprefix_ = self.UITNCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UITNCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUITNCode>%s</%sUITNCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UITNCode), input_name='UITNCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UITNCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'UITNCode')
            value_ = self.gds_validate_string(value_, node, 'UITNCode')
            self.UITNCode = value_
            self.UITNCode_nsprefix_ = child_.prefix
            # validate type UITNCode40Type
            self.validate_UITNCode40Type(self.UITNCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
# end class UITN40Type20


class UnifiedCode20Type21(GeneratedsSuper):
    """UnifiedCode20Type21 -- С
    т
    р
    о
    к
    а
    с
    и
    м
    в
    о
    л
    о
    в
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    а
    я
    к
    р
    а
    т
    к
    о
    е
    у
    с
    л
    о
    в
    н
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    о
    б
    ъ
    е
    к
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    о
    с
    п
    р
    а
    в
    о
    ч
    н
    и
    к
    о
    м
    (
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    ),
    з
    а
    д
    а
    н
    н
    ы
    м
    с
    п
    о
    м
    о
    щ
    ь
    ю
    к
    о
    н
    т
    е
    к
    с
    т
    н
    о
    й
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    и
    ,
    с
    о
    д
    е
    р
    ж
    а
    щ
    а
    я
    н
    е
    б
    о
    л
    е
    е
    20
    с
    и
    м
    в
    о
    л
    о
    в
    UnifiedCode -- К
    о
    д
    о
    б
    ъ
    е
    к
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    в
    и
    и
    с
    о
    с
    п
    р
    а
    в
    о
    ч
    н
    и
    к
    о
    м
    (
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    )
    CodeListId -- О
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    п
    р
    а
    в
    о
    ч
    н
    и
    к
    а
    (
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    ),
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    о
    т
    о
    р
    ы
    м
    у
    к
    а
    з
    а
    н
    к
    о
    д
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnifiedCode=None, CodeListId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.UnifiedCode = UnifiedCode
        self.validate_CodeVariable20Type(self.UnifiedCode)
        self.UnifiedCode_nsprefix_ = "clt_ru"
        self.CodeListId = CodeListId
        self.validate_CodeVariable20Type(self.CodeListId)
        self.CodeListId_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnifiedCode20Type21)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnifiedCode20Type21.subclass:
            return UnifiedCode20Type21.subclass(*args_, **kwargs_)
        else:
            return UnifiedCode20Type21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnifiedCode(self):
        return self.UnifiedCode
    def set_UnifiedCode(self, UnifiedCode):
        self.UnifiedCode = UnifiedCode
    def get_CodeListId(self):
        return self.CodeListId
    def set_CodeListId(self, CodeListId):
        self.CodeListId = CodeListId
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.UnifiedCode is not None or
            self.CodeListId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UnifiedCode20Type21', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnifiedCode20Type21')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnifiedCode20Type21':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnifiedCode20Type21')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnifiedCode20Type21', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='UnifiedCode20Type21'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UnifiedCode20Type21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnifiedCode is not None:
            namespaceprefix_ = self.UnifiedCode_nsprefix_ + ':' if (UseCapturedNS_ and self.UnifiedCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnifiedCode>%s</%sUnifiedCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnifiedCode), input_name='UnifiedCode')), namespaceprefix_ , eol_))
        if self.CodeListId is not None:
            namespaceprefix_ = self.CodeListId_nsprefix_ + ':' if (UseCapturedNS_ and self.CodeListId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodeListId>%s</%sCodeListId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CodeListId), input_name='CodeListId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnifiedCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'UnifiedCode')
            value_ = self.gds_validate_string(value_, node, 'UnifiedCode')
            self.UnifiedCode = value_
            self.UnifiedCode_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.UnifiedCode)
        elif nodeName_ == 'CodeListId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CodeListId')
            value_ = self.gds_validate_string(value_, node, 'CodeListId')
            self.CodeListId = value_
            self.CodeListId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.CodeListId)
# end class UnifiedCode20Type21


class UnifiedPhysicalMeasureType22(GeneratedsSuper):
    """UnifiedPhysicalMeasureType22 -- Ч
    и
    с
    л
    о
    в
    а
    я
    в
    е
    л
    и
    ч
    и
    н
    а
    с
    з
    а
    д
    а
    н
    н
    о
    й
    т
    о
    ч
    н
    о
    с
    т
    ь
    ю
    ,
    о
    п
    р
    е
    д
    е
    л
    е
    н
    н
    а
    я
    в
    р
    е
    з
    у
    л
    ь
    т
    а
    т
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    ф
    и
    з
    и
    ч
    е
    с
    к
    и
    х
    п
    а
    р
    а
    м
    е
    т
    р
    о
    в
    в
    к
    а
    к
    и
    х
    -
    л
    и
    б
    о
    е
    д
    и
    н
    и
    ц
    а
    х
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasuredAmount -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierName -- У
    с
    л
    о
    в
    н
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    MeasureUnitQualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MeasuredAmount=None, MeasureUnitQualifierName=None, MeasureUnitQualifierCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.MeasuredAmount = MeasuredAmount
        self.validate_QuantityBasis0Type(self.MeasuredAmount)
        self.MeasuredAmount_nsprefix_ = "clt_ru"
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
        self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        self.MeasureUnitQualifierName_nsprefix_ = "clt_ru"
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
        self.MeasureUnitQualifierCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UnifiedPhysicalMeasureType22)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UnifiedPhysicalMeasureType22.subclass:
            return UnifiedPhysicalMeasureType22.subclass(*args_, **kwargs_)
        else:
            return UnifiedPhysicalMeasureType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MeasuredAmount(self):
        return self.MeasuredAmount
    def set_MeasuredAmount(self, MeasuredAmount):
        self.MeasuredAmount = MeasuredAmount
    def get_MeasureUnitQualifierName(self):
        return self.MeasureUnitQualifierName
    def set_MeasureUnitQualifierName(self, MeasureUnitQualifierName):
        self.MeasureUnitQualifierName = MeasureUnitQualifierName
    def get_MeasureUnitQualifierCode(self):
        return self.MeasureUnitQualifierCode
    def set_MeasureUnitQualifierCode(self, MeasureUnitQualifierCode):
        self.MeasureUnitQualifierCode = MeasureUnitQualifierCode
    def validate_QuantityBasis0Type(self, value):
        result = True
        # Validate type QuantityBasis0Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0.000001:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasis0Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasis0Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierNameType(self, value):
        result = True
        # Validate type MeasureUnitQualifierNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 13:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on MeasureUnitQualifierNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on MeasureUnitQualifierNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.MeasuredAmount is not None or
            self.MeasureUnitQualifierName is not None or
            self.MeasureUnitQualifierCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UnifiedPhysicalMeasureType22', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UnifiedPhysicalMeasureType22')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UnifiedPhysicalMeasureType22':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UnifiedPhysicalMeasureType22')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UnifiedPhysicalMeasureType22', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='UnifiedPhysicalMeasureType22'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='UnifiedPhysicalMeasureType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MeasuredAmount is not None:
            namespaceprefix_ = self.MeasuredAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasuredAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasuredAmount>%s</%sMeasuredAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.MeasuredAmount, input_name='MeasuredAmount'), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierName is not None:
            namespaceprefix_ = self.MeasureUnitQualifierName_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierName>%s</%sMeasureUnitQualifierName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierName), input_name='MeasureUnitQualifierName')), namespaceprefix_ , eol_))
        if self.MeasureUnitQualifierCode is not None:
            namespaceprefix_ = self.MeasureUnitQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MeasureUnitQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMeasureUnitQualifierCode>%s</%sMeasureUnitQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MeasureUnitQualifierCode), input_name='MeasureUnitQualifierCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MeasuredAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'MeasuredAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'MeasuredAmount')
            self.MeasuredAmount = fval_
            self.MeasuredAmount_nsprefix_ = child_.prefix
            # validate type QuantityBasis0Type
            self.validate_QuantityBasis0Type(self.MeasuredAmount)
        elif nodeName_ == 'MeasureUnitQualifierName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierName')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierName')
            self.MeasureUnitQualifierName = value_
            self.MeasureUnitQualifierName_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierNameType
            self.validate_MeasureUnitQualifierNameType(self.MeasureUnitQualifierName)
        elif nodeName_ == 'MeasureUnitQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MeasureUnitQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'MeasureUnitQualifierCode')
            self.MeasureUnitQualifierCode = value_
            self.MeasureUnitQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.MeasureUnitQualifierCode)
# end class UnifiedPhysicalMeasureType22


class WarehouseDetailsType(GeneratedsSuper):
    """WarehouseDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    к
    л
    а
    д
    е
    AddressDetails -- А
    д
    р
    е
    с
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    WarehouseKindCode -- Н
    а
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    к
    л
    а
    д
    а
    : 1
    –
    с
    к
    л
    а
    д
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    х
    р
    а
    н
    е
    н
    и
    я
    ; 2
    –
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    с
    к
    л
    а
    д
    ; 3
    –
    с
    в
    о
    б
    о
    д
    н
    ы
    й
    с
    к
    л
    а
    д
    TypeWarehouseIndicator -- Т
    и
    п
    с
    к
    л
    а
    д
    а
    : 0
    –
    о
    т
    к
    р
    ы
    т
    ы
    й
    ; 1
    –
    з
    а
    к
    р
    ы
    т
    ы
    й
    TotalAreaMeasure -- О
    б
    щ
    а
    я
    п
    л
    о
    щ
    а
    д
    ь
    (
    к
    в
    .
    м
    )
    CubageMeasure -- О
    б
    ъ
    е
    м
    п
    о
    м
    е
    щ
    е
    н
    и
    я
    (
    к
    у
    б
    .
    м
    )
    TransportModeCode -- К
    о
    д
    в
    и
    д
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    т
    р
    а
    н
    с
    п
    о
    р
    т
    а
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    и
    р
    о
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    WarehouseActivityDescriptionText -- С
    в
    е
    д
    е
    н
    и
    я
    о
    в
    и
    д
    е
    д
    е
    я
    т
    е
    л
    ь
    н
    о
    с
    т
    и
    ,
    о
    с
    у
    щ
    е
    с
    т
    в
    л
    я
    е
    м
    о
    й
    н
    а
    т
    е
    р
    р
    и
    т
    о
    р
    и
    и
    с
    к
    л
    а
    д
    а
    AdditionalInfoText -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    а
    я
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AddressDetails=None, WarehouseKindCode=None, TypeWarehouseIndicator=None, TotalAreaMeasure=None, CubageMeasure=None, TransportModeCode=None, WarehouseActivityDescriptionText=None, AdditionalInfoText=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        self.AddressDetails = AddressDetails
        self.AddressDetails_nsprefix_ = "RUScat_ru"
        self.WarehouseKindCode = WarehouseKindCode
        self.validate_LetterIndicatorType(self.WarehouseKindCode)
        self.WarehouseKindCode_nsprefix_ = "clt_ru"
        self.TypeWarehouseIndicator = TypeWarehouseIndicator
        self.validate_IndicatorType(self.TypeWarehouseIndicator)
        self.TypeWarehouseIndicator_nsprefix_ = "clt_ru"
        self.TotalAreaMeasure = TotalAreaMeasure
        self.TotalAreaMeasure_nsprefix_ = "cat_ru"
        self.CubageMeasure = CubageMeasure
        self.CubageMeasure_nsprefix_ = "cat_ru"
        if TransportModeCode is None:
            self.TransportModeCode = []
        else:
            self.TransportModeCode = TransportModeCode
        self.TransportModeCode_nsprefix_ = "clt_ru"
        if WarehouseActivityDescriptionText is None:
            self.WarehouseActivityDescriptionText = []
        else:
            self.WarehouseActivityDescriptionText = WarehouseActivityDescriptionText
        self.WarehouseActivityDescriptionText_nsprefix_ = "clt_ru"
        if AdditionalInfoText is None:
            self.AdditionalInfoText = []
        else:
            self.AdditionalInfoText = AdditionalInfoText
        self.AdditionalInfoText_nsprefix_ = "RUSclt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WarehouseDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WarehouseDetailsType.subclass:
            return WarehouseDetailsType.subclass(*args_, **kwargs_)
        else:
            return WarehouseDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AddressDetails(self):
        return self.AddressDetails
    def set_AddressDetails(self, AddressDetails):
        self.AddressDetails = AddressDetails
    def get_WarehouseKindCode(self):
        return self.WarehouseKindCode
    def set_WarehouseKindCode(self, WarehouseKindCode):
        self.WarehouseKindCode = WarehouseKindCode
    def get_TypeWarehouseIndicator(self):
        return self.TypeWarehouseIndicator
    def set_TypeWarehouseIndicator(self, TypeWarehouseIndicator):
        self.TypeWarehouseIndicator = TypeWarehouseIndicator
    def get_TotalAreaMeasure(self):
        return self.TotalAreaMeasure
    def set_TotalAreaMeasure(self, TotalAreaMeasure):
        self.TotalAreaMeasure = TotalAreaMeasure
    def get_CubageMeasure(self):
        return self.CubageMeasure
    def set_CubageMeasure(self, CubageMeasure):
        self.CubageMeasure = CubageMeasure
    def get_TransportModeCode(self):
        return self.TransportModeCode
    def set_TransportModeCode(self, TransportModeCode):
        self.TransportModeCode = TransportModeCode
    def add_TransportModeCode(self, value):
        self.TransportModeCode.append(value)
    def insert_TransportModeCode_at(self, index, value):
        self.TransportModeCode.insert(index, value)
    def replace_TransportModeCode_at(self, index, value):
        self.TransportModeCode[index] = value
    def get_WarehouseActivityDescriptionText(self):
        return self.WarehouseActivityDescriptionText
    def set_WarehouseActivityDescriptionText(self, WarehouseActivityDescriptionText):
        self.WarehouseActivityDescriptionText = WarehouseActivityDescriptionText
    def add_WarehouseActivityDescriptionText(self, value):
        self.WarehouseActivityDescriptionText.append(value)
    def insert_WarehouseActivityDescriptionText_at(self, index, value):
        self.WarehouseActivityDescriptionText.insert(index, value)
    def replace_WarehouseActivityDescriptionText_at(self, index, value):
        self.WarehouseActivityDescriptionText[index] = value
    def get_AdditionalInfoText(self):
        return self.AdditionalInfoText
    def set_AdditionalInfoText(self, AdditionalInfoText):
        self.AdditionalInfoText = AdditionalInfoText
    def add_AdditionalInfoText(self, value):
        self.AdditionalInfoText.append(value)
    def insert_AdditionalInfoText_at(self, index, value):
        self.AdditionalInfoText.insert(index, value)
    def replace_AdditionalInfoText_at(self, index, value):
        self.AdditionalInfoText[index] = value
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_IndicatorType(self, value):
        result = True
        # Validate type IndicatorType, a restriction on CategoryCust:IndicatorCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_TransportModeCodeType(self, value):
        result = True
        # Validate type TransportModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TransportModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText4000Type(self, value):
        result = True
        # Validate type FreeText4000Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4000:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText4000Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText4000Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.AddressDetails is not None or
            self.WarehouseKindCode is not None or
            self.TypeWarehouseIndicator is not None or
            self.TotalAreaMeasure is not None or
            self.CubageMeasure is not None or
            self.TransportModeCode or
            self.WarehouseActivityDescriptionText or
            self.AdditionalInfoText
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='WarehouseDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WarehouseDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WarehouseDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WarehouseDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WarehouseDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='WarehouseDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='WarehouseDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AddressDetails is not None:
            namespaceprefix_ = self.AddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressDetails_nsprefix_) else ''
            self.AddressDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddressDetails', pretty_print=pretty_print)
        if self.WarehouseKindCode is not None:
            namespaceprefix_ = self.WarehouseKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.WarehouseKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWarehouseKindCode>%s</%sWarehouseKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WarehouseKindCode), input_name='WarehouseKindCode')), namespaceprefix_ , eol_))
        if self.TypeWarehouseIndicator is not None:
            namespaceprefix_ = self.TypeWarehouseIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.TypeWarehouseIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeWarehouseIndicator>%s</%sTypeWarehouseIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.TypeWarehouseIndicator, input_name='TypeWarehouseIndicator'), namespaceprefix_ , eol_))
        if self.TotalAreaMeasure is not None:
            namespaceprefix_ = self.TotalAreaMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalAreaMeasure_nsprefix_) else ''
            self.TotalAreaMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalAreaMeasure', pretty_print=pretty_print)
        if self.CubageMeasure is not None:
            namespaceprefix_ = self.CubageMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.CubageMeasure_nsprefix_) else ''
            self.CubageMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CubageMeasure', pretty_print=pretty_print)
        for TransportModeCode_ in self.TransportModeCode:
            namespaceprefix_ = self.TransportModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportModeCode>%s</%sTransportModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(TransportModeCode_), input_name='TransportModeCode')), namespaceprefix_ , eol_))
        for WarehouseActivityDescriptionText_ in self.WarehouseActivityDescriptionText:
            namespaceprefix_ = self.WarehouseActivityDescriptionText_nsprefix_ + ':' if (UseCapturedNS_ and self.WarehouseActivityDescriptionText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWarehouseActivityDescriptionText>%s</%sWarehouseActivityDescriptionText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(WarehouseActivityDescriptionText_), input_name='WarehouseActivityDescriptionText')), namespaceprefix_ , eol_))
        for AdditionalInfoText_ in self.AdditionalInfoText:
            namespaceprefix_ = self.AdditionalInfoText_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalInfoText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalInfoText>%s</%sAdditionalInfoText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(AdditionalInfoText_), input_name='AdditionalInfoText')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AddressDetails':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddressDetails = obj_
            obj_.original_tagname_ = 'AddressDetails'
        elif nodeName_ == 'WarehouseKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'WarehouseKindCode')
            value_ = self.gds_validate_string(value_, node, 'WarehouseKindCode')
            self.WarehouseKindCode = value_
            self.WarehouseKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.WarehouseKindCode)
        elif nodeName_ == 'TypeWarehouseIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'TypeWarehouseIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'TypeWarehouseIndicator')
            self.TypeWarehouseIndicator = ival_
            self.TypeWarehouseIndicator_nsprefix_ = child_.prefix
            # validate type IndicatorType
            self.validate_IndicatorType(self.TypeWarehouseIndicator)
        elif nodeName_ == 'TotalAreaMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalAreaMeasure = obj_
            obj_.original_tagname_ = 'TotalAreaMeasure'
        elif nodeName_ == 'CubageMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CubageMeasure = obj_
            obj_.original_tagname_ = 'CubageMeasure'
        elif nodeName_ == 'TransportModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportModeCode')
            value_ = self.gds_validate_string(value_, node, 'TransportModeCode')
            self.TransportModeCode.append(value_)
            self.TransportModeCode_nsprefix_ = child_.prefix
            # validate type TransportModeCodeType
            self.validate_TransportModeCodeType(self.TransportModeCode[-1])
        elif nodeName_ == 'WarehouseActivityDescriptionText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WarehouseActivityDescriptionText')
            value_ = self.gds_validate_string(value_, node, 'WarehouseActivityDescriptionText')
            self.WarehouseActivityDescriptionText.append(value_)
            self.WarehouseActivityDescriptionText_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.WarehouseActivityDescriptionText[-1])
        elif nodeName_ == 'AdditionalInfoText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AdditionalInfoText')
            value_ = self.gds_validate_string(value_, node, 'AdditionalInfoText')
            self.AdditionalInfoText.append(value_)
            self.AdditionalInfoText_nsprefix_ = child_.prefix
            # validate type FreeText4000Type
            self.validate_FreeText4000Type(self.AdditionalInfoText[-1])
# end class WarehouseDetailsType


class BasePresentedDocDetailsType(DocBaseType):
    """BasePresentedDocDetailsType -- Б
    а
    з
    о
    в
    ы
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    о
    п
    р
    е
    д
    о
    с
    т
    а
    в
    л
    е
    н
    н
    о
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    DocKindCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    AuthorityName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    а
    л
    и
    б
    о
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ,
    в
    ы
    д
    а
    в
    ш
    е
    й
    д
    о
    к
    у
    м
    е
    н
    т
    AuthorityId -- С
    т
    р
    о
    к
    а
    с
    и
    м
    в
    о
    л
    о
    в
    ,
    и
    д
    е
    н
    т
    и
    ф
    и
    ц
    и
    р
    у
    ю
    щ
    а
    я
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    ы
    й
    и
    л
    и
    м
    е
    ж
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    (
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    ю
    ),
    в
    ы
    д
    а
    в
    ш
    и
    й
    и
    л
    и
    у
    т
    в
    е
    р
    д
    и
    в
    ш
    и
    й
    д
    о
    к
    у
    м
    е
    н
    т
    InformationSourceDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    м
    и
    с
    т
    о
    ч
    н
    и
    к
    е
    и
    л
    и
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    м
    р
    е
    с
    у
    р
    с
    е
    LineId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    й
    д
    л
    я
    ц
    е
    л
    е
    й
    о
    д
    н
    о
    з
    н
    а
    ч
    н
    о
    й
    с
    с
    ы
    л
    к
    и
    н
    а
    з
    а
    п
    и
    с
    ь
    ,
    и
    л
    и
    п
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    з
    а
    п
    и
    с
    и
    EDocCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    (
    с
    в
    е
    д
    е
    н
    и
    й
    )
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    р
    е
    е
    с
    т
    р
    о
    м
    с
    т
    р
    у
    к
    т
    у
    р
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    DocArchIdDetails -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    у
    (
    с
    в
    е
    д
    е
    н
    и
    я
    м
    )
    п
    р
    и
    р
    а
    з
    м
    е
    щ
    е
    н
    и
    и
    в
    х
    р
    а
    н
    и
    л
    и
    щ
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocStartDate=None, DocValidityDate=None, CountryCode=None, DocKindCode=None, AuthorityName=None, AuthorityId=None, InformationSourceDetails=None, LineId=None, EDocCode=None, DocArchIdDetails=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("BasePresentedDocDetailsType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, DocStartDate, DocValidityDate, CountryCode, DocKindCode, extensiontype_,  **kwargs_)
        self.DocKindCode = DocKindCode
        self.validate_CustomsDocumentCodeType(self.DocKindCode)
        self.DocKindCode_nsprefix_ = "clt_ru"
        self.AuthorityName = AuthorityName
        self.validate_Name300Type(self.AuthorityName)
        self.AuthorityName_nsprefix_ = "RUSclt_ru"
        self.AuthorityId = AuthorityId
        self.validate_CodeVariable20Type(self.AuthorityId)
        self.AuthorityId_nsprefix_ = "clt_ru"
        self.InformationSourceDetails = InformationSourceDetails
        self.InformationSourceDetails_nsprefix_ = "RUDECLcat"
        self.LineId = LineId
        self.validate_Text40Type(self.LineId)
        self.LineId_nsprefix_ = "clt_ru"
        self.EDocCode = EDocCode
        self.validate_CodeVariable10Type(self.EDocCode)
        self.EDocCode_nsprefix_ = "clt_ru"
        self.DocArchIdDetails = DocArchIdDetails
        self.DocArchIdDetails_nsprefix_ = "catESAD_cu"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BasePresentedDocDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BasePresentedDocDetailsType.subclass:
            return BasePresentedDocDetailsType.subclass(*args_, **kwargs_)
        else:
            return BasePresentedDocDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocKindCode(self):
        return self.DocKindCode
    def set_DocKindCode(self, DocKindCode):
        self.DocKindCode = DocKindCode
    def get_AuthorityName(self):
        return self.AuthorityName
    def set_AuthorityName(self, AuthorityName):
        self.AuthorityName = AuthorityName
    def get_AuthorityId(self):
        return self.AuthorityId
    def set_AuthorityId(self, AuthorityId):
        self.AuthorityId = AuthorityId
    def get_InformationSourceDetails(self):
        return self.InformationSourceDetails
    def set_InformationSourceDetails(self, InformationSourceDetails):
        self.InformationSourceDetails = InformationSourceDetails
    def get_LineId(self):
        return self.LineId
    def set_LineId(self, LineId):
        self.LineId = LineId
    def get_EDocCode(self):
        return self.EDocCode
    def set_EDocCode(self, EDocCode):
        self.EDocCode = EDocCode
    def get_DocArchIdDetails(self):
        return self.DocArchIdDetails
    def set_DocArchIdDetails(self, DocArchIdDetails):
        self.DocArchIdDetails = DocArchIdDetails
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Name300Type(self, value):
        result = True
        # Validate type Name300Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Name300Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Name300Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable10Type(self, value):
        result = True
        # Validate type CodeVariable10Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable10Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable10Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocKindCode is not None or
            self.AuthorityName is not None or
            self.AuthorityId is not None or
            self.InformationSourceDetails is not None or
            self.LineId is not None or
            self.EDocCode is not None or
            self.DocArchIdDetails is not None or
            super(BasePresentedDocDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='BasePresentedDocDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BasePresentedDocDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BasePresentedDocDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasePresentedDocDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BasePresentedDocDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='BasePresentedDocDetailsType'):
        super(BasePresentedDocDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BasePresentedDocDetailsType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='BasePresentedDocDetailsType', fromsubclass_=False, pretty_print=True):
        super(BasePresentedDocDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocKindCode is not None:
            namespaceprefix_ = self.DocKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocKindCode>%s</%sDocKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocKindCode), input_name='DocKindCode')), namespaceprefix_ , eol_))
        if self.AuthorityName is not None:
            namespaceprefix_ = self.AuthorityName_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorityName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorityName>%s</%sAuthorityName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorityName), input_name='AuthorityName')), namespaceprefix_ , eol_))
        if self.AuthorityId is not None:
            namespaceprefix_ = self.AuthorityId_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorityId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorityId>%s</%sAuthorityId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorityId), input_name='AuthorityId')), namespaceprefix_ , eol_))
        if self.InformationSourceDetails is not None:
            namespaceprefix_ = self.InformationSourceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.InformationSourceDetails_nsprefix_) else ''
            self.InformationSourceDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformationSourceDetails', pretty_print=pretty_print)
        if self.LineId is not None:
            namespaceprefix_ = self.LineId_nsprefix_ + ':' if (UseCapturedNS_ and self.LineId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineId>%s</%sLineId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LineId), input_name='LineId')), namespaceprefix_ , eol_))
        if self.EDocCode is not None:
            namespaceprefix_ = self.EDocCode_nsprefix_ + ':' if (UseCapturedNS_ and self.EDocCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEDocCode>%s</%sEDocCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EDocCode), input_name='EDocCode')), namespaceprefix_ , eol_))
        if self.DocArchIdDetails is not None:
            namespaceprefix_ = self.DocArchIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DocArchIdDetails_nsprefix_) else ''
            self.DocArchIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocArchIdDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(BasePresentedDocDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocKindCode')
            value_ = self.gds_validate_string(value_, node, 'DocKindCode')
            self.DocKindCode = value_
            self.DocKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocKindCode)
        elif nodeName_ == 'AuthorityName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AuthorityName')
            value_ = self.gds_validate_string(value_, node, 'AuthorityName')
            self.AuthorityName = value_
            self.AuthorityName_nsprefix_ = child_.prefix
            # validate type Name300Type
            self.validate_Name300Type(self.AuthorityName)
        elif nodeName_ == 'AuthorityId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AuthorityId')
            value_ = self.gds_validate_string(value_, node, 'AuthorityId')
            self.AuthorityId = value_
            self.AuthorityId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.AuthorityId)
        elif nodeName_ == 'InformationSourceDetails':
            obj_ = InformationSourceDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformationSourceDetails = obj_
            obj_.original_tagname_ = 'InformationSourceDetails'
        elif nodeName_ == 'LineId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LineId')
            value_ = self.gds_validate_string(value_, node, 'LineId')
            self.LineId = value_
            self.LineId_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.LineId)
        elif nodeName_ == 'EDocCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EDocCode')
            value_ = self.gds_validate_string(value_, node, 'EDocCode')
            self.EDocCode = value_
            self.EDocCode_nsprefix_ = child_.prefix
            # validate type CodeVariable10Type
            self.validate_CodeVariable10Type(self.EDocCode)
        elif nodeName_ == 'DocArchIdDetails':
            class_obj_ = self.get_class_obj_(child_, RFBasePresentedDocIDType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocArchIdDetails = obj_
            obj_.original_tagname_ = 'DocArchIdDetails'
        super(BasePresentedDocDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class BasePresentedDocDetailsType


class BrokerRegistryDocDetailsType(GeneratedsSuper):
    """BrokerRegistryDocDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    й
    DocKindCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    CountryA2Code -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    RegistrationNumberId -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    в
    р
    е
    е
    с
    т
    р
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    й
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocKindCode=None, CountryA2Code=None, RegistrationNumberId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.DocKindCode = DocKindCode
        self.validate_CustomsDocumentCodeType(self.DocKindCode)
        self.DocKindCode_nsprefix_ = "clt_ru"
        self.CountryA2Code = CountryA2Code
        self.validate_CountryA2CodeType(self.CountryA2Code)
        self.CountryA2Code_nsprefix_ = "clt_ru"
        self.RegistrationNumberId = RegistrationNumberId
        self.validate_Id25Type(self.RegistrationNumberId)
        self.RegistrationNumberId_nsprefix_ = "RUSclt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BrokerRegistryDocDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BrokerRegistryDocDetailsType.subclass:
            return BrokerRegistryDocDetailsType.subclass(*args_, **kwargs_)
        else:
            return BrokerRegistryDocDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocKindCode(self):
        return self.DocKindCode
    def set_DocKindCode(self, DocKindCode):
        self.DocKindCode = DocKindCode
    def get_CountryA2Code(self):
        return self.CountryA2Code
    def set_CountryA2Code(self, CountryA2Code):
        self.CountryA2Code = CountryA2Code
    def get_RegistrationNumberId(self):
        return self.RegistrationNumberId
    def set_RegistrationNumberId(self, RegistrationNumberId):
        self.RegistrationNumberId = RegistrationNumberId
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Id25Type(self, value):
        result = True
        # Validate type Id25Type, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Id25Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Id25Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocKindCode is not None or
            self.CountryA2Code is not None or
            self.RegistrationNumberId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='BrokerRegistryDocDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BrokerRegistryDocDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BrokerRegistryDocDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BrokerRegistryDocDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BrokerRegistryDocDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='BrokerRegistryDocDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='BrokerRegistryDocDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocKindCode is not None:
            namespaceprefix_ = self.DocKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocKindCode>%s</%sDocKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocKindCode), input_name='DocKindCode')), namespaceprefix_ , eol_))
        if self.CountryA2Code is not None:
            namespaceprefix_ = self.CountryA2Code_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryA2Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryA2Code>%s</%sCountryA2Code>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryA2Code), input_name='CountryA2Code')), namespaceprefix_ , eol_))
        if self.RegistrationNumberId is not None:
            namespaceprefix_ = self.RegistrationNumberId_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationNumberId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationNumberId>%s</%sRegistrationNumberId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumberId), input_name='RegistrationNumberId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocKindCode')
            value_ = self.gds_validate_string(value_, node, 'DocKindCode')
            self.DocKindCode = value_
            self.DocKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocKindCode)
        elif nodeName_ == 'CountryA2Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryA2Code')
            value_ = self.gds_validate_string(value_, node, 'CountryA2Code')
            self.CountryA2Code = value_
            self.CountryA2Code_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryA2Code)
        elif nodeName_ == 'RegistrationNumberId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegistrationNumberId')
            value_ = self.gds_validate_string(value_, node, 'RegistrationNumberId')
            self.RegistrationNumberId = value_
            self.RegistrationNumberId_nsprefix_ = child_.prefix
            # validate type Id25Type
            self.validate_Id25Type(self.RegistrationNumberId)
# end class BrokerRegistryDocDetailsType


class CalculationType(GeneratedsSuper):
    """CalculationType -- Р
    а
    с
    ч
    е
    т
    р
    а
    з
    м
    е
    р
    а
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    PaymentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    л
    а
    т
    е
    ж
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    н
    а
    л
    о
    г
    о
    в
    ,
    с
    б
    о
    р
    о
    в
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    в
    з
    и
    м
    а
    н
    и
    е
    к
    о
    т
    о
    р
    ы
    х
    в
    о
    з
    л
    о
    ж
    е
    н
    о
    н
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    о
    р
    г
    а
    н
    ы
    .
    TaxBase -- О
    с
    н
    о
    в
    а
    н
    а
    ч
    и
    с
    л
    е
    н
    и
    я
    TaxBaseCurrencyCode -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    о
    с
    н
    о
    в
    ы
    н
    а
    ч
    и
    с
    л
    е
    н
    и
    я
    (
    а
    д
    в
    а
    л
    о
    р
    н
    а
    я
    с
    т
    а
    в
    к
    а
    )
    TaxBaseQualifierCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    о
    с
    н
    о
    в
    ы
    н
    а
    ч
    и
    с
    л
    е
    н
    и
    я
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    RateTypeCode -- В
    и
    д
    с
    т
    а
    в
    к
    и
    (
    а
    д
    в
    а
    л
    о
    р
    н
    а
    я
    -"%",
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    - "*")
    Rate -- С
    т
    а
    в
    к
    а
    .
    RateTNVEDQualifierCode -- К
    о
    д
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    с
    т
    а
    в
    к
    и
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    RateCurrencyCode -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    т
    а
    в
    к
    и
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    NumberDays -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    к
    а
    л
    е
    н
    д
    а
    р
    н
    ы
    х
    д
    н
    е
    й
    NumberStages -- Ч
    и
    с
    л
    о
    э
    т
    а
    п
    о
    в
    NumberMonths -- Ч
    и
    с
    л
    о
    п
    о
    л
    н
    ы
    х
    и
    н
    е
    п
    о
    л
    н
    ы
    х
    к
    а
    л
    е
    н
    д
    а
    р
    н
    ы
    х
    м
    е
    с
    я
    ц
    е
    в
    WeightingFactor -- В
    е
    с
    о
    в
    о
    й
    к
    о
    э
    ф
    ф
    и
    ц
    и
    е
    н
    т
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    (
    с
    п
    е
    ц
    и
    ф
    и
    ч
    е
    с
    к
    а
    я
    с
    т
    а
    в
    к
    а
    )
    RateUseDate -- Д
    а
    т
    а
    п
    р
    и
    м
    е
    н
    е
    н
    и
    я
    с
    т
    а
    в
    к
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    л
    а
    т
    е
    ж
    а
    PaymentCode -- К
    о
    д
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    е
    й
    у
    п
    л
    а
    т
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    в
    з
    и
    м
    а
    н
    и
    е
    к
    о
    т
    о
    р
    ы
    х
    в
    о
    з
    л
    о
    ж
    е
    н
    о
    н
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    о
    р
    г
    а
    н
    ы
    PaymentAmount -- С
    у
    м
    м
    а
    п
    л
    а
    т
    е
    ж
    а
    PaymentCurrencyCode -- Ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    у
    м
    м
    ы
    п
    л
    а
    т
    е
    ж
    а
    TNVEDGroup -- Н
    о
    м
    е
    р
    г
    р
    у
    п
    п
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    ReferenceLineId -- С
    с
    ы
    л
    о
    ч
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    з
    а
    п
    и
    с
    и
    в
    с
    в
    е
    д
    е
    н
    и
    я
    х
    о
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    RefReferenceLineId -- С
    с
    ы
    л
    о
    ч
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    з
    а
    п
    и
    с
    и
    в
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    и
    л
    и
    с
    в
    е
    д
    е
    н
    и
    я
    х
    ReferenceConsignmentItemOrdinal -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    в
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentModeCode=None, TaxBase=None, TaxBaseCurrencyCode=None, TaxBaseQualifierCode=None, RateTypeCode=None, Rate=None, RateTNVEDQualifierCode=None, RateCurrencyCode=None, NumberDays=None, NumberStages=None, NumberMonths=None, WeightingFactor=None, RateUseDate=None, PaymentCode=None, PaymentAmount=None, PaymentCurrencyCode=None, TNVEDGroup=None, ReferenceLineId=None, RefReferenceLineId=None, ReferenceConsignmentItemOrdinal=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.PaymentModeCode = PaymentModeCode
        self.validate_CUCustomsPaymentCodeType(self.PaymentModeCode)
        self.PaymentModeCode_nsprefix_ = "clt_ru"
        self.TaxBase = TaxBase
        self.validate_QuantityBasisType(self.TaxBase)
        self.TaxBase_nsprefix_ = "clt_ru"
        self.TaxBaseCurrencyCode = TaxBaseCurrencyCode
        self.validate_CurrencyN3CodeType(self.TaxBaseCurrencyCode)
        self.TaxBaseCurrencyCode_nsprefix_ = "clt_ru"
        self.TaxBaseQualifierCode = TaxBaseQualifierCode
        self.validate_CodeVariable20Type(self.TaxBaseQualifierCode)
        self.TaxBaseQualifierCode_nsprefix_ = "clt_ru"
        self.RateTypeCode = RateTypeCode
        self.validate_LetterIndicatorType(self.RateTypeCode)
        self.RateTypeCode_nsprefix_ = "clt_ru"
        self.Rate = Rate
        self.validate_RateType(self.Rate)
        self.Rate_nsprefix_ = "cltESAD_cu"
        self.RateTNVEDQualifierCode = RateTNVEDQualifierCode
        self.validate_MeasureUnitQualifierCodeType(self.RateTNVEDQualifierCode)
        self.RateTNVEDQualifierCode_nsprefix_ = "clt_ru"
        self.RateCurrencyCode = RateCurrencyCode
        self.validate_CurrencyN3CodeType(self.RateCurrencyCode)
        self.RateCurrencyCode_nsprefix_ = "clt_ru"
        self.NumberDays = NumberDays
        self.validate_Count4Type(self.NumberDays)
        self.NumberDays_nsprefix_ = "clt_ru"
        self.NumberStages = NumberStages
        self.validate_Count3Type(self.NumberStages)
        self.NumberStages_nsprefix_ = "clt_ru"
        self.NumberMonths = NumberMonths
        self.validate_Count3Type(self.NumberMonths)
        self.NumberMonths_nsprefix_ = "clt_ru"
        self.WeightingFactor = WeightingFactor
        self.validate_WeightingFactorType(self.WeightingFactor)
        self.WeightingFactor_nsprefix_ = "cltESAD_cu"
        if isinstance(RateUseDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RateUseDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RateUseDate
        self.RateUseDate = initvalue_
        self.RateUseDate_nsprefix_ = "clt_ru"
        self.PaymentCode = PaymentCode
        self.validate_Code2Type(self.PaymentCode)
        self.PaymentCode_nsprefix_ = "clt_ru"
        self.PaymentAmount = PaymentAmount
        self.validate_AmountType(self.PaymentAmount)
        self.PaymentAmount_nsprefix_ = "clt_ru"
        self.PaymentCurrencyCode = PaymentCurrencyCode
        self.validate_CurrencyN3CodeType(self.PaymentCurrencyCode)
        self.PaymentCurrencyCode_nsprefix_ = "clt_ru"
        self.TNVEDGroup = TNVEDGroup
        self.validate_GoodsNomenclatureCodeType(self.TNVEDGroup)
        self.TNVEDGroup_nsprefix_ = "clt_ru"
        self.ReferenceLineId = ReferenceLineId
        self.validate_Text40Type(self.ReferenceLineId)
        self.ReferenceLineId_nsprefix_ = "clt_ru"
        self.RefReferenceLineId = RefReferenceLineId
        self.validate_Text40Type(self.RefReferenceLineId)
        self.RefReferenceLineId_nsprefix_ = "clt_ru"
        self.ReferenceConsignmentItemOrdinal = ReferenceConsignmentItemOrdinal
        self.validate_Count3Type(self.ReferenceConsignmentItemOrdinal)
        self.ReferenceConsignmentItemOrdinal_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CalculationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CalculationType.subclass:
            return CalculationType.subclass(*args_, **kwargs_)
        else:
            return CalculationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentModeCode(self):
        return self.PaymentModeCode
    def set_PaymentModeCode(self, PaymentModeCode):
        self.PaymentModeCode = PaymentModeCode
    def get_TaxBase(self):
        return self.TaxBase
    def set_TaxBase(self, TaxBase):
        self.TaxBase = TaxBase
    def get_TaxBaseCurrencyCode(self):
        return self.TaxBaseCurrencyCode
    def set_TaxBaseCurrencyCode(self, TaxBaseCurrencyCode):
        self.TaxBaseCurrencyCode = TaxBaseCurrencyCode
    def get_TaxBaseQualifierCode(self):
        return self.TaxBaseQualifierCode
    def set_TaxBaseQualifierCode(self, TaxBaseQualifierCode):
        self.TaxBaseQualifierCode = TaxBaseQualifierCode
    def get_RateTypeCode(self):
        return self.RateTypeCode
    def set_RateTypeCode(self, RateTypeCode):
        self.RateTypeCode = RateTypeCode
    def get_Rate(self):
        return self.Rate
    def set_Rate(self, Rate):
        self.Rate = Rate
    def get_RateTNVEDQualifierCode(self):
        return self.RateTNVEDQualifierCode
    def set_RateTNVEDQualifierCode(self, RateTNVEDQualifierCode):
        self.RateTNVEDQualifierCode = RateTNVEDQualifierCode
    def get_RateCurrencyCode(self):
        return self.RateCurrencyCode
    def set_RateCurrencyCode(self, RateCurrencyCode):
        self.RateCurrencyCode = RateCurrencyCode
    def get_NumberDays(self):
        return self.NumberDays
    def set_NumberDays(self, NumberDays):
        self.NumberDays = NumberDays
    def get_NumberStages(self):
        return self.NumberStages
    def set_NumberStages(self, NumberStages):
        self.NumberStages = NumberStages
    def get_NumberMonths(self):
        return self.NumberMonths
    def set_NumberMonths(self, NumberMonths):
        self.NumberMonths = NumberMonths
    def get_WeightingFactor(self):
        return self.WeightingFactor
    def set_WeightingFactor(self, WeightingFactor):
        self.WeightingFactor = WeightingFactor
    def get_RateUseDate(self):
        return self.RateUseDate
    def set_RateUseDate(self, RateUseDate):
        self.RateUseDate = RateUseDate
    def get_PaymentCode(self):
        return self.PaymentCode
    def set_PaymentCode(self, PaymentCode):
        self.PaymentCode = PaymentCode
    def get_PaymentAmount(self):
        return self.PaymentAmount
    def set_PaymentAmount(self, PaymentAmount):
        self.PaymentAmount = PaymentAmount
    def get_PaymentCurrencyCode(self):
        return self.PaymentCurrencyCode
    def set_PaymentCurrencyCode(self, PaymentCurrencyCode):
        self.PaymentCurrencyCode = PaymentCurrencyCode
    def get_TNVEDGroup(self):
        return self.TNVEDGroup
    def set_TNVEDGroup(self, TNVEDGroup):
        self.TNVEDGroup = TNVEDGroup
    def get_ReferenceLineId(self):
        return self.ReferenceLineId
    def set_ReferenceLineId(self, ReferenceLineId):
        self.ReferenceLineId = ReferenceLineId
    def get_RefReferenceLineId(self):
        return self.RefReferenceLineId
    def set_RefReferenceLineId(self, RefReferenceLineId):
        self.RefReferenceLineId = RefReferenceLineId
    def get_ReferenceConsignmentItemOrdinal(self):
        return self.ReferenceConsignmentItemOrdinal
    def set_ReferenceConsignmentItemOrdinal(self, ReferenceConsignmentItemOrdinal):
        self.ReferenceConsignmentItemOrdinal = ReferenceConsignmentItemOrdinal
    def validate_CUCustomsPaymentCodeType(self, value):
        result = True
        # Validate type CUCustomsPaymentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CUCustomsPaymentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CurrencyN3CodeType(self, value):
        result = True
        # Validate type CurrencyN3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CurrencyN3CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CurrencyN3CodeType_patterns_, ))
                result = False
        return result
    validate_CurrencyN3CodeType_patterns_ = [['^(\\d{3})$']]
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_RateType(self, value):
        result = True
        # Validate type RateType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on RateType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_MeasureUnitQualifierCodeType(self, value):
        result = True
        # Validate type MeasureUnitQualifierCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on MeasureUnitQualifierCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count4Type(self, value):
        result = True
        # Validate type Count4Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count4Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count4Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_WeightingFactorType(self, value):
        result = True
        # Validate type WeightingFactorType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on WeightingFactorType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 9:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on WeightingFactorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_GoodsNomenclatureCodeType(self, value):
        result = True
        # Validate type GoodsNomenclatureCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_GoodsNomenclatureCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_GoodsNomenclatureCodeType_patterns_, ))
                result = False
        return result
    validate_GoodsNomenclatureCodeType_patterns_ = [['^(\\d{4,10})$']]
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PaymentModeCode is not None or
            self.TaxBase is not None or
            self.TaxBaseCurrencyCode is not None or
            self.TaxBaseQualifierCode is not None or
            self.RateTypeCode is not None or
            self.Rate is not None or
            self.RateTNVEDQualifierCode is not None or
            self.RateCurrencyCode is not None or
            self.NumberDays is not None or
            self.NumberStages is not None or
            self.NumberMonths is not None or
            self.WeightingFactor is not None or
            self.RateUseDate is not None or
            self.PaymentCode is not None or
            self.PaymentAmount is not None or
            self.PaymentCurrencyCode is not None or
            self.TNVEDGroup is not None or
            self.ReferenceLineId is not None or
            self.RefReferenceLineId is not None or
            self.ReferenceConsignmentItemOrdinal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='CalculationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CalculationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CalculationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CalculationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CalculationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='CalculationType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0" ', name_='CalculationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentModeCode is not None:
            namespaceprefix_ = self.PaymentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentModeCode>%s</%sPaymentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentModeCode), input_name='PaymentModeCode')), namespaceprefix_ , eol_))
        if self.TaxBase is not None:
            namespaceprefix_ = self.TaxBase_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxBase_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxBase>%s</%sTaxBase>%s' % (namespaceprefix_ , self.gds_format_decimal(self.TaxBase, input_name='TaxBase'), namespaceprefix_ , eol_))
        if self.TaxBaseCurrencyCode is not None:
            namespaceprefix_ = self.TaxBaseCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxBaseCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxBaseCurrencyCode>%s</%sTaxBaseCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxBaseCurrencyCode), input_name='TaxBaseCurrencyCode')), namespaceprefix_ , eol_))
        if self.TaxBaseQualifierCode is not None:
            namespaceprefix_ = self.TaxBaseQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TaxBaseQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxBaseQualifierCode>%s</%sTaxBaseQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TaxBaseQualifierCode), input_name='TaxBaseQualifierCode')), namespaceprefix_ , eol_))
        if self.RateTypeCode is not None:
            namespaceprefix_ = self.RateTypeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTypeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTypeCode>%s</%sRateTypeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTypeCode), input_name='RateTypeCode')), namespaceprefix_ , eol_))
        if self.Rate is not None:
            namespaceprefix_ = self.Rate_nsprefix_ + ':' if (UseCapturedNS_ and self.Rate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate>%s</%sRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Rate, input_name='Rate'), namespaceprefix_ , eol_))
        if self.RateTNVEDQualifierCode is not None:
            namespaceprefix_ = self.RateTNVEDQualifierCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RateTNVEDQualifierCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateTNVEDQualifierCode>%s</%sRateTNVEDQualifierCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateTNVEDQualifierCode), input_name='RateTNVEDQualifierCode')), namespaceprefix_ , eol_))
        if self.RateCurrencyCode is not None:
            namespaceprefix_ = self.RateCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RateCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateCurrencyCode>%s</%sRateCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RateCurrencyCode), input_name='RateCurrencyCode')), namespaceprefix_ , eol_))
        if self.NumberDays is not None:
            namespaceprefix_ = self.NumberDays_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberDays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberDays>%s</%sNumberDays>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberDays, input_name='NumberDays'), namespaceprefix_ , eol_))
        if self.NumberStages is not None:
            namespaceprefix_ = self.NumberStages_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberStages_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberStages>%s</%sNumberStages>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberStages, input_name='NumberStages'), namespaceprefix_ , eol_))
        if self.NumberMonths is not None:
            namespaceprefix_ = self.NumberMonths_nsprefix_ + ':' if (UseCapturedNS_ and self.NumberMonths_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumberMonths>%s</%sNumberMonths>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumberMonths, input_name='NumberMonths'), namespaceprefix_ , eol_))
        if self.WeightingFactor is not None:
            namespaceprefix_ = self.WeightingFactor_nsprefix_ + ':' if (UseCapturedNS_ and self.WeightingFactor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWeightingFactor>%s</%sWeightingFactor>%s' % (namespaceprefix_ , self.gds_format_decimal(self.WeightingFactor, input_name='WeightingFactor'), namespaceprefix_ , eol_))
        if self.RateUseDate is not None:
            namespaceprefix_ = self.RateUseDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RateUseDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateUseDate>%s</%sRateUseDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RateUseDate, input_name='RateUseDate'), namespaceprefix_ , eol_))
        if self.PaymentCode is not None:
            namespaceprefix_ = self.PaymentCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentCode>%s</%sPaymentCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentCode), input_name='PaymentCode')), namespaceprefix_ , eol_))
        if self.PaymentAmount is not None:
            namespaceprefix_ = self.PaymentAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentAmount>%s</%sPaymentAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PaymentAmount, input_name='PaymentAmount'), namespaceprefix_ , eol_))
        if self.PaymentCurrencyCode is not None:
            namespaceprefix_ = self.PaymentCurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentCurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentCurrencyCode>%s</%sPaymentCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentCurrencyCode), input_name='PaymentCurrencyCode')), namespaceprefix_ , eol_))
        if self.TNVEDGroup is not None:
            namespaceprefix_ = self.TNVEDGroup_nsprefix_ + ':' if (UseCapturedNS_ and self.TNVEDGroup_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTNVEDGroup>%s</%sTNVEDGroup>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TNVEDGroup), input_name='TNVEDGroup')), namespaceprefix_ , eol_))
        if self.ReferenceLineId is not None:
            namespaceprefix_ = self.ReferenceLineId_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceLineId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceLineId>%s</%sReferenceLineId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReferenceLineId), input_name='ReferenceLineId')), namespaceprefix_ , eol_))
        if self.RefReferenceLineId is not None:
            namespaceprefix_ = self.RefReferenceLineId_nsprefix_ + ':' if (UseCapturedNS_ and self.RefReferenceLineId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefReferenceLineId>%s</%sRefReferenceLineId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RefReferenceLineId), input_name='RefReferenceLineId')), namespaceprefix_ , eol_))
        if self.ReferenceConsignmentItemOrdinal is not None:
            namespaceprefix_ = self.ReferenceConsignmentItemOrdinal_nsprefix_ + ':' if (UseCapturedNS_ and self.ReferenceConsignmentItemOrdinal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReferenceConsignmentItemOrdinal>%s</%sReferenceConsignmentItemOrdinal>%s' % (namespaceprefix_ , self.gds_format_integer(self.ReferenceConsignmentItemOrdinal, input_name='ReferenceConsignmentItemOrdinal'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentModeCode')
            self.PaymentModeCode = value_
            self.PaymentModeCode_nsprefix_ = child_.prefix
            # validate type CUCustomsPaymentCodeType
            self.validate_CUCustomsPaymentCodeType(self.PaymentModeCode)
        elif nodeName_ == 'TaxBase' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'TaxBase')
            fval_ = self.gds_validate_decimal(fval_, node, 'TaxBase')
            self.TaxBase = fval_
            self.TaxBase_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.TaxBase)
        elif nodeName_ == 'TaxBaseCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TaxBaseCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'TaxBaseCurrencyCode')
            self.TaxBaseCurrencyCode = value_
            self.TaxBaseCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.TaxBaseCurrencyCode)
        elif nodeName_ == 'TaxBaseQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TaxBaseQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'TaxBaseQualifierCode')
            self.TaxBaseQualifierCode = value_
            self.TaxBaseQualifierCode_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.TaxBaseQualifierCode)
        elif nodeName_ == 'RateTypeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateTypeCode')
            value_ = self.gds_validate_string(value_, node, 'RateTypeCode')
            self.RateTypeCode = value_
            self.RateTypeCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.RateTypeCode)
        elif nodeName_ == 'Rate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Rate')
            fval_ = self.gds_validate_decimal(fval_, node, 'Rate')
            self.Rate = fval_
            self.Rate_nsprefix_ = child_.prefix
            # validate type RateType
            self.validate_RateType(self.Rate)
        elif nodeName_ == 'RateTNVEDQualifierCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateTNVEDQualifierCode')
            value_ = self.gds_validate_string(value_, node, 'RateTNVEDQualifierCode')
            self.RateTNVEDQualifierCode = value_
            self.RateTNVEDQualifierCode_nsprefix_ = child_.prefix
            # validate type MeasureUnitQualifierCodeType
            self.validate_MeasureUnitQualifierCodeType(self.RateTNVEDQualifierCode)
        elif nodeName_ == 'RateCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RateCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'RateCurrencyCode')
            self.RateCurrencyCode = value_
            self.RateCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.RateCurrencyCode)
        elif nodeName_ == 'NumberDays' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberDays')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberDays')
            self.NumberDays = ival_
            self.NumberDays_nsprefix_ = child_.prefix
            # validate type Count4Type
            self.validate_Count4Type(self.NumberDays)
        elif nodeName_ == 'NumberStages' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberStages')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberStages')
            self.NumberStages = ival_
            self.NumberStages_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.NumberStages)
        elif nodeName_ == 'NumberMonths' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'NumberMonths')
            ival_ = self.gds_validate_integer(ival_, node, 'NumberMonths')
            self.NumberMonths = ival_
            self.NumberMonths_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.NumberMonths)
        elif nodeName_ == 'WeightingFactor' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'WeightingFactor')
            fval_ = self.gds_validate_decimal(fval_, node, 'WeightingFactor')
            self.WeightingFactor = fval_
            self.WeightingFactor_nsprefix_ = child_.prefix
            # validate type WeightingFactorType
            self.validate_WeightingFactorType(self.WeightingFactor)
        elif nodeName_ == 'RateUseDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RateUseDate = dval_
            self.RateUseDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.RateUseDate)
        elif nodeName_ == 'PaymentCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentCode')
            self.PaymentCode = value_
            self.PaymentCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.PaymentCode)
        elif nodeName_ == 'PaymentAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PaymentAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'PaymentAmount')
            self.PaymentAmount = fval_
            self.PaymentAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.PaymentAmount)
        elif nodeName_ == 'PaymentCurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentCurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentCurrencyCode')
            self.PaymentCurrencyCode = value_
            self.PaymentCurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyN3CodeType
            self.validate_CurrencyN3CodeType(self.PaymentCurrencyCode)
        elif nodeName_ == 'TNVEDGroup':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TNVEDGroup')
            value_ = self.gds_validate_string(value_, node, 'TNVEDGroup')
            self.TNVEDGroup = value_
            self.TNVEDGroup_nsprefix_ = child_.prefix
            # validate type GoodsNomenclatureCodeType
            self.validate_GoodsNomenclatureCodeType(self.TNVEDGroup)
        elif nodeName_ == 'ReferenceLineId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ReferenceLineId')
            value_ = self.gds_validate_string(value_, node, 'ReferenceLineId')
            self.ReferenceLineId = value_
            self.ReferenceLineId_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.ReferenceLineId)
        elif nodeName_ == 'RefReferenceLineId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RefReferenceLineId')
            value_ = self.gds_validate_string(value_, node, 'RefReferenceLineId')
            self.RefReferenceLineId = value_
            self.RefReferenceLineId_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.RefReferenceLineId)
        elif nodeName_ == 'ReferenceConsignmentItemOrdinal' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ReferenceConsignmentItemOrdinal')
            ival_ = self.gds_validate_integer(ival_, node, 'ReferenceConsignmentItemOrdinal')
            self.ReferenceConsignmentItemOrdinal = ival_
            self.ReferenceConsignmentItemOrdinal_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.ReferenceConsignmentItemOrdinal)
# end class CalculationType


class CommodityDescriptionBaseDetailsType(EECGoodsManufacturerDetailsType):
    """CommodityDescriptionBaseDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    и
    б
    а
    з
    о
    в
    ы
    х
    с
    в
    е
    д
    е
    н
    и
    й
    т
    о
    в
    а
    р
    а
    ProductMarkName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    а
    р
    к
    и
    ProductModelName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    о
    д
    е
    л
    и
    п
    р
    о
    д
    у
    к
    т
    а
    ProductId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    в
    и
    д
    а
    п
    р
    о
    д
    у
    к
    ц
    и
    и
    (
    а
    р
    т
    и
    к
    у
    л
    )
    ProductSortName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    о
    р
    т
    а
    (
    г
    р
    у
    п
    п
    ы
    с
    о
    р
    т
    о
    в
    )
    п
    р
    о
    д
    у
    к
    т
    а
    StandardName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    т
    а
    н
    д
    а
    р
    т
    а
    (
    м
    е
    ж
    д
    у
    н
    а
    р
    о
    д
    н
    о
    г
    о
    ,
    м
    е
    ж
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    г
    о
    ,
    г
    о
    с
    у
    д
    а
    р
    т
    в
    е
    н
    н
    о
    г
    о
    ,
    о
    т
    р
    а
    с
    л
    е
    в
    о
    г
    о
    и
    л
    и
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    )
    и
    л
    и
    т
    е
    х
    н
    и
    ч
    е
    с
    к
    и
    х
    у
    с
    л
    о
    в
    и
    й
    н
    а
    т
    о
    в
    а
    р
    ProductInstanceId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    (
    с
    е
    р
    и
    й
    н
    ы
    й
    н
    о
    м
    е
    р
    ,
    к
    о
    д
    )
    э
    к
    з
    е
    м
    п
    л
    я
    р
    а
    п
    р
    о
    д
    у
    к
    т
    а
    ManufactureDate -- Д
    а
    т
    а
    п
    р
    о
    и
    з
    в
    о
    д
    с
    т
    в
    а
    (
    и
    з
    г
    о
    т
    о
    в
    л
    е
    н
    и
    я
    )
    т
    о
    в
    а
    р
    а
    IPObjectRegistryIdDetails -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    о
    б
    ъ
    е
    к
    т
    а
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    п
    о
    р
    е
    е
    с
    т
    р
    у
    о
    б
    ъ
    е
    к
    т
    о
    в
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EECGoodsManufacturerDetailsType
    def __init__(self, ManufacturerName=None, TradeMarkName=None, ProductionPlaceName=None, ProductMarkName=None, ProductModelName=None, ProductId=None, ProductSortName=None, StandardName=None, ProductInstanceId=None, ManufactureDate=None, IPObjectRegistryIdDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("CommodityDescriptionBaseDetailsType"), self).__init__(ManufacturerName, TradeMarkName, ProductionPlaceName,  **kwargs_)
        self.ProductMarkName = ProductMarkName
        self.validate_FreeText250Type(self.ProductMarkName)
        self.ProductMarkName_nsprefix_ = "clt_ru"
        self.ProductModelName = ProductModelName
        self.validate_FreeText250Type(self.ProductModelName)
        self.ProductModelName_nsprefix_ = "clt_ru"
        self.ProductId = ProductId
        self.validate_GoodsArticulType(self.ProductId)
        self.ProductId_nsprefix_ = "cltESAD_cu"
        self.ProductSortName = ProductSortName
        self.validate_FreeText250Type(self.ProductSortName)
        self.ProductSortName_nsprefix_ = "clt_ru"
        self.StandardName = StandardName
        self.validate_Text40Type(self.StandardName)
        self.StandardName_nsprefix_ = "clt_ru"
        if ProductInstanceId is None:
            self.ProductInstanceId = []
        else:
            self.ProductInstanceId = ProductInstanceId
        self.ProductInstanceId_nsprefix_ = "clt_ru"
        if isinstance(ManufactureDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ManufactureDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ManufactureDate
        self.ManufactureDate = initvalue_
        self.ManufactureDate_nsprefix_ = "clt_ru"
        if IPObjectRegistryIdDetails is None:
            self.IPObjectRegistryIdDetails = []
        else:
            self.IPObjectRegistryIdDetails = IPObjectRegistryIdDetails
        self.IPObjectRegistryIdDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityDescriptionBaseDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityDescriptionBaseDetailsType.subclass:
            return CommodityDescriptionBaseDetailsType.subclass(*args_, **kwargs_)
        else:
            return CommodityDescriptionBaseDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProductMarkName(self):
        return self.ProductMarkName
    def set_ProductMarkName(self, ProductMarkName):
        self.ProductMarkName = ProductMarkName
    def get_ProductModelName(self):
        return self.ProductModelName
    def set_ProductModelName(self, ProductModelName):
        self.ProductModelName = ProductModelName
    def get_ProductId(self):
        return self.ProductId
    def set_ProductId(self, ProductId):
        self.ProductId = ProductId
    def get_ProductSortName(self):
        return self.ProductSortName
    def set_ProductSortName(self, ProductSortName):
        self.ProductSortName = ProductSortName
    def get_StandardName(self):
        return self.StandardName
    def set_StandardName(self, StandardName):
        self.StandardName = StandardName
    def get_ProductInstanceId(self):
        return self.ProductInstanceId
    def set_ProductInstanceId(self, ProductInstanceId):
        self.ProductInstanceId = ProductInstanceId
    def add_ProductInstanceId(self, value):
        self.ProductInstanceId.append(value)
    def insert_ProductInstanceId_at(self, index, value):
        self.ProductInstanceId.insert(index, value)
    def replace_ProductInstanceId_at(self, index, value):
        self.ProductInstanceId[index] = value
    def get_ManufactureDate(self):
        return self.ManufactureDate
    def set_ManufactureDate(self, ManufactureDate):
        self.ManufactureDate = ManufactureDate
    def get_IPObjectRegistryIdDetails(self):
        return self.IPObjectRegistryIdDetails
    def set_IPObjectRegistryIdDetails(self, IPObjectRegistryIdDetails):
        self.IPObjectRegistryIdDetails = IPObjectRegistryIdDetails
    def add_IPObjectRegistryIdDetails(self, value):
        self.IPObjectRegistryIdDetails.append(value)
    def insert_IPObjectRegistryIdDetails_at(self, index, value):
        self.IPObjectRegistryIdDetails.insert(index, value)
    def replace_IPObjectRegistryIdDetails_at(self, index, value):
        self.IPObjectRegistryIdDetails[index] = value
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_GoodsArticulType(self, value):
        result = True
        # Validate type GoodsArticulType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on GoodsArticulType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on GoodsArticulType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.ProductMarkName is not None or
            self.ProductModelName is not None or
            self.ProductId is not None or
            self.ProductSortName is not None or
            self.StandardName is not None or
            self.ProductInstanceId or
            self.ManufactureDate is not None or
            self.IPObjectRegistryIdDetails or
            super(CommodityDescriptionBaseDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='CommodityDescriptionBaseDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityDescriptionBaseDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommodityDescriptionBaseDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommodityDescriptionBaseDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommodityDescriptionBaseDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='CommodityDescriptionBaseDetailsType'):
        super(CommodityDescriptionBaseDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommodityDescriptionBaseDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='CommodityDescriptionBaseDetailsType', fromsubclass_=False, pretty_print=True):
        super(CommodityDescriptionBaseDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductMarkName is not None:
            namespaceprefix_ = self.ProductMarkName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductMarkName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductMarkName>%s</%sProductMarkName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductMarkName), input_name='ProductMarkName')), namespaceprefix_ , eol_))
        if self.ProductModelName is not None:
            namespaceprefix_ = self.ProductModelName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductModelName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductModelName>%s</%sProductModelName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductModelName), input_name='ProductModelName')), namespaceprefix_ , eol_))
        if self.ProductId is not None:
            namespaceprefix_ = self.ProductId_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductId>%s</%sProductId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductId), input_name='ProductId')), namespaceprefix_ , eol_))
        if self.ProductSortName is not None:
            namespaceprefix_ = self.ProductSortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductSortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductSortName>%s</%sProductSortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductSortName), input_name='ProductSortName')), namespaceprefix_ , eol_))
        if self.StandardName is not None:
            namespaceprefix_ = self.StandardName_nsprefix_ + ':' if (UseCapturedNS_ and self.StandardName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStandardName>%s</%sStandardName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StandardName), input_name='StandardName')), namespaceprefix_ , eol_))
        for ProductInstanceId_ in self.ProductInstanceId:
            namespaceprefix_ = self.ProductInstanceId_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductInstanceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductInstanceId>%s</%sProductInstanceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ProductInstanceId_), input_name='ProductInstanceId')), namespaceprefix_ , eol_))
        if self.ManufactureDate is not None:
            namespaceprefix_ = self.ManufactureDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ManufactureDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufactureDate>%s</%sManufactureDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ManufactureDate, input_name='ManufactureDate'), namespaceprefix_ , eol_))
        for IPObjectRegistryIdDetails_ in self.IPObjectRegistryIdDetails:
            namespaceprefix_ = self.IPObjectRegistryIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.IPObjectRegistryIdDetails_nsprefix_) else ''
            IPObjectRegistryIdDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IPObjectRegistryIdDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CommodityDescriptionBaseDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProductMarkName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductMarkName')
            value_ = self.gds_validate_string(value_, node, 'ProductMarkName')
            self.ProductMarkName = value_
            self.ProductMarkName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ProductMarkName)
        elif nodeName_ == 'ProductModelName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductModelName')
            value_ = self.gds_validate_string(value_, node, 'ProductModelName')
            self.ProductModelName = value_
            self.ProductModelName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ProductModelName)
        elif nodeName_ == 'ProductId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductId')
            value_ = self.gds_validate_string(value_, node, 'ProductId')
            self.ProductId = value_
            self.ProductId_nsprefix_ = child_.prefix
            # validate type GoodsArticulType
            self.validate_GoodsArticulType(self.ProductId)
        elif nodeName_ == 'ProductSortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductSortName')
            value_ = self.gds_validate_string(value_, node, 'ProductSortName')
            self.ProductSortName = value_
            self.ProductSortName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ProductSortName)
        elif nodeName_ == 'StandardName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StandardName')
            value_ = self.gds_validate_string(value_, node, 'StandardName')
            self.StandardName = value_
            self.StandardName_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.StandardName)
        elif nodeName_ == 'ProductInstanceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductInstanceId')
            value_ = self.gds_validate_string(value_, node, 'ProductInstanceId')
            self.ProductInstanceId.append(value_)
            self.ProductInstanceId_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.ProductInstanceId[-1])
        elif nodeName_ == 'ManufactureDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ManufactureDate = dval_
            self.ManufactureDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.ManufactureDate)
        elif nodeName_ == 'IPObjectRegistryIdDetails':
            obj_ = IPObjectRegistryNumType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IPObjectRegistryIdDetails.append(obj_)
            obj_.original_tagname_ = 'IPObjectRegistryIdDetails'
        super(CommodityDescriptionBaseDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class CommodityDescriptionBaseDetailsType


class CommodityGroupItemDetailsType(GeneratedsSuper):
    """CommodityGroupItemDetailsType -- Х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    т
    о
    в
    а
    р
    о
    в
    в
    г
    р
    у
    п
    п
    е
    LineId -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    з
    а
    п
    и
    с
    и
    CommodityDescriptionDetails -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    и
    с
    в
    е
    д
    е
    н
    и
    й
    о
    т
    о
    в
    а
    р
    е
    ProductionPlaceName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    е
    с
    т
    а
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    StandardName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    с
    т
    а
    н
    д
    а
    р
    т
    а
    (
    м
    е
    ж
    д
    у
    н
    а
    р
    о
    д
    н
    о
    г
    о
    ,
    м
    е
    ж
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    г
    о
    ,
    г
    о
    с
    у
    д
    а
    р
    т
    в
    е
    н
    н
    о
    г
    о
    ,
    о
    т
    р
    а
    с
    л
    е
    в
    о
    г
    о
    и
    л
    и
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    )
    и
    л
    и
    т
    е
    х
    н
    и
    ч
    е
    с
    к
    и
    х
    у
    с
    л
    о
    в
    и
    й
    н
    а
    т
    о
    в
    а
    р
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineId=None, CommodityDescriptionDetails=None, ProductionPlaceName=None, StandardName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.LineId = LineId
        self.validate_Text40Type(self.LineId)
        self.LineId_nsprefix_ = "clt_ru"
        self.CommodityDescriptionDetails = CommodityDescriptionDetails
        self.CommodityDescriptionDetails_nsprefix_ = "catESAD_cu"
        self.ProductionPlaceName = ProductionPlaceName
        self.validate_FreeText250Type(self.ProductionPlaceName)
        self.ProductionPlaceName_nsprefix_ = "clt_ru"
        self.StandardName = StandardName
        self.validate_Text40Type(self.StandardName)
        self.StandardName_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CommodityGroupItemDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CommodityGroupItemDetailsType.subclass:
            return CommodityGroupItemDetailsType.subclass(*args_, **kwargs_)
        else:
            return CommodityGroupItemDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineId(self):
        return self.LineId
    def set_LineId(self, LineId):
        self.LineId = LineId
    def get_CommodityDescriptionDetails(self):
        return self.CommodityDescriptionDetails
    def set_CommodityDescriptionDetails(self, CommodityDescriptionDetails):
        self.CommodityDescriptionDetails = CommodityDescriptionDetails
    def get_ProductionPlaceName(self):
        return self.ProductionPlaceName
    def set_ProductionPlaceName(self, ProductionPlaceName):
        self.ProductionPlaceName = ProductionPlaceName
    def get_StandardName(self):
        return self.StandardName
    def set_StandardName(self, StandardName):
        self.StandardName = StandardName
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.LineId is not None or
            self.CommodityDescriptionDetails is not None or
            self.ProductionPlaceName is not None or
            self.StandardName is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='CommodityGroupItemDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CommodityGroupItemDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CommodityGroupItemDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CommodityGroupItemDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CommodityGroupItemDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='CommodityGroupItemDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='CommodityGroupItemDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineId is not None:
            namespaceprefix_ = self.LineId_nsprefix_ + ':' if (UseCapturedNS_ and self.LineId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineId>%s</%sLineId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LineId), input_name='LineId')), namespaceprefix_ , eol_))
        if self.CommodityDescriptionDetails is not None:
            namespaceprefix_ = self.CommodityDescriptionDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityDescriptionDetails_nsprefix_) else ''
            self.CommodityDescriptionDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommodityDescriptionDetails', pretty_print=pretty_print)
        if self.ProductionPlaceName is not None:
            namespaceprefix_ = self.ProductionPlaceName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductionPlaceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductionPlaceName>%s</%sProductionPlaceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductionPlaceName), input_name='ProductionPlaceName')), namespaceprefix_ , eol_))
        if self.StandardName is not None:
            namespaceprefix_ = self.StandardName_nsprefix_ + ':' if (UseCapturedNS_ and self.StandardName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStandardName>%s</%sStandardName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.StandardName), input_name='StandardName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LineId')
            value_ = self.gds_validate_string(value_, node, 'LineId')
            self.LineId = value_
            self.LineId_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.LineId)
        elif nodeName_ == 'CommodityDescriptionDetails':
            obj_ = GoodsGroupInformationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommodityDescriptionDetails = obj_
            obj_.original_tagname_ = 'CommodityDescriptionDetails'
        elif nodeName_ == 'ProductionPlaceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductionPlaceName')
            value_ = self.gds_validate_string(value_, node, 'ProductionPlaceName')
            self.ProductionPlaceName = value_
            self.ProductionPlaceName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ProductionPlaceName)
        elif nodeName_ == 'StandardName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'StandardName')
            value_ = self.gds_validate_string(value_, node, 'StandardName')
            self.StandardName = value_
            self.StandardName_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.StandardName)
# end class CommodityGroupItemDetailsType


class CUPresentedDocumentsType23(CUESADPresentedDocumentsType):
    """CUPresentedDocumentsType23 -- ESAD.
    П
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    ы
    TIRPageNumber -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    л
    и
    с
    т
    а
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    TIRHolderID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    р
    ж
    а
    т
    е
    л
    я
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    InformationSourceDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    м
    р
    е
    с
    у
    р
    с
    е
    в
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    -
    т
    е
    л
    е
    к
    о
    м
    м
    у
    н
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    й
    с
    е
    т
    и
    "
    И
    н
    т
    е
    р
    н
    е
    т
    "
    DocumentPresentingDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    ф
    а
    к
    т
    и
    ч
    е
    с
    к
    о
    м
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CUESADPresentedDocumentsType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, CustomsCode=None, CustomsControlZoneId=None, PresentedDocumentModeCode=None, DocumentBeginActionsDate=None, DocumentEndActionsDate=None, TemporaryImportCode=None, TemporaryStorageImportDate=None, CustomsPaymentModeCodeType=None, SupplyStatus=None, CountryCode=None, TotalDocuments=None, PreferenciiCountryCode=None, PreferenciiDocID=None, ProcessingGoodsCostInfo=None, RecordID=None, ExecutiveBodyID=None, ExecutiveName=None, LicenseGoods=None, GoodsNumeric=None, RFG44PresentedDocId=None, TIRPageNumber=None, TIRHolderID=None, InformationSourceDetails=None, DocumentPresentingDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("CUPresentedDocumentsType23"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, CustomsCode, CustomsControlZoneId, PresentedDocumentModeCode, DocumentBeginActionsDate, DocumentEndActionsDate, TemporaryImportCode, TemporaryStorageImportDate, CustomsPaymentModeCodeType, SupplyStatus, CountryCode, TotalDocuments, PreferenciiCountryCode, PreferenciiDocID, ProcessingGoodsCostInfo, RecordID, ExecutiveBodyID, ExecutiveName, LicenseGoods, GoodsNumeric, RFG44PresentedDocId,  **kwargs_)
        self.TIRPageNumber = TIRPageNumber
        self.validate_Count2Type(self.TIRPageNumber)
        self.TIRPageNumber_nsprefix_ = "clt_ru"
        self.TIRHolderID = TIRHolderID
        self.validate_TIRHolderIDType(self.TIRHolderID)
        self.TIRHolderID_nsprefix_ = "clt_ru"
        self.InformationSourceDetails = InformationSourceDetails
        self.InformationSourceDetails_nsprefix_ = "RUDECLcat"
        self.DocumentPresentingDetails = DocumentPresentingDetails
        self.DocumentPresentingDetails_nsprefix_ = "RUDECLcat"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUPresentedDocumentsType23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUPresentedDocumentsType23.subclass:
            return CUPresentedDocumentsType23.subclass(*args_, **kwargs_)
        else:
            return CUPresentedDocumentsType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TIRPageNumber(self):
        return self.TIRPageNumber
    def set_TIRPageNumber(self, TIRPageNumber):
        self.TIRPageNumber = TIRPageNumber
    def get_TIRHolderID(self):
        return self.TIRHolderID
    def set_TIRHolderID(self, TIRHolderID):
        self.TIRHolderID = TIRHolderID
    def get_InformationSourceDetails(self):
        return self.InformationSourceDetails
    def set_InformationSourceDetails(self, InformationSourceDetails):
        self.InformationSourceDetails = InformationSourceDetails
    def get_DocumentPresentingDetails(self):
        return self.DocumentPresentingDetails
    def set_DocumentPresentingDetails(self, DocumentPresentingDetails):
        self.DocumentPresentingDetails = DocumentPresentingDetails
    def validate_Count2Type(self, value):
        result = True
        # Validate type Count2Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_TIRHolderIDType(self, value):
        result = True
        # Validate type TIRHolderIDType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 18:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on TIRHolderIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on TIRHolderIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TIRPageNumber is not None or
            self.TIRHolderID is not None or
            self.InformationSourceDetails is not None or
            self.DocumentPresentingDetails is not None or
            super(CUPresentedDocumentsType23, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUPresentedDocumentsType23', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUPresentedDocumentsType23')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUPresentedDocumentsType23':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUPresentedDocumentsType23')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUPresentedDocumentsType23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='CUPresentedDocumentsType23'):
        super(CUPresentedDocumentsType23, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUPresentedDocumentsType23')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUPresentedDocumentsType23', fromsubclass_=False, pretty_print=True):
        super(CUPresentedDocumentsType23, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TIRPageNumber is not None:
            namespaceprefix_ = self.TIRPageNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRPageNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTIRPageNumber>%s</%sTIRPageNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.TIRPageNumber, input_name='TIRPageNumber'), namespaceprefix_ , eol_))
        if self.TIRHolderID is not None:
            namespaceprefix_ = self.TIRHolderID_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRHolderID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTIRHolderID>%s</%sTIRHolderID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TIRHolderID), input_name='TIRHolderID')), namespaceprefix_ , eol_))
        if self.InformationSourceDetails is not None:
            namespaceprefix_ = self.InformationSourceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.InformationSourceDetails_nsprefix_) else ''
            self.InformationSourceDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformationSourceDetails', pretty_print=pretty_print)
        if self.DocumentPresentingDetails is not None:
            namespaceprefix_ = self.DocumentPresentingDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentPresentingDetails_nsprefix_) else ''
            self.DocumentPresentingDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentPresentingDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUPresentedDocumentsType23, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TIRPageNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TIRPageNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'TIRPageNumber')
            self.TIRPageNumber = ival_
            self.TIRPageNumber_nsprefix_ = child_.prefix
            # validate type Count2Type
            self.validate_Count2Type(self.TIRPageNumber)
        elif nodeName_ == 'TIRHolderID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TIRHolderID')
            value_ = self.gds_validate_string(value_, node, 'TIRHolderID')
            self.TIRHolderID = value_
            self.TIRHolderID_nsprefix_ = child_.prefix
            # validate type TIRHolderIDType
            self.validate_TIRHolderIDType(self.TIRHolderID)
        elif nodeName_ == 'InformationSourceDetails':
            obj_ = InformationSourceDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformationSourceDetails = obj_
            obj_.original_tagname_ = 'InformationSourceDetails'
        elif nodeName_ == 'DocumentPresentingDetails':
            obj_ = DocumentPresentingDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentPresentingDetails = obj_
            obj_.original_tagname_ = 'DocumentPresentingDetails'
        super(CUPresentedDocumentsType23, self)._buildChildren(child_, node, nodeName_, True)
# end class CUPresentedDocumentsType23


class CustomDocIDType(GeneratedsSuper):
    """CustomDocIDType -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    Code -- Н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    в
    н
    о
    с
    и
    м
    ы
    х
    и
    з
    м
    е
    н
    е
    н
    и
    й
    и
    (
    и
    л
    и
    )
    д
    о
    п
    о
    л
    н
    е
    н
    и
    й
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Code=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.Code = Code
        self.validate_CodeVariable2Type(self.Code)
        self.Code_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomDocIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomDocIDType.subclass:
            return CustomDocIDType.subclass(*args_, **kwargs_)
        else:
            return CustomDocIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Code(self):
        return self.Code
    def set_Code(self, Code):
        self.Code = Code
    def validate_CodeVariable2Type(self, value):
        result = True
        # Validate type CodeVariable2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable2Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable2Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.Code is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CustomDocIDType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomDocIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomDocIDType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomDocIDType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomDocIDType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='CustomDocIDType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CustomDocIDType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Code is not None:
            namespaceprefix_ = self.Code_nsprefix_ + ':' if (UseCapturedNS_ and self.Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCode>%s</%sCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Code), input_name='Code')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'Code')
            value_ = self.gds_validate_string(value_, node, 'Code')
            self.Code = value_
            self.Code_nsprefix_ = child_.prefix
            # validate type CodeVariable2Type
            self.validate_CodeVariable2Type(self.Code)
        super(CustomDocIDType, self)._buildChildren(child_, node, nodeName_, True)
# end class CustomDocIDType


class DisassemComponentType(ComponentDescriptionType):
    """DisassemComponentType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    т
    о
    в
    а
    р
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    IDNumber -- С
    б
    о
    р
    о
    ч
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    ComponentName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    ComponentId -- С
    л
    у
    ж
    е
    б
    н
    ы
    й
    п
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    ParentIDNumber -- С
    б
    о
    р
    о
    ч
    н
    ы
    й
    н
    о
    м
    е
    р
    р
    о
    д
    и
    т
    е
    л
    ь
    с
    к
    о
    г
    о
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    ChangeAction -- П
    р
    и
    з
    н
    а
    к
    и
    з
    м
    е
    н
    е
    н
    и
    я
    : 1 -
    д
    о
    б
    а
    в
    л
    е
    н
    и
    е
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    , 2 -
    и
    з
    м
    е
    н
    е
    н
    и
    е
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    , 3 -
    и
    с
    к
    л
    ю
    ч
    е
    н
    и
    е
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    . (
    З
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    т
    о
    л
    ь
    к
    о
    п
    р
    и
    и
    з
    м
    е
    н
    е
    н
    и
    и
    р
    е
    ш
    е
    н
    и
    я
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    ц
    и
    и
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ComponentDescriptionType
    def __init__(self, GoodsTNVEDCode=None, KGWeight=None, InvoicedCost=None, InvoiceCurrencyCode=None, SupplementaryQuantity=None, IDNumber=None, ComponentName=None, ComponentId=None, ParentIDNumber=None, ChangeAction=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("DisassemComponentType"), self).__init__(GoodsTNVEDCode, KGWeight, InvoicedCost, InvoiceCurrencyCode, SupplementaryQuantity,  **kwargs_)
        self.IDNumber = IDNumber
        self.validate_Text50Type(self.IDNumber)
        self.IDNumber_nsprefix_ = "clt_ru"
        if ComponentName is None:
            self.ComponentName = []
        else:
            self.ComponentName = ComponentName
        self.ComponentName_nsprefix_ = "clt_ru"
        self.ComponentId = ComponentId
        self.validate_Count19Type(self.ComponentId)
        self.ComponentId_nsprefix_ = "clt_ru"
        self.ParentIDNumber = ParentIDNumber
        self.validate_Text50Type(self.ParentIDNumber)
        self.ParentIDNumber_nsprefix_ = "clt_ru"
        self.ChangeAction = ChangeAction
        self.validate_LetterIndicatorType(self.ChangeAction)
        self.ChangeAction_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DisassemComponentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DisassemComponentType.subclass:
            return DisassemComponentType.subclass(*args_, **kwargs_)
        else:
            return DisassemComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IDNumber(self):
        return self.IDNumber
    def set_IDNumber(self, IDNumber):
        self.IDNumber = IDNumber
    def get_ComponentName(self):
        return self.ComponentName
    def set_ComponentName(self, ComponentName):
        self.ComponentName = ComponentName
    def add_ComponentName(self, value):
        self.ComponentName.append(value)
    def insert_ComponentName_at(self, index, value):
        self.ComponentName.insert(index, value)
    def replace_ComponentName_at(self, index, value):
        self.ComponentName[index] = value
    def get_ComponentId(self):
        return self.ComponentId
    def set_ComponentId(self, ComponentId):
        self.ComponentId = ComponentId
    def get_ParentIDNumber(self):
        return self.ParentIDNumber
    def set_ParentIDNumber(self, ParentIDNumber):
        self.ParentIDNumber = ParentIDNumber
    def get_ChangeAction(self):
        return self.ChangeAction
    def set_ChangeAction(self, ChangeAction):
        self.ChangeAction = ChangeAction
    def validate_Text50Type(self, value):
        result = True
        # Validate type Text50Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text50Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text50Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Count19Type(self, value):
        result = True
        # Validate type Count19Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count19Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 19:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count19Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.IDNumber is not None or
            self.ComponentName or
            self.ComponentId is not None or
            self.ParentIDNumber is not None or
            self.ChangeAction is not None or
            super(DisassemComponentType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DisassemComponentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DisassemComponentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DisassemComponentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DisassemComponentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DisassemComponentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='DisassemComponentType'):
        super(DisassemComponentType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DisassemComponentType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DisassemComponentType', fromsubclass_=False, pretty_print=True):
        super(DisassemComponentType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IDNumber is not None:
            namespaceprefix_ = self.IDNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.IDNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIDNumber>%s</%sIDNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IDNumber), input_name='IDNumber')), namespaceprefix_ , eol_))
        for ComponentName_ in self.ComponentName:
            namespaceprefix_ = self.ComponentName_nsprefix_ + ':' if (UseCapturedNS_ and self.ComponentName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComponentName>%s</%sComponentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(ComponentName_), input_name='ComponentName')), namespaceprefix_ , eol_))
        if self.ComponentId is not None:
            namespaceprefix_ = self.ComponentId_nsprefix_ + ':' if (UseCapturedNS_ and self.ComponentId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComponentId>%s</%sComponentId>%s' % (namespaceprefix_ , self.gds_format_integer(self.ComponentId, input_name='ComponentId'), namespaceprefix_ , eol_))
        if self.ParentIDNumber is not None:
            namespaceprefix_ = self.ParentIDNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ParentIDNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParentIDNumber>%s</%sParentIDNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ParentIDNumber), input_name='ParentIDNumber')), namespaceprefix_ , eol_))
        if self.ChangeAction is not None:
            namespaceprefix_ = self.ChangeAction_nsprefix_ + ':' if (UseCapturedNS_ and self.ChangeAction_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sChangeAction>%s</%sChangeAction>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ChangeAction), input_name='ChangeAction')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(DisassemComponentType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IDNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IDNumber')
            value_ = self.gds_validate_string(value_, node, 'IDNumber')
            self.IDNumber = value_
            self.IDNumber_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.IDNumber)
        elif nodeName_ == 'ComponentName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ComponentName')
            value_ = self.gds_validate_string(value_, node, 'ComponentName')
            self.ComponentName.append(value_)
            self.ComponentName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ComponentName[-1])
        elif nodeName_ == 'ComponentId' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ComponentId')
            ival_ = self.gds_validate_integer(ival_, node, 'ComponentId')
            self.ComponentId = ival_
            self.ComponentId_nsprefix_ = child_.prefix
            # validate type Count19Type
            self.validate_Count19Type(self.ComponentId)
        elif nodeName_ == 'ParentIDNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ParentIDNumber')
            value_ = self.gds_validate_string(value_, node, 'ParentIDNumber')
            self.ParentIDNumber = value_
            self.ParentIDNumber_nsprefix_ = child_.prefix
            # validate type Text50Type
            self.validate_Text50Type(self.ParentIDNumber)
        elif nodeName_ == 'ChangeAction':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ChangeAction')
            value_ = self.gds_validate_string(value_, node, 'ChangeAction')
            self.ChangeAction = value_
            self.ChangeAction_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.ChangeAction)
        super(DisassemComponentType, self)._buildChildren(child_, node, nodeName_, True)
# end class DisassemComponentType


class DocumentPresentingDetailsType(GeneratedsSuper):
    """DocumentPresentingDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    ф
    а
    к
    т
    и
    ч
    е
    с
    к
    о
    м
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocPresentKindCode -- П
    р
    и
    з
    н
    а
    к
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    а
    п
    р
    и
    п
    о
    д
    а
    ч
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    (
    з
    а
    я
    в
    л
    е
    н
    и
    я
    )
    PresentedDocumentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    м
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    DocPresentDate -- Д
    а
    т
    а
    ,
    д
    о
    к
    о
    т
    о
    р
    о
    й
    д
    о
    л
    ж
    н
    ы
    б
    ы
    т
    ь
    в
    ы
    п
    о
    л
    н
    е
    н
    ы
    о
    б
    я
    з
    а
    т
    е
    л
    ь
    с
    т
    в
    а
    п
    о
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    ю
    д
    о
    к
    у
    м
    е
    н
    т
    а
    CustomsDocIdDetails -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    о
    в
    а
    р
    ы
    ,
    т
    р
    а
    н
    з
    и
    т
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    ,
    з
    а
    я
    в
    л
    е
    н
    и
    я
    о
    в
    ы
    п
    у
    с
    к
    е
    т
    о
    в
    а
    р
    о
    в
    д
    о
    п
    о
    д
    а
    ч
    и
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    о
    в
    а
    р
    ы
    и
    л
    и
    з
    а
    я
    в
    л
    е
    н
    и
    я
    о
    с
    о
    в
    е
    р
    ш
    е
    н
    и
    и
    о
    п
    е
    р
    а
    ц
    и
    й
    в
    о
    т
    н
    о
    ш
    е
    н
    и
    и
    в
    р
    е
    м
    е
    н
    н
    о
    в
    ы
    в
    е
    з
    е
    н
    н
    ы
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    м
    е
    ж
    д
    у
    н
    а
    р
    о
    д
    н
    о
    й
    п
    е
    р
    е
    в
    о
    з
    к
    и
    ,
    я
    в
    л
    я
    ю
    щ
    и
    х
    с
    я
    т
    о
    в
    а
    р
    а
    м
    и
    ,
    п
    о
    м
    е
    щ
    е
    н
    н
    ы
    м
    и
    п
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    в
    в
    о
    з
    а
    (
    д
    о
    п
    у
    с
    к
    а
    ),
    к
    к
    о
    т
    о
    р
    о
    й
    (
    к
    о
    т
    о
    р
    о
    м
    у
    )
    б
    ы
    л
    п
    р
    и
    л
    о
    ж
    е
    н
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    DTMDocDetails -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    ,
    к
    к
    о
    т
    о
    р
    о
    й
    б
    ы
    л
    п
    р
    и
    л
    о
    ж
    е
    н
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    TIRIdDetails -- Н
    о
    м
    е
    р
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    ,
    к
    о
    т
    о
    р
    а
    я
    и
    с
    п
    о
    л
    ь
    з
    о
    в
    а
    л
    а
    с
    ь
    в
    к
    а
    ч
    е
    с
    т
    в
    е
    т
    р
    а
    н
    з
    и
    т
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    и
    к
    к
    о
    т
    о
    р
    о
    й
    б
    ы
    л
    п
    р
    и
    л
    о
    ж
    е
    н
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    OtherPrecedingDocId -- р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    и
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    к
    к
    о
    т
    о
    р
    о
    м
    у
    б
    ы
    л
    п
    р
    и
    л
    о
    ж
    е
    н
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    м
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    OtherPrecedingDocDate -- д
    а
    т
    а
    в
    ы
    д
    а
    ч
    и
    ,
    п
    о
    д
    п
    и
    с
    а
    н
    и
    я
    ,
    у
    т
    в
    е
    р
    ж
    д
    е
    н
    и
    я
    и
    л
    и
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    и
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    к
    к
    о
    т
    о
    р
    о
    м
    у
    б
    ы
    л
    п
    р
    и
    л
    о
    ж
    е
    н
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    м
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocPresentKindCode=None, PresentedDocumentModeCode=None, DocPresentDate=None, CustomsDocIdDetails=None, DTMDocDetails=None, TIRIdDetails=None, OtherPrecedingDocId=None, OtherPrecedingDocDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.DocPresentKindCode = DocPresentKindCode
        self.validate_LetterIndicatorType(self.DocPresentKindCode)
        self.DocPresentKindCode_nsprefix_ = "clt_ru"
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
        self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        self.PresentedDocumentModeCode_nsprefix_ = "clt_ru"
        if isinstance(DocPresentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocPresentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocPresentDate
        self.DocPresentDate = initvalue_
        self.DocPresentDate_nsprefix_ = "clt_ru"
        self.CustomsDocIdDetails = CustomsDocIdDetails
        self.CustomsDocIdDetails_nsprefix_ = "RUDECLcat"
        self.DTMDocDetails = DTMDocDetails
        self.DTMDocDetails_nsprefix_ = "RUDECLcat"
        self.TIRIdDetails = TIRIdDetails
        self.TIRIdDetails_nsprefix_ = "RUDECLcat"
        self.OtherPrecedingDocId = OtherPrecedingDocId
        self.validate_DocumentNumberType(self.OtherPrecedingDocId)
        self.OtherPrecedingDocId_nsprefix_ = "clt_ru"
        if isinstance(OtherPrecedingDocDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OtherPrecedingDocDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OtherPrecedingDocDate
        self.OtherPrecedingDocDate = initvalue_
        self.OtherPrecedingDocDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocumentPresentingDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocumentPresentingDetailsType.subclass:
            return DocumentPresentingDetailsType.subclass(*args_, **kwargs_)
        else:
            return DocumentPresentingDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocPresentKindCode(self):
        return self.DocPresentKindCode
    def set_DocPresentKindCode(self, DocPresentKindCode):
        self.DocPresentKindCode = DocPresentKindCode
    def get_PresentedDocumentModeCode(self):
        return self.PresentedDocumentModeCode
    def set_PresentedDocumentModeCode(self, PresentedDocumentModeCode):
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
    def get_DocPresentDate(self):
        return self.DocPresentDate
    def set_DocPresentDate(self, DocPresentDate):
        self.DocPresentDate = DocPresentDate
    def get_CustomsDocIdDetails(self):
        return self.CustomsDocIdDetails
    def set_CustomsDocIdDetails(self, CustomsDocIdDetails):
        self.CustomsDocIdDetails = CustomsDocIdDetails
    def get_DTMDocDetails(self):
        return self.DTMDocDetails
    def set_DTMDocDetails(self, DTMDocDetails):
        self.DTMDocDetails = DTMDocDetails
    def get_TIRIdDetails(self):
        return self.TIRIdDetails
    def set_TIRIdDetails(self, TIRIdDetails):
        self.TIRIdDetails = TIRIdDetails
    def get_OtherPrecedingDocId(self):
        return self.OtherPrecedingDocId
    def set_OtherPrecedingDocId(self, OtherPrecedingDocId):
        self.OtherPrecedingDocId = OtherPrecedingDocId
    def get_OtherPrecedingDocDate(self):
        return self.OtherPrecedingDocDate
    def set_OtherPrecedingDocDate(self, OtherPrecedingDocDate):
        self.OtherPrecedingDocDate = OtherPrecedingDocDate
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocPresentKindCode is not None or
            self.PresentedDocumentModeCode is not None or
            self.DocPresentDate is not None or
            self.CustomsDocIdDetails is not None or
            self.DTMDocDetails is not None or
            self.TIRIdDetails is not None or
            self.OtherPrecedingDocId is not None or
            self.OtherPrecedingDocDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocumentPresentingDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocumentPresentingDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocumentPresentingDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocumentPresentingDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocumentPresentingDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='DocumentPresentingDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DocumentPresentingDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocPresentKindCode is not None:
            namespaceprefix_ = self.DocPresentKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocPresentKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocPresentKindCode>%s</%sDocPresentKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocPresentKindCode), input_name='DocPresentKindCode')), namespaceprefix_ , eol_))
        if self.PresentedDocumentModeCode is not None:
            namespaceprefix_ = self.PresentedDocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PresentedDocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPresentedDocumentModeCode>%s</%sPresentedDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PresentedDocumentModeCode), input_name='PresentedDocumentModeCode')), namespaceprefix_ , eol_))
        if self.DocPresentDate is not None:
            namespaceprefix_ = self.DocPresentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocPresentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocPresentDate>%s</%sDocPresentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocPresentDate, input_name='DocPresentDate'), namespaceprefix_ , eol_))
        if self.CustomsDocIdDetails is not None:
            namespaceprefix_ = self.CustomsDocIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsDocIdDetails_nsprefix_) else ''
            self.CustomsDocIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsDocIdDetails', pretty_print=pretty_print)
        if self.DTMDocDetails is not None:
            namespaceprefix_ = self.DTMDocDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DTMDocDetails_nsprefix_) else ''
            self.DTMDocDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DTMDocDetails', pretty_print=pretty_print)
        if self.TIRIdDetails is not None:
            namespaceprefix_ = self.TIRIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRIdDetails_nsprefix_) else ''
            self.TIRIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TIRIdDetails', pretty_print=pretty_print)
        if self.OtherPrecedingDocId is not None:
            namespaceprefix_ = self.OtherPrecedingDocId_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherPrecedingDocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOtherPrecedingDocId>%s</%sOtherPrecedingDocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OtherPrecedingDocId), input_name='OtherPrecedingDocId')), namespaceprefix_ , eol_))
        if self.OtherPrecedingDocDate is not None:
            namespaceprefix_ = self.OtherPrecedingDocDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherPrecedingDocDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOtherPrecedingDocDate>%s</%sOtherPrecedingDocDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OtherPrecedingDocDate, input_name='OtherPrecedingDocDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocPresentKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocPresentKindCode')
            value_ = self.gds_validate_string(value_, node, 'DocPresentKindCode')
            self.DocPresentKindCode = value_
            self.DocPresentKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.DocPresentKindCode)
        elif nodeName_ == 'PresentedDocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PresentedDocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PresentedDocumentModeCode')
            self.PresentedDocumentModeCode = value_
            self.PresentedDocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        elif nodeName_ == 'DocPresentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocPresentDate = dval_
            self.DocPresentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocPresentDate)
        elif nodeName_ == 'CustomsDocIdDetails':
            obj_ = CustomDocIDType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsDocIdDetails = obj_
            obj_.original_tagname_ = 'CustomsDocIdDetails'
        elif nodeName_ == 'DTMDocDetails':
            obj_ = DTMDocDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DTMDocDetails = obj_
            obj_.original_tagname_ = 'DTMDocDetails'
        elif nodeName_ == 'TIRIdDetails':
            obj_ = TIRIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TIRIdDetails = obj_
            obj_.original_tagname_ = 'TIRIdDetails'
        elif nodeName_ == 'OtherPrecedingDocId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OtherPrecedingDocId')
            value_ = self.gds_validate_string(value_, node, 'OtherPrecedingDocId')
            self.OtherPrecedingDocId = value_
            self.OtherPrecedingDocId_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.OtherPrecedingDocId)
        elif nodeName_ == 'OtherPrecedingDocDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OtherPrecedingDocDate = dval_
            self.OtherPrecedingDocDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.OtherPrecedingDocDate)
# end class DocumentPresentingDetailsType


class DTMDocDetailsType24(GeneratedsSuper):
    """DTMDocDetailsType24 -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    TransportModeCode -- К
    о
    д
    в
    и
    д
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    в
    и
    д
    о
    в
    т
    р
    а
    н
    с
    п
    о
    р
    т
    а
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    и
    р
    о
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransportModeCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.TransportModeCode = TransportModeCode
        self.validate_TransportModeCodeType(self.TransportModeCode)
        self.TransportModeCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DTMDocDetailsType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DTMDocDetailsType24.subclass:
            return DTMDocDetailsType24.subclass(*args_, **kwargs_)
        else:
            return DTMDocDetailsType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportModeCode(self):
        return self.TransportModeCode
    def set_TransportModeCode(self, TransportModeCode):
        self.TransportModeCode = TransportModeCode
    def validate_TransportModeCodeType(self, value):
        result = True
        # Validate type TransportModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TransportModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TransportModeCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DTMDocDetailsType24', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DTMDocDetailsType24')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DTMDocDetailsType24':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DTMDocDetailsType24')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DTMDocDetailsType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='DTMDocDetailsType24'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DTMDocDetailsType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportModeCode is not None:
            namespaceprefix_ = self.TransportModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportModeCode>%s</%sTransportModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportModeCode), input_name='TransportModeCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransportModeCode')
            value_ = self.gds_validate_string(value_, node, 'TransportModeCode')
            self.TransportModeCode = value_
            self.TransportModeCode_nsprefix_ = child_.prefix
            # validate type TransportModeCodeType
            self.validate_TransportModeCodeType(self.TransportModeCode)
        super(DTMDocDetailsType24, self)._buildChildren(child_, node, nodeName_, True)
# end class DTMDocDetailsType24


class GoodsGroupDescriptionType25(GeneratedsSuper):
    """GoodsGroupDescriptionType25 -- О
    п
    и
    с
    а
    н
    и
    е
    г
    р
    у
    п
    п
    ы
    т
    о
    в
    а
    р
    о
    в
    о
    д
    н
    о
    г
    о
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    я
    с
    о
    т
    л
    и
    ч
    а
    ю
    щ
    и
    м
    и
    с
    я
    о
    т
    д
    р
    у
    г
    и
    х
    г
    р
    у
    п
    п
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    м
    и
    LineId -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    з
    а
    п
    и
    с
    и
    GoodsDescription -- О
    п
    и
    с
    а
    н
    и
    е
    г
    р
    у
    п
    п
    ы
    т
    о
    в
    а
    р
    о
    в
    с
    у
    ч
    е
    т
    о
    м
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    х
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    (
    к
    а
    ч
    е
    с
    т
    в
    е
    н
    н
    ы
    х
    ,
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    е
    н
    н
    ы
    х
    ,
    т
    е
    х
    н
    и
    ч
    е
    с
    к
    и
    х
    ,
    к
    о
    м
    м
    е
    р
    ч
    е
    с
    к
    и
    х
    ),
    н
    е
    о
    б
    х
    о
    д
    и
    м
    ы
    х
    д
    л
    я
    и
    с
    ч
    и
    с
    л
    е
    н
    и
    я
    и
    в
    з
    и
    м
    а
    н
    и
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    п
    р
    и
    м
    е
    н
    е
    н
    и
    я
    м
    е
    р
    з
    а
    щ
    и
    т
    ы
    в
    н
    у
    т
    р
    е
    н
    н
    е
    г
    о
    р
    ы
    н
    к
    а
    ,
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    с
    о
    б
    л
    ю
    д
    е
    н
    и
    я
    з
    а
    п
    р
    е
    т
    о
    в
    и
    о
    г
    р
    а
    н
    и
    ч
    е
    н
    и
    й
    ,
    п
    р
    и
    н
    я
    т
    и
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    м
    и
    о
    р
    г
    а
    н
    а
    м
    и
    м
    е
    р
    п
    о
    з
    а
    щ
    и
    т
    е
    п
    р
    а
    в
    н
    а
    о
    б
    ъ
    е
    к
    т
    ы
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    ,
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    ,
    о
    т
    н
    е
    с
    е
    н
    и
    я
    к
    о
    д
    н
    о
    м
    у
    д
    е
    с
    я
    т
    и
    з
    н
    а
    ч
    н
    о
    м
    у
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    м
    у
    к
    о
    д
    у
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    ObjectOrdinal -- Н
    о
    м
    е
    р
    (
    п
    о
    з
    и
    ц
    и
    я
    )
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    т
    о
    в
    а
    р
    а
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    о
    г
    о
    ч
    е
    р
    е
    з
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    г
    р
    а
    н
    и
    ц
    у
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    т
    о
    м
    ч
    и
    с
    л
    е
    н
    е
    к
    о
    м
    п
    л
    е
    к
    т
    н
    о
    м
    и
    л
    и
    н
    е
    з
    а
    в
    е
    р
    ш
    е
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    р
    е
    ш
    е
    н
    и
    е
    м
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    ц
    и
    и
    т
    о
    в
    а
    р
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    RKTNVED -- К
    о
    д
    к
    о
    м
    п
    о
    н
    е
    н
    т
    а
    м
    а
    ш
    и
    н
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    CommodityGroupItemDetails -- Х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    т
    о
    в
    а
    р
    о
    в
    в
    г
    р
    у
    п
    п
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineId=None, GoodsDescription=None, ObjectOrdinal=None, RKTNVED=None, CommodityGroupItemDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.LineId = LineId
        self.validate_Text40Type(self.LineId)
        self.LineId_nsprefix_ = "clt_ru"
        if GoodsDescription is None:
            self.GoodsDescription = []
        else:
            self.GoodsDescription = GoodsDescription
        self.GoodsDescription_nsprefix_ = "clt_ru"
        self.ObjectOrdinal = ObjectOrdinal
        self.validate_Code3Type(self.ObjectOrdinal)
        self.ObjectOrdinal_nsprefix_ = "clt_ru"
        self.RKTNVED = RKTNVED
        self.validate_CUGoodsNomenclatuerCodeType(self.RKTNVED)
        self.RKTNVED_nsprefix_ = "clt_ru"
        if CommodityGroupItemDetails is None:
            self.CommodityGroupItemDetails = []
        else:
            self.CommodityGroupItemDetails = CommodityGroupItemDetails
        self.CommodityGroupItemDetails_nsprefix_ = "RUDECLcat"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsGroupDescriptionType25)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsGroupDescriptionType25.subclass:
            return GoodsGroupDescriptionType25.subclass(*args_, **kwargs_)
        else:
            return GoodsGroupDescriptionType25(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineId(self):
        return self.LineId
    def set_LineId(self, LineId):
        self.LineId = LineId
    def get_GoodsDescription(self):
        return self.GoodsDescription
    def set_GoodsDescription(self, GoodsDescription):
        self.GoodsDescription = GoodsDescription
    def add_GoodsDescription(self, value):
        self.GoodsDescription.append(value)
    def insert_GoodsDescription_at(self, index, value):
        self.GoodsDescription.insert(index, value)
    def replace_GoodsDescription_at(self, index, value):
        self.GoodsDescription[index] = value
    def get_ObjectOrdinal(self):
        return self.ObjectOrdinal
    def set_ObjectOrdinal(self, ObjectOrdinal):
        self.ObjectOrdinal = ObjectOrdinal
    def get_RKTNVED(self):
        return self.RKTNVED
    def set_RKTNVED(self, RKTNVED):
        self.RKTNVED = RKTNVED
    def get_CommodityGroupItemDetails(self):
        return self.CommodityGroupItemDetails
    def set_CommodityGroupItemDetails(self, CommodityGroupItemDetails):
        self.CommodityGroupItemDetails = CommodityGroupItemDetails
    def add_CommodityGroupItemDetails(self, value):
        self.CommodityGroupItemDetails.append(value)
    def insert_CommodityGroupItemDetails_at(self, index, value):
        self.CommodityGroupItemDetails.insert(index, value)
    def replace_CommodityGroupItemDetails_at(self, index, value):
        self.CommodityGroupItemDetails[index] = value
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CUGoodsNomenclatuerCodeType(self, value):
        result = True
        # Validate type CUGoodsNomenclatuerCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CUGoodsNomenclatuerCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CUGoodsNomenclatuerCodeType_patterns_, ))
                result = False
        return result
    validate_CUGoodsNomenclatuerCodeType_patterns_ = [['^([0-9]{4}|[0-9]{6}|[0-9]{8}|[0-9]{10})$']]
    def has__content(self):
        if (
            self.LineId is not None or
            self.GoodsDescription or
            self.ObjectOrdinal is not None or
            self.RKTNVED is not None or
            self.CommodityGroupItemDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsGroupDescriptionType25', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsGroupDescriptionType25')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsGroupDescriptionType25':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsGroupDescriptionType25')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsGroupDescriptionType25', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='GoodsGroupDescriptionType25'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsGroupDescriptionType25', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineId is not None:
            namespaceprefix_ = self.LineId_nsprefix_ + ':' if (UseCapturedNS_ and self.LineId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineId>%s</%sLineId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LineId), input_name='LineId')), namespaceprefix_ , eol_))
        for GoodsDescription_ in self.GoodsDescription:
            namespaceprefix_ = self.GoodsDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsDescription_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsDescription>%s</%sGoodsDescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsDescription_), input_name='GoodsDescription')), namespaceprefix_ , eol_))
        if self.ObjectOrdinal is not None:
            namespaceprefix_ = self.ObjectOrdinal_nsprefix_ + ':' if (UseCapturedNS_ and self.ObjectOrdinal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sObjectOrdinal>%s</%sObjectOrdinal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ObjectOrdinal), input_name='ObjectOrdinal')), namespaceprefix_ , eol_))
        if self.RKTNVED is not None:
            namespaceprefix_ = self.RKTNVED_nsprefix_ + ':' if (UseCapturedNS_ and self.RKTNVED_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRKTNVED>%s</%sRKTNVED>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RKTNVED), input_name='RKTNVED')), namespaceprefix_ , eol_))
        for CommodityGroupItemDetails_ in self.CommodityGroupItemDetails:
            namespaceprefix_ = self.CommodityGroupItemDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CommodityGroupItemDetails_nsprefix_) else ''
            CommodityGroupItemDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CommodityGroupItemDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LineId')
            value_ = self.gds_validate_string(value_, node, 'LineId')
            self.LineId = value_
            self.LineId_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.LineId)
        elif nodeName_ == 'GoodsDescription':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsDescription')
            value_ = self.gds_validate_string(value_, node, 'GoodsDescription')
            self.GoodsDescription.append(value_)
            self.GoodsDescription_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsDescription[-1])
        elif nodeName_ == 'ObjectOrdinal':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ObjectOrdinal')
            value_ = self.gds_validate_string(value_, node, 'ObjectOrdinal')
            self.ObjectOrdinal = value_
            self.ObjectOrdinal_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.ObjectOrdinal)
        elif nodeName_ == 'RKTNVED':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RKTNVED')
            value_ = self.gds_validate_string(value_, node, 'RKTNVED')
            self.RKTNVED = value_
            self.RKTNVED_nsprefix_ = child_.prefix
            # validate type CUGoodsNomenclatuerCodeType
            self.validate_CUGoodsNomenclatuerCodeType(self.RKTNVED)
        elif nodeName_ == 'CommodityGroupItemDetails':
            obj_ = CommodityGroupItemDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CommodityGroupItemDetails.append(obj_)
            obj_.original_tagname_ = 'CommodityGroupItemDetails'
# end class GoodsGroupDescriptionType25


class GoodsLocationDetailsType(GeneratedsSuper):
    """GoodsLocationDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    м
    е
    с
    т
    е
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    GoodsLocationCode -- К
    о
    д
    м
    е
    с
    т
    а
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    CustomsOfficeCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    CountryCode -- К
    о
    д
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    -
    ч
    л
    е
    н
    а
    ,
    в
    к
    о
    т
    о
    р
    о
    м
    н
    а
    х
    о
    д
    и
    т
    с
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    м
    е
    с
    т
    а
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    GoodsLocationName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    м
    е
    с
    т
    а
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    (
    ж
    е
    л
    е
    з
    н
    о
    д
    о
    р
    о
    ж
    н
    о
    й
    с
    т
    а
    н
    ц
    и
    и
    ,
    м
    о
    р
    с
    к
    о
    г
    о
    (
    р
    е
    ч
    н
    о
    г
    о
    )
    п
    о
    р
    т
    а
    )
    CustomsControlZoneId -- Н
    о
    м
    е
    р
    (
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    )
    з
    о
    н
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    к
    о
    н
    т
    р
    о
    л
    я
      
    * GoodsLocationDocDetails -- С
      в
      е
      д
      е
      н
      и
      я
      о
      д
      о
      к
      у
      м
      е
      н
      т
      е
      (
      р
      а
      з
      р
      е
      ш
      е
      н
      и
      е
      т
      а
      м
      о
      ж
      е
      н
      н
      о
      г
      о
      о
      р
      г
      а
      н
      а
      н
      а
      в
      р
      е
      м
      е
      н
      н
      о
      е
      х
      р
      а
      н
      е
      н
      и
      е
      т
      о
      в
      а
      р
      о
      в
      )
    * RegisterDocumentIdDetails -- С
      в
      и
      д
      е
      т
      е
      л
      ь
      с
      т
      в
      о
      о
      в
      к
      л
      ю
      ч
      е
      н
      и
      и
      в
      р
      е
      е
      с
      т
      р
      у
      п
      о
      л
      н
      о
      м
      о
      ч
      е
      н
      н
      ы
      х
      э
      к
      о
      н
      о
      м
      и
      ч
      е
      с
      к
      и
      х
      о
      п
      е
      р
      а
      т
      о
      р
      о
      в
      ,
      с
      в
      и
      д
      е
      т
      е
      л
      ь
      с
      т
      в
      о
      о
      в
      к
      л
      ю
      ч
      е
      н
      и
      и
      в
      р
      е
      е
      с
      т
      р
      в
      л
      а
      д
      е
      л
      ь
      ц
      е
      в
      с
      к
      л
      а
      д
      о
      в
      в
      р
      е
      м
      е
      н
      н
      о
      г
      о
      х
      р
      а
      н
      е
      н
      и
      я
      ,
      д
      о
      к
      у
      м
      е
      н
      т
      (
      с
      в
      и
      д
      е
      т
      е
      л
      ь
      с
      т
      в
      о
      ),
      у
      д
      о
      с
      т
      о
      в
      е
      р
      я
      ю
      щ
      и
      й
      р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      ю
      л
      и
      ц
      а
      в
      к
      а
      ч
      е
      с
      т
      в
      е
      р
      е
      з
      и
      д
      е
      н
      т
      а
      (
      у
      ч
      а
      с
      т
      н
      и
      к
      а
      )
      с
      в
      о
      б
      о
      д
      н
      о
      й
      (
      с
      п
      е
      ц
      и
      а
      л
      ь
      н
      о
      й
      ,
      о
      с
      о
      б
      о
      й
      )
      э
      к
      о
      н
      о
      м
      и
      ч
      е
      с
      к
      о
      й
      з
      о
      н
      ы
      
    * GoodLocationTransportMeansDetails -- С
      в
      е
      д
      е
      н
      и
      я
      о
      т
      р
      а
      н
      с
      п
      о
      р
      т
      н
      о
      м
      с
      р
      е
      д
      с
      т
      в
      е
      в
      /
      н
      а
      к
      о
      т
      о
      р
      о
      м
      н
      а
      х
      о
      д
      я
      т
      с
      я
      т
      о
      в
      а
      р
      ы
    * UnifiedAddressDetails -- А
      д
      р
      е
      с
      м
      е
      с
      т
      а
      н
      а
      х
      о
      ж
      д
      е
      н
      и
      я
      т
      о
      в
      а
      р
      о
      в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, GoodsLocationCode=None, CustomsOfficeCode=None, CountryCode=None, GoodsLocationName=None, CustomsControlZoneId=None, GoodsLocationDocDetails=None, RegisterDocumentIdDetails=None, GoodLocationTransportMeansDetails=None, UnifiedAddressDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.GoodsLocationCode = GoodsLocationCode
        self.validate_Code2Type(self.GoodsLocationCode)
        self.GoodsLocationCode_nsprefix_ = "clt_ru"
        self.CustomsOfficeCode = CustomsOfficeCode
        self.validate_CustomsCodeType(self.CustomsOfficeCode)
        self.CustomsOfficeCode_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
        self.GoodsLocationName = GoodsLocationName
        self.validate_FreeText250Type(self.GoodsLocationName)
        self.GoodsLocationName_nsprefix_ = "clt_ru"
        self.CustomsControlZoneId = CustomsControlZoneId
        self.validate_CustomsOfficeNameType(self.CustomsControlZoneId)
        self.CustomsControlZoneId_nsprefix_ = "clt_ru"
        self.GoodsLocationDocDetails = GoodsLocationDocDetails
        self.GoodsLocationDocDetails_nsprefix_ = "RUScat_ru"
        self.RegisterDocumentIdDetails = RegisterDocumentIdDetails
        self.RegisterDocumentIdDetails_nsprefix_ = "catESAD_cu"
        self.GoodLocationTransportMeansDetails = GoodLocationTransportMeansDetails
        self.GoodLocationTransportMeansDetails_nsprefix_ = "RUScat_ru"
        self.UnifiedAddressDetails = UnifiedAddressDetails
        self.UnifiedAddressDetails_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsLocationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsLocationDetailsType.subclass:
            return GoodsLocationDetailsType.subclass(*args_, **kwargs_)
        else:
            return GoodsLocationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsLocationCode(self):
        return self.GoodsLocationCode
    def set_GoodsLocationCode(self, GoodsLocationCode):
        self.GoodsLocationCode = GoodsLocationCode
    def get_CustomsOfficeCode(self):
        return self.CustomsOfficeCode
    def set_CustomsOfficeCode(self, CustomsOfficeCode):
        self.CustomsOfficeCode = CustomsOfficeCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_GoodsLocationName(self):
        return self.GoodsLocationName
    def set_GoodsLocationName(self, GoodsLocationName):
        self.GoodsLocationName = GoodsLocationName
    def get_CustomsControlZoneId(self):
        return self.CustomsControlZoneId
    def set_CustomsControlZoneId(self, CustomsControlZoneId):
        self.CustomsControlZoneId = CustomsControlZoneId
    def get_GoodsLocationDocDetails(self):
        return self.GoodsLocationDocDetails
    def set_GoodsLocationDocDetails(self, GoodsLocationDocDetails):
        self.GoodsLocationDocDetails = GoodsLocationDocDetails
    def get_RegisterDocumentIdDetails(self):
        return self.RegisterDocumentIdDetails
    def set_RegisterDocumentIdDetails(self, RegisterDocumentIdDetails):
        self.RegisterDocumentIdDetails = RegisterDocumentIdDetails
    def get_GoodLocationTransportMeansDetails(self):
        return self.GoodLocationTransportMeansDetails
    def set_GoodLocationTransportMeansDetails(self, GoodLocationTransportMeansDetails):
        self.GoodLocationTransportMeansDetails = GoodLocationTransportMeansDetails
    def get_UnifiedAddressDetails(self):
        return self.UnifiedAddressDetails
    def set_UnifiedAddressDetails(self, UnifiedAddressDetails):
        self.UnifiedAddressDetails = UnifiedAddressDetails
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsOfficeNameType(self, value):
        result = True
        # Validate type CustomsOfficeNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CustomsOfficeNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CustomsOfficeNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.GoodsLocationCode is not None or
            self.CustomsOfficeCode is not None or
            self.CountryCode is not None or
            self.GoodsLocationName is not None or
            self.CustomsControlZoneId is not None or
            self.GoodsLocationDocDetails is not None or
            self.RegisterDocumentIdDetails is not None or
            self.GoodLocationTransportMeansDetails is not None or
            self.UnifiedAddressDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='GoodsLocationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsLocationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsLocationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsLocationDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsLocationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='GoodsLocationDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='GoodsLocationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsLocationCode is not None:
            namespaceprefix_ = self.GoodsLocationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsLocationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsLocationCode>%s</%sGoodsLocationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsLocationCode), input_name='GoodsLocationCode')), namespaceprefix_ , eol_))
        if self.CustomsOfficeCode is not None:
            namespaceprefix_ = self.CustomsOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsOfficeCode>%s</%sCustomsOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsOfficeCode), input_name='CustomsOfficeCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.GoodsLocationName is not None:
            namespaceprefix_ = self.GoodsLocationName_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsLocationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsLocationName>%s</%sGoodsLocationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsLocationName), input_name='GoodsLocationName')), namespaceprefix_ , eol_))
        if self.CustomsControlZoneId is not None:
            namespaceprefix_ = self.CustomsControlZoneId_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsControlZoneId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsControlZoneId>%s</%sCustomsControlZoneId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsControlZoneId), input_name='CustomsControlZoneId')), namespaceprefix_ , eol_))
        if self.GoodsLocationDocDetails is not None:
            namespaceprefix_ = self.GoodsLocationDocDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsLocationDocDetails_nsprefix_) else ''
            self.GoodsLocationDocDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsLocationDocDetails', pretty_print=pretty_print)
        if self.RegisterDocumentIdDetails is not None:
            namespaceprefix_ = self.RegisterDocumentIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RegisterDocumentIdDetails_nsprefix_) else ''
            self.RegisterDocumentIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RegisterDocumentIdDetails', pretty_print=pretty_print)
        if self.GoodLocationTransportMeansDetails is not None:
            namespaceprefix_ = self.GoodLocationTransportMeansDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodLocationTransportMeansDetails_nsprefix_) else ''
            self.GoodLocationTransportMeansDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodLocationTransportMeansDetails', pretty_print=pretty_print)
        if self.UnifiedAddressDetails is not None:
            namespaceprefix_ = self.UnifiedAddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.UnifiedAddressDetails_nsprefix_) else ''
            self.UnifiedAddressDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UnifiedAddressDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsLocationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsLocationCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsLocationCode')
            self.GoodsLocationCode = value_
            self.GoodsLocationCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.GoodsLocationCode)
        elif nodeName_ == 'CustomsOfficeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsOfficeCode')
            self.CustomsOfficeCode = value_
            self.CustomsOfficeCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.CustomsOfficeCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
        elif nodeName_ == 'GoodsLocationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsLocationName')
            value_ = self.gds_validate_string(value_, node, 'GoodsLocationName')
            self.GoodsLocationName = value_
            self.GoodsLocationName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsLocationName)
        elif nodeName_ == 'CustomsControlZoneId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CustomsControlZoneId')
            value_ = self.gds_validate_string(value_, node, 'CustomsControlZoneId')
            self.CustomsControlZoneId = value_
            self.CustomsControlZoneId_nsprefix_ = child_.prefix
            # validate type CustomsOfficeNameType
            self.validate_CustomsOfficeNameType(self.CustomsControlZoneId)
        elif nodeName_ == 'GoodsLocationDocDetails':
            class_obj_ = self.get_class_obj_(child_, DocBaseV2Type)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsLocationDocDetails = obj_
            obj_.original_tagname_ = 'GoodsLocationDocDetails'
        elif nodeName_ == 'RegisterDocumentIdDetails':
            obj_ = AEORegistryIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RegisterDocumentIdDetails = obj_
            obj_.original_tagname_ = 'RegisterDocumentIdDetails'
        elif nodeName_ == 'GoodLocationTransportMeansDetails':
            obj_ = GoodLocationTransportMeansDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodLocationTransportMeansDetails = obj_
            obj_.original_tagname_ = 'GoodLocationTransportMeansDetails'
        elif nodeName_ == 'UnifiedAddressDetails':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UnifiedAddressDetails = obj_
            obj_.original_tagname_ = 'UnifiedAddressDetails'
# end class GoodsLocationDetailsType


class InformationSourceDetailsType(GeneratedsSuper):
    """InformationSourceDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    м
    и
    с
    т
    о
    ч
    н
    и
    к
    е
    и
    л
    и
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    м
    р
    е
    с
    у
    р
    с
    е
    InformationSourceName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    г
    о
    р
    е
    с
    у
    р
    с
    а
    DetailsResourceId -- С
    с
    ы
    л
    к
    а
    н
    а
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    ы
    й
    р
    е
    с
    у
    р
    с
    EventDate -- Д
    а
    т
    а
    о
    б
    р
    а
    щ
    е
    н
    и
    я
    к
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    м
    у
    р
    е
    с
    у
    р
    с
    у
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformationSourceName=None, DetailsResourceId=None, EventDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.InformationSourceName = InformationSourceName
        self.validate_FreeText500Type(self.InformationSourceName)
        self.InformationSourceName_nsprefix_ = "clt_ru"
        self.DetailsResourceId = DetailsResourceId
        self.validate_String2048Type(self.DetailsResourceId)
        self.DetailsResourceId_nsprefix_ = "RUSclt_ru"
        if isinstance(EventDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EventDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EventDate
        self.EventDate = initvalue_
        self.EventDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformationSourceDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformationSourceDetailsType.subclass:
            return InformationSourceDetailsType.subclass(*args_, **kwargs_)
        else:
            return InformationSourceDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformationSourceName(self):
        return self.InformationSourceName
    def set_InformationSourceName(self, InformationSourceName):
        self.InformationSourceName = InformationSourceName
    def get_DetailsResourceId(self):
        return self.DetailsResourceId
    def set_DetailsResourceId(self, DetailsResourceId):
        self.DetailsResourceId = DetailsResourceId
    def get_EventDate(self):
        return self.EventDate
    def set_EventDate(self, EventDate):
        self.EventDate = EventDate
    def validate_FreeText500Type(self, value):
        result = True
        # Validate type FreeText500Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 500:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText500Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText500Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_String2048Type(self, value):
        result = True
        # Validate type String2048Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 2048:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on String2048Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on String2048Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.InformationSourceName is not None or
            self.DetailsResourceId is not None or
            self.EventDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='InformationSourceDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformationSourceDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformationSourceDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformationSourceDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformationSourceDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='InformationSourceDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='InformationSourceDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformationSourceName is not None:
            namespaceprefix_ = self.InformationSourceName_nsprefix_ + ':' if (UseCapturedNS_ and self.InformationSourceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformationSourceName>%s</%sInformationSourceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformationSourceName), input_name='InformationSourceName')), namespaceprefix_ , eol_))
        if self.DetailsResourceId is not None:
            namespaceprefix_ = self.DetailsResourceId_nsprefix_ + ':' if (UseCapturedNS_ and self.DetailsResourceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDetailsResourceId>%s</%sDetailsResourceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DetailsResourceId), input_name='DetailsResourceId')), namespaceprefix_ , eol_))
        if self.EventDate is not None:
            namespaceprefix_ = self.EventDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EventDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEventDate>%s</%sEventDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EventDate, input_name='EventDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformationSourceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformationSourceName')
            value_ = self.gds_validate_string(value_, node, 'InformationSourceName')
            self.InformationSourceName = value_
            self.InformationSourceName_nsprefix_ = child_.prefix
            # validate type FreeText500Type
            self.validate_FreeText500Type(self.InformationSourceName)
        elif nodeName_ == 'DetailsResourceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DetailsResourceId')
            value_ = self.gds_validate_string(value_, node, 'DetailsResourceId')
            self.DetailsResourceId = value_
            self.DetailsResourceId_nsprefix_ = child_.prefix
            # validate type String2048Type
            self.validate_String2048Type(self.DetailsResourceId)
        elif nodeName_ == 'EventDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EventDate = dval_
            self.EventDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.EventDate)
# end class InformationSourceDetailsType


class PaymentDocumentType(DocumentBaseType):
    """PaymentDocumentType -- П
    л
    а
    т
    е
    ж
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    CustomsDocumentCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    INN -- И
    Н
    Н
    PersonId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, CustomsDocumentCode=None, INN=None, PersonId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("PaymentDocumentType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate,  **kwargs_)
        self.CustomsDocumentCode = CustomsDocumentCode
        self.validate_CustomsDocumentCodeType(self.CustomsDocumentCode)
        self.CustomsDocumentCode_nsprefix_ = "clt_ru"
        self.INN = INN
        self.validate_INNIDType(self.INN)
        self.INN_nsprefix_ = "clt_ru"
        self.PersonId = PersonId
        self.validate_PersonIdType(self.PersonId)
        self.PersonId_nsprefix_ = "RUSclt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentDocumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentDocumentType.subclass:
            return PaymentDocumentType.subclass(*args_, **kwargs_)
        else:
            return PaymentDocumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomsDocumentCode(self):
        return self.CustomsDocumentCode
    def set_CustomsDocumentCode(self, CustomsDocumentCode):
        self.CustomsDocumentCode = CustomsDocumentCode
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_PersonId(self):
        return self.PersonId
    def set_PersonId(self, PersonId):
        self.PersonId = PersonId
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_INNIDType(self, value):
        result = True
        # Validate type INNIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on INNIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on INNIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_PersonIdType(self, value):
        result = True
        # Validate type PersonIdType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PersonIdType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PersonIdType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CustomsDocumentCode is not None or
            self.INN is not None or
            self.PersonId is not None or
            super(PaymentDocumentType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='PaymentDocumentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentDocumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentDocumentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentDocumentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentDocumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PaymentDocumentType'):
        super(PaymentDocumentType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentDocumentType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='PaymentDocumentType', fromsubclass_=False, pretty_print=True):
        super(PaymentDocumentType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomsDocumentCode is not None:
            namespaceprefix_ = self.CustomsDocumentCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsDocumentCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsDocumentCode>%s</%sCustomsDocumentCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsDocumentCode), input_name='CustomsDocumentCode')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.PersonId is not None:
            namespaceprefix_ = self.PersonId_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonId>%s</%sPersonId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonId), input_name='PersonId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(PaymentDocumentType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomsDocumentCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsDocumentCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsDocumentCode')
            self.CustomsDocumentCode = value_
            self.CustomsDocumentCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.CustomsDocumentCode)
        elif nodeName_ == 'INN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INNIDType
            self.validate_INNIDType(self.INN)
        elif nodeName_ == 'PersonId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonId')
            value_ = self.gds_validate_string(value_, node, 'PersonId')
            self.PersonId = value_
            self.PersonId_nsprefix_ = child_.prefix
            # validate type PersonIdType
            self.validate_PersonIdType(self.PersonId)
        super(PaymentDocumentType, self)._buildChildren(child_, node, nodeName_, True)
# end class PaymentDocumentType


class PaymentGuaranteeDetailsType(GeneratedsSuper):
    """PaymentGuaranteeDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    р
    е
    д
    о
    с
    т
    а
    в
    л
    е
    н
    н
    о
    м
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    и
    у
    п
    л
    а
    т
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    о
    ш
    л
    и
    н
    ,
    н
    а
    л
    о
    г
    о
    в
    PaymentGuaranteeMethodCode -- К
    о
    д
    с
    п
    о
    с
    о
    б
    а
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    у
    п
    л
    а
    т
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    о
    ш
    л
    и
    н
    ,
    н
    а
    л
    о
    г
    о
    в
    GuaranteeAmount -- С
    у
    м
    м
    а
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    GuaranteeDocDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    е
    м
    п
    р
    е
    д
    о
    с
    т
    а
    в
    л
    е
    н
    и
    е
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    и
    с
    п
    о
    л
    н
    е
    н
    и
    я
    о
    б
    я
    з
    а
    н
    н
    о
    с
    т
    и
    п
    о
    у
    п
    л
    а
    т
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    INN -- И
    Н
    Н
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    о
    г
    о
    и
    л
    и
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    BankId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    б
    а
    н
    к
    а
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    й
    в
    п
    л
    а
    т
    е
    ж
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    а
    х
    (
    п
    л
    а
    т
    е
    ж
    н
    о
    е
    п
    о
    р
    у
    ч
    е
    н
    и
    е
    ,
    а
    к
    к
    р
    е
    д
    и
    т
    и
    в
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PaymentGuaranteeMethodCode=None, GuaranteeAmount=None, GuaranteeDocDetails=None, INN=None, BankId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.PaymentGuaranteeMethodCode = PaymentGuaranteeMethodCode
        self.validate_Code2Type(self.PaymentGuaranteeMethodCode)
        self.PaymentGuaranteeMethodCode_nsprefix_ = "clt_ru"
        self.GuaranteeAmount = GuaranteeAmount
        self.validate_AmountType(self.GuaranteeAmount)
        self.GuaranteeAmount_nsprefix_ = "RUScat_ru"
        self.GuaranteeDocDetails = GuaranteeDocDetails
        self.GuaranteeDocDetails_nsprefix_ = "RUScat_ru"
        self.INN = INN
        self.validate_INNIDType(self.INN)
        self.INN_nsprefix_ = "clt_ru"
        self.BankId = BankId
        self.validate_BankIdType(self.BankId)
        self.BankId_nsprefix_ = "RUSclt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentGuaranteeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentGuaranteeDetailsType.subclass:
            return PaymentGuaranteeDetailsType.subclass(*args_, **kwargs_)
        else:
            return PaymentGuaranteeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentGuaranteeMethodCode(self):
        return self.PaymentGuaranteeMethodCode
    def set_PaymentGuaranteeMethodCode(self, PaymentGuaranteeMethodCode):
        self.PaymentGuaranteeMethodCode = PaymentGuaranteeMethodCode
    def get_GuaranteeAmount(self):
        return self.GuaranteeAmount
    def set_GuaranteeAmount(self, GuaranteeAmount):
        self.GuaranteeAmount = GuaranteeAmount
    def get_GuaranteeDocDetails(self):
        return self.GuaranteeDocDetails
    def set_GuaranteeDocDetails(self, GuaranteeDocDetails):
        self.GuaranteeDocDetails = GuaranteeDocDetails
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_BankId(self):
        return self.BankId
    def set_BankId(self, BankId):
        self.BankId = BankId
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_INNIDType(self, value):
        result = True
        # Validate type INNIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 12:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on INNIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on INNIDType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_BankIdType(self, value):
        result = True
        # Validate type BankIdType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_BankIdType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_BankIdType_patterns_, ))
                result = False
        return result
    validate_BankIdType_patterns_ = [['^([0-9]{9}|[A-Z]{6}[A-Z0-9]{2}|[A-Z]{6}[A-Z0-9]{5})$']]
    def has__content(self):
        if (
            self.PaymentGuaranteeMethodCode is not None or
            self.GuaranteeAmount is not None or
            self.GuaranteeDocDetails is not None or
            self.INN is not None or
            self.BankId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='PaymentGuaranteeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentGuaranteeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentGuaranteeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentGuaranteeDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentGuaranteeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PaymentGuaranteeDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='PaymentGuaranteeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentGuaranteeMethodCode is not None:
            namespaceprefix_ = self.PaymentGuaranteeMethodCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentGuaranteeMethodCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentGuaranteeMethodCode>%s</%sPaymentGuaranteeMethodCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentGuaranteeMethodCode), input_name='PaymentGuaranteeMethodCode')), namespaceprefix_ , eol_))
        if self.GuaranteeAmount is not None:
            namespaceprefix_ = self.GuaranteeAmount_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeAmount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGuaranteeAmount>%s</%sGuaranteeAmount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.GuaranteeAmount, input_name='GuaranteeAmount'), namespaceprefix_ , eol_))
        if self.GuaranteeDocDetails is not None:
            namespaceprefix_ = self.GuaranteeDocDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeDocDetails_nsprefix_) else ''
            self.GuaranteeDocDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GuaranteeDocDetails', pretty_print=pretty_print)
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.BankId is not None:
            namespaceprefix_ = self.BankId_nsprefix_ + ':' if (UseCapturedNS_ and self.BankId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBankId>%s</%sBankId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BankId), input_name='BankId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentGuaranteeMethodCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentGuaranteeMethodCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentGuaranteeMethodCode')
            self.PaymentGuaranteeMethodCode = value_
            self.PaymentGuaranteeMethodCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.PaymentGuaranteeMethodCode)
        elif nodeName_ == 'GuaranteeAmount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'GuaranteeAmount')
            fval_ = self.gds_validate_decimal(fval_, node, 'GuaranteeAmount')
            self.GuaranteeAmount = fval_
            self.GuaranteeAmount_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.GuaranteeAmount)
        elif nodeName_ == 'GuaranteeDocDetails':
            class_obj_ = self.get_class_obj_(child_, DocBaseV2Type)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GuaranteeDocDetails = obj_
            obj_.original_tagname_ = 'GuaranteeDocDetails'
        elif nodeName_ == 'INN':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INNIDType
            self.validate_INNIDType(self.INN)
        elif nodeName_ == 'BankId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'BankId')
            value_ = self.gds_validate_string(value_, node, 'BankId')
            self.BankId = value_
            self.BankId_nsprefix_ = child_.prefix
            # validate type BankIdType
            self.validate_BankIdType(self.BankId)
# end class PaymentGuaranteeDetailsType


class PlaceDetailsType(GeneratedsSuper):
    """PlaceDetailsType -- М
    е
    с
    т
    о
    PlaceName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    (
    н
    а
    з
    в
    а
    н
    и
    е
    )
    м
    е
    с
    т
    а
    (
    г
    е
    о
    г
    р
    а
    ф
    и
    ч
    е
    с
    к
    о
    г
    о
    п
    у
    н
    к
    т
    а
    )
    AddressDetails -- А
    д
    р
    е
    с
    м
    е
    с
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PlaceName=None, AddressDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.PlaceName = PlaceName
        self.validate_Name120Type(self.PlaceName)
        self.PlaceName_nsprefix_ = "RUSclt_ru"
        self.AddressDetails = AddressDetails
        self.AddressDetails_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PlaceDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PlaceDetailsType.subclass:
            return PlaceDetailsType.subclass(*args_, **kwargs_)
        else:
            return PlaceDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PlaceName(self):
        return self.PlaceName
    def set_PlaceName(self, PlaceName):
        self.PlaceName = PlaceName
    def get_AddressDetails(self):
        return self.AddressDetails
    def set_AddressDetails(self, AddressDetails):
        self.AddressDetails = AddressDetails
    def validate_Name120Type(self, value):
        result = True
        # Validate type Name120Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 120:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Name120Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Name120Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PlaceName is not None or
            self.AddressDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='PlaceDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PlaceDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PlaceDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PlaceDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PlaceDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PlaceDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='PlaceDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PlaceName is not None:
            namespaceprefix_ = self.PlaceName_nsprefix_ + ':' if (UseCapturedNS_ and self.PlaceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlaceName>%s</%sPlaceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PlaceName), input_name='PlaceName')), namespaceprefix_ , eol_))
        if self.AddressDetails is not None:
            namespaceprefix_ = self.AddressDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AddressDetails_nsprefix_) else ''
            self.AddressDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AddressDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PlaceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PlaceName')
            value_ = self.gds_validate_string(value_, node, 'PlaceName')
            self.PlaceName = value_
            self.PlaceName_nsprefix_ = child_.prefix
            # validate type Name120Type
            self.validate_Name120Type(self.PlaceName)
        elif nodeName_ == 'AddressDetails':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AddressDetails = obj_
            obj_.original_tagname_ = 'AddressDetails'
# end class PlaceDetailsType


class PowerOfAttorneyDetailsType(DocBaseV2Type):
    """PowerOfAttorneyDetailsType -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    п
    о
    л
    н
    о
    м
    о
    ч
    и
    я
    DocArchIdDetails -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    у
    (
    с
    в
    е
    д
    е
    н
    и
    я
    м
    )
    п
    р
    и
    р
    а
    з
    м
    е
    щ
    е
    н
    и
    и
    в
    х
    р
    а
    н
    и
    л
    и
    щ
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocBaseV2Type
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocStartDate=None, DocValidityDate=None, DocKindCode=None, DocArchIdDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("PowerOfAttorneyDetailsType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, DocStartDate, DocValidityDate, DocKindCode,  **kwargs_)
        self.DocArchIdDetails = DocArchIdDetails
        self.DocArchIdDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PowerOfAttorneyDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PowerOfAttorneyDetailsType.subclass:
            return PowerOfAttorneyDetailsType.subclass(*args_, **kwargs_)
        else:
            return PowerOfAttorneyDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocArchIdDetails(self):
        return self.DocArchIdDetails
    def set_DocArchIdDetails(self, DocArchIdDetails):
        self.DocArchIdDetails = DocArchIdDetails
    def has__content(self):
        if (
            self.DocArchIdDetails is not None or
            super(PowerOfAttorneyDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='PowerOfAttorneyDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PowerOfAttorneyDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PowerOfAttorneyDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PowerOfAttorneyDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PowerOfAttorneyDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PowerOfAttorneyDetailsType'):
        super(PowerOfAttorneyDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PowerOfAttorneyDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='PowerOfAttorneyDetailsType', fromsubclass_=False, pretty_print=True):
        super(PowerOfAttorneyDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocArchIdDetails is not None:
            namespaceprefix_ = self.DocArchIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DocArchIdDetails_nsprefix_) else ''
            self.DocArchIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocArchIdDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(PowerOfAttorneyDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocArchIdDetails':
            class_obj_ = self.get_class_obj_(child_, RFBasePresentedDocIDType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocArchIdDetails = obj_
            obj_.original_tagname_ = 'DocArchIdDetails'
        super(PowerOfAttorneyDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class PowerOfAttorneyDetailsType


class PrecedingDocDetailsType(GeneratedsSuper):
    """PrecedingDocDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    LineId -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    з
    а
    п
    и
    с
    и
    о
    п
    е
    р
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    PrecedingDocumentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    PrecedingDocumentName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    CustomsDocIdDetails -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    о
    в
    а
    р
    ы
    ,
    т
    р
    а
    н
    з
    и
    т
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    ,
    з
    а
    я
    в
    л
    е
    н
    и
    я
    о
    в
    ы
    п
    у
    с
    к
    е
    т
    о
    в
    а
    р
    о
    в
    д
    о
    п
    о
    д
    а
    ч
    и
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    о
    в
    а
    р
    ы
    и
    л
    и
    з
    а
    я
    в
    л
    е
    н
    и
    я
    о
    с
    о
    в
    е
    р
    ш
    е
    н
    и
    и
    о
    п
    е
    р
    а
    ц
    и
    й
    в
    о
    т
    н
    о
    ш
    е
    н
    и
    и
    в
    р
    е
    м
    е
    н
    н
    о
    в
    ы
    в
    е
    з
    е
    н
    н
    ы
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    м
    е
    ж
    д
    у
    н
    а
    р
    о
    д
    н
    о
    й
    п
    е
    р
    е
    в
    о
    з
    к
    и
    ,
    я
    в
    л
    я
    ю
    щ
    и
    х
    с
    я
    т
    о
    в
    а
    р
    а
    м
    и
    ,
    п
    о
    м
    е
    щ
    е
    н
    н
    ы
    м
    и
    п
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    в
    в
    о
    з
    а
    (
    д
    о
    п
    у
    с
    к
    а
    )
    DTMDocDetails -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    е
    с
    р
    е
    д
    с
    т
    в
    о
    PIDocumentNumber -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    п
    р
    е
    д
    в
    а
    р
    и
    т
    е
    л
    ь
    н
    о
    й
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    TIRIdDetails -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    OtherPrDocumentNumber -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    и
    н
    о
    г
    о
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    OtherPrDocumentDate -- Д
    а
    т
    а
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    и
    н
    о
    г
    о
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrecedingDocumentGoodsNumeric -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    т
    о
    в
    а
    р
    а
    в
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    PrecedingGoodsDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    е
    ,
    з
    а
    я
    в
    л
    е
    н
    н
    ы
    е
    в
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LineId=None, PrecedingDocumentModeCode=None, PrecedingDocumentName=None, CustomsDocIdDetails=None, DTMDocDetails=None, PIDocumentNumber=None, TIRIdDetails=None, OtherPrDocumentNumber=None, OtherPrDocumentDate=None, PrecedingDocumentGoodsNumeric=None, PrecedingGoodsDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.LineId = LineId
        self.validate_Text40Type(self.LineId)
        self.LineId_nsprefix_ = "clt_ru"
        self.PrecedingDocumentModeCode = PrecedingDocumentModeCode
        self.validate_CustomsDocumentCodeType(self.PrecedingDocumentModeCode)
        self.PrecedingDocumentModeCode_nsprefix_ = "clt_ru"
        self.PrecedingDocumentName = PrecedingDocumentName
        self.validate_DocumentNameType(self.PrecedingDocumentName)
        self.PrecedingDocumentName_nsprefix_ = "clt_ru"
        self.CustomsDocIdDetails = CustomsDocIdDetails
        self.CustomsDocIdDetails_nsprefix_ = "RUDECLcat"
        self.DTMDocDetails = DTMDocDetails
        self.DTMDocDetails_nsprefix_ = "RUDECLcat"
        self.PIDocumentNumber = PIDocumentNumber
        self.PIDocumentNumber_nsprefix_ = "catESAD_cu"
        self.TIRIdDetails = TIRIdDetails
        self.TIRIdDetails_nsprefix_ = "RUDECLcat"
        self.OtherPrDocumentNumber = OtherPrDocumentNumber
        self.validate_DocumentNumberType(self.OtherPrDocumentNumber)
        self.OtherPrDocumentNumber_nsprefix_ = "clt_ru"
        if isinstance(OtherPrDocumentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OtherPrDocumentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OtherPrDocumentDate
        self.OtherPrDocumentDate = initvalue_
        self.OtherPrDocumentDate_nsprefix_ = "clt_ru"
        self.PrecedingDocumentGoodsNumeric = PrecedingDocumentGoodsNumeric
        self.validate_Count3Type(self.PrecedingDocumentGoodsNumeric)
        self.PrecedingDocumentGoodsNumeric_nsprefix_ = "clt_ru"
        self.PrecedingGoodsDetails = PrecedingGoodsDetails
        self.PrecedingGoodsDetails_nsprefix_ = "RUDECLcat"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrecedingDocDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrecedingDocDetailsType.subclass:
            return PrecedingDocDetailsType.subclass(*args_, **kwargs_)
        else:
            return PrecedingDocDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LineId(self):
        return self.LineId
    def set_LineId(self, LineId):
        self.LineId = LineId
    def get_PrecedingDocumentModeCode(self):
        return self.PrecedingDocumentModeCode
    def set_PrecedingDocumentModeCode(self, PrecedingDocumentModeCode):
        self.PrecedingDocumentModeCode = PrecedingDocumentModeCode
    def get_PrecedingDocumentName(self):
        return self.PrecedingDocumentName
    def set_PrecedingDocumentName(self, PrecedingDocumentName):
        self.PrecedingDocumentName = PrecedingDocumentName
    def get_CustomsDocIdDetails(self):
        return self.CustomsDocIdDetails
    def set_CustomsDocIdDetails(self, CustomsDocIdDetails):
        self.CustomsDocIdDetails = CustomsDocIdDetails
    def get_DTMDocDetails(self):
        return self.DTMDocDetails
    def set_DTMDocDetails(self, DTMDocDetails):
        self.DTMDocDetails = DTMDocDetails
    def get_PIDocumentNumber(self):
        return self.PIDocumentNumber
    def set_PIDocumentNumber(self, PIDocumentNumber):
        self.PIDocumentNumber = PIDocumentNumber
    def get_TIRIdDetails(self):
        return self.TIRIdDetails
    def set_TIRIdDetails(self, TIRIdDetails):
        self.TIRIdDetails = TIRIdDetails
    def get_OtherPrDocumentNumber(self):
        return self.OtherPrDocumentNumber
    def set_OtherPrDocumentNumber(self, OtherPrDocumentNumber):
        self.OtherPrDocumentNumber = OtherPrDocumentNumber
    def get_OtherPrDocumentDate(self):
        return self.OtherPrDocumentDate
    def set_OtherPrDocumentDate(self, OtherPrDocumentDate):
        self.OtherPrDocumentDate = OtherPrDocumentDate
    def get_PrecedingDocumentGoodsNumeric(self):
        return self.PrecedingDocumentGoodsNumeric
    def set_PrecedingDocumentGoodsNumeric(self, PrecedingDocumentGoodsNumeric):
        self.PrecedingDocumentGoodsNumeric = PrecedingDocumentGoodsNumeric
    def get_PrecedingGoodsDetails(self):
        return self.PrecedingGoodsDetails
    def set_PrecedingGoodsDetails(self, PrecedingGoodsDetails):
        self.PrecedingGoodsDetails = PrecedingGoodsDetails
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentNameType(self, value):
        result = True
        # Validate type DocumentNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_Count3Type(self, value):
        result = True
        # Validate type Count3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.LineId is not None or
            self.PrecedingDocumentModeCode is not None or
            self.PrecedingDocumentName is not None or
            self.CustomsDocIdDetails is not None or
            self.DTMDocDetails is not None or
            self.PIDocumentNumber is not None or
            self.TIRIdDetails is not None or
            self.OtherPrDocumentNumber is not None or
            self.OtherPrDocumentDate is not None or
            self.PrecedingDocumentGoodsNumeric is not None or
            self.PrecedingGoodsDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='PrecedingDocDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrecedingDocDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrecedingDocDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrecedingDocDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrecedingDocDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PrecedingDocDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='PrecedingDocDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LineId is not None:
            namespaceprefix_ = self.LineId_nsprefix_ + ':' if (UseCapturedNS_ and self.LineId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineId>%s</%sLineId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LineId), input_name='LineId')), namespaceprefix_ , eol_))
        if self.PrecedingDocumentModeCode is not None:
            namespaceprefix_ = self.PrecedingDocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentModeCode>%s</%sPrecedingDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentModeCode), input_name='PrecedingDocumentModeCode')), namespaceprefix_ , eol_))
        if self.PrecedingDocumentName is not None:
            namespaceprefix_ = self.PrecedingDocumentName_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentName>%s</%sPrecedingDocumentName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentName), input_name='PrecedingDocumentName')), namespaceprefix_ , eol_))
        if self.CustomsDocIdDetails is not None:
            namespaceprefix_ = self.CustomsDocIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsDocIdDetails_nsprefix_) else ''
            self.CustomsDocIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CustomsDocIdDetails', pretty_print=pretty_print)
        if self.DTMDocDetails is not None:
            namespaceprefix_ = self.DTMDocDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DTMDocDetails_nsprefix_) else ''
            self.DTMDocDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DTMDocDetails', pretty_print=pretty_print)
        if self.PIDocumentNumber is not None:
            namespaceprefix_ = self.PIDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PIDocumentNumber_nsprefix_) else ''
            self.PIDocumentNumber.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PIDocumentNumber', pretty_print=pretty_print)
        if self.TIRIdDetails is not None:
            namespaceprefix_ = self.TIRIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRIdDetails_nsprefix_) else ''
            self.TIRIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TIRIdDetails', pretty_print=pretty_print)
        if self.OtherPrDocumentNumber is not None:
            namespaceprefix_ = self.OtherPrDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherPrDocumentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOtherPrDocumentNumber>%s</%sOtherPrDocumentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OtherPrDocumentNumber), input_name='OtherPrDocumentNumber')), namespaceprefix_ , eol_))
        if self.OtherPrDocumentDate is not None:
            namespaceprefix_ = self.OtherPrDocumentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OtherPrDocumentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOtherPrDocumentDate>%s</%sOtherPrDocumentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OtherPrDocumentDate, input_name='OtherPrDocumentDate'), namespaceprefix_ , eol_))
        if self.PrecedingDocumentGoodsNumeric is not None:
            namespaceprefix_ = self.PrecedingDocumentGoodsNumeric_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentGoodsNumeric_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentGoodsNumeric>%s</%sPrecedingDocumentGoodsNumeric>%s' % (namespaceprefix_ , self.gds_format_integer(self.PrecedingDocumentGoodsNumeric, input_name='PrecedingDocumentGoodsNumeric'), namespaceprefix_ , eol_))
        if self.PrecedingGoodsDetails is not None:
            namespaceprefix_ = self.PrecedingGoodsDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingGoodsDetails_nsprefix_) else ''
            self.PrecedingGoodsDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrecedingGoodsDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LineId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LineId')
            value_ = self.gds_validate_string(value_, node, 'LineId')
            self.LineId = value_
            self.LineId_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.LineId)
        elif nodeName_ == 'PrecedingDocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentModeCode')
            self.PrecedingDocumentModeCode = value_
            self.PrecedingDocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.PrecedingDocumentModeCode)
        elif nodeName_ == 'PrecedingDocumentName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentName')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentName')
            self.PrecedingDocumentName = value_
            self.PrecedingDocumentName_nsprefix_ = child_.prefix
            # validate type DocumentNameType
            self.validate_DocumentNameType(self.PrecedingDocumentName)
        elif nodeName_ == 'CustomsDocIdDetails':
            obj_ = CustomDocIDType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CustomsDocIdDetails = obj_
            obj_.original_tagname_ = 'CustomsDocIdDetails'
        elif nodeName_ == 'DTMDocDetails':
            obj_ = DTMDocDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DTMDocDetails = obj_
            obj_.original_tagname_ = 'DTMDocDetails'
        elif nodeName_ == 'PIDocumentNumber':
            obj_ = PIRegNumberType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PIDocumentNumber = obj_
            obj_.original_tagname_ = 'PIDocumentNumber'
        elif nodeName_ == 'TIRIdDetails':
            obj_ = TIRIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TIRIdDetails = obj_
            obj_.original_tagname_ = 'TIRIdDetails'
        elif nodeName_ == 'OtherPrDocumentNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OtherPrDocumentNumber')
            value_ = self.gds_validate_string(value_, node, 'OtherPrDocumentNumber')
            self.OtherPrDocumentNumber = value_
            self.OtherPrDocumentNumber_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.OtherPrDocumentNumber)
        elif nodeName_ == 'OtherPrDocumentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OtherPrDocumentDate = dval_
            self.OtherPrDocumentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.OtherPrDocumentDate)
        elif nodeName_ == 'PrecedingDocumentGoodsNumeric' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'PrecedingDocumentGoodsNumeric')
            ival_ = self.gds_validate_integer(ival_, node, 'PrecedingDocumentGoodsNumeric')
            self.PrecedingDocumentGoodsNumeric = ival_
            self.PrecedingDocumentGoodsNumeric_nsprefix_ = child_.prefix
            # validate type Count3Type
            self.validate_Count3Type(self.PrecedingDocumentGoodsNumeric)
        elif nodeName_ == 'PrecedingGoodsDetails':
            obj_ = PrecedingGoodsDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrecedingGoodsDetails = obj_
            obj_.original_tagname_ = 'PrecedingGoodsDetails'
# end class PrecedingDocDetailsType


class PrecedingDocumentCustomsType(GeneratedsSuper):
    """PrecedingDocumentCustomsType -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    е
    д
    а
    н
    н
    ы
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrecedingDocumentCustomsCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    PrecedingDocumentDate -- П
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    и
    й
    д
    о
    к
    у
    м
    е
    н
    т
    -
    д
    а
    т
    а
      
    * PrecedingDocumentNumber -- П
      р
      е
      д
      ш
      е
      с
      т
      в
      у
      ю
      щ
      и
      й
      д
      о
      к
      у
      м
      е
      н
      т
      -
      р
      е
      г
      и
      с
      т
      р
      а
      ц
      и
      о
      н
      н
      ы
      й
      н
      о
      м
      е
      р
      д
      о
      к
      у
      м
      е
      н
      т
      а
      /
      н
      о
      м
      е
      р
      д
      о
      к
      у
      м
      е
      н
      т
      а
      п
      р
      и
      т
      р
      а
      н
      з
      и
      т
      е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, PrecedingDocumentCustomsCode=None, PrecedingDocumentDate=None, PrecedingDocumentNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.PrecedingDocumentCustomsCode = PrecedingDocumentCustomsCode
        self.validate_CustomsCodeType(self.PrecedingDocumentCustomsCode)
        self.PrecedingDocumentCustomsCode_nsprefix_ = "clt_ru"
        if isinstance(PrecedingDocumentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PrecedingDocumentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PrecedingDocumentDate
        self.PrecedingDocumentDate = initvalue_
        self.PrecedingDocumentDate_nsprefix_ = "clt_ru"
        self.PrecedingDocumentNumber = PrecedingDocumentNumber
        self.validate_PrecedingDocumentNumberType(self.PrecedingDocumentNumber)
        self.PrecedingDocumentNumber_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrecedingDocumentCustomsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrecedingDocumentCustomsType.subclass:
            return PrecedingDocumentCustomsType.subclass(*args_, **kwargs_)
        else:
            return PrecedingDocumentCustomsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PrecedingDocumentCustomsCode(self):
        return self.PrecedingDocumentCustomsCode
    def set_PrecedingDocumentCustomsCode(self, PrecedingDocumentCustomsCode):
        self.PrecedingDocumentCustomsCode = PrecedingDocumentCustomsCode
    def get_PrecedingDocumentDate(self):
        return self.PrecedingDocumentDate
    def set_PrecedingDocumentDate(self, PrecedingDocumentDate):
        self.PrecedingDocumentDate = PrecedingDocumentDate
    def get_PrecedingDocumentNumber(self):
        return self.PrecedingDocumentNumber
    def set_PrecedingDocumentNumber(self, PrecedingDocumentNumber):
        self.PrecedingDocumentNumber = PrecedingDocumentNumber
    def validate_CustomsCodeType(self, value):
        result = True
        # Validate type CustomsCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CustomsCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CustomsCodeType_patterns_, ))
                result = False
        return result
    validate_CustomsCodeType_patterns_ = [['^([0-9]{2}|[0-9]{5}|[0-9]{8})$']]
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_PrecedingDocumentNumberType(self, value):
        result = True
        # Validate type PrecedingDocumentNumberType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 7:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PrecedingDocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PrecedingDocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PrecedingDocumentCustomsCode is not None or
            self.PrecedingDocumentDate is not None or
            self.PrecedingDocumentNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PrecedingDocumentCustomsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrecedingDocumentCustomsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrecedingDocumentCustomsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrecedingDocumentCustomsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrecedingDocumentCustomsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PrecedingDocumentCustomsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PrecedingDocumentCustomsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PrecedingDocumentCustomsCode is not None:
            namespaceprefix_ = self.PrecedingDocumentCustomsCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentCustomsCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentCustomsCode>%s</%sPrecedingDocumentCustomsCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentCustomsCode), input_name='PrecedingDocumentCustomsCode')), namespaceprefix_ , eol_))
        if self.PrecedingDocumentDate is not None:
            namespaceprefix_ = self.PrecedingDocumentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentDate>%s</%sPrecedingDocumentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PrecedingDocumentDate, input_name='PrecedingDocumentDate'), namespaceprefix_ , eol_))
        if self.PrecedingDocumentNumber is not None:
            namespaceprefix_ = self.PrecedingDocumentNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PrecedingDocumentNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrecedingDocumentNumber>%s</%sPrecedingDocumentNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PrecedingDocumentNumber), input_name='PrecedingDocumentNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PrecedingDocumentCustomsCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentCustomsCode')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentCustomsCode')
            self.PrecedingDocumentCustomsCode = value_
            self.PrecedingDocumentCustomsCode_nsprefix_ = child_.prefix
            # validate type CustomsCodeType
            self.validate_CustomsCodeType(self.PrecedingDocumentCustomsCode)
        elif nodeName_ == 'PrecedingDocumentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PrecedingDocumentDate = dval_
            self.PrecedingDocumentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.PrecedingDocumentDate)
        elif nodeName_ == 'PrecedingDocumentNumber':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PrecedingDocumentNumber')
            value_ = self.gds_validate_string(value_, node, 'PrecedingDocumentNumber')
            self.PrecedingDocumentNumber = value_
            self.PrecedingDocumentNumber_nsprefix_ = child_.prefix
            # validate type PrecedingDocumentNumberType
            self.validate_PrecedingDocumentNumberType(self.PrecedingDocumentNumber)
# end class PrecedingDocumentCustomsType


class PrecedingDocumentOtherType(GeneratedsSuper):
    """PrecedingDocumentOtherType -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    е
    д
    а
    н
    н
    ы
    е
    и
    н
    о
    г
    о
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    DocId -- Ц
    и
    ф
    р
    о
    в
    о
    е
    и
    л
    и
    б
    у
    к
    в
    е
    н
    н
    о
    -
    ц
    и
    ф
    р
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    о
    е
    д
    о
    к
    у
    м
    е
    н
    т
    у
    п
    р
    и
    е
    г
    о
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    DocCreationDate -- Д
    а
    т
    а
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    и
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocId=None, DocCreationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.DocId = DocId
        self.validate_DocumentNumberType(self.DocId)
        self.DocId_nsprefix_ = "clt_ru"
        if isinstance(DocCreationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocCreationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocCreationDate
        self.DocCreationDate = initvalue_
        self.DocCreationDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrecedingDocumentOtherType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrecedingDocumentOtherType.subclass:
            return PrecedingDocumentOtherType.subclass(*args_, **kwargs_)
        else:
            return PrecedingDocumentOtherType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocId(self):
        return self.DocId
    def set_DocId(self, DocId):
        self.DocId = DocId
    def get_DocCreationDate(self):
        return self.DocCreationDate
    def set_DocCreationDate(self, DocCreationDate):
        self.DocCreationDate = DocCreationDate
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.DocId is not None or
            self.DocCreationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PrecedingDocumentOtherType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrecedingDocumentOtherType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrecedingDocumentOtherType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrecedingDocumentOtherType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrecedingDocumentOtherType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PrecedingDocumentOtherType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PrecedingDocumentOtherType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocId is not None:
            namespaceprefix_ = self.DocId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocId>%s</%sDocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocId), input_name='DocId')), namespaceprefix_ , eol_))
        if self.DocCreationDate is not None:
            namespaceprefix_ = self.DocCreationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocCreationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocCreationDate>%s</%sDocCreationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocCreationDate, input_name='DocCreationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocId')
            value_ = self.gds_validate_string(value_, node, 'DocId')
            self.DocId = value_
            self.DocId_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.DocId)
        elif nodeName_ == 'DocCreationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocCreationDate = dval_
            self.DocCreationDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocCreationDate)
# end class PrecedingDocumentOtherType


class PrecedingGoodsDetailsType(GeneratedsSuper):
    """PrecedingGoodsDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    е
    ,
    з
    а
    я
    в
    л
    е
    н
    н
    о
    м
    в
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    DeclGrossWeightQuantity -- М
    а
    с
    с
    а
    б
    р
    у
    т
    т
    о
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    г
    о
    т
    о
    в
    а
    р
    а
      
    * SupplementaryQuantity -- К
      о
      л
      и
      ч
      е
      с
      т
      в
      о
      д
      е
      к
      л
      а
      р
      и
      р
      у
      е
      м
      о
      г
      о
      т
      о
      в
      а
      р
      а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DeclGrossWeightQuantity=None, SupplementaryQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.DeclGrossWeightQuantity = DeclGrossWeightQuantity
        self.DeclGrossWeightQuantity_nsprefix_ = "cat_ru"
        if SupplementaryQuantity is None:
            self.SupplementaryQuantity = []
        else:
            self.SupplementaryQuantity = SupplementaryQuantity
        self.SupplementaryQuantity_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PrecedingGoodsDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PrecedingGoodsDetailsType.subclass:
            return PrecedingGoodsDetailsType.subclass(*args_, **kwargs_)
        else:
            return PrecedingGoodsDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DeclGrossWeightQuantity(self):
        return self.DeclGrossWeightQuantity
    def set_DeclGrossWeightQuantity(self, DeclGrossWeightQuantity):
        self.DeclGrossWeightQuantity = DeclGrossWeightQuantity
    def get_SupplementaryQuantity(self):
        return self.SupplementaryQuantity
    def set_SupplementaryQuantity(self, SupplementaryQuantity):
        self.SupplementaryQuantity = SupplementaryQuantity
    def add_SupplementaryQuantity(self, value):
        self.SupplementaryQuantity.append(value)
    def insert_SupplementaryQuantity_at(self, index, value):
        self.SupplementaryQuantity.insert(index, value)
    def replace_SupplementaryQuantity_at(self, index, value):
        self.SupplementaryQuantity[index] = value
    def has__content(self):
        if (
            self.DeclGrossWeightQuantity is not None or
            self.SupplementaryQuantity
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='PrecedingGoodsDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PrecedingGoodsDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PrecedingGoodsDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PrecedingGoodsDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PrecedingGoodsDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PrecedingGoodsDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='PrecedingGoodsDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeclGrossWeightQuantity is not None:
            namespaceprefix_ = self.DeclGrossWeightQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclGrossWeightQuantity_nsprefix_) else ''
            self.DeclGrossWeightQuantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DeclGrossWeightQuantity', pretty_print=pretty_print)
        for SupplementaryQuantity_ in self.SupplementaryQuantity:
            namespaceprefix_ = self.SupplementaryQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplementaryQuantity_nsprefix_) else ''
            SupplementaryQuantity_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplementaryQuantity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DeclGrossWeightQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DeclGrossWeightQuantity = obj_
            obj_.original_tagname_ = 'DeclGrossWeightQuantity'
        elif nodeName_ == 'SupplementaryQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplementaryQuantity.append(obj_)
            obj_.original_tagname_ = 'SupplementaryQuantity'
# end class PrecedingGoodsDetailsType


class PresentedDocDetailsType(BasePresentedDocDetailsType):
    """PresentedDocDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    о
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    DocumentPresentingDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    ф
    а
    к
    т
    и
    ч
    е
    с
    к
    о
    м
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = BasePresentedDocDetailsType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocStartDate=None, DocValidityDate=None, CountryCode=None, DocKindCode=None, AuthorityName=None, AuthorityId=None, InformationSourceDetails=None, LineId=None, EDocCode=None, DocArchIdDetails=None, DocumentPresentingDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("PresentedDocDetailsType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, DocStartDate, DocValidityDate, CountryCode, DocKindCode, AuthorityName, AuthorityId, InformationSourceDetails, LineId, EDocCode, DocArchIdDetails,  **kwargs_)
        self.DocumentPresentingDetails = DocumentPresentingDetails
        self.DocumentPresentingDetails_nsprefix_ = "RUDECLcat"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PresentedDocDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PresentedDocDetailsType.subclass:
            return PresentedDocDetailsType.subclass(*args_, **kwargs_)
        else:
            return PresentedDocDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocumentPresentingDetails(self):
        return self.DocumentPresentingDetails
    def set_DocumentPresentingDetails(self, DocumentPresentingDetails):
        self.DocumentPresentingDetails = DocumentPresentingDetails
    def has__content(self):
        if (
            self.DocumentPresentingDetails is not None or
            super(PresentedDocDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0"', name_='PresentedDocDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PresentedDocDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PresentedDocDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PresentedDocDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PresentedDocDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='PresentedDocDetailsType'):
        super(PresentedDocDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PresentedDocDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0"', name_='PresentedDocDetailsType', fromsubclass_=False, pretty_print=True):
        super(PresentedDocDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocumentPresentingDetails is not None:
            namespaceprefix_ = self.DocumentPresentingDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentPresentingDetails_nsprefix_) else ''
            self.DocumentPresentingDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocumentPresentingDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(PresentedDocDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocumentPresentingDetails':
            obj_ = DocumentPresentingDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocumentPresentingDetails = obj_
            obj_.original_tagname_ = 'DocumentPresentingDetails'
        super(PresentedDocDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class PresentedDocDetailsType


class ProcessingGoodsDeclarationType(GeneratedsSuper):
    """ProcessingGoodsDeclarationType -- З
    а
    я
    в
    л
    е
    н
    и
    е
    н
    а
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    у
    т
    о
    в
    а
    р
    о
    в
    RateOutputGoods -- Н
    о
    р
    м
    а
    в
    ы
    х
    о
    д
    а
    п
    р
    о
    д
    у
    к
    т
    о
    в
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    ProcessingDoc -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    р
    е
    д
    ы
    д
    у
    щ
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    е
    о
    б
    у
    с
    л
    о
    в
    и
    я
    х
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
      
    * GoodsIdentificationMethod -- С
      п
      о
      с
      о
      б
      ы
      и
      д
      е
      н
      т
      и
      ф
      и
      к
      а
      ц
      и
      и
      в
      в
      е
      з
      е
      н
      н
      ы
      х
      /
      в
      ы
      в
      е
      з
      е
      н
      н
      ы
      х
      т
      о
      в
      а
      р
      о
      в
      в
      п
      р
      о
      д
      у
      к
      т
      а
      х
      п
      е
      р
      е
      р
      а
      б
      о
      т
      к
      и
    * ProcessingPlaceDetails -- М
      е
      с
      т
      о
      с
      о
      в
      е
      р
      ш
      е
      н
      и
      я
      о
      п
      е
      р
      а
      ц
      и
      й
      п
      о
      п
      е
      р
      е
      р
      а
      б
      о
      т
      к
      е
      т
      о
      в
      а
      р
      о
      в
    * Substitute -- С
      в
      е
      д
      е
      н
      и
      я
      о
      з
      а
      м
      е
      н
      е
      и
      н
      о
      с
      т
      р
      а
      н
      н
      ы
      х
      т
      о
      в
      а
      р
      о
      в
      э
      к
      в
      и
      в
      а
      л
      е
      н
      т
      н
      ы
      м
      и
      т
      о
      в
      а
      р
      а
      м
      и
    * Organization -- Н
      а
      и
      м
      е
      н
      о
      в
      а
      н
      и
      е
      л
      и
      ц
      а
      ,
      о
      с
      у
      щ
      е
      с
      т
      в
      л
      я
      ю
      щ
      е
      г
      о
      о
      п
      е
      р
      а
      ц
      и
      и
      п
      о
      п
      е
      р
      е
      р
      а
      б
      о
      т
      к
      е
      т
      о
      в
      а
      р
      о
      в
    * ProcessingProduct -- П
      р
      о
      д
      у
      к
      т
      п
      е
      р
      е
      р
      а
      б
      о
      т
      к
      и
    * WasteProducts -- О
      т
      х
      о
      д
      ы
      п
      е
      р
      е
      р
      а
      б
      о
      т
      к
      и
    * Heels -- О
      с
      т
      а
      т
      к
      и
    * ProcessingOperationDetails -- О
      п
      е
      р
      а
      ц
      и
      я
      п
      о
      п
      е
      р
      е
      р
      а
      б
      о
      т
      к
      е
      и
      с
      п
      о
      с
      о
      б
      е
      е
      с
      о
      в
      е
      р
      ш
      е
      н
      и
      я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RateOutputGoods=None, ProcessingDoc=None, GoodsIdentificationMethod=None, ProcessingPlaceDetails=None, Substitute=None, Organization=None, ProcessingProduct=None, WasteProducts=None, Heels=None, ProcessingOperationDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        if RateOutputGoods is None:
            self.RateOutputGoods = []
        else:
            self.RateOutputGoods = RateOutputGoods
        self.RateOutputGoods_nsprefix_ = "clt_ru"
        self.ProcessingDoc = ProcessingDoc
        self.ProcessingDoc_nsprefix_ = "catESAD_cu"
        if GoodsIdentificationMethod is None:
            self.GoodsIdentificationMethod = []
        else:
            self.GoodsIdentificationMethod = GoodsIdentificationMethod
        self.GoodsIdentificationMethod_nsprefix_ = "clt_ru"
        if ProcessingPlaceDetails is None:
            self.ProcessingPlaceDetails = []
        else:
            self.ProcessingPlaceDetails = ProcessingPlaceDetails
        self.ProcessingPlaceDetails_nsprefix_ = "RUDECLcat"
        if Substitute is None:
            self.Substitute = []
        else:
            self.Substitute = Substitute
        self.Substitute_nsprefix_ = "clt_ru"
        if Organization is None:
            self.Organization = []
        else:
            self.Organization = Organization
        self.Organization_nsprefix_ = "RUScat_ru"
        self.ProcessingProduct = ProcessingProduct
        self.ProcessingProduct_nsprefix_ = "catESAD_cu"
        if WasteProducts is None:
            self.WasteProducts = []
        else:
            self.WasteProducts = WasteProducts
        self.WasteProducts_nsprefix_ = "catESAD_cu"
        if Heels is None:
            self.Heels = []
        else:
            self.Heels = Heels
        self.Heels_nsprefix_ = "catESAD_cu"
        if ProcessingOperationDetails is None:
            self.ProcessingOperationDetails = []
        else:
            self.ProcessingOperationDetails = ProcessingOperationDetails
        self.ProcessingOperationDetails_nsprefix_ = "RUDECLcat"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessingGoodsDeclarationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessingGoodsDeclarationType.subclass:
            return ProcessingGoodsDeclarationType.subclass(*args_, **kwargs_)
        else:
            return ProcessingGoodsDeclarationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RateOutputGoods(self):
        return self.RateOutputGoods
    def set_RateOutputGoods(self, RateOutputGoods):
        self.RateOutputGoods = RateOutputGoods
    def add_RateOutputGoods(self, value):
        self.RateOutputGoods.append(value)
    def insert_RateOutputGoods_at(self, index, value):
        self.RateOutputGoods.insert(index, value)
    def replace_RateOutputGoods_at(self, index, value):
        self.RateOutputGoods[index] = value
    def get_ProcessingDoc(self):
        return self.ProcessingDoc
    def set_ProcessingDoc(self, ProcessingDoc):
        self.ProcessingDoc = ProcessingDoc
    def get_GoodsIdentificationMethod(self):
        return self.GoodsIdentificationMethod
    def set_GoodsIdentificationMethod(self, GoodsIdentificationMethod):
        self.GoodsIdentificationMethod = GoodsIdentificationMethod
    def add_GoodsIdentificationMethod(self, value):
        self.GoodsIdentificationMethod.append(value)
    def insert_GoodsIdentificationMethod_at(self, index, value):
        self.GoodsIdentificationMethod.insert(index, value)
    def replace_GoodsIdentificationMethod_at(self, index, value):
        self.GoodsIdentificationMethod[index] = value
    def get_ProcessingPlaceDetails(self):
        return self.ProcessingPlaceDetails
    def set_ProcessingPlaceDetails(self, ProcessingPlaceDetails):
        self.ProcessingPlaceDetails = ProcessingPlaceDetails
    def add_ProcessingPlaceDetails(self, value):
        self.ProcessingPlaceDetails.append(value)
    def insert_ProcessingPlaceDetails_at(self, index, value):
        self.ProcessingPlaceDetails.insert(index, value)
    def replace_ProcessingPlaceDetails_at(self, index, value):
        self.ProcessingPlaceDetails[index] = value
    def get_Substitute(self):
        return self.Substitute
    def set_Substitute(self, Substitute):
        self.Substitute = Substitute
    def add_Substitute(self, value):
        self.Substitute.append(value)
    def insert_Substitute_at(self, index, value):
        self.Substitute.insert(index, value)
    def replace_Substitute_at(self, index, value):
        self.Substitute[index] = value
    def get_Organization(self):
        return self.Organization
    def set_Organization(self, Organization):
        self.Organization = Organization
    def add_Organization(self, value):
        self.Organization.append(value)
    def insert_Organization_at(self, index, value):
        self.Organization.insert(index, value)
    def replace_Organization_at(self, index, value):
        self.Organization[index] = value
    def get_ProcessingProduct(self):
        return self.ProcessingProduct
    def set_ProcessingProduct(self, ProcessingProduct):
        self.ProcessingProduct = ProcessingProduct
    def get_WasteProducts(self):
        return self.WasteProducts
    def set_WasteProducts(self, WasteProducts):
        self.WasteProducts = WasteProducts
    def add_WasteProducts(self, value):
        self.WasteProducts.append(value)
    def insert_WasteProducts_at(self, index, value):
        self.WasteProducts.insert(index, value)
    def replace_WasteProducts_at(self, index, value):
        self.WasteProducts[index] = value
    def get_Heels(self):
        return self.Heels
    def set_Heels(self, Heels):
        self.Heels = Heels
    def add_Heels(self, value):
        self.Heels.append(value)
    def insert_Heels_at(self, index, value):
        self.Heels.insert(index, value)
    def replace_Heels_at(self, index, value):
        self.Heels[index] = value
    def get_ProcessingOperationDetails(self):
        return self.ProcessingOperationDetails
    def set_ProcessingOperationDetails(self, ProcessingOperationDetails):
        self.ProcessingOperationDetails = ProcessingOperationDetails
    def add_ProcessingOperationDetails(self, value):
        self.ProcessingOperationDetails.append(value)
    def insert_ProcessingOperationDetails_at(self, index, value):
        self.ProcessingOperationDetails.insert(index, value)
    def replace_ProcessingOperationDetails_at(self, index, value):
        self.ProcessingOperationDetails[index] = value
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.RateOutputGoods or
            self.ProcessingDoc is not None or
            self.GoodsIdentificationMethod or
            self.ProcessingPlaceDetails or
            self.Substitute or
            self.Organization or
            self.ProcessingProduct is not None or
            self.WasteProducts or
            self.Heels or
            self.ProcessingOperationDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='ProcessingGoodsDeclarationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProcessingGoodsDeclarationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProcessingGoodsDeclarationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProcessingGoodsDeclarationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProcessingGoodsDeclarationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='ProcessingGoodsDeclarationType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='ProcessingGoodsDeclarationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for RateOutputGoods_ in self.RateOutputGoods:
            namespaceprefix_ = self.RateOutputGoods_nsprefix_ + ':' if (UseCapturedNS_ and self.RateOutputGoods_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRateOutputGoods>%s</%sRateOutputGoods>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RateOutputGoods_), input_name='RateOutputGoods')), namespaceprefix_ , eol_))
        if self.ProcessingDoc is not None:
            namespaceprefix_ = self.ProcessingDoc_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingDoc_nsprefix_) else ''
            self.ProcessingDoc.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingDoc', pretty_print=pretty_print)
        for GoodsIdentificationMethod_ in self.GoodsIdentificationMethod:
            namespaceprefix_ = self.GoodsIdentificationMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsIdentificationMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsIdentificationMethod>%s</%sGoodsIdentificationMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(GoodsIdentificationMethod_), input_name='GoodsIdentificationMethod')), namespaceprefix_ , eol_))
        for ProcessingPlaceDetails_ in self.ProcessingPlaceDetails:
            namespaceprefix_ = self.ProcessingPlaceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingPlaceDetails_nsprefix_) else ''
            ProcessingPlaceDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingPlaceDetails', pretty_print=pretty_print)
        for Substitute_ in self.Substitute:
            namespaceprefix_ = self.Substitute_nsprefix_ + ':' if (UseCapturedNS_ and self.Substitute_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubstitute>%s</%sSubstitute>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Substitute_), input_name='Substitute')), namespaceprefix_ , eol_))
        for Organization_ in self.Organization:
            namespaceprefix_ = self.Organization_nsprefix_ + ':' if (UseCapturedNS_ and self.Organization_nsprefix_) else ''
            Organization_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Organization', pretty_print=pretty_print)
        if self.ProcessingProduct is not None:
            namespaceprefix_ = self.ProcessingProduct_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingProduct_nsprefix_) else ''
            self.ProcessingProduct.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingProduct', pretty_print=pretty_print)
        for WasteProducts_ in self.WasteProducts:
            namespaceprefix_ = self.WasteProducts_nsprefix_ + ':' if (UseCapturedNS_ and self.WasteProducts_nsprefix_) else ''
            WasteProducts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WasteProducts', pretty_print=pretty_print)
        for Heels_ in self.Heels:
            namespaceprefix_ = self.Heels_nsprefix_ + ':' if (UseCapturedNS_ and self.Heels_nsprefix_) else ''
            Heels_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Heels', pretty_print=pretty_print)
        for ProcessingOperationDetails_ in self.ProcessingOperationDetails:
            namespaceprefix_ = self.ProcessingOperationDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOperationDetails_nsprefix_) else ''
            ProcessingOperationDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ProcessingOperationDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RateOutputGoods':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RateOutputGoods')
            value_ = self.gds_validate_string(value_, node, 'RateOutputGoods')
            self.RateOutputGoods.append(value_)
            self.RateOutputGoods_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.RateOutputGoods[-1])
        elif nodeName_ == 'ProcessingDoc':
            class_obj_ = self.get_class_obj_(child_, DocBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingDoc = obj_
            obj_.original_tagname_ = 'ProcessingDoc'
        elif nodeName_ == 'GoodsIdentificationMethod':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GoodsIdentificationMethod')
            value_ = self.gds_validate_string(value_, node, 'GoodsIdentificationMethod')
            self.GoodsIdentificationMethod.append(value_)
            self.GoodsIdentificationMethod_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.GoodsIdentificationMethod[-1])
        elif nodeName_ == 'ProcessingPlaceDetails':
            obj_ = PlaceDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingPlaceDetails.append(obj_)
            obj_.original_tagname_ = 'ProcessingPlaceDetails'
        elif nodeName_ == 'Substitute':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Substitute')
            value_ = self.gds_validate_string(value_, node, 'Substitute')
            self.Substitute.append(value_)
            self.Substitute_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.Substitute[-1])
        elif nodeName_ == 'Organization':
            class_obj_ = self.get_class_obj_(child_, SubjectDetailsType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Organization.append(obj_)
            obj_.original_tagname_ = 'Organization'
        elif nodeName_ == 'ProcessingProduct':
            obj_ = ProcessingGoodsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingProduct = obj_
            obj_.original_tagname_ = 'ProcessingProduct'
        elif nodeName_ == 'WasteProducts':
            obj_ = ProcessingGoodsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WasteProducts.append(obj_)
            obj_.original_tagname_ = 'WasteProducts'
        elif nodeName_ == 'Heels':
            obj_ = ProcessingGoodsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Heels.append(obj_)
            obj_.original_tagname_ = 'Heels'
        elif nodeName_ == 'ProcessingOperationDetails':
            obj_ = ProcessingOperationDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ProcessingOperationDetails.append(obj_)
            obj_.original_tagname_ = 'ProcessingOperationDetails'
# end class ProcessingGoodsDeclarationType


class ProcessingOperationDetailsType(GeneratedsSuper):
    """ProcessingOperationDetailsType -- О
    п
    е
    р
    а
    ц
    и
    я
    п
    о
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    е
    и
    с
    п
    о
    с
    о
    б
    е
    е
    с
    о
    в
    е
    р
    ш
    е
    н
    и
    я
      
    * ProcessingOperationName -- Н
      а
      и
      м
      е
      н
      о
      в
      а
      н
      и
      е
      о
      п
      е
      р
      а
      ц
      и
      и
      п
      о
      п
      е
      р
      е
      р
      а
      б
      о
      т
      к
      е
    * ProcessingOperationMethodText -- О
      п
      и
      с
      а
      н
      и
      е
      с
      п
      о
      с
      о
      б
      а
      с
      о
      в
      е
      р
      ш
      е
      н
      и
      я
      о
      п
      е
      р
      а
      ц
      и
      и
      п
      о
      п
      е
      р
      е
      р
      а
      б
      о
      т
      к
      е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProcessingOperationName=None, ProcessingOperationMethodText=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.ProcessingOperationName = ProcessingOperationName
        self.validate_FreeText250Type(self.ProcessingOperationName)
        self.ProcessingOperationName_nsprefix_ = "clt_ru"
        self.ProcessingOperationMethodText = ProcessingOperationMethodText
        self.validate_FreeText4000Type(self.ProcessingOperationMethodText)
        self.ProcessingOperationMethodText_nsprefix_ = "RUSclt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProcessingOperationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProcessingOperationDetailsType.subclass:
            return ProcessingOperationDetailsType.subclass(*args_, **kwargs_)
        else:
            return ProcessingOperationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProcessingOperationName(self):
        return self.ProcessingOperationName
    def set_ProcessingOperationName(self, ProcessingOperationName):
        self.ProcessingOperationName = ProcessingOperationName
    def get_ProcessingOperationMethodText(self):
        return self.ProcessingOperationMethodText
    def set_ProcessingOperationMethodText(self, ProcessingOperationMethodText):
        self.ProcessingOperationMethodText = ProcessingOperationMethodText
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText4000Type(self, value):
        result = True
        # Validate type FreeText4000Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 4000:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText4000Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText4000Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.ProcessingOperationName is not None or
            self.ProcessingOperationMethodText is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='ProcessingOperationDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProcessingOperationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProcessingOperationDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProcessingOperationDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProcessingOperationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='ProcessingOperationDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='ProcessingOperationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProcessingOperationName is not None:
            namespaceprefix_ = self.ProcessingOperationName_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOperationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessingOperationName>%s</%sProcessingOperationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProcessingOperationName), input_name='ProcessingOperationName')), namespaceprefix_ , eol_))
        if self.ProcessingOperationMethodText is not None:
            namespaceprefix_ = self.ProcessingOperationMethodText_nsprefix_ + ':' if (UseCapturedNS_ and self.ProcessingOperationMethodText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProcessingOperationMethodText>%s</%sProcessingOperationMethodText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProcessingOperationMethodText), input_name='ProcessingOperationMethodText')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProcessingOperationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProcessingOperationName')
            value_ = self.gds_validate_string(value_, node, 'ProcessingOperationName')
            self.ProcessingOperationName = value_
            self.ProcessingOperationName_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.ProcessingOperationName)
        elif nodeName_ == 'ProcessingOperationMethodText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProcessingOperationMethodText')
            value_ = self.gds_validate_string(value_, node, 'ProcessingOperationMethodText')
            self.ProcessingOperationMethodText = value_
            self.ProcessingOperationMethodText_nsprefix_ = child_.prefix
            # validate type FreeText4000Type
            self.validate_FreeText4000Type(self.ProcessingOperationMethodText)
# end class ProcessingOperationDetailsType


class RegisterDocumentDetailsType(GeneratedsSuper):
    """RegisterDocumentDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    е
    м
    в
    к
    л
    ю
    ч
    е
    н
    и
    е
    в
    р
    е
    е
    с
    т
    р
    RegistrationNumberIdentifier -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    л
    и
    ц
    а
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    е
    м
    у
    п
    р
    и
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    ,
    и
    л
    и
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    DocCreationDate -- Д
    а
    т
    а
    п
    о
    д
    п
    и
    с
    а
    н
    и
    я
    ,
    у
    т
    в
    е
    р
    ж
    д
    е
    н
    и
    я
    и
    л
    и
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    RegisterDocumentCode -- Т
    и
    п
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    п
    о
    д
    т
    в
    е
    р
    ж
    д
    а
    ю
    щ
    е
    г
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    е
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    ReregistrationCode -- К
    о
    д
    и
    р
    о
    в
    а
    н
    н
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    п
    р
    и
    з
    н
    а
    к
    а
    п
    е
    р
    е
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    CountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegistrationNumberIdentifier=None, DocCreationDate=None, RegisterDocumentCode=None, ReregistrationCode=None, CountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.RegistrationNumberIdentifier = RegistrationNumberIdentifier
        self.validate_Id25Type(self.RegistrationNumberIdentifier)
        self.RegistrationNumberIdentifier_nsprefix_ = "RUSclt_ru"
        if isinstance(DocCreationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocCreationDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocCreationDate
        self.DocCreationDate = initvalue_
        self.DocCreationDate_nsprefix_ = "clt_ru"
        self.RegisterDocumentCode = RegisterDocumentCode
        self.validate_LetterIndicatorType(self.RegisterDocumentCode)
        self.RegisterDocumentCode_nsprefix_ = "clt_ru"
        self.ReregistrationCode = ReregistrationCode
        self.validate_CodeVariable3Type(self.ReregistrationCode)
        self.ReregistrationCode_nsprefix_ = "clt_ru"
        self.CountryCode = CountryCode
        self.validate_CountryA2CodeType(self.CountryCode)
        self.CountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegisterDocumentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegisterDocumentDetailsType.subclass:
            return RegisterDocumentDetailsType.subclass(*args_, **kwargs_)
        else:
            return RegisterDocumentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegistrationNumberIdentifier(self):
        return self.RegistrationNumberIdentifier
    def set_RegistrationNumberIdentifier(self, RegistrationNumberIdentifier):
        self.RegistrationNumberIdentifier = RegistrationNumberIdentifier
    def get_DocCreationDate(self):
        return self.DocCreationDate
    def set_DocCreationDate(self, DocCreationDate):
        self.DocCreationDate = DocCreationDate
    def get_RegisterDocumentCode(self):
        return self.RegisterDocumentCode
    def set_RegisterDocumentCode(self, RegisterDocumentCode):
        self.RegisterDocumentCode = RegisterDocumentCode
    def get_ReregistrationCode(self):
        return self.ReregistrationCode
    def set_ReregistrationCode(self, ReregistrationCode):
        self.ReregistrationCode = ReregistrationCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def validate_Id25Type(self, value):
        result = True
        # Validate type Id25Type, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Id25Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Id25Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable3Type(self, value):
        result = True
        # Validate type CodeVariable3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable3Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.RegistrationNumberIdentifier is not None or
            self.DocCreationDate is not None or
            self.RegisterDocumentCode is not None or
            self.ReregistrationCode is not None or
            self.CountryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RegisterDocumentDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegisterDocumentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegisterDocumentDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegisterDocumentDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegisterDocumentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='RegisterDocumentDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RegisterDocumentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegistrationNumberIdentifier is not None:
            namespaceprefix_ = self.RegistrationNumberIdentifier_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationNumberIdentifier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationNumberIdentifier>%s</%sRegistrationNumberIdentifier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumberIdentifier), input_name='RegistrationNumberIdentifier')), namespaceprefix_ , eol_))
        if self.DocCreationDate is not None:
            namespaceprefix_ = self.DocCreationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocCreationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocCreationDate>%s</%sDocCreationDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocCreationDate, input_name='DocCreationDate'), namespaceprefix_ , eol_))
        if self.RegisterDocumentCode is not None:
            namespaceprefix_ = self.RegisterDocumentCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegisterDocumentCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegisterDocumentCode>%s</%sRegisterDocumentCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegisterDocumentCode), input_name='RegisterDocumentCode')), namespaceprefix_ , eol_))
        if self.ReregistrationCode is not None:
            namespaceprefix_ = self.ReregistrationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReregistrationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReregistrationCode>%s</%sReregistrationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReregistrationCode), input_name='ReregistrationCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegistrationNumberIdentifier':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegistrationNumberIdentifier')
            value_ = self.gds_validate_string(value_, node, 'RegistrationNumberIdentifier')
            self.RegistrationNumberIdentifier = value_
            self.RegistrationNumberIdentifier_nsprefix_ = child_.prefix
            # validate type Id25Type
            self.validate_Id25Type(self.RegistrationNumberIdentifier)
        elif nodeName_ == 'DocCreationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocCreationDate = dval_
            self.DocCreationDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocCreationDate)
        elif nodeName_ == 'RegisterDocumentCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegisterDocumentCode')
            value_ = self.gds_validate_string(value_, node, 'RegisterDocumentCode')
            self.RegisterDocumentCode = value_
            self.RegisterDocumentCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.RegisterDocumentCode)
        elif nodeName_ == 'ReregistrationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ReregistrationCode')
            value_ = self.gds_validate_string(value_, node, 'ReregistrationCode')
            self.ReregistrationCode = value_
            self.ReregistrationCode_nsprefix_ = child_.prefix
            # validate type CodeVariable3Type
            self.validate_CodeVariable3Type(self.ReregistrationCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryCode)
# end class RegisterDocumentDetailsType


class RegisterDocumentIdDetailsType26(GeneratedsSuper):
    """RegisterDocumentIdDetailsType26 -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    н
    о
    м
    е
    р
    е
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    ю
    р
    и
    д
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    CountryA2Code -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    RegistrationNumberId -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    л
    и
    ц
    а
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    е
    м
    у
    п
    р
    и
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    ,
    и
    л
    и
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    д
    о
    к
    у
    м
    е
    н
    т
    а
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    ReregistrationCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    п
    р
    и
    з
    н
    а
    к
    а
    п
    е
    р
    е
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    а
    AEORegistryKindCode -- К
    о
    д
    т
    и
    п
    а
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    п
    е
    р
    а
    т
    о
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, CountryA2Code=None, RegistrationNumberId=None, ReregistrationCode=None, AEORegistryKindCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.CountryA2Code = CountryA2Code
        self.validate_CountryA2CodeType(self.CountryA2Code)
        self.CountryA2Code_nsprefix_ = "clt_ru"
        self.RegistrationNumberId = RegistrationNumberId
        self.validate_Id25Type(self.RegistrationNumberId)
        self.RegistrationNumberId_nsprefix_ = "RUSclt_ru"
        self.ReregistrationCode = ReregistrationCode
        self.validate_CodeVariable3Type(self.ReregistrationCode)
        self.ReregistrationCode_nsprefix_ = "clt_ru"
        self.AEORegistryKindCode = AEORegistryKindCode
        self.validate_LetterIndicatorType(self.AEORegistryKindCode)
        self.AEORegistryKindCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegisterDocumentIdDetailsType26)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegisterDocumentIdDetailsType26.subclass:
            return RegisterDocumentIdDetailsType26.subclass(*args_, **kwargs_)
        else:
            return RegisterDocumentIdDetailsType26(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CountryA2Code(self):
        return self.CountryA2Code
    def set_CountryA2Code(self, CountryA2Code):
        self.CountryA2Code = CountryA2Code
    def get_RegistrationNumberId(self):
        return self.RegistrationNumberId
    def set_RegistrationNumberId(self, RegistrationNumberId):
        self.RegistrationNumberId = RegistrationNumberId
    def get_ReregistrationCode(self):
        return self.ReregistrationCode
    def set_ReregistrationCode(self, ReregistrationCode):
        self.ReregistrationCode = ReregistrationCode
    def get_AEORegistryKindCode(self):
        return self.AEORegistryKindCode
    def set_AEORegistryKindCode(self, AEORegistryKindCode):
        self.AEORegistryKindCode = AEORegistryKindCode
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_Id25Type(self, value):
        result = True
        # Validate type Id25Type, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 25:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Id25Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Id25Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable3Type(self, value):
        result = True
        # Validate type CodeVariable3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable3Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.CountryA2Code is not None or
            self.RegistrationNumberId is not None or
            self.ReregistrationCode is not None or
            self.AEORegistryKindCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='RegisterDocumentIdDetailsType26', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RegisterDocumentIdDetailsType26')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RegisterDocumentIdDetailsType26':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RegisterDocumentIdDetailsType26')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RegisterDocumentIdDetailsType26', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='RegisterDocumentIdDetailsType26'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0" ', name_='RegisterDocumentIdDetailsType26', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CountryA2Code is not None:
            namespaceprefix_ = self.CountryA2Code_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryA2Code_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryA2Code>%s</%sCountryA2Code>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryA2Code), input_name='CountryA2Code')), namespaceprefix_ , eol_))
        if self.RegistrationNumberId is not None:
            namespaceprefix_ = self.RegistrationNumberId_nsprefix_ + ':' if (UseCapturedNS_ and self.RegistrationNumberId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegistrationNumberId>%s</%sRegistrationNumberId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegistrationNumberId), input_name='RegistrationNumberId')), namespaceprefix_ , eol_))
        if self.ReregistrationCode is not None:
            namespaceprefix_ = self.ReregistrationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReregistrationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReregistrationCode>%s</%sReregistrationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ReregistrationCode), input_name='ReregistrationCode')), namespaceprefix_ , eol_))
        if self.AEORegistryKindCode is not None:
            namespaceprefix_ = self.AEORegistryKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AEORegistryKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAEORegistryKindCode>%s</%sAEORegistryKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AEORegistryKindCode), input_name='AEORegistryKindCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CountryA2Code':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CountryA2Code')
            value_ = self.gds_validate_string(value_, node, 'CountryA2Code')
            self.CountryA2Code = value_
            self.CountryA2Code_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CountryA2Code)
        elif nodeName_ == 'RegistrationNumberId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegistrationNumberId')
            value_ = self.gds_validate_string(value_, node, 'RegistrationNumberId')
            self.RegistrationNumberId = value_
            self.RegistrationNumberId_nsprefix_ = child_.prefix
            # validate type Id25Type
            self.validate_Id25Type(self.RegistrationNumberId)
        elif nodeName_ == 'ReregistrationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ReregistrationCode')
            value_ = self.gds_validate_string(value_, node, 'ReregistrationCode')
            self.ReregistrationCode = value_
            self.ReregistrationCode_nsprefix_ = child_.prefix
            # validate type CodeVariable3Type
            self.validate_CodeVariable3Type(self.ReregistrationCode)
        elif nodeName_ == 'AEORegistryKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AEORegistryKindCode')
            value_ = self.gds_validate_string(value_, node, 'AEORegistryKindCode')
            self.AEORegistryKindCode = value_
            self.AEORegistryKindCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.AEORegistryKindCode)
# end class RegisterDocumentIdDetailsType26


class RepresentativeContractDetailsType(DocBaseV2Type):
    """RepresentativeContractDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    г
    о
    в
    о
    р
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    я
    с
    у
    ч
    а
    с
    т
    н
    и
    к
    о
    м
    В
    Э
    Д
    DocArchIdDetails -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    у
    (
    с
    в
    е
    д
    е
    н
    и
    я
    м
    )
    п
    р
    и
    р
    а
    з
    м
    е
    щ
    е
    н
    и
    и
    в
    х
    р
    а
    н
    и
    л
    и
    щ
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocBaseV2Type
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocStartDate=None, DocValidityDate=None, DocKindCode=None, DocArchIdDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("RepresentativeContractDetailsType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, DocStartDate, DocValidityDate, DocKindCode,  **kwargs_)
        self.DocArchIdDetails = DocArchIdDetails
        self.DocArchIdDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepresentativeContractDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepresentativeContractDetailsType.subclass:
            return RepresentativeContractDetailsType.subclass(*args_, **kwargs_)
        else:
            return RepresentativeContractDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocArchIdDetails(self):
        return self.DocArchIdDetails
    def set_DocArchIdDetails(self, DocArchIdDetails):
        self.DocArchIdDetails = DocArchIdDetails
    def has__content(self):
        if (
            self.DocArchIdDetails is not None or
            super(RepresentativeContractDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='RepresentativeContractDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepresentativeContractDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepresentativeContractDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeContractDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepresentativeContractDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='RepresentativeContractDetailsType'):
        super(RepresentativeContractDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepresentativeContractDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='RepresentativeContractDetailsType', fromsubclass_=False, pretty_print=True):
        super(RepresentativeContractDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocArchIdDetails is not None:
            namespaceprefix_ = self.DocArchIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DocArchIdDetails_nsprefix_) else ''
            self.DocArchIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocArchIdDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(RepresentativeContractDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocArchIdDetails':
            class_obj_ = self.get_class_obj_(child_, RFBasePresentedDocIDType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocArchIdDetails = obj_
            obj_.original_tagname_ = 'DocArchIdDetails'
        super(RepresentativeContractDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class RepresentativeContractDetailsType


class SignatoryPersonDetailsType(GeneratedsSuper):
    """SignatoryPersonDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    м
    л
    и
    ц
    е
    ,
    з
    а
    п
    о
    л
    н
    и
    в
    ш
    е
    м
    (
    п
    о
    д
    п
    и
    с
    а
    в
    ш
    е
    м
    )
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    SigningDetails -- C
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    л
    ж
    н
    о
    с
    т
    н
    о
    м
    л
    и
    ц
    е
    ,
    п
    о
    д
    п
    и
    с
    а
    в
    ш
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    SignatoryPersonIdentityDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    м
    л
    и
    ч
    н
    о
    с
    т
    ь
    л
    и
    ц
    а
    ,
    з
    а
    п
    о
    л
    н
    и
    в
    ш
    е
    г
    о
    (
    п
    о
    д
    п
    и
    с
    а
    в
    ш
    е
    г
    о
    )
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    QualificationCertificate -- Н
    о
    м
    е
    р
    к
    в
    а
    л
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    о
    г
    о
    а
    т
    т
    е
    с
    т
    а
    т
    а
    с
    п
    е
    ц
    и
    а
    л
    и
    с
    т
    а
    п
    о
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    у
    о
    ф
    о
    р
    м
    л
    е
    н
    и
    ю
    PowerOfAttorneyDetails -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    п
    о
    л
    н
    о
    м
    о
    ч
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SigningDetails=None, SignatoryPersonIdentityDetails=None, QualificationCertificate=None, PowerOfAttorneyDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.SigningDetails = SigningDetails
        self.SigningDetails_nsprefix_ = "RUScat_ru"
        self.SignatoryPersonIdentityDetails = SignatoryPersonIdentityDetails
        self.SignatoryPersonIdentityDetails_nsprefix_ = "RUDECLcat"
        self.QualificationCertificate = QualificationCertificate
        self.validate_CodeVariable6Type(self.QualificationCertificate)
        self.QualificationCertificate_nsprefix_ = "clt_ru"
        self.PowerOfAttorneyDetails = PowerOfAttorneyDetails
        self.PowerOfAttorneyDetails_nsprefix_ = "RUDECLcat"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatoryPersonDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatoryPersonDetailsType.subclass:
            return SignatoryPersonDetailsType.subclass(*args_, **kwargs_)
        else:
            return SignatoryPersonDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SigningDetails(self):
        return self.SigningDetails
    def set_SigningDetails(self, SigningDetails):
        self.SigningDetails = SigningDetails
    def get_SignatoryPersonIdentityDetails(self):
        return self.SignatoryPersonIdentityDetails
    def set_SignatoryPersonIdentityDetails(self, SignatoryPersonIdentityDetails):
        self.SignatoryPersonIdentityDetails = SignatoryPersonIdentityDetails
    def get_QualificationCertificate(self):
        return self.QualificationCertificate
    def set_QualificationCertificate(self, QualificationCertificate):
        self.QualificationCertificate = QualificationCertificate
    def get_PowerOfAttorneyDetails(self):
        return self.PowerOfAttorneyDetails
    def set_PowerOfAttorneyDetails(self, PowerOfAttorneyDetails):
        self.PowerOfAttorneyDetails = PowerOfAttorneyDetails
    def validate_CodeVariable6Type(self, value):
        result = True
        # Validate type CodeVariable6Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable6Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable6Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.SigningDetails is not None or
            self.SignatoryPersonIdentityDetails is not None or
            self.QualificationCertificate is not None or
            self.PowerOfAttorneyDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SignatoryPersonDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatoryPersonDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatoryPersonDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatoryPersonDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatoryPersonDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='SignatoryPersonDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SignatoryPersonDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SigningDetails is not None:
            namespaceprefix_ = self.SigningDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SigningDetails_nsprefix_) else ''
            self.SigningDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SigningDetails', pretty_print=pretty_print)
        if self.SignatoryPersonIdentityDetails is not None:
            namespaceprefix_ = self.SignatoryPersonIdentityDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.SignatoryPersonIdentityDetails_nsprefix_) else ''
            self.SignatoryPersonIdentityDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignatoryPersonIdentityDetails', pretty_print=pretty_print)
        if self.QualificationCertificate is not None:
            namespaceprefix_ = self.QualificationCertificate_nsprefix_ + ':' if (UseCapturedNS_ and self.QualificationCertificate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQualificationCertificate>%s</%sQualificationCertificate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QualificationCertificate), input_name='QualificationCertificate')), namespaceprefix_ , eol_))
        if self.PowerOfAttorneyDetails is not None:
            namespaceprefix_ = self.PowerOfAttorneyDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.PowerOfAttorneyDetails_nsprefix_) else ''
            self.PowerOfAttorneyDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PowerOfAttorneyDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SigningDetails':
            obj_ = SigningDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SigningDetails = obj_
            obj_.original_tagname_ = 'SigningDetails'
        elif nodeName_ == 'SignatoryPersonIdentityDetails':
            obj_ = SignatoryPersonIdentityDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignatoryPersonIdentityDetails = obj_
            obj_.original_tagname_ = 'SignatoryPersonIdentityDetails'
        elif nodeName_ == 'QualificationCertificate':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'QualificationCertificate')
            value_ = self.gds_validate_string(value_, node, 'QualificationCertificate')
            self.QualificationCertificate = value_
            self.QualificationCertificate_nsprefix_ = child_.prefix
            # validate type CodeVariable6Type
            self.validate_CodeVariable6Type(self.QualificationCertificate)
        elif nodeName_ == 'PowerOfAttorneyDetails':
            obj_ = PowerOfAttorneyDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PowerOfAttorneyDetails = obj_
            obj_.original_tagname_ = 'PowerOfAttorneyDetails'
# end class SignatoryPersonDetailsType


class SignatoryPersonIdentityDetailsType(RUIdentityCardType):
    """SignatoryPersonIdentityDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    м
    л
    и
    ч
    н
    о
    с
    т
    ь
    л
    и
    ц
    а
    ,
    з
    а
    п
    о
    л
    н
    и
    в
    ш
    е
    г
    о
    (
    п
    о
    д
    п
    и
    с
    а
    в
    ш
    е
    г
    о
    )
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    DocArchIdDetails -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    у
    (
    с
    в
    е
    д
    е
    н
    и
    я
    м
    )
    п
    р
    и
    р
    а
    з
    м
    е
    щ
    е
    н
    и
    и
    в
    х
    р
    а
    н
    и
    л
    и
    щ
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = RUIdentityCardType
    def __init__(self, IdentityCardCode=None, IdentityCardName=None, FullIdentityCardName=None, IdentityCardSeries=None, IdentityCardNumber=None, IdentityCardDate=None, DocValidityDate=None, OrganizationName=None, IssuerCode=None, AuthorityId=None, CountryCode=None, DocArchIdDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("SignatoryPersonIdentityDetailsType"), self).__init__(IdentityCardCode, IdentityCardName, FullIdentityCardName, IdentityCardSeries, IdentityCardNumber, IdentityCardDate, DocValidityDate, OrganizationName, IssuerCode, AuthorityId, CountryCode,  **kwargs_)
        self.DocArchIdDetails = DocArchIdDetails
        self.DocArchIdDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatoryPersonIdentityDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatoryPersonIdentityDetailsType.subclass:
            return SignatoryPersonIdentityDetailsType.subclass(*args_, **kwargs_)
        else:
            return SignatoryPersonIdentityDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocArchIdDetails(self):
        return self.DocArchIdDetails
    def set_DocArchIdDetails(self, DocArchIdDetails):
        self.DocArchIdDetails = DocArchIdDetails
    def has__content(self):
        if (
            self.DocArchIdDetails is not None or
            super(SignatoryPersonIdentityDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='SignatoryPersonIdentityDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatoryPersonIdentityDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatoryPersonIdentityDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatoryPersonIdentityDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatoryPersonIdentityDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='SignatoryPersonIdentityDetailsType'):
        super(SignatoryPersonIdentityDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatoryPersonIdentityDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='SignatoryPersonIdentityDetailsType', fromsubclass_=False, pretty_print=True):
        super(SignatoryPersonIdentityDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocArchIdDetails is not None:
            namespaceprefix_ = self.DocArchIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DocArchIdDetails_nsprefix_) else ''
            self.DocArchIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocArchIdDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(SignatoryPersonIdentityDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocArchIdDetails':
            class_obj_ = self.get_class_obj_(child_, RFBasePresentedDocIDType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocArchIdDetails = obj_
            obj_.original_tagname_ = 'DocArchIdDetails'
        super(SignatoryPersonIdentityDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class SignatoryPersonIdentityDetailsType


class SignatoryRepresentativeDetailsType(GeneratedsSuper):
    """SignatoryRepresentativeDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    ,
    з
    а
    п
    о
    л
    н
    и
    в
    ш
    е
    м
    (
    п
    о
    д
    п
    и
    с
    а
    в
    ш
    е
    м
    )
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    BrokerRegistryDocDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    й
    RepresentativeContractDetails -- Д
    о
    г
    о
    в
    о
    р
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    я
    с
    д
    е
    к
    л
    а
    р
    а
    н
    т
    о
    м
    (
    з
    а
    я
    в
    и
    т
    е
    л
    е
    м
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BrokerRegistryDocDetails=None, RepresentativeContractDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.BrokerRegistryDocDetails = BrokerRegistryDocDetails
        self.BrokerRegistryDocDetails_nsprefix_ = "RUDECLcat"
        self.RepresentativeContractDetails = RepresentativeContractDetails
        self.RepresentativeContractDetails_nsprefix_ = "RUDECLcat"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatoryRepresentativeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatoryRepresentativeDetailsType.subclass:
            return SignatoryRepresentativeDetailsType.subclass(*args_, **kwargs_)
        else:
            return SignatoryRepresentativeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BrokerRegistryDocDetails(self):
        return self.BrokerRegistryDocDetails
    def set_BrokerRegistryDocDetails(self, BrokerRegistryDocDetails):
        self.BrokerRegistryDocDetails = BrokerRegistryDocDetails
    def get_RepresentativeContractDetails(self):
        return self.RepresentativeContractDetails
    def set_RepresentativeContractDetails(self, RepresentativeContractDetails):
        self.RepresentativeContractDetails = RepresentativeContractDetails
    def has__content(self):
        if (
            self.BrokerRegistryDocDetails is not None or
            self.RepresentativeContractDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0"', name_='SignatoryRepresentativeDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatoryRepresentativeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignatoryRepresentativeDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatoryRepresentativeDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignatoryRepresentativeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='SignatoryRepresentativeDetailsType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0"', name_='SignatoryRepresentativeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BrokerRegistryDocDetails is not None:
            namespaceprefix_ = self.BrokerRegistryDocDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.BrokerRegistryDocDetails_nsprefix_) else ''
            self.BrokerRegistryDocDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='BrokerRegistryDocDetails', pretty_print=pretty_print)
        if self.RepresentativeContractDetails is not None:
            namespaceprefix_ = self.RepresentativeContractDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RepresentativeContractDetails_nsprefix_) else ''
            self.RepresentativeContractDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepresentativeContractDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BrokerRegistryDocDetails':
            obj_ = BrokerRegistryDocDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.BrokerRegistryDocDetails = obj_
            obj_.original_tagname_ = 'BrokerRegistryDocDetails'
        elif nodeName_ == 'RepresentativeContractDetails':
            obj_ = RepresentativeContractDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepresentativeContractDetails = obj_
            obj_.original_tagname_ = 'RepresentativeContractDetails'
# end class SignatoryRepresentativeDetailsType


class SignCertifPersonType(PersonBaseType):
    """SignCertifPersonType -- С
    в
    е
    д
    е
    н
    и
    я
    и
    з
    с
    е
    р
    т
    и
    ф
    и
    к
    а
    т
    а
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    й
    п
    о
    д
    п
    и
    с
    и
    RFOrganizationFeatures -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    /
    л
    и
    ц
    а
    SNILS -- Н
    о
    м
    е
    р
    С
    Н
    И
    Л
    С
    OrganizationName -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
      
    * SertifName -- Л
      и
      ц
      о
      ,
      н
      а
      к
      о
      т
      о
      р
      о
      е
      в
      ы
      д
      а
      н
      с
      е
      р
      т
      и
      ф
      и
      к
      а
      т
      (
      о
      б
      щ
      е
      е
      и
      м
      я
      )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PersonBaseType
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, RFOrganizationFeatures=None, SNILS=None, OrganizationName=None, SertifName=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("SignCertifPersonType"), self).__init__(PersonSurname, PersonName, PersonMiddleName, PersonPost,  **kwargs_)
        self.RFOrganizationFeatures = RFOrganizationFeatures
        self.RFOrganizationFeatures_nsprefix_ = "cat_ru"
        self.SNILS = SNILS
        self.validate_Text40Type(self.SNILS)
        self.SNILS_nsprefix_ = "clt_ru"
        self.OrganizationName = OrganizationName
        self.validate_NameType(self.OrganizationName)
        self.OrganizationName_nsprefix_ = "clt_ru"
        self.SertifName = SertifName
        self.validate_NameType(self.SertifName)
        self.SertifName_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignCertifPersonType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignCertifPersonType.subclass:
            return SignCertifPersonType.subclass(*args_, **kwargs_)
        else:
            return SignCertifPersonType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RFOrganizationFeatures(self):
        return self.RFOrganizationFeatures
    def set_RFOrganizationFeatures(self, RFOrganizationFeatures):
        self.RFOrganizationFeatures = RFOrganizationFeatures
    def get_SNILS(self):
        return self.SNILS
    def set_SNILS(self, SNILS):
        self.SNILS = SNILS
    def get_OrganizationName(self):
        return self.OrganizationName
    def set_OrganizationName(self, OrganizationName):
        self.OrganizationName = OrganizationName
    def get_SertifName(self):
        return self.SertifName
    def set_SertifName(self, SertifName):
        self.SertifName = SertifName
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_NameType(self, value):
        result = True
        # Validate type NameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 150:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on NameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on NameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.RFOrganizationFeatures is not None or
            self.SNILS is not None or
            self.OrganizationName is not None or
            self.SertifName is not None or
            super(SignCertifPersonType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SignCertifPersonType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignCertifPersonType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SignCertifPersonType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignCertifPersonType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SignCertifPersonType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='SignCertifPersonType'):
        super(SignCertifPersonType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignCertifPersonType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='SignCertifPersonType', fromsubclass_=False, pretty_print=True):
        super(SignCertifPersonType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RFOrganizationFeatures is not None:
            namespaceprefix_ = self.RFOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RFOrganizationFeatures_nsprefix_) else ''
            self.RFOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFOrganizationFeatures', pretty_print=pretty_print)
        if self.SNILS is not None:
            namespaceprefix_ = self.SNILS_nsprefix_ + ':' if (UseCapturedNS_ and self.SNILS_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSNILS>%s</%sSNILS>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SNILS), input_name='SNILS')), namespaceprefix_ , eol_))
        if self.OrganizationName is not None:
            namespaceprefix_ = self.OrganizationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OrganizationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOrganizationName>%s</%sOrganizationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OrganizationName), input_name='OrganizationName')), namespaceprefix_ , eol_))
        if self.SertifName is not None:
            namespaceprefix_ = self.SertifName_nsprefix_ + ':' if (UseCapturedNS_ and self.SertifName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSertifName>%s</%sSertifName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SertifName), input_name='SertifName')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(SignCertifPersonType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RFOrganizationFeatures':
            obj_ = RFOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RFOrganizationFeatures'
        elif nodeName_ == 'SNILS':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SNILS')
            value_ = self.gds_validate_string(value_, node, 'SNILS')
            self.SNILS = value_
            self.SNILS_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.SNILS)
        elif nodeName_ == 'OrganizationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OrganizationName')
            value_ = self.gds_validate_string(value_, node, 'OrganizationName')
            self.OrganizationName = value_
            self.OrganizationName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.OrganizationName)
        elif nodeName_ == 'SertifName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SertifName')
            value_ = self.gds_validate_string(value_, node, 'SertifName')
            self.SertifName = value_
            self.SertifName_nsprefix_ = child_.prefix
            # validate type NameType
            self.validate_NameType(self.SertifName)
        super(SignCertifPersonType, self)._buildChildren(child_, node, nodeName_, True)
# end class SignCertifPersonType


class SimplePresentedDocDetailsType(DocBaseType):
    """SimplePresentedDocDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    и
    (
    и
    л
    и
    )
    и
    с
    т
    о
    ч
    н
    и
    к
    е
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    DocKindCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    AuthorityName -- П
    о
    л
    н
    о
    е
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    р
    г
    а
    н
    а
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    о
    й
    в
    л
    а
    с
    т
    и
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    -
    ч
    л
    е
    н
    а
    л
    и
    б
    о
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    й
    и
    м
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    ,
    в
    ы
    д
    а
    в
    ш
    е
    й
    д
    о
    к
    у
    м
    е
    н
    т
    AuthorityId -- С
    т
    р
    о
    к
    а
    с
    и
    м
    в
    о
    л
    о
    в
    ,
    и
    д
    е
    н
    т
    и
    ф
    и
    ц
    и
    р
    у
    ю
    щ
    а
    я
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    ы
    й
    и
    л
    и
    м
    е
    ж
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    (
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    ю
    ),
    в
    ы
    д
    а
    в
    ш
    и
    й
    и
    л
    и
    у
    т
    в
    е
    р
    д
    и
    в
    ш
    и
    й
    д
    о
    к
    у
    м
    е
    н
    т
    InformationSourceDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    м
    и
    с
    т
    о
    ч
    н
    и
    к
    е
    и
    л
    и
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    о
    н
    н
    о
    м
    р
    е
    с
    у
    р
    с
    е
    LineId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    й
    д
    л
    я
    ц
    е
    л
    е
    й
    о
    д
    н
    о
    з
    н
    а
    ч
    н
    о
    й
    с
    с
    ы
    л
    к
    и
    н
    а
    з
    а
    п
    и
    с
    ь
    ,
    и
    л
    и
    п
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    з
    а
    п
    и
    с
    и
    EDocCode -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    (
    с
    в
    е
    д
    е
    н
    и
    й
    )
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    р
    е
    е
    с
    т
    р
    о
    м
    с
    т
    р
    у
    к
    т
    у
    р
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    DocArchIdDetails -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    у
    (
    с
    в
    е
    д
    е
    н
    и
    я
    м
    )
    п
    р
    и
    р
    а
    з
    м
    е
    щ
    е
    н
    и
    и
    в
    х
    р
    а
    н
    и
    л
    и
    щ
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DocStartDate=None, DocValidityDate=None, CountryCode=None, DocKindCode=None, AuthorityName=None, AuthorityId=None, InformationSourceDetails=None, LineId=None, EDocCode=None, DocArchIdDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("SimplePresentedDocDetailsType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, DocStartDate, DocValidityDate, CountryCode, DocKindCode,  **kwargs_)
        self.DocKindCode = DocKindCode
        self.validate_CustomsDocumentCodeType(self.DocKindCode)
        self.DocKindCode_nsprefix_ = "clt_ru"
        self.AuthorityName = AuthorityName
        self.validate_Name300Type(self.AuthorityName)
        self.AuthorityName_nsprefix_ = "RUSclt_ru"
        self.AuthorityId = AuthorityId
        self.validate_CodeVariable20Type(self.AuthorityId)
        self.AuthorityId_nsprefix_ = "clt_ru"
        self.InformationSourceDetails = InformationSourceDetails
        self.InformationSourceDetails_nsprefix_ = "RUDECLcat"
        self.LineId = LineId
        self.validate_Text40Type(self.LineId)
        self.LineId_nsprefix_ = "clt_ru"
        self.EDocCode = EDocCode
        self.validate_CodeVariable10Type(self.EDocCode)
        self.EDocCode_nsprefix_ = "clt_ru"
        self.DocArchIdDetails = DocArchIdDetails
        self.DocArchIdDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SimplePresentedDocDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SimplePresentedDocDetailsType.subclass:
            return SimplePresentedDocDetailsType.subclass(*args_, **kwargs_)
        else:
            return SimplePresentedDocDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocKindCode(self):
        return self.DocKindCode
    def set_DocKindCode(self, DocKindCode):
        self.DocKindCode = DocKindCode
    def get_AuthorityName(self):
        return self.AuthorityName
    def set_AuthorityName(self, AuthorityName):
        self.AuthorityName = AuthorityName
    def get_AuthorityId(self):
        return self.AuthorityId
    def set_AuthorityId(self, AuthorityId):
        self.AuthorityId = AuthorityId
    def get_InformationSourceDetails(self):
        return self.InformationSourceDetails
    def set_InformationSourceDetails(self, InformationSourceDetails):
        self.InformationSourceDetails = InformationSourceDetails
    def get_LineId(self):
        return self.LineId
    def set_LineId(self, LineId):
        self.LineId = LineId
    def get_EDocCode(self):
        return self.EDocCode
    def set_EDocCode(self, EDocCode):
        self.EDocCode = EDocCode
    def get_DocArchIdDetails(self):
        return self.DocArchIdDetails
    def set_DocArchIdDetails(self, DocArchIdDetails):
        self.DocArchIdDetails = DocArchIdDetails
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Name300Type(self, value):
        result = True
        # Validate type Name300Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 300:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Name300Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Name300Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Text40Type(self, value):
        result = True
        # Validate type Text40Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text40Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text40Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable10Type(self, value):
        result = True
        # Validate type CodeVariable10Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable10Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable10Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DocKindCode is not None or
            self.AuthorityName is not None or
            self.AuthorityId is not None or
            self.InformationSourceDetails is not None or
            self.LineId is not None or
            self.EDocCode is not None or
            self.DocArchIdDetails is not None or
            super(SimplePresentedDocDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='SimplePresentedDocDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SimplePresentedDocDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SimplePresentedDocDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SimplePresentedDocDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SimplePresentedDocDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='SimplePresentedDocDetailsType'):
        super(SimplePresentedDocDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SimplePresentedDocDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='SimplePresentedDocDetailsType', fromsubclass_=False, pretty_print=True):
        super(SimplePresentedDocDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocKindCode is not None:
            namespaceprefix_ = self.DocKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocKindCode>%s</%sDocKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocKindCode), input_name='DocKindCode')), namespaceprefix_ , eol_))
        if self.AuthorityName is not None:
            namespaceprefix_ = self.AuthorityName_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorityName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorityName>%s</%sAuthorityName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorityName), input_name='AuthorityName')), namespaceprefix_ , eol_))
        if self.AuthorityId is not None:
            namespaceprefix_ = self.AuthorityId_nsprefix_ + ':' if (UseCapturedNS_ and self.AuthorityId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorityId>%s</%sAuthorityId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AuthorityId), input_name='AuthorityId')), namespaceprefix_ , eol_))
        if self.InformationSourceDetails is not None:
            namespaceprefix_ = self.InformationSourceDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.InformationSourceDetails_nsprefix_) else ''
            self.InformationSourceDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformationSourceDetails', pretty_print=pretty_print)
        if self.LineId is not None:
            namespaceprefix_ = self.LineId_nsprefix_ + ':' if (UseCapturedNS_ and self.LineId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLineId>%s</%sLineId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LineId), input_name='LineId')), namespaceprefix_ , eol_))
        if self.EDocCode is not None:
            namespaceprefix_ = self.EDocCode_nsprefix_ + ':' if (UseCapturedNS_ and self.EDocCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEDocCode>%s</%sEDocCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EDocCode), input_name='EDocCode')), namespaceprefix_ , eol_))
        if self.DocArchIdDetails is not None:
            namespaceprefix_ = self.DocArchIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DocArchIdDetails_nsprefix_) else ''
            self.DocArchIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocArchIdDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(SimplePresentedDocDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocKindCode')
            value_ = self.gds_validate_string(value_, node, 'DocKindCode')
            self.DocKindCode = value_
            self.DocKindCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocKindCode)
        elif nodeName_ == 'AuthorityName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AuthorityName')
            value_ = self.gds_validate_string(value_, node, 'AuthorityName')
            self.AuthorityName = value_
            self.AuthorityName_nsprefix_ = child_.prefix
            # validate type Name300Type
            self.validate_Name300Type(self.AuthorityName)
        elif nodeName_ == 'AuthorityId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AuthorityId')
            value_ = self.gds_validate_string(value_, node, 'AuthorityId')
            self.AuthorityId = value_
            self.AuthorityId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.AuthorityId)
        elif nodeName_ == 'InformationSourceDetails':
            obj_ = InformationSourceDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformationSourceDetails = obj_
            obj_.original_tagname_ = 'InformationSourceDetails'
        elif nodeName_ == 'LineId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LineId')
            value_ = self.gds_validate_string(value_, node, 'LineId')
            self.LineId = value_
            self.LineId_nsprefix_ = child_.prefix
            # validate type Text40Type
            self.validate_Text40Type(self.LineId)
        elif nodeName_ == 'EDocCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'EDocCode')
            value_ = self.gds_validate_string(value_, node, 'EDocCode')
            self.EDocCode = value_
            self.EDocCode_nsprefix_ = child_.prefix
            # validate type CodeVariable10Type
            self.validate_CodeVariable10Type(self.EDocCode)
        elif nodeName_ == 'DocArchIdDetails':
            class_obj_ = self.get_class_obj_(child_, RFBasePresentedDocIDType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocArchIdDetails = obj_
            obj_.original_tagname_ = 'DocArchIdDetails'
        super(SimplePresentedDocDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class SimplePresentedDocDetailsType


class TDGuaranteeType27(TDGuaranteeType):
    """TDGuaranteeType27 -- Г
    а
    р
    а
    н
    т
    и
    я
    д
    л
    я
    Т
    Д
    GuaranteeAddress -- А
    д
    р
    е
    с
    г
    а
    р
    а
    н
    т
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = TDGuaranteeType
    def __init__(self, MeasureCode=None, DocNumber=None, DocDate=None, GuaranteeCertificateIdDetails=None, TransitGuaranteeDocDetails=None, NationalGuaranteeCode=None, NonGuaranteeCountryCode=None, RegisterDocumentIdDetails=None, GuaranteeName=None, UNP=None, BIC=None, GuaranteeAmount=None, GuaranteeTD=None, GuaranteeAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("TDGuaranteeType27"), self).__init__(MeasureCode, DocNumber, DocDate, GuaranteeCertificateIdDetails, TransitGuaranteeDocDetails, NationalGuaranteeCode, NonGuaranteeCountryCode, RegisterDocumentIdDetails, GuaranteeName, UNP, BIC, GuaranteeAmount, GuaranteeTD,  **kwargs_)
        self.GuaranteeAddress = GuaranteeAddress
        self.GuaranteeAddress_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TDGuaranteeType27)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TDGuaranteeType27.subclass:
            return TDGuaranteeType27.subclass(*args_, **kwargs_)
        else:
            return TDGuaranteeType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GuaranteeAddress(self):
        return self.GuaranteeAddress
    def set_GuaranteeAddress(self, GuaranteeAddress):
        self.GuaranteeAddress = GuaranteeAddress
    def has__content(self):
        if (
            self.GuaranteeAddress is not None or
            super(TDGuaranteeType27, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='TDGuaranteeType27', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TDGuaranteeType27')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TDGuaranteeType27':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TDGuaranteeType27')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TDGuaranteeType27', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='TDGuaranteeType27'):
        super(TDGuaranteeType27, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TDGuaranteeType27')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='TDGuaranteeType27', fromsubclass_=False, pretty_print=True):
        super(TDGuaranteeType27, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GuaranteeAddress is not None:
            namespaceprefix_ = self.GuaranteeAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.GuaranteeAddress_nsprefix_) else ''
            self.GuaranteeAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GuaranteeAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(TDGuaranteeType27, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GuaranteeAddress':
            obj_ = RUAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GuaranteeAddress = obj_
            obj_.original_tagname_ = 'GuaranteeAddress'
        super(TDGuaranteeType27, self)._buildChildren(child_, node, nodeName_, True)
# end class TDGuaranteeType27


class TIRIdDetailsType28(GeneratedsSuper):
    """TIRIdDetailsType28 -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    TIRSeries -- С
    е
    р
    и
    я
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    TIRID -- Н
    о
    м
    е
    р
    к
    н
    и
    ж
    к
    и
    М
    Д
    П
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TIRSeries=None, TIRID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        self.TIRSeries = TIRSeries
        self.validate_Code2Type(self.TIRSeries)
        self.TIRSeries_nsprefix_ = "clt_ru"
        self.TIRID = TIRID
        self.validate_Code8Type(self.TIRID)
        self.TIRID_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TIRIdDetailsType28)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TIRIdDetailsType28.subclass:
            return TIRIdDetailsType28.subclass(*args_, **kwargs_)
        else:
            return TIRIdDetailsType28(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TIRSeries(self):
        return self.TIRSeries
    def set_TIRSeries(self, TIRSeries):
        self.TIRSeries = TIRSeries
    def get_TIRID(self):
        return self.TIRID
    def set_TIRID(self, TIRID):
        self.TIRID = TIRID
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code8Type(self, value):
        result = True
        # Validate type Code8Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 8:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code8Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TIRSeries is not None or
            self.TIRID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TIRIdDetailsType28', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TIRIdDetailsType28')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TIRIdDetailsType28':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TIRIdDetailsType28')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TIRIdDetailsType28', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='TIRIdDetailsType28'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='TIRIdDetailsType28', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TIRSeries is not None:
            namespaceprefix_ = self.TIRSeries_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRSeries_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTIRSeries>%s</%sTIRSeries>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TIRSeries), input_name='TIRSeries')), namespaceprefix_ , eol_))
        if self.TIRID is not None:
            namespaceprefix_ = self.TIRID_nsprefix_ + ':' if (UseCapturedNS_ and self.TIRID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTIRID>%s</%sTIRID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TIRID), input_name='TIRID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TIRSeries':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TIRSeries')
            value_ = self.gds_validate_string(value_, node, 'TIRSeries')
            self.TIRSeries = value_
            self.TIRSeries_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.TIRSeries)
        elif nodeName_ == 'TIRID':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TIRID')
            value_ = self.gds_validate_string(value_, node, 'TIRID')
            self.TIRID = value_
            self.TIRID_nsprefix_ = child_.prefix
            # validate type Code8Type
            self.validate_Code8Type(self.TIRID)
# end class TIRIdDetailsType28


class SubjectBranchDetailsType(SubjectDetailsType):
    """SubjectBranchDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    у
    б
    ъ
    е
    к
    т
    е
    SubjectBranch -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    б
    о
    с
    о
    б
    л
    е
    н
    н
    о
    м
    п
    о
    д
    р
    а
    з
    д
    е
    л
    е
    н
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, IdentityCard=None, SubjectAddressDetails=None, CommunicationDetails=None, SubjectBranch=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("SubjectBranchDetailsType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN, PersonId, IdentityCard, SubjectAddressDetails, CommunicationDetails, extensiontype_,  **kwargs_)
        self.SubjectBranch = SubjectBranch
        self.SubjectBranch_nsprefix_ = "RUScat_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SubjectBranchDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SubjectBranchDetailsType.subclass:
            return SubjectBranchDetailsType.subclass(*args_, **kwargs_)
        else:
            return SubjectBranchDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SubjectBranch(self):
        return self.SubjectBranch
    def set_SubjectBranch(self, SubjectBranch):
        self.SubjectBranch = SubjectBranch
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def has__content(self):
        if (
            self.SubjectBranch is not None or
            super(SubjectBranchDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"', name_='SubjectBranchDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SubjectBranchDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SubjectBranchDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectBranchDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SubjectBranchDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='SubjectBranchDetailsType'):
        super(SubjectBranchDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SubjectBranchDetailsType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"', name_='SubjectBranchDetailsType', fromsubclass_=False, pretty_print=True):
        super(SubjectBranchDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SubjectBranch is not None:
            namespaceprefix_ = self.SubjectBranch_nsprefix_ + ':' if (UseCapturedNS_ and self.SubjectBranch_nsprefix_) else ''
            self.SubjectBranch.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SubjectBranch', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(SubjectBranchDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SubjectBranch':
            class_obj_ = self.get_class_obj_(child_, OrganizationType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SubjectBranch = obj_
            obj_.original_tagname_ = 'SubjectBranch'
        super(SubjectBranchDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class SubjectBranchDetailsType


class EECDTGoodsBaseDetailsType(EECGoodsBaseType):
    """EECDTGoodsBaseDetailsType -- К
    о
    м
    п
    о
    н
    е
    н
    т
    ы
    ,
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    ю
    щ
    и
    е
    б
    а
    з
    о
    в
    ы
    е
    с
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    е
    в
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    UnifiedGrossMassMeasure -- В
    е
    с
    т
    о
    в
    а
    р
    а
    ,
    б
    р
    у
    т
    т
    о
    UnifiedNetMassMeasure -- В
    е
    с
    т
    о
    в
    а
    р
    а
    ,
    н
    е
    т
    т
    о
    GoodsMeasureDetails -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    с
    у
    к
    а
    з
    а
    н
    и
    е
    м
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    е
    д
    и
    н
    и
    ц
    ы
    и
    з
    м
    е
    р
    е
    н
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = EECGoodsBaseType
    def __init__(self, GoodsNumeric=None, GoodsTNVEDCode=None, GoodsDescription=None, UnifiedGrossMassMeasure=None, UnifiedNetMassMeasure=None, GoodsMeasureDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUScat_ru"
        super(globals().get("EECDTGoodsBaseDetailsType"), self).__init__(GoodsNumeric, GoodsTNVEDCode, GoodsDescription,  **kwargs_)
        self.UnifiedGrossMassMeasure = UnifiedGrossMassMeasure
        self.validate_QuantityBasisType(self.UnifiedGrossMassMeasure)
        self.UnifiedGrossMassMeasure_nsprefix_ = "clt_ru"
        self.UnifiedNetMassMeasure = UnifiedNetMassMeasure
        self.validate_QuantityBasisType(self.UnifiedNetMassMeasure)
        self.UnifiedNetMassMeasure_nsprefix_ = "clt_ru"
        if GoodsMeasureDetails is None:
            self.GoodsMeasureDetails = []
        else:
            self.GoodsMeasureDetails = GoodsMeasureDetails
        self.GoodsMeasureDetails_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EECDTGoodsBaseDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EECDTGoodsBaseDetailsType.subclass:
            return EECDTGoodsBaseDetailsType.subclass(*args_, **kwargs_)
        else:
            return EECDTGoodsBaseDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnifiedGrossMassMeasure(self):
        return self.UnifiedGrossMassMeasure
    def set_UnifiedGrossMassMeasure(self, UnifiedGrossMassMeasure):
        self.UnifiedGrossMassMeasure = UnifiedGrossMassMeasure
    def get_UnifiedNetMassMeasure(self):
        return self.UnifiedNetMassMeasure
    def set_UnifiedNetMassMeasure(self, UnifiedNetMassMeasure):
        self.UnifiedNetMassMeasure = UnifiedNetMassMeasure
    def get_GoodsMeasureDetails(self):
        return self.GoodsMeasureDetails
    def set_GoodsMeasureDetails(self, GoodsMeasureDetails):
        self.GoodsMeasureDetails = GoodsMeasureDetails
    def add_GoodsMeasureDetails(self, value):
        self.GoodsMeasureDetails.append(value)
    def insert_GoodsMeasureDetails_at(self, index, value):
        self.GoodsMeasureDetails.insert(index, value)
    def replace_GoodsMeasureDetails_at(self, index, value):
        self.GoodsMeasureDetails[index] = value
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.UnifiedGrossMassMeasure is not None or
            self.UnifiedNetMassMeasure is not None or
            self.GoodsMeasureDetails or
            super(EECDTGoodsBaseDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='EECDTGoodsBaseDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EECDTGoodsBaseDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EECDTGoodsBaseDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECDTGoodsBaseDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EECDTGoodsBaseDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUScat_ru:', name_='EECDTGoodsBaseDetailsType'):
        super(EECDTGoodsBaseDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EECDTGoodsBaseDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUScat_ru:', namespacedef_='xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='EECDTGoodsBaseDetailsType', fromsubclass_=False, pretty_print=True):
        super(EECDTGoodsBaseDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnifiedGrossMassMeasure is not None:
            namespaceprefix_ = self.UnifiedGrossMassMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.UnifiedGrossMassMeasure_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnifiedGrossMassMeasure>%s</%sUnifiedGrossMassMeasure>%s' % (namespaceprefix_ , self.gds_format_decimal(self.UnifiedGrossMassMeasure, input_name='UnifiedGrossMassMeasure'), namespaceprefix_ , eol_))
        if self.UnifiedNetMassMeasure is not None:
            namespaceprefix_ = self.UnifiedNetMassMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.UnifiedNetMassMeasure_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnifiedNetMassMeasure>%s</%sUnifiedNetMassMeasure>%s' % (namespaceprefix_ , self.gds_format_decimal(self.UnifiedNetMassMeasure, input_name='UnifiedNetMassMeasure'), namespaceprefix_ , eol_))
        for GoodsMeasureDetails_ in self.GoodsMeasureDetails:
            namespaceprefix_ = self.GoodsMeasureDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsMeasureDetails_nsprefix_) else ''
            GoodsMeasureDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsMeasureDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(EECDTGoodsBaseDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnifiedGrossMassMeasure' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'UnifiedGrossMassMeasure')
            fval_ = self.gds_validate_decimal(fval_, node, 'UnifiedGrossMassMeasure')
            self.UnifiedGrossMassMeasure = fval_
            self.UnifiedGrossMassMeasure_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.UnifiedGrossMassMeasure)
        elif nodeName_ == 'UnifiedNetMassMeasure' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'UnifiedNetMassMeasure')
            fval_ = self.gds_validate_decimal(fval_, node, 'UnifiedNetMassMeasure')
            self.UnifiedNetMassMeasure = fval_
            self.UnifiedNetMassMeasure_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.UnifiedNetMassMeasure)
        elif nodeName_ == 'GoodsMeasureDetails':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsMeasureDetails.append(obj_)
            obj_.original_tagname_ = 'GoodsMeasureDetails'
        super(EECDTGoodsBaseDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class EECDTGoodsBaseDetailsType


class ManufacturerType(SubjectBaseDetailsType):
    """ManufacturerType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    р
    о
    и
    з
    в
    о
    д
    и
    т
    е
    л
    е
    (
    и
    з
    г
    о
    т
    о
    в
    и
    т
    е
    л
    е
    )
    PersonId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    Address -- А
    д
    р
    е
    с
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectBaseDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, Address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("ManufacturerType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN,  **kwargs_)
        self.PersonId = PersonId
        self.validate_CodeVariable20Type(self.PersonId)
        self.PersonId_nsprefix_ = "clt_ru"
        self.Address = Address
        self.Address_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManufacturerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManufacturerType.subclass:
            return ManufacturerType.subclass(*args_, **kwargs_)
        else:
            return ManufacturerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PersonId(self):
        return self.PersonId
    def set_PersonId(self, PersonId):
        self.PersonId = PersonId
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PersonId is not None or
            self.Address is not None or
            super(ManufacturerType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ManufacturerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManufacturerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ManufacturerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ManufacturerType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ManufacturerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='ManufacturerType'):
        super(ManufacturerType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ManufacturerType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ManufacturerType', fromsubclass_=False, pretty_print=True):
        super(ManufacturerType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PersonId is not None:
            namespaceprefix_ = self.PersonId_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonId>%s</%sPersonId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonId), input_name='PersonId')), namespaceprefix_ , eol_))
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ManufacturerType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PersonId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PersonId')
            value_ = self.gds_validate_string(value_, node, 'PersonId')
            self.PersonId = value_
            self.PersonId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.PersonId)
        elif nodeName_ == 'Address':
            obj_ = ManufacturerAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        super(ManufacturerType, self)._buildChildren(child_, node, nodeName_, True)
# end class ManufacturerType


class CUPrecedingDocumentType(PrecedingDocumentType):
    """CUPrecedingDocumentType -- П
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    ы
    NetWeightQuantity -- М
    а
    с
    с
    а
    н
    е
    т
    т
    о
    т
    о
    в
    а
    р
    а
    ,
    в
    о
    ш
    е
    д
    ш
    е
    г
    о
    в
    с
    о
    с
    т
    а
    в
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    г
    о
    т
    о
    в
    а
    р
    а
    .
    д
    л
    я
    Р
    Б
    /
    М
    а
    с
    с
    а
    н
    е
    т
    т
    о
    т
    о
    в
    а
    р
    а
    ,
    и
    с
    п
    о
    л
    ь
    з
    о
    в
    а
    н
    н
    о
    г
    о
    п
    р
    и
    и
    з
    г
    о
    т
    о
    в
    л
    е
    н
    и
    и
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    г
    о
    т
    о
    в
    а
    р
    а
    CustomsCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    CustomsCost -- Т
    а
    м
    о
    ж
    е
    н
    н
    а
    я
    с
    т
    о
    и
    м
    о
    с
    т
    ь
    т
    о
    в
    а
    р
    а
    ,
    у
    к
    а
    з
    а
    н
    н
    а
    я
    в
    г
    р
    45
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    й
    Д
    Т
    NetWeight -- М
    а
    с
    с
    а
    н
    е
    т
    т
    о
    т
    о
    в
    а
    р
    а
    ,
    у
    к
    а
    з
    а
    н
    н
    а
    я
    в
    г
    р
    38
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    й
    Д
    Т
    SupplementaryGoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    п
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    е
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    и
    с
    п
    о
    л
    ь
    з
    о
    в
    а
    н
    н
    о
    г
    о
    п
    р
    и
    и
    з
    г
    о
    т
    о
    в
    л
    е
    н
    и
    и
    и
    л
    и
    в
    о
    ш
    е
    д
    ш
    е
    г
    о
    в
    с
    о
    с
    т
    а
    в
    д
    е
    к
    л
    а
    р
    и
    р
    у
    е
    м
    о
    г
    о
    т
    о
    в
    а
    р
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PrecedingDocumentType
    def __init__(self, LineNumber=None, PrecedingDocumentID=None, PrecedingDocumentCustomsCode=None, PrecedingDocumentDate=None, PrecedingDocumentNumber=None, PrecedingDocumentOrdinalId=None, AddNumberPart=None, DTMDocDetails=None, PIDocumentNumber=None, TIRIdDetails=None, OtherPrDocumentNumber=None, OtherPrDocumentDate=None, PrecedingDocumentGoodsNumeric=None, PrecedingDocumentName=None, PrecedingDocumentModeCode=None, PrcDocGoodsTNVEDCode=None, NetWeightQuantity=None, CustomsCountryCode=None, CustomsCost=None, NetWeight=None, SupplementaryGoodsQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("CUPrecedingDocumentType"), self).__init__(LineNumber, PrecedingDocumentID, PrecedingDocumentCustomsCode, PrecedingDocumentDate, PrecedingDocumentNumber, PrecedingDocumentOrdinalId, AddNumberPart, DTMDocDetails, PIDocumentNumber, TIRIdDetails, OtherPrDocumentNumber, OtherPrDocumentDate, PrecedingDocumentGoodsNumeric, PrecedingDocumentName, PrecedingDocumentModeCode, PrcDocGoodsTNVEDCode,  **kwargs_)
        self.NetWeightQuantity = NetWeightQuantity
        self.validate_QuantityBasisType(self.NetWeightQuantity)
        self.NetWeightQuantity_nsprefix_ = "clt_ru"
        self.CustomsCountryCode = CustomsCountryCode
        self.validate_CountryA2CodeType(self.CustomsCountryCode)
        self.CustomsCountryCode_nsprefix_ = "clt_ru"
        self.CustomsCost = CustomsCost
        self.validate_AmountType(self.CustomsCost)
        self.CustomsCost_nsprefix_ = "clt_ru"
        self.NetWeight = NetWeight
        self.validate_QuantityBasisType(self.NetWeight)
        self.NetWeight_nsprefix_ = "clt_ru"
        if SupplementaryGoodsQuantity is None:
            self.SupplementaryGoodsQuantity = []
        else:
            self.SupplementaryGoodsQuantity = SupplementaryGoodsQuantity
        self.SupplementaryGoodsQuantity_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUPrecedingDocumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUPrecedingDocumentType.subclass:
            return CUPrecedingDocumentType.subclass(*args_, **kwargs_)
        else:
            return CUPrecedingDocumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NetWeightQuantity(self):
        return self.NetWeightQuantity
    def set_NetWeightQuantity(self, NetWeightQuantity):
        self.NetWeightQuantity = NetWeightQuantity
    def get_CustomsCountryCode(self):
        return self.CustomsCountryCode
    def set_CustomsCountryCode(self, CustomsCountryCode):
        self.CustomsCountryCode = CustomsCountryCode
    def get_CustomsCost(self):
        return self.CustomsCost
    def set_CustomsCost(self, CustomsCost):
        self.CustomsCost = CustomsCost
    def get_NetWeight(self):
        return self.NetWeight
    def set_NetWeight(self, NetWeight):
        self.NetWeight = NetWeight
    def get_SupplementaryGoodsQuantity(self):
        return self.SupplementaryGoodsQuantity
    def set_SupplementaryGoodsQuantity(self, SupplementaryGoodsQuantity):
        self.SupplementaryGoodsQuantity = SupplementaryGoodsQuantity
    def add_SupplementaryGoodsQuantity(self, value):
        self.SupplementaryGoodsQuantity.append(value)
    def insert_SupplementaryGoodsQuantity_at(self, index, value):
        self.SupplementaryGoodsQuantity.insert(index, value)
    def replace_SupplementaryGoodsQuantity_at(self, index, value):
        self.SupplementaryGoodsQuantity[index] = value
    def validate_QuantityBasisType(self, value):
        result = True
        # Validate type QuantityBasisType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 24:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on QuantityBasisType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.NetWeightQuantity is not None or
            self.CustomsCountryCode is not None or
            self.CustomsCost is not None or
            self.NetWeight is not None or
            self.SupplementaryGoodsQuantity or
            super(CUPrecedingDocumentType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUPrecedingDocumentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUPrecedingDocumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUPrecedingDocumentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUPrecedingDocumentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUPrecedingDocumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUPrecedingDocumentType'):
        super(CUPrecedingDocumentType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUPrecedingDocumentType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUPrecedingDocumentType', fromsubclass_=False, pretty_print=True):
        super(CUPrecedingDocumentType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NetWeightQuantity is not None:
            namespaceprefix_ = self.NetWeightQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.NetWeightQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetWeightQuantity>%s</%sNetWeightQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.NetWeightQuantity, input_name='NetWeightQuantity'), namespaceprefix_ , eol_))
        if self.CustomsCountryCode is not None:
            namespaceprefix_ = self.CustomsCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCountryCode>%s</%sCustomsCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCountryCode), input_name='CustomsCountryCode')), namespaceprefix_ , eol_))
        if self.CustomsCost is not None:
            namespaceprefix_ = self.CustomsCost_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCost>%s</%sCustomsCost>%s' % (namespaceprefix_ , self.gds_format_decimal(self.CustomsCost, input_name='CustomsCost'), namespaceprefix_ , eol_))
        if self.NetWeight is not None:
            namespaceprefix_ = self.NetWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.NetWeight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNetWeight>%s</%sNetWeight>%s' % (namespaceprefix_ , self.gds_format_decimal(self.NetWeight, input_name='NetWeight'), namespaceprefix_ , eol_))
        for SupplementaryGoodsQuantity_ in self.SupplementaryGoodsQuantity:
            namespaceprefix_ = self.SupplementaryGoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplementaryGoodsQuantity_nsprefix_) else ''
            SupplementaryGoodsQuantity_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplementaryGoodsQuantity', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUPrecedingDocumentType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NetWeightQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'NetWeightQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'NetWeightQuantity')
            self.NetWeightQuantity = fval_
            self.NetWeightQuantity_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.NetWeightQuantity)
        elif nodeName_ == 'CustomsCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCountryCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCountryCode')
            self.CustomsCountryCode = value_
            self.CustomsCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.CustomsCountryCode)
        elif nodeName_ == 'CustomsCost' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'CustomsCost')
            fval_ = self.gds_validate_decimal(fval_, node, 'CustomsCost')
            self.CustomsCost = fval_
            self.CustomsCost_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.CustomsCost)
        elif nodeName_ == 'NetWeight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'NetWeight')
            fval_ = self.gds_validate_decimal(fval_, node, 'NetWeight')
            self.NetWeight = fval_
            self.NetWeight_nsprefix_ = child_.prefix
            # validate type QuantityBasisType
            self.validate_QuantityBasisType(self.NetWeight)
        elif nodeName_ == 'SupplementaryGoodsQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplementaryGoodsQuantity.append(obj_)
            obj_.original_tagname_ = 'SupplementaryGoodsQuantity'
        super(CUPrecedingDocumentType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUPrecedingDocumentType


class CUESADGoodsItemType(GoodsItemBaseType):
    """CUESADGoodsItemType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    е
    GoodsTNVEDCode -- К
    о
    д
    т
    о
    в
    а
    р
    а
    п
    о
    Т
    Н
    В
    Э
    Д
    Е
    А
    Э
    С
    .
    Г
    р
    .33
    п
    е
    р
    в
    ы
    й
    р
    а
    з
    д
    е
    л
    GoodsClassificationCode -- О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    ь
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    ц
    и
    и
    к
    о
    д
    а
    : 1 -
    о
    б
    щ
    и
    й
    «
    О
    »
    , 2 -
    т
    о
    в
    а
    р
    с
    п
    и
    с
    к
    а
    .
    В
    о
    с
    т
    а
    л
    ь
    н
    ы
    х
    с
    л
    у
    ч
    а
    я
    х
    н
    е
    з
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    AdditionalSign -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    й
    п
    р
    и
    з
    н
    а
    к
    н
    е
    т
    а
    р
    и
    ф
    н
    о
    г
    о
    р
    е
    г
    у
    л
    и
    р
    о
    в
    а
    н
    и
    я
    (
    «
    С
    »
    ).
    Г
    р
    .33
    в
    т
    о
    р
    о
    й
    р
    а
    з
    д
    е
    л
    IntellectPropertySign -- К
    о
    д
    о
    б
    ъ
    е
    к
    т
    а
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    GoodsTraceabilityCode -- П
    р
    и
    з
    н
    а
    к
    т
    о
    в
    а
    р
    а
    ,
    п
    о
    д
    л
    е
    ж
    а
    щ
    е
    г
    о
    п
    р
    о
    с
    л
    е
    ж
    и
    в
    а
    е
    м
    о
    с
    т
    и
    (
    «
    П
    »
    ).
    CIMSign -- П
    р
    и
    з
    н
    а
    к
    о
    т
    н
    е
    с
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    к
    т
    о
    в
    а
    р
    а
    м
    ,
    п
    о
    д
    л
    е
    ж
    а
    щ
    и
    м
    м
    а
    р
    к
    и
    р
    о
    в
    к
    е
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    м
    и
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    м
    и
    )
    з
    н
    а
    к
    а
    м
    и
    (
    «
    М
    »
    ).
    Г
    р
    .33
    Д
    Т
    ,
    в
    т
    о
    р
    о
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    RestrictionSign -- Б
    у
    к
    в
    е
    н
    н
    ы
    й
    к
    о
    д
    с
    о
    б
    л
    ю
    д
    е
    н
    и
    я
    з
    а
    п
    р
    е
    т
    о
    в
    и
    о
    г
    р
    а
    н
    и
    ч
    е
    н
    и
    й
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    .
    Д
    л
    я
    Р
    К
    BeginPeriodDate -- Д
    а
    т
    а
    н
    а
    ч
    а
    л
    а
    п
    е
    р
    и
    о
    д
    а
    (
    О
    П
    Д
    )
    EndPeriodDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    п
    е
    р
    и
    о
    д
    а
    (
    О
    П
    Д
    )
    OriginCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    /
    «
    EU
    »
    / 00 (
    н
    е
    и
    з
    в
    е
    с
    т
    н
    а
    ).
    Г
    р
    .34
    OriginCountryName -- К
    р
    а
    т
    к
    о
    е
    н
    а
    з
    в
    а
    н
    и
    е
    с
    т
    р
    а
    н
    ы
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    /
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    RBOriginCountryCode -- К
    о
    д
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ы
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    а
    д
    м
    и
    н
    и
    с
    т
    р
    а
    т
    и
    в
    н
    о
    -
    т
    е
    р
    р
    и
    т
    о
    р
    и
    а
    л
    ь
    н
    о
    г
    о
    д
    е
    л
    е
    н
    и
    я
    с
    т
    р
    а
    н
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    PrefOriginCountry -- С
    т
    р
    а
    н
    а
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    ,
    о
    п
    р
    е
    д
    е
    л
    е
    н
    н
    а
    я
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    п
    р
    а
    в
    и
    л
    а
    м
    и
    о
    п
    р
    е
    д
    е
    л
    е
    н
    и
    я
    п
    р
    о
    и
    с
    х
    о
    ж
    д
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    м
    и
    п
    р
    и
    п
    р
    е
    д
    о
    с
    т
    а
    в
    л
    е
    н
    и
    и
    т
    а
    р
    и
    ф
    н
    ы
    х
    п
    р
    е
    ф
    е
    р
    е
    н
    ц
    и
    й
    CustomsCostCorrectMethod -- К
    о
    д
    м
    е
    т
    о
    д
    а
    о
    п
    р
    е
    д
    е
    л
    е
    н
    и
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    с
    т
    о
    и
    м
    о
    с
    т
    и
    .
    В
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    м
    е
    т
    о
    д
    о
    в
    о
    п
    р
    е
    д
    е
    л
    е
    н
    и
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    с
    т
    о
    и
    м
    о
    с
    т
    и
    .
    Г
    р
    . 43
    GoodsAddTNVEDCode -- К
    о
    д
    т
    о
    в
    а
    р
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    и
    LicenseGoodsKindCode -- К
    о
    д
    т
    о
    в
    а
    р
    а
    ,
    в
    о
    т
    н
    о
    ш
    е
    н
    и
    и
    и
    м
    п
    о
    р
    т
    а
    к
    о
    т
    о
    р
    о
    г
    о
    в
    в
    е
    д
    е
    н
    о
    а
    в
    т
    о
    м
    а
    т
    и
    ч
    е
    с
    к
    о
    е
    л
    и
    ц
    е
    н
    з
    и
    р
    о
    в
    а
    н
    и
    е
    (
    н
    а
    б
    л
    ю
    д
    е
    н
    и
    е
    )
    DeliveryTime -- Д
    а
    т
    а
    н
    а
    ч
    а
    л
    а
    п
    е
    р
    и
    о
    д
    а
    п
    о
    с
    т
    а
    в
    к
    и
    . (
    э
    л
    е
    м
    е
    н
    т
    7
    г
    р
    . 31
    Д
    Т
    )
    DeliveryTimeEND -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    п
    е
    р
    и
    о
    д
    а
    п
    о
    с
    т
    а
    в
    к
    и
    . (
    э
    л
    е
    м
    е
    н
    т
    7
    г
    р
    . 31
    Д
    Т
    )
    AdditionalSheetCount -- П
    о
    р
    я
    д
    к
    о
    в
    ы
    й
    н
    о
    м
    е
    р
    л
    и
    с
    т
    а
    (
    п
    е
    р
    в
    ы
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    г
    р
    .3)
    QuantityFact -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    о
    в
    ,
    ф
    а
    к
    т
    и
    ч
    е
    с
    к
    и
    п
    е
    р
    е
    д
    а
    н
    н
    ы
    х
    п
    о
    к
    у
    п
    а
    т
    е
    л
    ю
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    у
    с
    л
    о
    в
    и
    я
    м
    и
    п
    о
    с
    т
    а
    в
    к
    и
    (
    э
    л
    е
    м
    е
    н
    т
    8
    г
    р
    . 31
    Д
    Т
    )
    OilField -- С
    в
    е
    д
    е
    н
    и
    я
    о
    м
    е
    с
    т
    о
    р
    о
    ж
    д
    е
    н
    и
    и
    т
    о
    в
    а
    р
    а
    TNVEDContract -- К
    о
    д
    т
    о
    в
    а
    р
    а
    Т
    Н
    В
    Э
    Д
    ,
    д
    е
    й
    с
    т
    в
    у
    ю
    щ
    и
    й
    н
    а
    д
    а
    т
    у
    з
    а
    к
    л
    ю
    ч
    е
    н
    и
    я
    к
    о
    н
    т
    р
    а
    к
    т
    о
    в
    с
    н
    е
    д
    р
    о
    п
    о
    л
    ь
    з
    о
    в
    а
    т
    е
    л
    е
    м
    .
    Д
    л
    я
    Р
    К
    IPObjectRegistryNum -- Р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    о
    б
    ъ
    е
    к
    т
    а
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    п
    о
    р
    е
    е
    с
    т
    р
    у
    о
    б
    ъ
    е
    к
    т
    о
    в
    и
    н
    т
    е
    л
    л
    е
    к
    т
    у
    а
    л
    ь
    н
    о
    й
    с
    о
    б
    с
    т
    в
    е
    н
    н
    о
    с
    т
    и
    CUESADDeliveryTerms -- У
    с
    л
    о
    в
    и
    я
    п
    о
    с
    т
    а
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    .31
    п
    я
    т
    ы
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    ForeignTradeContractDetails -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    с
    в
    е
    д
    е
    н
    и
    я
    п
    о
    д
    о
    г
    о
    в
    о
    р
    у
    (
    к
    о
    н
    т
    р
    а
    к
    т
    у
    )
    GoodsGroupDescription -- О
    п
    и
    с
    а
    н
    и
    е
    и
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    т
    о
    в
    а
    р
    о
    в
    /
    О
    п
    и
    с
    а
    н
    и
    е
    г
    р
    у
    п
    п
    ы
    т
    о
    в
    а
    р
    о
    в
    о
    д
    н
    о
    г
    о
    н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    я
    с
    о
    т
    л
    и
    ч
    а
    ю
    щ
    и
    м
    и
    с
    я
    о
    т
    д
    р
    у
    г
    и
    х
    г
    р
    у
    п
    п
    х
    а
    р
    а
    к
    т
    е
    р
    и
    с
    т
    и
    к
    а
    м
    и
    Preferencii -- П
    р
    е
    ф
    е
    р
    е
    н
    ц
    и
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    л
    ь
    г
    о
    т
    п
    о
    у
    п
    л
    а
    т
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    .
    Г
    р
    .36
    CIMIdDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    н
    о
    м
    е
    р
    а
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    а
    х
    )
    н
    а
    н
    е
    с
    е
    н
    н
    ы
    х
    к
    о
    н
    т
    р
    о
    л
    ь
    н
    ы
    х
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    х
    )
    з
    н
    а
    к
    о
    в
    (
    э
    л
    е
    м
    е
    н
    т
    10
    г
    р
    . 31
    Д
    Т
    ))
    DTIdentificationMeansDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    м
    а
    р
    к
    и
    р
    о
    в
    а
    н
    н
    ы
    х
    т
    о
    в
    а
    р
    о
    в
    (
    э
    л
    е
    м
    е
    н
    т
    13
    г
    р
    31
    Д
    Т
    )
    GoodsTraceabilityMeasureDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    е
    т
    о
    в
    а
    р
    а
    ,
    п
    о
    д
    л
    е
    ж
    а
    щ
    е
    г
    о
    п
    р
    о
    с
    л
    е
    ж
    и
    в
    а
    е
    м
    о
    с
    т
    и
    WoodCodeDetails -- К
    о
    д
    о
    в
    о
    е
    о
    б
    о
    з
    н
    а
    ч
    е
    н
    и
    е
    с
    в
    е
    д
    е
    н
    и
    й
    о
    л
    е
    с
    о
    м
    а
    т
    е
    р
    и
    а
    л
    а
    х
    GoodsSTZ -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    а
    х
    ,
    п
    о
    м
    е
    щ
    е
    н
    н
    ы
    х
    п
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    С
    Т
    З
    и
    л
    и
    с
    в
    о
    б
    о
    д
    н
    о
    г
    о
    с
    к
    л
    а
    д
    а
    .
    г
    р
    31
    п
    11.
    Д
    л
    я
    Р
    К
    и
    Р
    Ф
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = GoodsItemBaseType
    def __init__(self, GoodsNumeric=None, GoodFeatures=None, GoodsDescription=None, GrossWeightQuantity=None, NetWeightQuantity=None, NetWeightQuantity2=None, InvoicedCost=None, InvoicedCurrencyCode=None, InvoicedCurrencyQuantity=None, InvoicedCurrencyRate=None, InvoicedCurrencyDate=None, CustomsCost=None, StatisticalCost=None, TotalStatisticValueAmount=None, GoodsTNVEDCode=None, GoodsClassificationCode=None, AdditionalSign=None, IntellectPropertySign=None, GoodsTraceabilityCode=None, CIMSign=None, RestrictionSign=None, BeginPeriodDate=None, EndPeriodDate=None, OriginCountryCode=None, OriginCountryName=None, RBOriginCountryCode=None, PrefOriginCountry=None, CustomsCostCorrectMethod=None, GoodsAddTNVEDCode=None, LicenseGoodsKindCode=None, DeliveryTime=None, DeliveryTimeEND=None, AdditionalSheetCount=None, QuantityFact=None, OilField=None, TNVEDContract=None, IPObjectRegistryNum=None, CUESADDeliveryTerms=None, ForeignTradeContractDetails=None, GoodsGroupDescription=None, Preferencii=None, CIMIdDetails=None, DTIdentificationMeansDetails=None, GoodsTraceabilityMeasureDetails=None, WoodCodeDetails=None, GoodsSTZ=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("CUESADGoodsItemType"), self).__init__(GoodsNumeric, GoodFeatures, GoodsDescription, GrossWeightQuantity, NetWeightQuantity, NetWeightQuantity2, InvoicedCost, InvoicedCurrencyCode, InvoicedCurrencyQuantity, InvoicedCurrencyRate, InvoicedCurrencyDate, CustomsCost, StatisticalCost, TotalStatisticValueAmount, extensiontype_,  **kwargs_)
        self.GoodsTNVEDCode = GoodsTNVEDCode
        self.validate_CUGoodsNomenclatuerCodeType(self.GoodsTNVEDCode)
        self.GoodsTNVEDCode_nsprefix_ = "clt_ru"
        self.GoodsClassificationCode = GoodsClassificationCode
        self.validate_LetterIndicatorType(self.GoodsClassificationCode)
        self.GoodsClassificationCode_nsprefix_ = "clt_ru"
        self.AdditionalSign = AdditionalSign
        self.validate_LetterIndicatorType(self.AdditionalSign)
        self.AdditionalSign_nsprefix_ = "clt_ru"
        self.IntellectPropertySign = IntellectPropertySign
        self.validate_LetterIndicatorType(self.IntellectPropertySign)
        self.IntellectPropertySign_nsprefix_ = "clt_ru"
        self.GoodsTraceabilityCode = GoodsTraceabilityCode
        self.validate_LetterIndicatorType(self.GoodsTraceabilityCode)
        self.GoodsTraceabilityCode_nsprefix_ = "clt_ru"
        self.CIMSign = CIMSign
        self.validate_LetterIndicatorType(self.CIMSign)
        self.CIMSign_nsprefix_ = "clt_ru"
        if RestrictionSign is None:
            self.RestrictionSign = []
        else:
            self.RestrictionSign = RestrictionSign
        self.RestrictionSign_nsprefix_ = "clt_ru"
        if isinstance(BeginPeriodDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BeginPeriodDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BeginPeriodDate
        self.BeginPeriodDate = initvalue_
        self.BeginPeriodDate_nsprefix_ = "clt_ru"
        if isinstance(EndPeriodDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndPeriodDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EndPeriodDate
        self.EndPeriodDate = initvalue_
        self.EndPeriodDate_nsprefix_ = "clt_ru"
        self.OriginCountryCode = OriginCountryCode
        self.validate_CountryA2CodeType(self.OriginCountryCode)
        self.OriginCountryCode_nsprefix_ = "clt_ru"
        self.OriginCountryName = OriginCountryName
        self.validate_CountryNameType(self.OriginCountryName)
        self.OriginCountryName_nsprefix_ = "clt_ru"
        self.RBOriginCountryCode = RBOriginCountryCode
        self.validate_Code3Type(self.RBOriginCountryCode)
        self.RBOriginCountryCode_nsprefix_ = "clt_ru"
        self.PrefOriginCountry = PrefOriginCountry
        self.PrefOriginCountry_nsprefix_ = "catESAD_cu"
        self.CustomsCostCorrectMethod = CustomsCostCorrectMethod
        self.validate_CustomsCostAppraiseMethodType(self.CustomsCostCorrectMethod)
        self.CustomsCostCorrectMethod_nsprefix_ = "cltESAD_cu"
        self.GoodsAddTNVEDCode = GoodsAddTNVEDCode
        self.validate_GoodsNomenclatuerAddCodeType(self.GoodsAddTNVEDCode)
        self.GoodsAddTNVEDCode_nsprefix_ = "clt_ru"
        self.LicenseGoodsKindCode = LicenseGoodsKindCode
        self.validate_Code4Type(self.LicenseGoodsKindCode)
        self.LicenseGoodsKindCode_nsprefix_ = "clt_ru"
        if isinstance(DeliveryTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DeliveryTime, '%Y-%m-%d').date()
        else:
            initvalue_ = DeliveryTime
        self.DeliveryTime = initvalue_
        self.DeliveryTime_nsprefix_ = "clt_ru"
        if isinstance(DeliveryTimeEND, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DeliveryTimeEND, '%Y-%m-%d').date()
        else:
            initvalue_ = DeliveryTimeEND
        self.DeliveryTimeEND = initvalue_
        self.DeliveryTimeEND_nsprefix_ = "clt_ru"
        self.AdditionalSheetCount = AdditionalSheetCount
        self.validate_SheetNumberType(self.AdditionalSheetCount)
        self.AdditionalSheetCount_nsprefix_ = "clt_ru"
        self.QuantityFact = QuantityFact
        self.QuantityFact_nsprefix_ = "cat_ru"
        if OilField is None:
            self.OilField = []
        else:
            self.OilField = OilField
        self.OilField_nsprefix_ = "clt_ru"
        self.TNVEDContract = TNVEDContract
        self.validate_TNVEDContractType(self.TNVEDContract)
        self.TNVEDContract_nsprefix_ = "clt_ru"
        if IPObjectRegistryNum is None:
            self.IPObjectRegistryNum = []
        else:
            self.IPObjectRegistryNum = IPObjectRegistryNum
        self.IPObjectRegistryNum_nsprefix_ = "catESAD_cu"
        if CUESADDeliveryTerms is None:
            self.CUESADDeliveryTerms = []
        else:
            self.CUESADDeliveryTerms = CUESADDeliveryTerms
        self.CUESADDeliveryTerms_nsprefix_ = "cat_ru"
        if ForeignTradeContractDetails is None:
            self.ForeignTradeContractDetails = []
        else:
            self.ForeignTradeContractDetails = ForeignTradeContractDetails
        self.ForeignTradeContractDetails_nsprefix_ = "catESAD_cu"
        if GoodsGroupDescription is None:
            self.GoodsGroupDescription = []
        else:
            self.GoodsGroupDescription = GoodsGroupDescription
        self.GoodsGroupDescription_nsprefix_ = "catESAD_cu"
        self.Preferencii = Preferencii
        self.Preferencii_nsprefix_ = "catESAD_cu"
        self.CIMIdDetails = CIMIdDetails
        self.CIMIdDetails_nsprefix_ = "catESAD_cu"
        self.DTIdentificationMeansDetails = DTIdentificationMeansDetails
        self.DTIdentificationMeansDetails_nsprefix_ = "catESAD_cu"
        self.GoodsTraceabilityMeasureDetails = GoodsTraceabilityMeasureDetails
        self.GoodsTraceabilityMeasureDetails_nsprefix_ = "catESAD_cu"
        if WoodCodeDetails is None:
            self.WoodCodeDetails = []
        else:
            self.WoodCodeDetails = WoodCodeDetails
        self.WoodCodeDetails_nsprefix_ = "catESAD_cu"
        if GoodsSTZ is None:
            self.GoodsSTZ = []
        else:
            self.GoodsSTZ = GoodsSTZ
        self.GoodsSTZ_nsprefix_ = "catESAD_cu"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUESADGoodsItemType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUESADGoodsItemType.subclass:
            return CUESADGoodsItemType.subclass(*args_, **kwargs_)
        else:
            return CUESADGoodsItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_GoodsTNVEDCode(self):
        return self.GoodsTNVEDCode
    def set_GoodsTNVEDCode(self, GoodsTNVEDCode):
        self.GoodsTNVEDCode = GoodsTNVEDCode
    def get_GoodsClassificationCode(self):
        return self.GoodsClassificationCode
    def set_GoodsClassificationCode(self, GoodsClassificationCode):
        self.GoodsClassificationCode = GoodsClassificationCode
    def get_AdditionalSign(self):
        return self.AdditionalSign
    def set_AdditionalSign(self, AdditionalSign):
        self.AdditionalSign = AdditionalSign
    def get_IntellectPropertySign(self):
        return self.IntellectPropertySign
    def set_IntellectPropertySign(self, IntellectPropertySign):
        self.IntellectPropertySign = IntellectPropertySign
    def get_GoodsTraceabilityCode(self):
        return self.GoodsTraceabilityCode
    def set_GoodsTraceabilityCode(self, GoodsTraceabilityCode):
        self.GoodsTraceabilityCode = GoodsTraceabilityCode
    def get_CIMSign(self):
        return self.CIMSign
    def set_CIMSign(self, CIMSign):
        self.CIMSign = CIMSign
    def get_RestrictionSign(self):
        return self.RestrictionSign
    def set_RestrictionSign(self, RestrictionSign):
        self.RestrictionSign = RestrictionSign
    def add_RestrictionSign(self, value):
        self.RestrictionSign.append(value)
    def insert_RestrictionSign_at(self, index, value):
        self.RestrictionSign.insert(index, value)
    def replace_RestrictionSign_at(self, index, value):
        self.RestrictionSign[index] = value
    def get_BeginPeriodDate(self):
        return self.BeginPeriodDate
    def set_BeginPeriodDate(self, BeginPeriodDate):
        self.BeginPeriodDate = BeginPeriodDate
    def get_EndPeriodDate(self):
        return self.EndPeriodDate
    def set_EndPeriodDate(self, EndPeriodDate):
        self.EndPeriodDate = EndPeriodDate
    def get_OriginCountryCode(self):
        return self.OriginCountryCode
    def set_OriginCountryCode(self, OriginCountryCode):
        self.OriginCountryCode = OriginCountryCode
    def get_OriginCountryName(self):
        return self.OriginCountryName
    def set_OriginCountryName(self, OriginCountryName):
        self.OriginCountryName = OriginCountryName
    def get_RBOriginCountryCode(self):
        return self.RBOriginCountryCode
    def set_RBOriginCountryCode(self, RBOriginCountryCode):
        self.RBOriginCountryCode = RBOriginCountryCode
    def get_PrefOriginCountry(self):
        return self.PrefOriginCountry
    def set_PrefOriginCountry(self, PrefOriginCountry):
        self.PrefOriginCountry = PrefOriginCountry
    def get_CustomsCostCorrectMethod(self):
        return self.CustomsCostCorrectMethod
    def set_CustomsCostCorrectMethod(self, CustomsCostCorrectMethod):
        self.CustomsCostCorrectMethod = CustomsCostCorrectMethod
    def get_GoodsAddTNVEDCode(self):
        return self.GoodsAddTNVEDCode
    def set_GoodsAddTNVEDCode(self, GoodsAddTNVEDCode):
        self.GoodsAddTNVEDCode = GoodsAddTNVEDCode
    def get_LicenseGoodsKindCode(self):
        return self.LicenseGoodsKindCode
    def set_LicenseGoodsKindCode(self, LicenseGoodsKindCode):
        self.LicenseGoodsKindCode = LicenseGoodsKindCode
    def get_DeliveryTime(self):
        return self.DeliveryTime
    def set_DeliveryTime(self, DeliveryTime):
        self.DeliveryTime = DeliveryTime
    def get_DeliveryTimeEND(self):
        return self.DeliveryTimeEND
    def set_DeliveryTimeEND(self, DeliveryTimeEND):
        self.DeliveryTimeEND = DeliveryTimeEND
    def get_AdditionalSheetCount(self):
        return self.AdditionalSheetCount
    def set_AdditionalSheetCount(self, AdditionalSheetCount):
        self.AdditionalSheetCount = AdditionalSheetCount
    def get_QuantityFact(self):
        return self.QuantityFact
    def set_QuantityFact(self, QuantityFact):
        self.QuantityFact = QuantityFact
    def get_OilField(self):
        return self.OilField
    def set_OilField(self, OilField):
        self.OilField = OilField
    def add_OilField(self, value):
        self.OilField.append(value)
    def insert_OilField_at(self, index, value):
        self.OilField.insert(index, value)
    def replace_OilField_at(self, index, value):
        self.OilField[index] = value
    def get_TNVEDContract(self):
        return self.TNVEDContract
    def set_TNVEDContract(self, TNVEDContract):
        self.TNVEDContract = TNVEDContract
    def get_IPObjectRegistryNum(self):
        return self.IPObjectRegistryNum
    def set_IPObjectRegistryNum(self, IPObjectRegistryNum):
        self.IPObjectRegistryNum = IPObjectRegistryNum
    def add_IPObjectRegistryNum(self, value):
        self.IPObjectRegistryNum.append(value)
    def insert_IPObjectRegistryNum_at(self, index, value):
        self.IPObjectRegistryNum.insert(index, value)
    def replace_IPObjectRegistryNum_at(self, index, value):
        self.IPObjectRegistryNum[index] = value
    def get_CUESADDeliveryTerms(self):
        return self.CUESADDeliveryTerms
    def set_CUESADDeliveryTerms(self, CUESADDeliveryTerms):
        self.CUESADDeliveryTerms = CUESADDeliveryTerms
    def add_CUESADDeliveryTerms(self, value):
        self.CUESADDeliveryTerms.append(value)
    def insert_CUESADDeliveryTerms_at(self, index, value):
        self.CUESADDeliveryTerms.insert(index, value)
    def replace_CUESADDeliveryTerms_at(self, index, value):
        self.CUESADDeliveryTerms[index] = value
    def get_ForeignTradeContractDetails(self):
        return self.ForeignTradeContractDetails
    def set_ForeignTradeContractDetails(self, ForeignTradeContractDetails):
        self.ForeignTradeContractDetails = ForeignTradeContractDetails
    def add_ForeignTradeContractDetails(self, value):
        self.ForeignTradeContractDetails.append(value)
    def insert_ForeignTradeContractDetails_at(self, index, value):
        self.ForeignTradeContractDetails.insert(index, value)
    def replace_ForeignTradeContractDetails_at(self, index, value):
        self.ForeignTradeContractDetails[index] = value
    def get_GoodsGroupDescription(self):
        return self.GoodsGroupDescription
    def set_GoodsGroupDescription(self, GoodsGroupDescription):
        self.GoodsGroupDescription = GoodsGroupDescription
    def add_GoodsGroupDescription(self, value):
        self.GoodsGroupDescription.append(value)
    def insert_GoodsGroupDescription_at(self, index, value):
        self.GoodsGroupDescription.insert(index, value)
    def replace_GoodsGroupDescription_at(self, index, value):
        self.GoodsGroupDescription[index] = value
    def get_Preferencii(self):
        return self.Preferencii
    def set_Preferencii(self, Preferencii):
        self.Preferencii = Preferencii
    def get_CIMIdDetails(self):
        return self.CIMIdDetails
    def set_CIMIdDetails(self, CIMIdDetails):
        self.CIMIdDetails = CIMIdDetails
    def get_DTIdentificationMeansDetails(self):
        return self.DTIdentificationMeansDetails
    def set_DTIdentificationMeansDetails(self, DTIdentificationMeansDetails):
        self.DTIdentificationMeansDetails = DTIdentificationMeansDetails
    def get_GoodsTraceabilityMeasureDetails(self):
        return self.GoodsTraceabilityMeasureDetails
    def set_GoodsTraceabilityMeasureDetails(self, GoodsTraceabilityMeasureDetails):
        self.GoodsTraceabilityMeasureDetails = GoodsTraceabilityMeasureDetails
    def get_WoodCodeDetails(self):
        return self.WoodCodeDetails
    def set_WoodCodeDetails(self, WoodCodeDetails):
        self.WoodCodeDetails = WoodCodeDetails
    def add_WoodCodeDetails(self, value):
        self.WoodCodeDetails.append(value)
    def insert_WoodCodeDetails_at(self, index, value):
        self.WoodCodeDetails.insert(index, value)
    def replace_WoodCodeDetails_at(self, index, value):
        self.WoodCodeDetails[index] = value
    def get_GoodsSTZ(self):
        return self.GoodsSTZ
    def set_GoodsSTZ(self, GoodsSTZ):
        self.GoodsSTZ = GoodsSTZ
    def add_GoodsSTZ(self, value):
        self.GoodsSTZ.append(value)
    def insert_GoodsSTZ_at(self, index, value):
        self.GoodsSTZ.insert(index, value)
    def replace_GoodsSTZ_at(self, index, value):
        self.GoodsSTZ[index] = value
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_CUGoodsNomenclatuerCodeType(self, value):
        result = True
        # Validate type CUGoodsNomenclatuerCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CUGoodsNomenclatuerCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CUGoodsNomenclatuerCodeType_patterns_, ))
                result = False
        return result
    validate_CUGoodsNomenclatuerCodeType_patterns_ = [['^([0-9]{4}|[0-9]{6}|[0-9]{8}|[0-9]{10})$']]
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable5Type(self, value):
        result = True
        # Validate type CodeVariable5Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable5Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CountryNameType(self, value):
        result = True
        # Validate type CountryNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 40:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CountryNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CountryNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Code3Type(self, value):
        result = True
        # Validate type Code3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsCostAppraiseMethodType(self, value):
        result = True
        # Validate type CustomsCostAppraiseMethodType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CustomsCostAppraiseMethodType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_GoodsNomenclatuerAddCodeType(self, value):
        result = True
        # Validate type GoodsNomenclatuerAddCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_GoodsNomenclatuerAddCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_GoodsNomenclatuerAddCodeType_patterns_, ))
                result = False
        return result
    validate_GoodsNomenclatuerAddCodeType_patterns_ = [['^(\\d{4})$']]
    def validate_Code4Type(self, value):
        result = True
        # Validate type Code4Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 4:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code4Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_SheetNumberType(self, value):
        result = True
        # Validate type SheetNumberType, a restriction on CategoryCust:QuantityCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on SheetNumberType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_TNVEDContractType(self, value):
        result = True
        # Validate type TNVEDContractType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_TNVEDContractType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_TNVEDContractType_patterns_, ))
                result = False
        return result
    validate_TNVEDContractType_patterns_ = [['^([0-9]{9}|[0-9]{10})$']]
    def has__content(self):
        if (
            self.GoodsTNVEDCode is not None or
            self.GoodsClassificationCode is not None or
            self.AdditionalSign is not None or
            self.IntellectPropertySign is not None or
            self.GoodsTraceabilityCode is not None or
            self.CIMSign is not None or
            self.RestrictionSign or
            self.BeginPeriodDate is not None or
            self.EndPeriodDate is not None or
            self.OriginCountryCode is not None or
            self.OriginCountryName is not None or
            self.RBOriginCountryCode is not None or
            self.PrefOriginCountry is not None or
            self.CustomsCostCorrectMethod is not None or
            self.GoodsAddTNVEDCode is not None or
            self.LicenseGoodsKindCode is not None or
            self.DeliveryTime is not None or
            self.DeliveryTimeEND is not None or
            self.AdditionalSheetCount is not None or
            self.QuantityFact is not None or
            self.OilField or
            self.TNVEDContract is not None or
            self.IPObjectRegistryNum or
            self.CUESADDeliveryTerms or
            self.ForeignTradeContractDetails or
            self.GoodsGroupDescription or
            self.Preferencii is not None or
            self.CIMIdDetails is not None or
            self.DTIdentificationMeansDetails is not None or
            self.GoodsTraceabilityMeasureDetails is not None or
            self.WoodCodeDetails or
            self.GoodsSTZ or
            super(CUESADGoodsItemType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUESADGoodsItemType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUESADGoodsItemType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUESADGoodsItemType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADGoodsItemType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUESADGoodsItemType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='CUESADGoodsItemType'):
        super(CUESADGoodsItemType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUESADGoodsItemType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='CUESADGoodsItemType', fromsubclass_=False, pretty_print=True):
        super(CUESADGoodsItemType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GoodsTNVEDCode is not None:
            namespaceprefix_ = self.GoodsTNVEDCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsTNVEDCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsTNVEDCode>%s</%sGoodsTNVEDCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsTNVEDCode), input_name='GoodsTNVEDCode')), namespaceprefix_ , eol_))
        if self.GoodsClassificationCode is not None:
            namespaceprefix_ = self.GoodsClassificationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsClassificationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsClassificationCode>%s</%sGoodsClassificationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsClassificationCode), input_name='GoodsClassificationCode')), namespaceprefix_ , eol_))
        if self.AdditionalSign is not None:
            namespaceprefix_ = self.AdditionalSign_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalSign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalSign>%s</%sAdditionalSign>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AdditionalSign), input_name='AdditionalSign')), namespaceprefix_ , eol_))
        if self.IntellectPropertySign is not None:
            namespaceprefix_ = self.IntellectPropertySign_nsprefix_ + ':' if (UseCapturedNS_ and self.IntellectPropertySign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIntellectPropertySign>%s</%sIntellectPropertySign>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IntellectPropertySign), input_name='IntellectPropertySign')), namespaceprefix_ , eol_))
        if self.GoodsTraceabilityCode is not None:
            namespaceprefix_ = self.GoodsTraceabilityCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsTraceabilityCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsTraceabilityCode>%s</%sGoodsTraceabilityCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsTraceabilityCode), input_name='GoodsTraceabilityCode')), namespaceprefix_ , eol_))
        if self.CIMSign is not None:
            namespaceprefix_ = self.CIMSign_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMSign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCIMSign>%s</%sCIMSign>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CIMSign), input_name='CIMSign')), namespaceprefix_ , eol_))
        for RestrictionSign_ in self.RestrictionSign:
            namespaceprefix_ = self.RestrictionSign_nsprefix_ + ':' if (UseCapturedNS_ and self.RestrictionSign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestrictionSign>%s</%sRestrictionSign>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(RestrictionSign_), input_name='RestrictionSign')), namespaceprefix_ , eol_))
        if self.BeginPeriodDate is not None:
            namespaceprefix_ = self.BeginPeriodDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BeginPeriodDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBeginPeriodDate>%s</%sBeginPeriodDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BeginPeriodDate, input_name='BeginPeriodDate'), namespaceprefix_ , eol_))
        if self.EndPeriodDate is not None:
            namespaceprefix_ = self.EndPeriodDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndPeriodDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndPeriodDate>%s</%sEndPeriodDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EndPeriodDate, input_name='EndPeriodDate'), namespaceprefix_ , eol_))
        if self.OriginCountryCode is not None:
            namespaceprefix_ = self.OriginCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCountryCode>%s</%sOriginCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryCode), input_name='OriginCountryCode')), namespaceprefix_ , eol_))
        if self.OriginCountryName is not None:
            namespaceprefix_ = self.OriginCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginCountryName>%s</%sOriginCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginCountryName), input_name='OriginCountryName')), namespaceprefix_ , eol_))
        if self.RBOriginCountryCode is not None:
            namespaceprefix_ = self.RBOriginCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RBOriginCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRBOriginCountryCode>%s</%sRBOriginCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RBOriginCountryCode), input_name='RBOriginCountryCode')), namespaceprefix_ , eol_))
        if self.PrefOriginCountry is not None:
            namespaceprefix_ = self.PrefOriginCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.PrefOriginCountry_nsprefix_) else ''
            self.PrefOriginCountry.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrefOriginCountry', pretty_print=pretty_print)
        if self.CustomsCostCorrectMethod is not None:
            namespaceprefix_ = self.CustomsCostCorrectMethod_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCostCorrectMethod_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCostCorrectMethod>%s</%sCustomsCostCorrectMethod>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCostCorrectMethod), input_name='CustomsCostCorrectMethod')), namespaceprefix_ , eol_))
        if self.GoodsAddTNVEDCode is not None:
            namespaceprefix_ = self.GoodsAddTNVEDCode_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsAddTNVEDCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGoodsAddTNVEDCode>%s</%sGoodsAddTNVEDCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GoodsAddTNVEDCode), input_name='GoodsAddTNVEDCode')), namespaceprefix_ , eol_))
        if self.LicenseGoodsKindCode is not None:
            namespaceprefix_ = self.LicenseGoodsKindCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LicenseGoodsKindCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLicenseGoodsKindCode>%s</%sLicenseGoodsKindCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LicenseGoodsKindCode), input_name='LicenseGoodsKindCode')), namespaceprefix_ , eol_))
        if self.DeliveryTime is not None:
            namespaceprefix_ = self.DeliveryTime_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTime>%s</%sDeliveryTime>%s' % (namespaceprefix_ , self.gds_format_date(self.DeliveryTime, input_name='DeliveryTime'), namespaceprefix_ , eol_))
        if self.DeliveryTimeEND is not None:
            namespaceprefix_ = self.DeliveryTimeEND_nsprefix_ + ':' if (UseCapturedNS_ and self.DeliveryTimeEND_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeliveryTimeEND>%s</%sDeliveryTimeEND>%s' % (namespaceprefix_ , self.gds_format_date(self.DeliveryTimeEND, input_name='DeliveryTimeEND'), namespaceprefix_ , eol_))
        if self.AdditionalSheetCount is not None:
            namespaceprefix_ = self.AdditionalSheetCount_nsprefix_ + ':' if (UseCapturedNS_ and self.AdditionalSheetCount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAdditionalSheetCount>%s</%sAdditionalSheetCount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AdditionalSheetCount, input_name='AdditionalSheetCount'), namespaceprefix_ , eol_))
        if self.QuantityFact is not None:
            namespaceprefix_ = self.QuantityFact_nsprefix_ + ':' if (UseCapturedNS_ and self.QuantityFact_nsprefix_) else ''
            self.QuantityFact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QuantityFact', pretty_print=pretty_print)
        for OilField_ in self.OilField:
            namespaceprefix_ = self.OilField_nsprefix_ + ':' if (UseCapturedNS_ and self.OilField_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOilField>%s</%sOilField>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(OilField_), input_name='OilField')), namespaceprefix_ , eol_))
        if self.TNVEDContract is not None:
            namespaceprefix_ = self.TNVEDContract_nsprefix_ + ':' if (UseCapturedNS_ and self.TNVEDContract_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTNVEDContract>%s</%sTNVEDContract>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TNVEDContract), input_name='TNVEDContract')), namespaceprefix_ , eol_))
        for IPObjectRegistryNum_ in self.IPObjectRegistryNum:
            namespaceprefix_ = self.IPObjectRegistryNum_nsprefix_ + ':' if (UseCapturedNS_ and self.IPObjectRegistryNum_nsprefix_) else ''
            IPObjectRegistryNum_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IPObjectRegistryNum', pretty_print=pretty_print)
        for CUESADDeliveryTerms_ in self.CUESADDeliveryTerms:
            namespaceprefix_ = self.CUESADDeliveryTerms_nsprefix_ + ':' if (UseCapturedNS_ and self.CUESADDeliveryTerms_nsprefix_) else ''
            CUESADDeliveryTerms_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CUESADDeliveryTerms', pretty_print=pretty_print)
        for ForeignTradeContractDetails_ in self.ForeignTradeContractDetails:
            namespaceprefix_ = self.ForeignTradeContractDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.ForeignTradeContractDetails_nsprefix_) else ''
            ForeignTradeContractDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ForeignTradeContractDetails', pretty_print=pretty_print)
        for GoodsGroupDescription_ in self.GoodsGroupDescription:
            namespaceprefix_ = self.GoodsGroupDescription_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsGroupDescription_nsprefix_) else ''
            GoodsGroupDescription_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsGroupDescription', pretty_print=pretty_print)
        if self.Preferencii is not None:
            namespaceprefix_ = self.Preferencii_nsprefix_ + ':' if (UseCapturedNS_ and self.Preferencii_nsprefix_) else ''
            self.Preferencii.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Preferencii', pretty_print=pretty_print)
        if self.CIMIdDetails is not None:
            namespaceprefix_ = self.CIMIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.CIMIdDetails_nsprefix_) else ''
            self.CIMIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CIMIdDetails', pretty_print=pretty_print)
        if self.DTIdentificationMeansDetails is not None:
            namespaceprefix_ = self.DTIdentificationMeansDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DTIdentificationMeansDetails_nsprefix_) else ''
            self.DTIdentificationMeansDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DTIdentificationMeansDetails', pretty_print=pretty_print)
        if self.GoodsTraceabilityMeasureDetails is not None:
            namespaceprefix_ = self.GoodsTraceabilityMeasureDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsTraceabilityMeasureDetails_nsprefix_) else ''
            self.GoodsTraceabilityMeasureDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsTraceabilityMeasureDetails', pretty_print=pretty_print)
        for WoodCodeDetails_ in self.WoodCodeDetails:
            namespaceprefix_ = self.WoodCodeDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.WoodCodeDetails_nsprefix_) else ''
            WoodCodeDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WoodCodeDetails', pretty_print=pretty_print)
        for GoodsSTZ_ in self.GoodsSTZ:
            namespaceprefix_ = self.GoodsSTZ_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsSTZ_nsprefix_) else ''
            GoodsSTZ_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsSTZ', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(CUESADGoodsItemType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'GoodsTNVEDCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsTNVEDCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsTNVEDCode')
            self.GoodsTNVEDCode = value_
            self.GoodsTNVEDCode_nsprefix_ = child_.prefix
            # validate type CUGoodsNomenclatuerCodeType
            self.validate_CUGoodsNomenclatuerCodeType(self.GoodsTNVEDCode)
        elif nodeName_ == 'GoodsClassificationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsClassificationCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsClassificationCode')
            self.GoodsClassificationCode = value_
            self.GoodsClassificationCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.GoodsClassificationCode)
        elif nodeName_ == 'AdditionalSign':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'AdditionalSign')
            value_ = self.gds_validate_string(value_, node, 'AdditionalSign')
            self.AdditionalSign = value_
            self.AdditionalSign_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.AdditionalSign)
        elif nodeName_ == 'IntellectPropertySign':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'IntellectPropertySign')
            value_ = self.gds_validate_string(value_, node, 'IntellectPropertySign')
            self.IntellectPropertySign = value_
            self.IntellectPropertySign_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.IntellectPropertySign)
        elif nodeName_ == 'GoodsTraceabilityCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsTraceabilityCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsTraceabilityCode')
            self.GoodsTraceabilityCode = value_
            self.GoodsTraceabilityCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.GoodsTraceabilityCode)
        elif nodeName_ == 'CIMSign':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CIMSign')
            value_ = self.gds_validate_string(value_, node, 'CIMSign')
            self.CIMSign = value_
            self.CIMSign_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.CIMSign)
        elif nodeName_ == 'RestrictionSign':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RestrictionSign')
            value_ = self.gds_validate_string(value_, node, 'RestrictionSign')
            self.RestrictionSign.append(value_)
            self.RestrictionSign_nsprefix_ = child_.prefix
            # validate type CodeVariable5Type
            self.validate_CodeVariable5Type(self.RestrictionSign[-1])
        elif nodeName_ == 'BeginPeriodDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BeginPeriodDate = dval_
            self.BeginPeriodDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.BeginPeriodDate)
        elif nodeName_ == 'EndPeriodDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EndPeriodDate = dval_
            self.EndPeriodDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.EndPeriodDate)
        elif nodeName_ == 'OriginCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'OriginCountryCode')
            value_ = self.gds_validate_string(value_, node, 'OriginCountryCode')
            self.OriginCountryCode = value_
            self.OriginCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.OriginCountryCode)
        elif nodeName_ == 'OriginCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginCountryName')
            value_ = self.gds_validate_string(value_, node, 'OriginCountryName')
            self.OriginCountryName = value_
            self.OriginCountryName_nsprefix_ = child_.prefix
            # validate type CountryNameType
            self.validate_CountryNameType(self.OriginCountryName)
        elif nodeName_ == 'RBOriginCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RBOriginCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RBOriginCountryCode')
            self.RBOriginCountryCode = value_
            self.RBOriginCountryCode_nsprefix_ = child_.prefix
            # validate type Code3Type
            self.validate_Code3Type(self.RBOriginCountryCode)
        elif nodeName_ == 'PrefOriginCountry':
            obj_ = CountryDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PrefOriginCountry = obj_
            obj_.original_tagname_ = 'PrefOriginCountry'
        elif nodeName_ == 'CustomsCostCorrectMethod':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCostCorrectMethod')
            value_ = self.gds_validate_string(value_, node, 'CustomsCostCorrectMethod')
            self.CustomsCostCorrectMethod = value_
            self.CustomsCostCorrectMethod_nsprefix_ = child_.prefix
            # validate type CustomsCostAppraiseMethodType
            self.validate_CustomsCostAppraiseMethodType(self.CustomsCostCorrectMethod)
        elif nodeName_ == 'GoodsAddTNVEDCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'GoodsAddTNVEDCode')
            value_ = self.gds_validate_string(value_, node, 'GoodsAddTNVEDCode')
            self.GoodsAddTNVEDCode = value_
            self.GoodsAddTNVEDCode_nsprefix_ = child_.prefix
            # validate type GoodsNomenclatuerAddCodeType
            self.validate_GoodsNomenclatuerAddCodeType(self.GoodsAddTNVEDCode)
        elif nodeName_ == 'LicenseGoodsKindCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LicenseGoodsKindCode')
            value_ = self.gds_validate_string(value_, node, 'LicenseGoodsKindCode')
            self.LicenseGoodsKindCode = value_
            self.LicenseGoodsKindCode_nsprefix_ = child_.prefix
            # validate type Code4Type
            self.validate_Code4Type(self.LicenseGoodsKindCode)
        elif nodeName_ == 'DeliveryTime':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DeliveryTime = dval_
            self.DeliveryTime_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DeliveryTime)
        elif nodeName_ == 'DeliveryTimeEND':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DeliveryTimeEND = dval_
            self.DeliveryTimeEND_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DeliveryTimeEND)
        elif nodeName_ == 'AdditionalSheetCount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AdditionalSheetCount')
            fval_ = self.gds_validate_decimal(fval_, node, 'AdditionalSheetCount')
            self.AdditionalSheetCount = fval_
            self.AdditionalSheetCount_nsprefix_ = child_.prefix
            # validate type SheetNumberType
            self.validate_SheetNumberType(self.AdditionalSheetCount)
        elif nodeName_ == 'QuantityFact':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QuantityFact = obj_
            obj_.original_tagname_ = 'QuantityFact'
        elif nodeName_ == 'OilField':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OilField')
            value_ = self.gds_validate_string(value_, node, 'OilField')
            self.OilField.append(value_)
            self.OilField_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.OilField[-1])
        elif nodeName_ == 'TNVEDContract':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TNVEDContract')
            value_ = self.gds_validate_string(value_, node, 'TNVEDContract')
            self.TNVEDContract = value_
            self.TNVEDContract_nsprefix_ = child_.prefix
            # validate type TNVEDContractType
            self.validate_TNVEDContractType(self.TNVEDContract)
        elif nodeName_ == 'IPObjectRegistryNum':
            obj_ = IPObjectRegistryNumType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IPObjectRegistryNum.append(obj_)
            obj_.original_tagname_ = 'IPObjectRegistryNum'
        elif nodeName_ == 'CUESADDeliveryTerms':
            obj_ = DeliveryTermsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CUESADDeliveryTerms.append(obj_)
            obj_.original_tagname_ = 'CUESADDeliveryTerms'
        elif nodeName_ == 'ForeignTradeContractDetails':
            obj_ = ESADContractDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ForeignTradeContractDetails.append(obj_)
            obj_.original_tagname_ = 'ForeignTradeContractDetails'
        elif nodeName_ == 'GoodsGroupDescription':
            obj_ = GoodsGroupDescriptionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsGroupDescription.append(obj_)
            obj_.original_tagname_ = 'GoodsGroupDescription'
        elif nodeName_ == 'Preferencii':
            obj_ = CUPreferenciiType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Preferencii = obj_
            obj_.original_tagname_ = 'Preferencii'
        elif nodeName_ == 'CIMIdDetails':
            obj_ = CIMIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CIMIdDetails = obj_
            obj_.original_tagname_ = 'CIMIdDetails'
        elif nodeName_ == 'DTIdentificationMeansDetails':
            obj_ = DTIdentificationMeansDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DTIdentificationMeansDetails = obj_
            obj_.original_tagname_ = 'DTIdentificationMeansDetails'
        elif nodeName_ == 'GoodsTraceabilityMeasureDetails':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsTraceabilityMeasureDetails = obj_
            obj_.original_tagname_ = 'GoodsTraceabilityMeasureDetails'
        elif nodeName_ == 'WoodCodeDetails':
            obj_ = WoodCodeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WoodCodeDetails.append(obj_)
            obj_.original_tagname_ = 'WoodCodeDetails'
        elif nodeName_ == 'GoodsSTZ':
            obj_ = GoodsSTZType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsSTZ.append(obj_)
            obj_.original_tagname_ = 'GoodsSTZ'
        super(CUESADGoodsItemType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUESADGoodsItemType


class OrganizationBackAddrType(OrganizationType):
    """OrganizationBackAddrType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    Ю
    р
    и
    д
    и
    ч
    е
    с
    к
    и
    й
    и
    ф
    а
    к
    т
    и
    ч
    е
    с
    к
    и
    й
    а
    д
    р
    е
    с
    FactAddress -- Ф
    а
    к
    т
    и
    ч
    е
    с
    к
    и
    й
    а
    д
    р
    е
    с
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = OrganizationType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, OKPOID=None, OKATOCode=None, Address=None, Contact=None, FactAddress=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        super(globals().get("OrganizationBackAddrType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, OKPOID, OKATOCode, Address, Contact,  **kwargs_)
        self.FactAddress = FactAddress
        self.FactAddress_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrganizationBackAddrType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrganizationBackAddrType.subclass:
            return OrganizationBackAddrType.subclass(*args_, **kwargs_)
        else:
            return OrganizationBackAddrType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FactAddress(self):
        return self.FactAddress
    def set_FactAddress(self, FactAddress):
        self.FactAddress = FactAddress
    def has__content(self):
        if (
            self.FactAddress is not None or
            super(OrganizationBackAddrType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"', name_='OrganizationBackAddrType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrganizationBackAddrType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrganizationBackAddrType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationBackAddrType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrganizationBackAddrType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='OrganizationBackAddrType'):
        super(OrganizationBackAddrType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationBackAddrType')
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"', name_='OrganizationBackAddrType', fromsubclass_=False, pretty_print=True):
        super(OrganizationBackAddrType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FactAddress is not None:
            namespaceprefix_ = self.FactAddress_nsprefix_ + ':' if (UseCapturedNS_ and self.FactAddress_nsprefix_) else ''
            self.FactAddress.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FactAddress', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(OrganizationBackAddrType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FactAddress':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FactAddress = obj_
            obj_.original_tagname_ = 'FactAddress'
        super(OrganizationBackAddrType, self)._buildChildren(child_, node, nodeName_, True)
# end class OrganizationBackAddrType


class DriverInformationType(PersonBaseType):
    """DriverInformationType -- И
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    о
    в
    о
    д
    и
    т
    е
    л
    я
    х
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    .
    З
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    п
    р
    и
    т
    р
    а
    н
    з
    и
    т
    е
    т
    о
    в
    а
    р
    о
    в
    а
    в
    т
    о
    м
    о
    б
    и
    л
    ь
    н
    ы
    м
    т
    р
    а
    н
    с
    п
    о
    р
    т
    о
    м
    (
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    т
    с
    я
    д
    о
    в
    е
    р
    с
    и
    и
    А
    Ф
    5.14.3)
    RegCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    в
    о
    д
    и
    т
    е
    л
    я
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    IdentityCard -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = PersonBaseType
    def __init__(self, PersonSurname=None, PersonName=None, PersonMiddleName=None, PersonPost=None, RegCountryCode=None, IdentityCard=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        super(globals().get("DriverInformationType"), self).__init__(PersonSurname, PersonName, PersonMiddleName, PersonPost,  **kwargs_)
        self.RegCountryCode = RegCountryCode
        self.validate_CountryA2CodeType(self.RegCountryCode)
        self.RegCountryCode_nsprefix_ = "clt_ru"
        self.IdentityCard = IdentityCard
        self.IdentityCard_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DriverInformationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DriverInformationType.subclass:
            return DriverInformationType.subclass(*args_, **kwargs_)
        else:
            return DriverInformationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegCountryCode(self):
        return self.RegCountryCode
    def set_RegCountryCode(self, RegCountryCode):
        self.RegCountryCode = RegCountryCode
    def get_IdentityCard(self):
        return self.IdentityCard
    def set_IdentityCard(self, IdentityCard):
        self.IdentityCard = IdentityCard
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def has__content(self):
        if (
            self.RegCountryCode is not None or
            self.IdentityCard is not None or
            super(DriverInformationType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DriverInformationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DriverInformationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DriverInformationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DriverInformationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DriverInformationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='DriverInformationType'):
        super(DriverInformationType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DriverInformationType')
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='DriverInformationType', fromsubclass_=False, pretty_print=True):
        super(DriverInformationType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegCountryCode is not None:
            namespaceprefix_ = self.RegCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegCountryCode>%s</%sRegCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegCountryCode), input_name='RegCountryCode')), namespaceprefix_ , eol_))
        if self.IdentityCard is not None:
            namespaceprefix_ = self.IdentityCard_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCard_nsprefix_) else ''
            self.IdentityCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentityCard', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(DriverInformationType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RegCountryCode')
            self.RegCountryCode = value_
            self.RegCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.RegCountryCode)
        elif nodeName_ == 'IdentityCard':
            obj_ = IdentityCardType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentityCard = obj_
            obj_.original_tagname_ = 'IdentityCard'
        super(DriverInformationType, self)._buildChildren(child_, node, nodeName_, True)
# end class DriverInformationType


class CUOrganizationType(OrganizationBaseType):
    """CUOrganizationType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    (
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    т
    с
    я
    д
    о
    в
    е
    р
    с
    и
    и
    А
    Ф
    5.14.3)
    Address -- А
    д
    р
    е
    с
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    IdentityCard -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    л
    и
    ч
    н
    о
    с
    т
    ь
    Contact -- К
    о
    н
    т
    а
    к
    т
    н
    а
    я
    и
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = OrganizationBaseType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, Address=None, IdentityCard=None, Contact=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        super(globals().get("CUOrganizationType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures,  **kwargs_)
        self.Address = Address
        self.Address_nsprefix_ = "cat_ru"
        self.IdentityCard = IdentityCard
        self.IdentityCard_nsprefix_ = "cat_ru"
        self.Contact = Contact
        self.Contact_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUOrganizationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUOrganizationType.subclass:
            return CUOrganizationType.subclass(*args_, **kwargs_)
        else:
            return CUOrganizationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Address(self):
        return self.Address
    def set_Address(self, Address):
        self.Address = Address
    def get_IdentityCard(self):
        return self.IdentityCard
    def set_IdentityCard(self, IdentityCard):
        self.IdentityCard = IdentityCard
    def get_Contact(self):
        return self.Contact
    def set_Contact(self, Contact):
        self.Contact = Contact
    def has__content(self):
        if (
            self.Address is not None or
            self.IdentityCard is not None or
            self.Contact is not None or
            super(CUOrganizationType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"', name_='CUOrganizationType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUOrganizationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUOrganizationType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUOrganizationType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUOrganizationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='CUOrganizationType'):
        super(CUOrganizationType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUOrganizationType')
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"', name_='CUOrganizationType', fromsubclass_=False, pretty_print=True):
        super(CUOrganizationType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Address is not None:
            namespaceprefix_ = self.Address_nsprefix_ + ':' if (UseCapturedNS_ and self.Address_nsprefix_) else ''
            self.Address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Address', pretty_print=pretty_print)
        if self.IdentityCard is not None:
            namespaceprefix_ = self.IdentityCard_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCard_nsprefix_) else ''
            self.IdentityCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentityCard', pretty_print=pretty_print)
        if self.Contact is not None:
            namespaceprefix_ = self.Contact_nsprefix_ + ':' if (UseCapturedNS_ and self.Contact_nsprefix_) else ''
            self.Contact.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contact', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUOrganizationType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Address':
            obj_ = AddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Address = obj_
            obj_.original_tagname_ = 'Address'
        elif nodeName_ == 'IdentityCard':
            obj_ = IdentityCardType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentityCard = obj_
            obj_.original_tagname_ = 'IdentityCard'
        elif nodeName_ == 'Contact':
            obj_ = ContactType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contact = obj_
            obj_.original_tagname_ = 'Contact'
        super(CUOrganizationType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUOrganizationType


class CUCustomsType(CustomsType):
    """CUCustomsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    о
    р
    г
    а
    н
    е
    CustomsCountryCode -- К
    о
    д
    г
    о
    с
    у
    д
    а
    р
    с
    т
    в
    а
    -
    ч
    л
    е
    н
    а
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    .
    Т
    р
    е
    х
    з
    н
    а
    ч
    н
    ы
    й
    ц
    и
    ф
    р
    о
    в
    о
    й
    к
    о
    д
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CustomsType
    def __init__(self, Code=None, OfficeName=None, CustomsCountryCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        super(globals().get("CUCustomsType"), self).__init__(Code, OfficeName,  **kwargs_)
        self.CustomsCountryCode = CustomsCountryCode
        self.validate_CountryN3CodeType(self.CustomsCountryCode)
        self.CustomsCountryCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUCustomsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUCustomsType.subclass:
            return CUCustomsType.subclass(*args_, **kwargs_)
        else:
            return CUCustomsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_CustomsCountryCode(self):
        return self.CustomsCountryCode
    def set_CustomsCountryCode(self, CustomsCountryCode):
        self.CustomsCountryCode = CustomsCountryCode
    def validate_CountryN3CodeType(self, value):
        result = True
        # Validate type CountryN3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryN3CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryN3CodeType_patterns_, ))
                result = False
        return result
    validate_CountryN3CodeType_patterns_ = [['^(\\d{3})$']]
    def has__content(self):
        if (
            self.CustomsCountryCode is not None or
            super(CUCustomsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUCustomsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUCustomsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUCustomsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUCustomsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUCustomsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='CUCustomsType'):
        super(CUCustomsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUCustomsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUCustomsType', fromsubclass_=False, pretty_print=True):
        super(CUCustomsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomsCountryCode is not None:
            namespaceprefix_ = self.CustomsCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsCountryCode>%s</%sCustomsCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsCountryCode), input_name='CustomsCountryCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUCustomsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'CustomsCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsCountryCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsCountryCode')
            self.CustomsCountryCode = value_
            self.CustomsCountryCode_nsprefix_ = child_.prefix
            # validate type CountryN3CodeType
            self.validate_CountryN3CodeType(self.CustomsCountryCode)
        super(CUCustomsType, self)._buildChildren(child_, node, nodeName_, True)
# end class CUCustomsType


class AuthoritesDocumentType(DocumentBaseType):
    """AuthoritesDocumentType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    м
    п
    о
    л
    н
    о
    м
    о
    ч
    и
    я
    ComplationAuthorityDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    п
    о
    л
    н
    о
    м
    о
    ч
    и
    й
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, ComplationAuthorityDate=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "cat_ru"
        super(globals().get("AuthoritesDocumentType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, extensiontype_,  **kwargs_)
        if isinstance(ComplationAuthorityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ComplationAuthorityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ComplationAuthorityDate
        self.ComplationAuthorityDate = initvalue_
        self.ComplationAuthorityDate_nsprefix_ = "clt_ru"
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AuthoritesDocumentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AuthoritesDocumentType.subclass:
            return AuthoritesDocumentType.subclass(*args_, **kwargs_)
        else:
            return AuthoritesDocumentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ComplationAuthorityDate(self):
        return self.ComplationAuthorityDate
    def set_ComplationAuthorityDate(self, ComplationAuthorityDate):
        self.ComplationAuthorityDate = ComplationAuthorityDate
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.ComplationAuthorityDate is not None or
            super(AuthoritesDocumentType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AuthoritesDocumentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AuthoritesDocumentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AuthoritesDocumentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AuthoritesDocumentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AuthoritesDocumentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='cat_ru:', name_='AuthoritesDocumentType'):
        super(AuthoritesDocumentType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AuthoritesDocumentType')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='cat_ru:', namespacedef_='xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='AuthoritesDocumentType', fromsubclass_=False, pretty_print=True):
        super(AuthoritesDocumentType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ComplationAuthorityDate is not None:
            namespaceprefix_ = self.ComplationAuthorityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ComplationAuthorityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComplationAuthorityDate>%s</%sComplationAuthorityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ComplationAuthorityDate, input_name='ComplationAuthorityDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(AuthoritesDocumentType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ComplationAuthorityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ComplationAuthorityDate = dval_
            self.ComplationAuthorityDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.ComplationAuthorityDate)
        super(AuthoritesDocumentType, self)._buildChildren(child_, node, nodeName_, True)
# end class AuthoritesDocumentType


class RBTechMarKType(DocumentBaseType):
    """RBTechMarKType -- Т
    е
    х
    н
    и
    ч
    е
    с
    к
    и
    е
    о
    т
    м
    е
    т
    к
    и
    д
    л
    я
    Р
    Б
    /
    С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    р
    р
    е
    к
    т
    и
    р
    о
    в
    к
    е
    (
    и
    з
    м
    е
    н
    е
    н
    и
    и
    )
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    DelcKind -- В
    и
    д
    к
    о
    р
    р
    е
    к
    т
    и
    р
    о
    в
    к
    и
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    к
    о
    р
    р
    е
    к
    т
    и
    р
    о
    в
    о
    к
    SumPayment -- С
    у
    м
    м
    а
    п
    о
    д
    л
    е
    ж
    а
    щ
    а
    я
    к
    у
    п
    л
    а
    т
    е
    о
    б
    е
    с
    п
    е
    ч
    е
    н
    и
    я
    .
    Т
    Д
    DocumentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    м
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, DelcKind=None, SumPayment=None, DocumentModeCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("RBTechMarKType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate,  **kwargs_)
        self.DelcKind = DelcKind
        self.validate_Code2Type(self.DelcKind)
        self.DelcKind_nsprefix_ = "clt_ru"
        self.SumPayment = SumPayment
        self.validate_AmountType(self.SumPayment)
        self.SumPayment_nsprefix_ = "clt_ru"
        self.DocumentModeCode = DocumentModeCode
        self.validate_CustomsDocumentCodeType(self.DocumentModeCode)
        self.DocumentModeCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RBTechMarKType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RBTechMarKType.subclass:
            return RBTechMarKType.subclass(*args_, **kwargs_)
        else:
            return RBTechMarKType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DelcKind(self):
        return self.DelcKind
    def set_DelcKind(self, DelcKind):
        self.DelcKind = DelcKind
    def get_SumPayment(self):
        return self.SumPayment
    def set_SumPayment(self, SumPayment):
        self.SumPayment = SumPayment
    def get_DocumentModeCode(self):
        return self.DocumentModeCode
    def set_DocumentModeCode(self, DocumentModeCode):
        self.DocumentModeCode = DocumentModeCode
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_AmountType(self, value):
        result = True
        # Validate type AmountType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on AmountType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.DelcKind is not None or
            self.SumPayment is not None or
            self.DocumentModeCode is not None or
            super(RBTechMarKType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RBTechMarKType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RBTechMarKType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RBTechMarKType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RBTechMarKType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RBTechMarKType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RBTechMarKType'):
        super(RBTechMarKType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RBTechMarKType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='RBTechMarKType', fromsubclass_=False, pretty_print=True):
        super(RBTechMarKType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DelcKind is not None:
            namespaceprefix_ = self.DelcKind_nsprefix_ + ':' if (UseCapturedNS_ and self.DelcKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDelcKind>%s</%sDelcKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DelcKind), input_name='DelcKind')), namespaceprefix_ , eol_))
        if self.SumPayment is not None:
            namespaceprefix_ = self.SumPayment_nsprefix_ + ':' if (UseCapturedNS_ and self.SumPayment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSumPayment>%s</%sSumPayment>%s' % (namespaceprefix_ , self.gds_format_decimal(self.SumPayment, input_name='SumPayment'), namespaceprefix_ , eol_))
        if self.DocumentModeCode is not None:
            namespaceprefix_ = self.DocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentModeCode>%s</%sDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentModeCode), input_name='DocumentModeCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(RBTechMarKType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DelcKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DelcKind')
            value_ = self.gds_validate_string(value_, node, 'DelcKind')
            self.DelcKind = value_
            self.DelcKind_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.DelcKind)
        elif nodeName_ == 'SumPayment' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'SumPayment')
            fval_ = self.gds_validate_decimal(fval_, node, 'SumPayment')
            self.SumPayment = fval_
            self.SumPayment_nsprefix_ = child_.prefix
            # validate type AmountType
            self.validate_AmountType(self.SumPayment)
        elif nodeName_ == 'DocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'DocumentModeCode')
            self.DocumentModeCode = value_
            self.DocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocumentModeCode)
        super(RBTechMarKType, self)._buildChildren(child_, node, nodeName_, True)
# end class RBTechMarKType


class PaymentDocumentType30(DocumentBaseType):
    """PaymentDocumentType30 -- П
    л
    а
    т
    е
    ж
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    PaymentDate -- Д
    а
    т
    а
    у
    п
    л
    а
    т
    ы
    и
    л
    и
    в
    з
    ы
    с
    к
    а
    н
    и
    я
    (
    д
    а
    т
    а
    и
    с
    п
    о
    л
    н
    е
    н
    и
    я
    о
    б
    я
    з
    а
    н
    н
    о
    с
    т
    и
    п
    о
    у
    п
    л
    а
    т
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    )
    DocumentModeCode -- К
    о
    д
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, PaymentDate=None, DocumentModeCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("PaymentDocumentType30"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate,  **kwargs_)
        if isinstance(PaymentDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(PaymentDate, '%Y-%m-%d').date()
        else:
            initvalue_ = PaymentDate
        self.PaymentDate = initvalue_
        self.PaymentDate_nsprefix_ = "clt_ru"
        self.DocumentModeCode = DocumentModeCode
        self.validate_CustomsDocumentCodeType(self.DocumentModeCode)
        self.DocumentModeCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PaymentDocumentType30)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PaymentDocumentType30.subclass:
            return PaymentDocumentType30.subclass(*args_, **kwargs_)
        else:
            return PaymentDocumentType30(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentDate(self):
        return self.PaymentDate
    def set_PaymentDate(self, PaymentDate):
        self.PaymentDate = PaymentDate
    def get_DocumentModeCode(self):
        return self.DocumentModeCode
    def set_DocumentModeCode(self, DocumentModeCode):
        self.DocumentModeCode = DocumentModeCode
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PaymentDate is not None or
            self.DocumentModeCode is not None or
            super(PaymentDocumentType30, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PaymentDocumentType30', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PaymentDocumentType30')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PaymentDocumentType30':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentDocumentType30')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PaymentDocumentType30', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PaymentDocumentType30'):
        super(PaymentDocumentType30, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PaymentDocumentType30')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='PaymentDocumentType30', fromsubclass_=False, pretty_print=True):
        super(PaymentDocumentType30, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentDate is not None:
            namespaceprefix_ = self.PaymentDate_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentDate>%s</%sPaymentDate>%s' % (namespaceprefix_ , self.gds_format_date(self.PaymentDate, input_name='PaymentDate'), namespaceprefix_ , eol_))
        if self.DocumentModeCode is not None:
            namespaceprefix_ = self.DocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocumentModeCode>%s</%sDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocumentModeCode), input_name='DocumentModeCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(PaymentDocumentType30, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.PaymentDate = dval_
            self.PaymentDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.PaymentDate)
        elif nodeName_ == 'DocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'DocumentModeCode')
            self.DocumentModeCode = value_
            self.DocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.DocumentModeCode)
        super(PaymentDocumentType30, self)._buildChildren(child_, node, nodeName_, True)
# end class PaymentDocumentType30


class ESADout_CUMainContractTermsType(CUESADMainContractTermsType):
    """ESADout_CUMainContractTermsType -- У
    с
    л
    о
    в
    и
    я
    с
    д
    е
    л
    к
    и
    Г
    р
    . 11, 20, 22, 23, 24
    Д
    Т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CUESADMainContractTermsType
    def __init__(self, ContractCurrencyCode=None, CurrencyQuantity=None, ContractCurrencyRate=None, TotalInvoiceAmount=None, TotalAmount=None, TradeCountryCode=None, RBCountryCode=None, DealFeatureCode=None, DealNatureCode=None, CUESADDeliveryTerms=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUMainContractTermsType"), self).__init__(ContractCurrencyCode, CurrencyQuantity, ContractCurrencyRate, TotalInvoiceAmount, TotalAmount, TradeCountryCode, RBCountryCode, DealFeatureCode, DealNatureCode, CUESADDeliveryTerms,  **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUMainContractTermsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUMainContractTermsType.subclass:
            return ESADout_CUMainContractTermsType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUMainContractTermsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def has__content(self):
        if (
            super(ESADout_CUMainContractTermsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0"', name_='ESADout_CUMainContractTermsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUMainContractTermsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUMainContractTermsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUMainContractTermsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUMainContractTermsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUMainContractTermsType'):
        super(ESADout_CUMainContractTermsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUMainContractTermsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0"', name_='ESADout_CUMainContractTermsType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUMainContractTermsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADout_CUMainContractTermsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(ESADout_CUMainContractTermsType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class ESADout_CUMainContractTermsType


class ESADout_CUGoodsType(CUESADGoodsItemType):
    """ESADout_CUGoodsType -- Т
    о
    в
    а
    р
    н
    а
    я
    ч
    а
    с
    т
    ь
    .
    Г
    р
    . 31-47
    LanguageGoods -- К
    о
    д
    я
    з
    ы
    к
    а
    о
    п
    и
    с
    а
    н
    и
    я
    т
    о
    в
    а
    р
    а
    MilitaryProducts -- П
    р
    и
    з
    н
    а
    к
    п
    р
    о
    д
    у
    к
    ц
    и
    и
    в
    о
    е
    н
    н
    о
    г
    о
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    . true -
    д
    а
    , false -
    н
    е
    т
    .
    Г
    р
    .31
    Т
    Д
    CurrencyCode -- К
    о
    д
    в
    а
    л
    ю
    т
    ы
    с
    т
    о
    и
    м
    о
    с
    т
    и
    т
    о
    в
    а
    р
    а
    (
    з
    а
    п
    о
    л
    н
    я
    е
    т
    с
    я
    д
    л
    я
    Т
    Д
    )
    ESADout_CUPresentedDocument -- П
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    н
    ы
    е
    д
    о
    к
    у
    м
    е
    н
    т
    ы
    .
    Г
    р
    . 44
    ESADout_CUPrecedingDocument -- П
    р
    е
    д
    ш
    е
    с
    т
    в
    у
    ю
    щ
    и
    е
    д
    о
    к
    у
    м
    е
    н
    т
    ы
    .
    Г
    р
    . 40
    ESADout_CUCustomsPaymentCalculation --
    И
    с
    ч
    и
    с
    л
    е
    н
    и
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ESADout_CUCustomsConditions -- С
    в
    е
    д
    е
    н
    и
    я
    ,
    у
    к
    а
    з
    ы
    в
    а
    е
    м
    ы
    е
    в
    с
    л
    у
    ч
    а
    е
    ,
    е
    с
    л
    и
    Д
    Т
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    т
    с
    я
    в
    к
    а
    ч
    е
    с
    т
    в
    е
    з
    а
    я
    в
    л
    е
    н
    и
    я
    н
    а
    п
    о
    л
    у
    ч
    е
    н
    и
    е
    р
    а
    з
    р
    е
    ш
    е
    н
    и
    я
    н
    а
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    у
    т
    о
    в
    а
    р
    о
    в
    (
    э
    л
    е
    м
    е
    н
    т
    6
    г
    р
    31,
    г
    р
    44)
    SupplementaryGoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    в
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    .
    Г
    р
    .41
    SupplementaryGoodsQuantity1 -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    в
    е
    д
    и
    н
    и
    ц
    е
    и
    з
    м
    е
    р
    е
    н
    и
    я
    ,
    о
    т
    л
    и
    ч
    н
    о
    й
    о
    т
    о
    с
    н
    о
    в
    н
    о
    й
    и
    д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    о
    й
    (
    э
    л
    е
    м
    е
    н
    т
    1
    Г
    р
    .31)
    ESADGoodsPackaging -- С
    в
    е
    д
    е
    н
    и
    я
    о
    г
    р
    у
    з
    о
    в
    ы
    х
    м
    е
    с
    т
    а
    х
    ,
    п
    о
    д
    д
    о
    н
    а
    х
    и
    у
    п
    а
    к
    о
    в
    к
    е
    т
    о
    в
    а
    р
    о
    в
    ESADGoodsQuota -- К
    в
    о
    т
    а
    .
    Г
    р
    39
    в
    Д
    Т
    ESADContainer -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    н
    т
    е
    й
    н
    е
    р
    а
    х
    (
    э
    л
    е
    м
    е
    н
    т
    3
    Г
    р
    31)
    ESADCustomsProcedure -- П
    р
    о
    ц
    е
    д
    у
    р
    а
    .
    Г
    р
    37
    ESADExcise -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    а
    к
    ц
    и
    з
    н
    ы
    х
    и
    л
    и
    с
    п
    е
    ц
    и
    а
    л
    ь
    н
    ы
    х
    м
    а
    р
    к
    а
    х
    (
    э
    л
    е
    м
    е
    н
    т
    4
    г
    р
    31)
    ElectricalEnergReceived -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    е
    п
    р
    и
    н
    я
    т
    о
    й
    э
    л
    е
    к
    т
    р
    о
    э
    н
    е
    р
    г
    и
    и
    з
    а
    о
    т
    ч
    е
    т
    н
    ы
    й
    п
    е
    р
    и
    о
    д
    (
    э
    л
    е
    м
    е
    н
    т
    9
    Г
    р
    31)
    ElectricalEnergGiven -- С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    е
    п
    е
    р
    е
    д
    а
    н
    н
    о
    й
    э
    л
    е
    к
    т
    р
    о
    э
    н
    е
    р
    г
    и
    и
    з
    а
    о
    т
    ч
    е
    т
    н
    ы
    й
    п
    е
    р
    и
    о
    д
    (
    э
    л
    е
    м
    е
    н
    т
    9
    Г
    р
    31)
    GoodsAutomobile -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    а
    в
    т
    о
    м
    о
    б
    и
    л
    я
    х
    .
    Г
    р
    . 31
    RBSupplementaryGoodsQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    о
    в
    а
    р
    а
    п
    о
    м
    е
    щ
    е
    н
    н
    о
    г
    о
    п
    о
    д
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    п
    е
    р
    е
    р
    а
    б
    о
    т
    к
    и
    и
    с
    в
    о
    б
    о
    д
    н
    у
    ю
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    з
    о
    н
    у
    д
    л
    я
    Р
    Б
    / C
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    л
    и
    ч
    е
    с
    т
    в
    е
    т
    о
    в
    а
    р
    а
    ,
    п
    р
    е
    д
    н
    а
    з
    н
    а
    ч
    е
    н
    н
    ы
    е
    д
    л
    я
    в
    к
    л
    ю
    ч
    е
    н
    и
    я
    в
    р
    е
    е
    с
    т
    р
    а
    в
    т
    о
    м
    а
    т
    и
    з
    и
    р
    о
    в
    а
    н
    н
    о
    г
    о
    к
    о
    н
    т
    р
    о
    л
    я
    с
    р
    о
    к
    о
    в
    д
    е
    й
    с
    т
    в
    и
    я
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    о
    ц
    е
    д
    у
    р
    TotalGrossMassMeasure -- О
    б
    щ
    а
    я
    м
    а
    с
    с
    а
    б
    р
    у
    т
    т
    о
    т
    о
    в
    а
    р
    а
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    о
    г
    о
    ч
    е
    р
    е
    з
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    г
    р
    а
    н
    и
    ц
    у
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    т
    о
    м
    ч
    и
    с
    л
    е
    н
    е
    к
    о
    м
    п
    л
    е
    к
    т
    н
    о
    м
    и
    л
    и
    н
    е
    з
    а
    в
    е
    р
    ш
    е
    н
    н
    о
    м
    в
    и
    д
    е
    TotalNetMassMeasure -- О
    б
    щ
    а
    я
    м
    а
    с
    с
    а
    н
    е
    т
    т
    о
    т
    о
    в
    а
    р
    а
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    о
    г
    о
    ч
    е
    р
    е
    з
    т
    а
    м
    о
    ж
    е
    н
    н
    у
    ю
    г
    р
    а
    н
    и
    ц
    у
    Е
    в
    р
    а
    з
    и
    й
    с
    к
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    с
    о
    ю
    з
    а
    в
    н
    е
    с
    о
    б
    р
    а
    н
    н
    о
    м
    и
    л
    и
    р
    а
    з
    о
    б
    р
    а
    н
    н
    о
    м
    в
    и
    д
    е
    ,
    в
    т
    о
    м
    ч
    и
    с
    л
    е
    н
    е
    к
    о
    м
    п
    л
    е
    к
    т
    н
    о
    м
    и
    л
    и
    н
    е
    з
    а
    в
    е
    р
    ш
    е
    н
    н
    о
    м
    в
    и
    д
    е
    InvestmentGoodsIdDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    о
    м
    н
    о
    м
    е
    р
    е
    т
    о
    в
    а
    р
    а
    (
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    б
    о
    р
    у
    д
    о
    в
    а
    н
    и
    я
    ,
    к
    о
    м
    п
    л
    е
    к
    т
    у
    ю
    щ
    и
    х
    и
    з
    а
    п
    а
    с
    н
    ы
    х
    ч
    а
    с
    т
    е
    й
    к
    н
    е
    м
    у
    ,
    с
    ы
    р
    ь
    я
    и
    м
    а
    т
    е
    р
    и
    а
    л
    о
    в
    ),
    у
    к
    а
    з
    а
    н
    н
    о
    м
    в
    п
    е
    р
    е
    ч
    н
    е
    т
    о
    в
    а
    р
    о
    в
    ,
    в
    в
    о
    з
    и
    м
    ы
    х
    д
    л
    я
    р
    е
    а
    л
    и
    з
    а
    ц
    и
    и
    и
    н
    в
    е
    с
    т
    и
    ц
    и
    о
    н
    н
    о
    г
    о
    п
    р
    о
    е
    к
    т
    а
    DestinationCountryDetails -- С
    в
    е
    д
    е
    н
    и
    я
    о
    с
    т
    р
    а
    н
    е
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    п
    р
    и
    в
    р
    е
    м
    е
    н
    н
    о
    м
    п
    е
    р
    и
    о
    д
    и
    ч
    е
    с
    к
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CUESADGoodsItemType
    def __init__(self, GoodsNumeric=None, GoodFeatures=None, GoodsDescription=None, GrossWeightQuantity=None, NetWeightQuantity=None, NetWeightQuantity2=None, InvoicedCost=None, InvoicedCurrencyCode=None, InvoicedCurrencyQuantity=None, InvoicedCurrencyRate=None, InvoicedCurrencyDate=None, CustomsCost=None, StatisticalCost=None, TotalStatisticValueAmount=None, GoodsTNVEDCode=None, GoodsClassificationCode=None, AdditionalSign=None, IntellectPropertySign=None, GoodsTraceabilityCode=None, CIMSign=None, RestrictionSign=None, BeginPeriodDate=None, EndPeriodDate=None, OriginCountryCode=None, OriginCountryName=None, RBOriginCountryCode=None, PrefOriginCountry=None, CustomsCostCorrectMethod=None, GoodsAddTNVEDCode=None, LicenseGoodsKindCode=None, DeliveryTime=None, DeliveryTimeEND=None, AdditionalSheetCount=None, QuantityFact=None, OilField=None, TNVEDContract=None, IPObjectRegistryNum=None, CUESADDeliveryTerms=None, ForeignTradeContractDetails=None, GoodsGroupDescription=None, Preferencii=None, CIMIdDetails=None, DTIdentificationMeansDetails=None, GoodsTraceabilityMeasureDetails=None, WoodCodeDetails=None, GoodsSTZ=None, LanguageGoods=None, MilitaryProducts=None, CurrencyCode=None, ESADout_CUPresentedDocument=None, ESADout_CUPrecedingDocument=None, ESADout_CUCustomsPaymentCalculation=None, ESADout_CUCustomsConditions=None, SupplementaryGoodsQuantity=None, SupplementaryGoodsQuantity1=None, ESADGoodsPackaging=None, ESADGoodsQuota=None, ESADContainer=None, ESADCustomsProcedure=None, ESADExcise=None, ElectricalEnergReceived=None, ElectricalEnergGiven=None, GoodsAutomobile=None, RBSupplementaryGoodsQuantity=None, TotalGrossMassMeasure=None, TotalNetMassMeasure=None, InvestmentGoodsIdDetails=None, DestinationCountryDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUGoodsType"), self).__init__(GoodsNumeric, GoodFeatures, GoodsDescription, GrossWeightQuantity, NetWeightQuantity, NetWeightQuantity2, InvoicedCost, InvoicedCurrencyCode, InvoicedCurrencyQuantity, InvoicedCurrencyRate, InvoicedCurrencyDate, CustomsCost, StatisticalCost, TotalStatisticValueAmount, GoodsTNVEDCode, GoodsClassificationCode, AdditionalSign, IntellectPropertySign, GoodsTraceabilityCode, CIMSign, RestrictionSign, BeginPeriodDate, EndPeriodDate, OriginCountryCode, OriginCountryName, RBOriginCountryCode, PrefOriginCountry, CustomsCostCorrectMethod, GoodsAddTNVEDCode, LicenseGoodsKindCode, DeliveryTime, DeliveryTimeEND, AdditionalSheetCount, QuantityFact, OilField, TNVEDContract, IPObjectRegistryNum, CUESADDeliveryTerms, ForeignTradeContractDetails, GoodsGroupDescription, Preferencii, CIMIdDetails, DTIdentificationMeansDetails, GoodsTraceabilityMeasureDetails, WoodCodeDetails, GoodsSTZ,  **kwargs_)
        self.LanguageGoods = LanguageGoods
        self.validate_LanguageCodeType(self.LanguageGoods)
        self.LanguageGoods_nsprefix_ = "clt_ru"
        self.MilitaryProducts = MilitaryProducts
        self.validate_IndicatorType(self.MilitaryProducts)
        self.MilitaryProducts_nsprefix_ = "clt_ru"
        self.CurrencyCode = CurrencyCode
        self.validate_CurrencyA3CodeType(self.CurrencyCode)
        self.CurrencyCode_nsprefix_ = "clt_ru"
        if ESADout_CUPresentedDocument is None:
            self.ESADout_CUPresentedDocument = []
        else:
            self.ESADout_CUPresentedDocument = ESADout_CUPresentedDocument
        self.ESADout_CUPresentedDocument_nsprefix_ = "ESADout_CU"
        if ESADout_CUPrecedingDocument is None:
            self.ESADout_CUPrecedingDocument = []
        else:
            self.ESADout_CUPrecedingDocument = ESADout_CUPrecedingDocument
        self.ESADout_CUPrecedingDocument_nsprefix_ = "catESAD_cu"
        if ESADout_CUCustomsPaymentCalculation is None:
            self.ESADout_CUCustomsPaymentCalculation = []
        else:
            self.ESADout_CUCustomsPaymentCalculation = ESADout_CUCustomsPaymentCalculation
        self.ESADout_CUCustomsPaymentCalculation_nsprefix_ = "catESAD_cu"
        self.ESADout_CUCustomsConditions = ESADout_CUCustomsConditions
        self.ESADout_CUCustomsConditions_nsprefix_ = "RUDECLcat"
        self.SupplementaryGoodsQuantity = SupplementaryGoodsQuantity
        self.SupplementaryGoodsQuantity_nsprefix_ = "cat_ru"
        if SupplementaryGoodsQuantity1 is None:
            self.SupplementaryGoodsQuantity1 = []
        else:
            self.SupplementaryGoodsQuantity1 = SupplementaryGoodsQuantity1
        self.SupplementaryGoodsQuantity1_nsprefix_ = "cat_ru"
        self.ESADGoodsPackaging = ESADGoodsPackaging
        self.ESADGoodsPackaging_nsprefix_ = "catESAD_cu"
        self.ESADGoodsQuota = ESADGoodsQuota
        self.ESADGoodsQuota_nsprefix_ = "catESAD_cu"
        if ESADContainer is None:
            self.ESADContainer = []
        else:
            self.ESADContainer = ESADContainer
        self.ESADContainer_nsprefix_ = "catESAD_cu"
        self.ESADCustomsProcedure = ESADCustomsProcedure
        self.ESADCustomsProcedure_nsprefix_ = "catESAD_cu"
        if ESADExcise is None:
            self.ESADExcise = []
        else:
            self.ESADExcise = ESADExcise
        self.ESADExcise_nsprefix_ = "catESAD_cu"
        if ElectricalEnergReceived is None:
            self.ElectricalEnergReceived = []
        else:
            self.ElectricalEnergReceived = ElectricalEnergReceived
        self.ElectricalEnergReceived_nsprefix_ = "catESAD_cu"
        if ElectricalEnergGiven is None:
            self.ElectricalEnergGiven = []
        else:
            self.ElectricalEnergGiven = ElectricalEnergGiven
        self.ElectricalEnergGiven_nsprefix_ = "catESAD_cu"
        if GoodsAutomobile is None:
            self.GoodsAutomobile = []
        else:
            self.GoodsAutomobile = GoodsAutomobile
        self.GoodsAutomobile_nsprefix_ = "catESAD_cu"
        self.RBSupplementaryGoodsQuantity = RBSupplementaryGoodsQuantity
        self.RBSupplementaryGoodsQuantity_nsprefix_ = "cat_ru"
        self.TotalGrossMassMeasure = TotalGrossMassMeasure
        self.TotalGrossMassMeasure_nsprefix_ = "cat_ru"
        self.TotalNetMassMeasure = TotalNetMassMeasure
        self.TotalNetMassMeasure_nsprefix_ = "cat_ru"
        self.InvestmentGoodsIdDetails = InvestmentGoodsIdDetails
        self.InvestmentGoodsIdDetails_nsprefix_ = "catESAD_cu"
        if DestinationCountryDetails is None:
            self.DestinationCountryDetails = []
        else:
            self.DestinationCountryDetails = DestinationCountryDetails
        self.DestinationCountryDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUGoodsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUGoodsType.subclass:
            return ESADout_CUGoodsType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUGoodsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LanguageGoods(self):
        return self.LanguageGoods
    def set_LanguageGoods(self, LanguageGoods):
        self.LanguageGoods = LanguageGoods
    def get_MilitaryProducts(self):
        return self.MilitaryProducts
    def set_MilitaryProducts(self, MilitaryProducts):
        self.MilitaryProducts = MilitaryProducts
    def get_CurrencyCode(self):
        return self.CurrencyCode
    def set_CurrencyCode(self, CurrencyCode):
        self.CurrencyCode = CurrencyCode
    def get_ESADout_CUPresentedDocument(self):
        return self.ESADout_CUPresentedDocument
    def set_ESADout_CUPresentedDocument(self, ESADout_CUPresentedDocument):
        self.ESADout_CUPresentedDocument = ESADout_CUPresentedDocument
    def add_ESADout_CUPresentedDocument(self, value):
        self.ESADout_CUPresentedDocument.append(value)
    def insert_ESADout_CUPresentedDocument_at(self, index, value):
        self.ESADout_CUPresentedDocument.insert(index, value)
    def replace_ESADout_CUPresentedDocument_at(self, index, value):
        self.ESADout_CUPresentedDocument[index] = value
    def get_ESADout_CUPrecedingDocument(self):
        return self.ESADout_CUPrecedingDocument
    def set_ESADout_CUPrecedingDocument(self, ESADout_CUPrecedingDocument):
        self.ESADout_CUPrecedingDocument = ESADout_CUPrecedingDocument
    def add_ESADout_CUPrecedingDocument(self, value):
        self.ESADout_CUPrecedingDocument.append(value)
    def insert_ESADout_CUPrecedingDocument_at(self, index, value):
        self.ESADout_CUPrecedingDocument.insert(index, value)
    def replace_ESADout_CUPrecedingDocument_at(self, index, value):
        self.ESADout_CUPrecedingDocument[index] = value
    def get_ESADout_CUCustomsPaymentCalculation(self):
        return self.ESADout_CUCustomsPaymentCalculation
    def set_ESADout_CUCustomsPaymentCalculation(self, ESADout_CUCustomsPaymentCalculation):
        self.ESADout_CUCustomsPaymentCalculation = ESADout_CUCustomsPaymentCalculation
    def add_ESADout_CUCustomsPaymentCalculation(self, value):
        self.ESADout_CUCustomsPaymentCalculation.append(value)
    def insert_ESADout_CUCustomsPaymentCalculation_at(self, index, value):
        self.ESADout_CUCustomsPaymentCalculation.insert(index, value)
    def replace_ESADout_CUCustomsPaymentCalculation_at(self, index, value):
        self.ESADout_CUCustomsPaymentCalculation[index] = value
    def get_ESADout_CUCustomsConditions(self):
        return self.ESADout_CUCustomsConditions
    def set_ESADout_CUCustomsConditions(self, ESADout_CUCustomsConditions):
        self.ESADout_CUCustomsConditions = ESADout_CUCustomsConditions
    def get_SupplementaryGoodsQuantity(self):
        return self.SupplementaryGoodsQuantity
    def set_SupplementaryGoodsQuantity(self, SupplementaryGoodsQuantity):
        self.SupplementaryGoodsQuantity = SupplementaryGoodsQuantity
    def get_SupplementaryGoodsQuantity1(self):
        return self.SupplementaryGoodsQuantity1
    def set_SupplementaryGoodsQuantity1(self, SupplementaryGoodsQuantity1):
        self.SupplementaryGoodsQuantity1 = SupplementaryGoodsQuantity1
    def add_SupplementaryGoodsQuantity1(self, value):
        self.SupplementaryGoodsQuantity1.append(value)
    def insert_SupplementaryGoodsQuantity1_at(self, index, value):
        self.SupplementaryGoodsQuantity1.insert(index, value)
    def replace_SupplementaryGoodsQuantity1_at(self, index, value):
        self.SupplementaryGoodsQuantity1[index] = value
    def get_ESADGoodsPackaging(self):
        return self.ESADGoodsPackaging
    def set_ESADGoodsPackaging(self, ESADGoodsPackaging):
        self.ESADGoodsPackaging = ESADGoodsPackaging
    def get_ESADGoodsQuota(self):
        return self.ESADGoodsQuota
    def set_ESADGoodsQuota(self, ESADGoodsQuota):
        self.ESADGoodsQuota = ESADGoodsQuota
    def get_ESADContainer(self):
        return self.ESADContainer
    def set_ESADContainer(self, ESADContainer):
        self.ESADContainer = ESADContainer
    def add_ESADContainer(self, value):
        self.ESADContainer.append(value)
    def insert_ESADContainer_at(self, index, value):
        self.ESADContainer.insert(index, value)
    def replace_ESADContainer_at(self, index, value):
        self.ESADContainer[index] = value
    def get_ESADCustomsProcedure(self):
        return self.ESADCustomsProcedure
    def set_ESADCustomsProcedure(self, ESADCustomsProcedure):
        self.ESADCustomsProcedure = ESADCustomsProcedure
    def get_ESADExcise(self):
        return self.ESADExcise
    def set_ESADExcise(self, ESADExcise):
        self.ESADExcise = ESADExcise
    def add_ESADExcise(self, value):
        self.ESADExcise.append(value)
    def insert_ESADExcise_at(self, index, value):
        self.ESADExcise.insert(index, value)
    def replace_ESADExcise_at(self, index, value):
        self.ESADExcise[index] = value
    def get_ElectricalEnergReceived(self):
        return self.ElectricalEnergReceived
    def set_ElectricalEnergReceived(self, ElectricalEnergReceived):
        self.ElectricalEnergReceived = ElectricalEnergReceived
    def add_ElectricalEnergReceived(self, value):
        self.ElectricalEnergReceived.append(value)
    def insert_ElectricalEnergReceived_at(self, index, value):
        self.ElectricalEnergReceived.insert(index, value)
    def replace_ElectricalEnergReceived_at(self, index, value):
        self.ElectricalEnergReceived[index] = value
    def get_ElectricalEnergGiven(self):
        return self.ElectricalEnergGiven
    def set_ElectricalEnergGiven(self, ElectricalEnergGiven):
        self.ElectricalEnergGiven = ElectricalEnergGiven
    def add_ElectricalEnergGiven(self, value):
        self.ElectricalEnergGiven.append(value)
    def insert_ElectricalEnergGiven_at(self, index, value):
        self.ElectricalEnergGiven.insert(index, value)
    def replace_ElectricalEnergGiven_at(self, index, value):
        self.ElectricalEnergGiven[index] = value
    def get_GoodsAutomobile(self):
        return self.GoodsAutomobile
    def set_GoodsAutomobile(self, GoodsAutomobile):
        self.GoodsAutomobile = GoodsAutomobile
    def add_GoodsAutomobile(self, value):
        self.GoodsAutomobile.append(value)
    def insert_GoodsAutomobile_at(self, index, value):
        self.GoodsAutomobile.insert(index, value)
    def replace_GoodsAutomobile_at(self, index, value):
        self.GoodsAutomobile[index] = value
    def get_RBSupplementaryGoodsQuantity(self):
        return self.RBSupplementaryGoodsQuantity
    def set_RBSupplementaryGoodsQuantity(self, RBSupplementaryGoodsQuantity):
        self.RBSupplementaryGoodsQuantity = RBSupplementaryGoodsQuantity
    def get_TotalGrossMassMeasure(self):
        return self.TotalGrossMassMeasure
    def set_TotalGrossMassMeasure(self, TotalGrossMassMeasure):
        self.TotalGrossMassMeasure = TotalGrossMassMeasure
    def get_TotalNetMassMeasure(self):
        return self.TotalNetMassMeasure
    def set_TotalNetMassMeasure(self, TotalNetMassMeasure):
        self.TotalNetMassMeasure = TotalNetMassMeasure
    def get_InvestmentGoodsIdDetails(self):
        return self.InvestmentGoodsIdDetails
    def set_InvestmentGoodsIdDetails(self, InvestmentGoodsIdDetails):
        self.InvestmentGoodsIdDetails = InvestmentGoodsIdDetails
    def get_DestinationCountryDetails(self):
        return self.DestinationCountryDetails
    def set_DestinationCountryDetails(self, DestinationCountryDetails):
        self.DestinationCountryDetails = DestinationCountryDetails
    def add_DestinationCountryDetails(self, value):
        self.DestinationCountryDetails.append(value)
    def insert_DestinationCountryDetails_at(self, index, value):
        self.DestinationCountryDetails.insert(index, value)
    def replace_DestinationCountryDetails_at(self, index, value):
        self.DestinationCountryDetails[index] = value
    def validate_LanguageCodeType(self, value):
        result = True
        # Validate type LanguageCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_LanguageCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_LanguageCodeType_patterns_, ))
                result = False
        return result
    validate_LanguageCodeType_patterns_ = [['^([A-Z]{2})$']]
    def validate_IndicatorType(self, value):
        result = True
        # Validate type IndicatorType, a restriction on CategoryCust:IndicatorCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_CurrencyA3CodeType(self, value):
        result = True
        # Validate type CurrencyA3CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CurrencyA3CodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.LanguageGoods is not None or
            self.MilitaryProducts is not None or
            self.CurrencyCode is not None or
            self.ESADout_CUPresentedDocument or
            self.ESADout_CUPrecedingDocument or
            self.ESADout_CUCustomsPaymentCalculation or
            self.ESADout_CUCustomsConditions is not None or
            self.SupplementaryGoodsQuantity is not None or
            self.SupplementaryGoodsQuantity1 or
            self.ESADGoodsPackaging is not None or
            self.ESADGoodsQuota is not None or
            self.ESADContainer or
            self.ESADCustomsProcedure is not None or
            self.ESADExcise or
            self.ElectricalEnergReceived or
            self.ElectricalEnergGiven or
            self.GoodsAutomobile or
            self.RBSupplementaryGoodsQuantity is not None or
            self.TotalGrossMassMeasure is not None or
            self.TotalNetMassMeasure is not None or
            self.InvestmentGoodsIdDetails is not None or
            self.DestinationCountryDetails or
            super(ESADout_CUGoodsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADout_CUGoodsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUGoodsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUGoodsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUGoodsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUGoodsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUGoodsType'):
        super(ESADout_CUGoodsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUGoodsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADout_CUGoodsType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUGoodsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LanguageGoods is not None:
            namespaceprefix_ = self.LanguageGoods_nsprefix_ + ':' if (UseCapturedNS_ and self.LanguageGoods_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguageGoods>%s</%sLanguageGoods>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LanguageGoods), input_name='LanguageGoods')), namespaceprefix_ , eol_))
        if self.MilitaryProducts is not None:
            namespaceprefix_ = self.MilitaryProducts_nsprefix_ + ':' if (UseCapturedNS_ and self.MilitaryProducts_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMilitaryProducts>%s</%sMilitaryProducts>%s' % (namespaceprefix_ , self.gds_format_boolean(self.MilitaryProducts, input_name='MilitaryProducts'), namespaceprefix_ , eol_))
        if self.CurrencyCode is not None:
            namespaceprefix_ = self.CurrencyCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CurrencyCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyCode>%s</%sCurrencyCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CurrencyCode), input_name='CurrencyCode')), namespaceprefix_ , eol_))
        for ESADout_CUPresentedDocument_ in self.ESADout_CUPresentedDocument:
            namespaceprefix_ = self.ESADout_CUPresentedDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUPresentedDocument_nsprefix_) else ''
            ESADout_CUPresentedDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUPresentedDocument', pretty_print=pretty_print)
        for ESADout_CUPrecedingDocument_ in self.ESADout_CUPrecedingDocument:
            namespaceprefix_ = self.ESADout_CUPrecedingDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUPrecedingDocument_nsprefix_) else ''
            ESADout_CUPrecedingDocument_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUPrecedingDocument', pretty_print=pretty_print)
        for ESADout_CUCustomsPaymentCalculation_ in self.ESADout_CUCustomsPaymentCalculation:
            namespaceprefix_ = self.ESADout_CUCustomsPaymentCalculation_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUCustomsPaymentCalculation_nsprefix_) else ''
            ESADout_CUCustomsPaymentCalculation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUCustomsPaymentCalculation', pretty_print=pretty_print)
        if self.ESADout_CUCustomsConditions is not None:
            namespaceprefix_ = self.ESADout_CUCustomsConditions_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUCustomsConditions_nsprefix_) else ''
            self.ESADout_CUCustomsConditions.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUCustomsConditions', pretty_print=pretty_print)
        if self.SupplementaryGoodsQuantity is not None:
            namespaceprefix_ = self.SupplementaryGoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplementaryGoodsQuantity_nsprefix_) else ''
            self.SupplementaryGoodsQuantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplementaryGoodsQuantity', pretty_print=pretty_print)
        for SupplementaryGoodsQuantity1_ in self.SupplementaryGoodsQuantity1:
            namespaceprefix_ = self.SupplementaryGoodsQuantity1_nsprefix_ + ':' if (UseCapturedNS_ and self.SupplementaryGoodsQuantity1_nsprefix_) else ''
            SupplementaryGoodsQuantity1_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SupplementaryGoodsQuantity1', pretty_print=pretty_print)
        if self.ESADGoodsPackaging is not None:
            namespaceprefix_ = self.ESADGoodsPackaging_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADGoodsPackaging_nsprefix_) else ''
            self.ESADGoodsPackaging.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADGoodsPackaging', pretty_print=pretty_print)
        if self.ESADGoodsQuota is not None:
            namespaceprefix_ = self.ESADGoodsQuota_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADGoodsQuota_nsprefix_) else ''
            self.ESADGoodsQuota.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADGoodsQuota', pretty_print=pretty_print)
        for ESADContainer_ in self.ESADContainer:
            namespaceprefix_ = self.ESADContainer_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADContainer_nsprefix_) else ''
            ESADContainer_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADContainer', pretty_print=pretty_print)
        if self.ESADCustomsProcedure is not None:
            namespaceprefix_ = self.ESADCustomsProcedure_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADCustomsProcedure_nsprefix_) else ''
            self.ESADCustomsProcedure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADCustomsProcedure', pretty_print=pretty_print)
        for ESADExcise_ in self.ESADExcise:
            namespaceprefix_ = self.ESADExcise_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADExcise_nsprefix_) else ''
            ESADExcise_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADExcise', pretty_print=pretty_print)
        for ElectricalEnergReceived_ in self.ElectricalEnergReceived:
            namespaceprefix_ = self.ElectricalEnergReceived_nsprefix_ + ':' if (UseCapturedNS_ and self.ElectricalEnergReceived_nsprefix_) else ''
            ElectricalEnergReceived_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ElectricalEnergReceived', pretty_print=pretty_print)
        for ElectricalEnergGiven_ in self.ElectricalEnergGiven:
            namespaceprefix_ = self.ElectricalEnergGiven_nsprefix_ + ':' if (UseCapturedNS_ and self.ElectricalEnergGiven_nsprefix_) else ''
            ElectricalEnergGiven_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ElectricalEnergGiven', pretty_print=pretty_print)
        for GoodsAutomobile_ in self.GoodsAutomobile:
            namespaceprefix_ = self.GoodsAutomobile_nsprefix_ + ':' if (UseCapturedNS_ and self.GoodsAutomobile_nsprefix_) else ''
            GoodsAutomobile_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='GoodsAutomobile', pretty_print=pretty_print)
        if self.RBSupplementaryGoodsQuantity is not None:
            namespaceprefix_ = self.RBSupplementaryGoodsQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.RBSupplementaryGoodsQuantity_nsprefix_) else ''
            self.RBSupplementaryGoodsQuantity.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RBSupplementaryGoodsQuantity', pretty_print=pretty_print)
        if self.TotalGrossMassMeasure is not None:
            namespaceprefix_ = self.TotalGrossMassMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalGrossMassMeasure_nsprefix_) else ''
            self.TotalGrossMassMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalGrossMassMeasure', pretty_print=pretty_print)
        if self.TotalNetMassMeasure is not None:
            namespaceprefix_ = self.TotalNetMassMeasure_nsprefix_ + ':' if (UseCapturedNS_ and self.TotalNetMassMeasure_nsprefix_) else ''
            self.TotalNetMassMeasure.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TotalNetMassMeasure', pretty_print=pretty_print)
        if self.InvestmentGoodsIdDetails is not None:
            namespaceprefix_ = self.InvestmentGoodsIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.InvestmentGoodsIdDetails_nsprefix_) else ''
            self.InvestmentGoodsIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InvestmentGoodsIdDetails', pretty_print=pretty_print)
        for DestinationCountryDetails_ in self.DestinationCountryDetails:
            namespaceprefix_ = self.DestinationCountryDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.DestinationCountryDetails_nsprefix_) else ''
            DestinationCountryDetails_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DestinationCountryDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADout_CUGoodsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LanguageGoods':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'LanguageGoods')
            value_ = self.gds_validate_string(value_, node, 'LanguageGoods')
            self.LanguageGoods = value_
            self.LanguageGoods_nsprefix_ = child_.prefix
            # validate type LanguageCodeType
            self.validate_LanguageCodeType(self.LanguageGoods)
        elif nodeName_ == 'MilitaryProducts':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'MilitaryProducts')
            ival_ = self.gds_validate_boolean(ival_, node, 'MilitaryProducts')
            self.MilitaryProducts = ival_
            self.MilitaryProducts_nsprefix_ = child_.prefix
            # validate type IndicatorType
            self.validate_IndicatorType(self.MilitaryProducts)
        elif nodeName_ == 'CurrencyCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CurrencyCode')
            value_ = self.gds_validate_string(value_, node, 'CurrencyCode')
            self.CurrencyCode = value_
            self.CurrencyCode_nsprefix_ = child_.prefix
            # validate type CurrencyA3CodeType
            self.validate_CurrencyA3CodeType(self.CurrencyCode)
        elif nodeName_ == 'ESADout_CUPresentedDocument':
            obj_ = CUPresentedDocumentsType23.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUPresentedDocument.append(obj_)
            obj_.original_tagname_ = 'ESADout_CUPresentedDocument'
        elif nodeName_ == 'ESADout_CUPrecedingDocument':
            obj_ = CUPrecedingDocumentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUPrecedingDocument.append(obj_)
            obj_.original_tagname_ = 'ESADout_CUPrecedingDocument'
        elif nodeName_ == 'ESADout_CUCustomsPaymentCalculation':
            obj_ = CUCustomsPaymentCalculationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUCustomsPaymentCalculation.append(obj_)
            obj_.original_tagname_ = 'ESADout_CUCustomsPaymentCalculation'
        elif nodeName_ == 'ESADout_CUCustomsConditions':
            obj_ = ProcessingGoodsDeclarationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUCustomsConditions = obj_
            obj_.original_tagname_ = 'ESADout_CUCustomsConditions'
        elif nodeName_ == 'SupplementaryGoodsQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplementaryGoodsQuantity = obj_
            obj_.original_tagname_ = 'SupplementaryGoodsQuantity'
        elif nodeName_ == 'SupplementaryGoodsQuantity1':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SupplementaryGoodsQuantity1.append(obj_)
            obj_.original_tagname_ = 'SupplementaryGoodsQuantity1'
        elif nodeName_ == 'ESADGoodsPackaging':
            obj_ = ESADGoodsPackagingType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADGoodsPackaging = obj_
            obj_.original_tagname_ = 'ESADGoodsPackaging'
        elif nodeName_ == 'ESADGoodsQuota':
            obj_ = ESADGoodsQuotaType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADGoodsQuota = obj_
            obj_.original_tagname_ = 'ESADGoodsQuota'
        elif nodeName_ == 'ESADContainer':
            obj_ = ESADContainerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADContainer.append(obj_)
            obj_.original_tagname_ = 'ESADContainer'
        elif nodeName_ == 'ESADCustomsProcedure':
            obj_ = ESADCustomsProcedureType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADCustomsProcedure = obj_
            obj_.original_tagname_ = 'ESADCustomsProcedure'
        elif nodeName_ == 'ESADExcise':
            obj_ = ESADExciseType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADExcise.append(obj_)
            obj_.original_tagname_ = 'ESADExcise'
        elif nodeName_ == 'ElectricalEnergReceived':
            obj_ = CU_ElectricalEnergyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ElectricalEnergReceived.append(obj_)
            obj_.original_tagname_ = 'ElectricalEnergReceived'
        elif nodeName_ == 'ElectricalEnergGiven':
            obj_ = CU_ElectricalEnergyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ElectricalEnergGiven.append(obj_)
            obj_.original_tagname_ = 'ElectricalEnergGiven'
        elif nodeName_ == 'GoodsAutomobile':
            obj_ = AutomobileType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.GoodsAutomobile.append(obj_)
            obj_.original_tagname_ = 'GoodsAutomobile'
        elif nodeName_ == 'RBSupplementaryGoodsQuantity':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RBSupplementaryGoodsQuantity = obj_
            obj_.original_tagname_ = 'RBSupplementaryGoodsQuantity'
        elif nodeName_ == 'TotalGrossMassMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalGrossMassMeasure = obj_
            obj_.original_tagname_ = 'TotalGrossMassMeasure'
        elif nodeName_ == 'TotalNetMassMeasure':
            obj_ = SupplementaryQuantityType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TotalNetMassMeasure = obj_
            obj_.original_tagname_ = 'TotalNetMassMeasure'
        elif nodeName_ == 'InvestmentGoodsIdDetails':
            obj_ = InvestmentGoodsIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InvestmentGoodsIdDetails = obj_
            obj_.original_tagname_ = 'InvestmentGoodsIdDetails'
        elif nodeName_ == 'DestinationCountryDetails':
            obj_ = CountryDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DestinationCountryDetails.append(obj_)
            obj_.original_tagname_ = 'DestinationCountryDetails'
        super(ESADout_CUGoodsType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADout_CUGoodsType


class ESADout_CUGoodsShipmentType(CUESADGoodsShipmentType):
    """ESADout_CUGoodsShipmentType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    н
    о
    й
    п
    а
    р
    т
    и
    и
    ESADout_CUConsignor -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    т
    п
    р
    а
    в
    и
    т
    е
    л
    е
    т
    о
    в
    а
    р
    о
    в
    ESADout_CUConsignee -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    о
    л
    у
    ч
    а
    т
    е
    л
    е
    т
    о
    в
    а
    р
    о
    в
    ESADout_CUFinancialAdjustingResponsiblePerson -- Л
    и
    ц
    о
    о
    т
    в
    е
    т
    с
    т
    в
    е
    н
    н
    о
    е
    з
    а
    ф
    и
    н
    а
    н
    с
    о
    в
    о
    е
    у
    р
    е
    г
    у
    л
    и
    р
    о
    в
    а
    н
    и
    е
    ESADout_CUDeclarant -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    е
    к
    л
    а
    р
    а
    н
    т
    е
    т
    о
    в
    а
    р
    о
    в
    ESADout_CUCarrier -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    е
    р
    е
    в
    о
    з
    ч
    и
    к
    е
    г
    р
    . 50
    Т
    Д
    ESADout_CUGoodsLocation -- М
    е
    с
    т
    о
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 30
    Д
    Т
    ESADout_CUConsigment -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    е
    р
    е
    в
    о
    з
    к
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 15, 15
    а
    , 17,17
    а
    , 18, 19, 21, 25, 26, 29 -
    Д
    Т
    /
    Г
    р
    . 15, 17, 18, 19, 21, 25, 26, 29 , 53, 55 -
    Т
    Д
    ESADout_CUMainContractTerms -- У
    с
    л
    о
    в
    и
    я
    с
    д
    е
    л
    к
    и
    Г
    р
    . 11, 20, 22, 23, 24
    Д
    Т
    ESADout_CUGoods -- Т
    о
    в
    а
    р
    н
    а
    я
    ч
    а
    с
    т
    ь
    Г
    р
    . 31-47
    ESADout_CUPayments -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    п
    л
    а
    ч
    и
    в
    а
    е
    м
    ы
    х
    п
    л
    а
    т
    е
    ж
    а
    х
    ,
    п
    л
    а
    т
    е
    ж
    н
    ы
    х
    п
    о
    р
    у
    ч
    е
    н
    и
    я
    х
    ,
    о
    т
    с
    р
    о
    ч
    к
    е
    п
    л
    а
    т
    е
    ж
    е
    й
    .
    Г
    р
    . 48,
    В
    Guarantee -- Г
    а
    р
    а
    н
    т
    и
    я
    .
    Г
    р
    52
    в
    Д
    Т
    TDGuarantee -- Г
    а
    р
    а
    н
    т
    и
    я
    д
    л
    я
    Т
    Д
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CUESADGoodsShipmentType
    def __init__(self, OriginCountryName=None, OriginCountryCode=None, RBOriginCountryCode=None, SpecificationNumber=None, SpecificationListNumber=None, TotalGoodsNumber=None, TotalPackageNumber=None, TotalSheetNumber=None, TotalCustCost=None, TotalCustomsValueAmount=None, CustCostCurrencyCode=None, ESADout_CUConsignor=None, ESADout_CUConsignee=None, ESADout_CUFinancialAdjustingResponsiblePerson=None, ESADout_CUDeclarant=None, ESADout_CUCarrier=None, ESADout_CUGoodsLocation=None, ESADout_CUConsigment=None, ESADout_CUMainContractTerms=None, ESADout_CUGoods=None, ESADout_CUPayments=None, Guarantee=None, TDGuarantee=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUGoodsShipmentType"), self).__init__(OriginCountryName, OriginCountryCode, RBOriginCountryCode, SpecificationNumber, SpecificationListNumber, TotalGoodsNumber, TotalPackageNumber, TotalSheetNumber, TotalCustCost, TotalCustomsValueAmount, CustCostCurrencyCode,  **kwargs_)
        self.ESADout_CUConsignor = ESADout_CUConsignor
        self.ESADout_CUConsignor_nsprefix_ = "RUDECLcat"
        self.ESADout_CUConsignee = ESADout_CUConsignee
        self.ESADout_CUConsignee_nsprefix_ = "RUDECLcat"
        self.ESADout_CUFinancialAdjustingResponsiblePerson = ESADout_CUFinancialAdjustingResponsiblePerson
        self.ESADout_CUFinancialAdjustingResponsiblePerson_nsprefix_ = "ESADout_CU"
        self.ESADout_CUDeclarant = ESADout_CUDeclarant
        self.ESADout_CUDeclarant_nsprefix_ = "RUDECLcat"
        self.ESADout_CUCarrier = ESADout_CUCarrier
        self.ESADout_CUCarrier_nsprefix_ = "ESADout_CU"
        if ESADout_CUGoodsLocation is None:
            self.ESADout_CUGoodsLocation = []
        else:
            self.ESADout_CUGoodsLocation = ESADout_CUGoodsLocation
        self.ESADout_CUGoodsLocation_nsprefix_ = "ESADout_CU"
        self.ESADout_CUConsigment = ESADout_CUConsigment
        self.ESADout_CUConsigment_nsprefix_ = "ESADout_CU"
        self.ESADout_CUMainContractTerms = ESADout_CUMainContractTerms
        self.ESADout_CUMainContractTerms_nsprefix_ = "ESADout_CU"
        if ESADout_CUGoods is None:
            self.ESADout_CUGoods = []
        else:
            self.ESADout_CUGoods = ESADout_CUGoods
        self.ESADout_CUGoods_nsprefix_ = "ESADout_CU"
        self.ESADout_CUPayments = ESADout_CUPayments
        self.ESADout_CUPayments_nsprefix_ = "ESADout_CU"
        if Guarantee is None:
            self.Guarantee = []
        else:
            self.Guarantee = Guarantee
        self.Guarantee_nsprefix_ = "catESAD_cu"
        if TDGuarantee is None:
            self.TDGuarantee = []
        else:
            self.TDGuarantee = TDGuarantee
        self.TDGuarantee_nsprefix_ = "ESADout_CU"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUGoodsShipmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUGoodsShipmentType.subclass:
            return ESADout_CUGoodsShipmentType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUGoodsShipmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ESADout_CUConsignor(self):
        return self.ESADout_CUConsignor
    def set_ESADout_CUConsignor(self, ESADout_CUConsignor):
        self.ESADout_CUConsignor = ESADout_CUConsignor
    def get_ESADout_CUConsignee(self):
        return self.ESADout_CUConsignee
    def set_ESADout_CUConsignee(self, ESADout_CUConsignee):
        self.ESADout_CUConsignee = ESADout_CUConsignee
    def get_ESADout_CUFinancialAdjustingResponsiblePerson(self):
        return self.ESADout_CUFinancialAdjustingResponsiblePerson
    def set_ESADout_CUFinancialAdjustingResponsiblePerson(self, ESADout_CUFinancialAdjustingResponsiblePerson):
        self.ESADout_CUFinancialAdjustingResponsiblePerson = ESADout_CUFinancialAdjustingResponsiblePerson
    def get_ESADout_CUDeclarant(self):
        return self.ESADout_CUDeclarant
    def set_ESADout_CUDeclarant(self, ESADout_CUDeclarant):
        self.ESADout_CUDeclarant = ESADout_CUDeclarant
    def get_ESADout_CUCarrier(self):
        return self.ESADout_CUCarrier
    def set_ESADout_CUCarrier(self, ESADout_CUCarrier):
        self.ESADout_CUCarrier = ESADout_CUCarrier
    def get_ESADout_CUGoodsLocation(self):
        return self.ESADout_CUGoodsLocation
    def set_ESADout_CUGoodsLocation(self, ESADout_CUGoodsLocation):
        self.ESADout_CUGoodsLocation = ESADout_CUGoodsLocation
    def add_ESADout_CUGoodsLocation(self, value):
        self.ESADout_CUGoodsLocation.append(value)
    def insert_ESADout_CUGoodsLocation_at(self, index, value):
        self.ESADout_CUGoodsLocation.insert(index, value)
    def replace_ESADout_CUGoodsLocation_at(self, index, value):
        self.ESADout_CUGoodsLocation[index] = value
    def get_ESADout_CUConsigment(self):
        return self.ESADout_CUConsigment
    def set_ESADout_CUConsigment(self, ESADout_CUConsigment):
        self.ESADout_CUConsigment = ESADout_CUConsigment
    def get_ESADout_CUMainContractTerms(self):
        return self.ESADout_CUMainContractTerms
    def set_ESADout_CUMainContractTerms(self, ESADout_CUMainContractTerms):
        self.ESADout_CUMainContractTerms = ESADout_CUMainContractTerms
    def get_ESADout_CUGoods(self):
        return self.ESADout_CUGoods
    def set_ESADout_CUGoods(self, ESADout_CUGoods):
        self.ESADout_CUGoods = ESADout_CUGoods
    def add_ESADout_CUGoods(self, value):
        self.ESADout_CUGoods.append(value)
    def insert_ESADout_CUGoods_at(self, index, value):
        self.ESADout_CUGoods.insert(index, value)
    def replace_ESADout_CUGoods_at(self, index, value):
        self.ESADout_CUGoods[index] = value
    def get_ESADout_CUPayments(self):
        return self.ESADout_CUPayments
    def set_ESADout_CUPayments(self, ESADout_CUPayments):
        self.ESADout_CUPayments = ESADout_CUPayments
    def get_Guarantee(self):
        return self.Guarantee
    def set_Guarantee(self, Guarantee):
        self.Guarantee = Guarantee
    def add_Guarantee(self, value):
        self.Guarantee.append(value)
    def insert_Guarantee_at(self, index, value):
        self.Guarantee.insert(index, value)
    def replace_Guarantee_at(self, index, value):
        self.Guarantee[index] = value
    def get_TDGuarantee(self):
        return self.TDGuarantee
    def set_TDGuarantee(self, TDGuarantee):
        self.TDGuarantee = TDGuarantee
    def add_TDGuarantee(self, value):
        self.TDGuarantee.append(value)
    def insert_TDGuarantee_at(self, index, value):
        self.TDGuarantee.insert(index, value)
    def replace_TDGuarantee_at(self, index, value):
        self.TDGuarantee[index] = value
    def has__content(self):
        if (
            self.ESADout_CUConsignor is not None or
            self.ESADout_CUConsignee is not None or
            self.ESADout_CUFinancialAdjustingResponsiblePerson is not None or
            self.ESADout_CUDeclarant is not None or
            self.ESADout_CUCarrier is not None or
            self.ESADout_CUGoodsLocation or
            self.ESADout_CUConsigment is not None or
            self.ESADout_CUMainContractTerms is not None or
            self.ESADout_CUGoods or
            self.ESADout_CUPayments is not None or
            self.Guarantee or
            self.TDGuarantee or
            super(ESADout_CUGoodsShipmentType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='ESADout_CUGoodsShipmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUGoodsShipmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUGoodsShipmentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUGoodsShipmentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUGoodsShipmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUGoodsShipmentType'):
        super(ESADout_CUGoodsShipmentType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUGoodsShipmentType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0"  xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='ESADout_CUGoodsShipmentType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUGoodsShipmentType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ESADout_CUConsignor is not None:
            namespaceprefix_ = self.ESADout_CUConsignor_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUConsignor_nsprefix_) else ''
            self.ESADout_CUConsignor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUConsignor', pretty_print=pretty_print)
        if self.ESADout_CUConsignee is not None:
            namespaceprefix_ = self.ESADout_CUConsignee_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUConsignee_nsprefix_) else ''
            self.ESADout_CUConsignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUConsignee', pretty_print=pretty_print)
        if self.ESADout_CUFinancialAdjustingResponsiblePerson is not None:
            namespaceprefix_ = self.ESADout_CUFinancialAdjustingResponsiblePerson_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUFinancialAdjustingResponsiblePerson_nsprefix_) else ''
            self.ESADout_CUFinancialAdjustingResponsiblePerson.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUFinancialAdjustingResponsiblePerson', pretty_print=pretty_print)
        if self.ESADout_CUDeclarant is not None:
            namespaceprefix_ = self.ESADout_CUDeclarant_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUDeclarant_nsprefix_) else ''
            self.ESADout_CUDeclarant.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUDeclarant', pretty_print=pretty_print)
        if self.ESADout_CUCarrier is not None:
            namespaceprefix_ = self.ESADout_CUCarrier_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUCarrier_nsprefix_) else ''
            self.ESADout_CUCarrier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUCarrier', pretty_print=pretty_print)
        for ESADout_CUGoodsLocation_ in self.ESADout_CUGoodsLocation:
            namespaceprefix_ = self.ESADout_CUGoodsLocation_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUGoodsLocation_nsprefix_) else ''
            ESADout_CUGoodsLocation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUGoodsLocation', pretty_print=pretty_print)
        if self.ESADout_CUConsigment is not None:
            namespaceprefix_ = self.ESADout_CUConsigment_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUConsigment_nsprefix_) else ''
            self.ESADout_CUConsigment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUConsigment', pretty_print=pretty_print)
        if self.ESADout_CUMainContractTerms is not None:
            namespaceprefix_ = self.ESADout_CUMainContractTerms_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUMainContractTerms_nsprefix_) else ''
            self.ESADout_CUMainContractTerms.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUMainContractTerms', pretty_print=pretty_print)
        for ESADout_CUGoods_ in self.ESADout_CUGoods:
            namespaceprefix_ = self.ESADout_CUGoods_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUGoods_nsprefix_) else ''
            ESADout_CUGoods_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUGoods', pretty_print=pretty_print)
        if self.ESADout_CUPayments is not None:
            namespaceprefix_ = self.ESADout_CUPayments_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUPayments_nsprefix_) else ''
            self.ESADout_CUPayments.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUPayments', pretty_print=pretty_print)
        for Guarantee_ in self.Guarantee:
            namespaceprefix_ = self.Guarantee_nsprefix_ + ':' if (UseCapturedNS_ and self.Guarantee_nsprefix_) else ''
            Guarantee_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Guarantee', pretty_print=pretty_print)
        for TDGuarantee_ in self.TDGuarantee:
            namespaceprefix_ = self.TDGuarantee_nsprefix_ + ':' if (UseCapturedNS_ and self.TDGuarantee_nsprefix_) else ''
            TDGuarantee_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TDGuarantee', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADout_CUGoodsShipmentType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ESADout_CUConsignor':
            obj_ = GoodsShipmentSubjectDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUConsignor = obj_
            obj_.original_tagname_ = 'ESADout_CUConsignor'
        elif nodeName_ == 'ESADout_CUConsignee':
            obj_ = GoodsShipmentSubjectDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUConsignee = obj_
            obj_.original_tagname_ = 'ESADout_CUConsignee'
        elif nodeName_ == 'ESADout_CUFinancialAdjustingResponsiblePerson':
            obj_ = ESADout_CUFinancialAdjustingResponsiblePersonType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUFinancialAdjustingResponsiblePerson = obj_
            obj_.original_tagname_ = 'ESADout_CUFinancialAdjustingResponsiblePerson'
        elif nodeName_ == 'ESADout_CUDeclarant':
            obj_ = AEODeclarantDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUDeclarant = obj_
            obj_.original_tagname_ = 'ESADout_CUDeclarant'
        elif nodeName_ == 'ESADout_CUCarrier':
            obj_ = ESADout_CUCarrierType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUCarrier = obj_
            obj_.original_tagname_ = 'ESADout_CUCarrier'
        elif nodeName_ == 'ESADout_CUGoodsLocation':
            obj_ = ESADout_CUGoodsLocationType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUGoodsLocation.append(obj_)
            obj_.original_tagname_ = 'ESADout_CUGoodsLocation'
        elif nodeName_ == 'ESADout_CUConsigment':
            obj_ = ESADout_CUConsigmentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUConsigment = obj_
            obj_.original_tagname_ = 'ESADout_CUConsigment'
        elif nodeName_ == 'ESADout_CUMainContractTerms':
            obj_ = ESADout_CUMainContractTermsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUMainContractTerms = obj_
            obj_.original_tagname_ = 'ESADout_CUMainContractTerms'
        elif nodeName_ == 'ESADout_CUGoods':
            obj_ = ESADout_CUGoodsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUGoods.append(obj_)
            obj_.original_tagname_ = 'ESADout_CUGoods'
        elif nodeName_ == 'ESADout_CUPayments':
            obj_ = ESADout_CUPaymentsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUPayments = obj_
            obj_.original_tagname_ = 'ESADout_CUPayments'
        elif nodeName_ == 'Guarantee':
            obj_ = CUGuaranteeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Guarantee.append(obj_)
            obj_.original_tagname_ = 'Guarantee'
        elif nodeName_ == 'TDGuarantee':
            obj_ = TDGuaranteeType27.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TDGuarantee.append(obj_)
            obj_.original_tagname_ = 'TDGuarantee'
        super(ESADout_CUGoodsShipmentType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADout_CUGoodsShipmentType


class ESADout_CUFinancialAdjustingResponsiblePersonType(SubjectBranchDetailsType):
    """ESADout_CUFinancialAdjustingResponsiblePersonType -- Л
    и
    ц
    о
    о
    т
    в
    е
    т
    с
    т
    в
    е
    н
    н
    о
    е
    з
    а
    ф
    и
    н
    а
    н
    с
    о
    в
    о
    е
    у
    р
    е
    г
    у
    л
    и
    р
    о
    в
    а
    н
    и
    е
    DeclarantEqualFlag -- П
    р
    и
    з
    н
    а
    к
    с
    о
    в
    п
    а
    д
    е
    н
    и
    я
    с
    в
    е
    д
    е
    н
    и
    й
    с
    о
    с
    в
    е
    д
    е
    н
    и
    я
    м
    и
    ,
    з
    а
    я
    в
    л
    я
    е
    м
    ы
    м
    и
    в
    г
    р
    . 14
    Д
    Т
    . 1 -
    с
    в
    е
    д
    е
    н
    и
    я
    с
    о
    в
    п
    а
    д
    а
    ю
    т
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectBranchDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, IdentityCard=None, SubjectAddressDetails=None, CommunicationDetails=None, SubjectBranch=None, DeclarantEqualFlag=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUFinancialAdjustingResponsiblePersonType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN, PersonId, IdentityCard, SubjectAddressDetails, CommunicationDetails, SubjectBranch,  **kwargs_)
        self.DeclarantEqualFlag = DeclarantEqualFlag
        self.validate_IndicatorType(self.DeclarantEqualFlag)
        self.DeclarantEqualFlag_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUFinancialAdjustingResponsiblePersonType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUFinancialAdjustingResponsiblePersonType.subclass:
            return ESADout_CUFinancialAdjustingResponsiblePersonType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUFinancialAdjustingResponsiblePersonType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DeclarantEqualFlag(self):
        return self.DeclarantEqualFlag
    def set_DeclarantEqualFlag(self, DeclarantEqualFlag):
        self.DeclarantEqualFlag = DeclarantEqualFlag
    def validate_IndicatorType(self, value):
        result = True
        # Validate type IndicatorType, a restriction on CategoryCust:IndicatorCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def has__content(self):
        if (
            self.DeclarantEqualFlag is not None or
            super(ESADout_CUFinancialAdjustingResponsiblePersonType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADout_CUFinancialAdjustingResponsiblePersonType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUFinancialAdjustingResponsiblePersonType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUFinancialAdjustingResponsiblePersonType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUFinancialAdjustingResponsiblePersonType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUFinancialAdjustingResponsiblePersonType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUFinancialAdjustingResponsiblePersonType'):
        super(ESADout_CUFinancialAdjustingResponsiblePersonType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUFinancialAdjustingResponsiblePersonType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='ESADout_CUFinancialAdjustingResponsiblePersonType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUFinancialAdjustingResponsiblePersonType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DeclarantEqualFlag is not None:
            namespaceprefix_ = self.DeclarantEqualFlag_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclarantEqualFlag_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclarantEqualFlag>%s</%sDeclarantEqualFlag>%s' % (namespaceprefix_ , self.gds_format_boolean(self.DeclarantEqualFlag, input_name='DeclarantEqualFlag'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADout_CUFinancialAdjustingResponsiblePersonType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DeclarantEqualFlag':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'DeclarantEqualFlag')
            ival_ = self.gds_validate_boolean(ival_, node, 'DeclarantEqualFlag')
            self.DeclarantEqualFlag = ival_
            self.DeclarantEqualFlag_nsprefix_ = child_.prefix
            # validate type IndicatorType
            self.validate_IndicatorType(self.DeclarantEqualFlag)
        super(ESADout_CUFinancialAdjustingResponsiblePersonType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADout_CUFinancialAdjustingResponsiblePersonType


class ESADout_CUDepartureArrivalTransportType(CUTransportMeansType):
    """ESADout_CUDepartureArrivalTransportType -- Т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    е
    с
    р
    е
    д
    с
    т
    в
    а
    п
    р
    и
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    и
    /
    п
    р
    и
    б
    ы
    т
    и
    и
    .
    Г
    р
    . 18, 26
    Д
    Т
    TransportMeansQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    MethodTransport -- С
    п
    о
    с
    о
    б
    т
    р
    а
    н
    с
    п
    о
    р
    т
    и
    р
    о
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    п
    р
    и
    п
    е
    р
    е
    м
    е
    щ
    е
    н
    и
    и
    п
    о
    л
    и
    н
    и
    я
    м
    э
    л
    е
    к
    т
    р
    о
    п
    е
    р
    е
    д
    а
    ч
    и
    и
    л
    и
    т
    р
    у
    б
    о
    п
    р
    о
    в
    о
    д
    н
    ы
    м
    т
    р
    а
    н
    с
    п
    о
    р
    т
    о
    м
    : 1 -
    г
    а
    з
    о
    п
    р
    о
    в
    о
    д
    ; 2 -
    н
    е
    ф
    т
    е
    п
    р
    о
    в
    о
    д
    ; 3 -
    н
    е
    ф
    т
    е
    п
    р
    о
    д
    у
    к
    т
    о
    п
    р
    о
    в
    о
    д
    ; 4 -
    л
    и
    н
    и
    и
    э
    л
    е
    к
    т
    р
    о
    п
    е
    р
    е
    д
    а
    ч
    и
    NameObject -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    б
    ъ
    е
    к
    т
    а
    ,
    н
    а
    к
    о
    т
    о
    р
    о
    м
    у
    с
    т
    а
    н
    о
    в
    л
    е
    н
    ы
    п
    р
    и
    б
    о
    р
    ы
    у
    ч
    е
    т
    а
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    ы
    х
    п
    о
    л
    и
    н
    и
    я
    м
    э
    л
    е
    к
    т
    р
    о
    п
    е
    р
    е
    д
    а
    ч
    и
    и
    л
    и
    т
    р
    у
    б
    о
    п
    р
    о
    в
    о
    д
    н
    ы
    м
    т
    р
    а
    н
    с
    п
    о
    р
    т
    о
    м
    RUTransportMeans -- О
    п
    и
    с
    а
    н
    и
    е
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CUTransportMeansType
    def __init__(self, TransportModeCode=None, TransportNationalityCode=None, TransportMeansQuantity=None, MethodTransport=None, NameObject=None, RUTransportMeans=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUDepartureArrivalTransportType"), self).__init__(TransportModeCode, TransportNationalityCode,  **kwargs_)
        self.TransportMeansQuantity = TransportMeansQuantity
        self.validate_Count5Type(self.TransportMeansQuantity)
        self.TransportMeansQuantity_nsprefix_ = "clt_ru"
        self.MethodTransport = MethodTransport
        self.validate_Numeric1Type(self.MethodTransport)
        self.MethodTransport_nsprefix_ = "clt_ru"
        if NameObject is None:
            self.NameObject = []
        else:
            self.NameObject = NameObject
        self.NameObject_nsprefix_ = "clt_ru"
        if RUTransportMeans is None:
            self.RUTransportMeans = []
        else:
            self.RUTransportMeans = RUTransportMeans
        self.RUTransportMeans_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUDepartureArrivalTransportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUDepartureArrivalTransportType.subclass:
            return ESADout_CUDepartureArrivalTransportType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUDepartureArrivalTransportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportMeansQuantity(self):
        return self.TransportMeansQuantity
    def set_TransportMeansQuantity(self, TransportMeansQuantity):
        self.TransportMeansQuantity = TransportMeansQuantity
    def get_MethodTransport(self):
        return self.MethodTransport
    def set_MethodTransport(self, MethodTransport):
        self.MethodTransport = MethodTransport
    def get_NameObject(self):
        return self.NameObject
    def set_NameObject(self, NameObject):
        self.NameObject = NameObject
    def add_NameObject(self, value):
        self.NameObject.append(value)
    def insert_NameObject_at(self, index, value):
        self.NameObject.insert(index, value)
    def replace_NameObject_at(self, index, value):
        self.NameObject[index] = value
    def get_RUTransportMeans(self):
        return self.RUTransportMeans
    def set_RUTransportMeans(self, RUTransportMeans):
        self.RUTransportMeans = RUTransportMeans
    def add_RUTransportMeans(self, value):
        self.RUTransportMeans.append(value)
    def insert_RUTransportMeans_at(self, index, value):
        self.RUTransportMeans.insert(index, value)
    def replace_RUTransportMeans_at(self, index, value):
        self.RUTransportMeans[index] = value
    def validate_Count5Type(self, value):
        result = True
        # Validate type Count5Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Numeric1Type(self, value):
        result = True
        # Validate type Numeric1Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TransportMeansQuantity is not None or
            self.MethodTransport is not None or
            self.NameObject or
            self.RUTransportMeans or
            super(ESADout_CUDepartureArrivalTransportType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADout_CUDepartureArrivalTransportType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUDepartureArrivalTransportType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUDepartureArrivalTransportType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUDepartureArrivalTransportType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUDepartureArrivalTransportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUDepartureArrivalTransportType'):
        super(ESADout_CUDepartureArrivalTransportType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUDepartureArrivalTransportType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADout_CUDepartureArrivalTransportType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUDepartureArrivalTransportType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportMeansQuantity is not None:
            namespaceprefix_ = self.TransportMeansQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportMeansQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportMeansQuantity>%s</%sTransportMeansQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.TransportMeansQuantity, input_name='TransportMeansQuantity'), namespaceprefix_ , eol_))
        if self.MethodTransport is not None:
            namespaceprefix_ = self.MethodTransport_nsprefix_ + ':' if (UseCapturedNS_ and self.MethodTransport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMethodTransport>%s</%sMethodTransport>%s' % (namespaceprefix_ , self.gds_format_decimal(self.MethodTransport, input_name='MethodTransport'), namespaceprefix_ , eol_))
        for NameObject_ in self.NameObject:
            namespaceprefix_ = self.NameObject_nsprefix_ + ':' if (UseCapturedNS_ and self.NameObject_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameObject>%s</%sNameObject>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(NameObject_), input_name='NameObject')), namespaceprefix_ , eol_))
        for RUTransportMeans_ in self.RUTransportMeans:
            namespaceprefix_ = self.RUTransportMeans_nsprefix_ + ':' if (UseCapturedNS_ and self.RUTransportMeans_nsprefix_) else ''
            RUTransportMeans_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RUTransportMeans', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADout_CUDepartureArrivalTransportType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportMeansQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TransportMeansQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'TransportMeansQuantity')
            self.TransportMeansQuantity = ival_
            self.TransportMeansQuantity_nsprefix_ = child_.prefix
            # validate type Count5Type
            self.validate_Count5Type(self.TransportMeansQuantity)
        elif nodeName_ == 'MethodTransport' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'MethodTransport')
            fval_ = self.gds_validate_decimal(fval_, node, 'MethodTransport')
            self.MethodTransport = fval_
            self.MethodTransport_nsprefix_ = child_.prefix
            # validate type Numeric1Type
            self.validate_Numeric1Type(self.MethodTransport)
        elif nodeName_ == 'NameObject':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NameObject')
            value_ = self.gds_validate_string(value_, node, 'NameObject')
            self.NameObject.append(value_)
            self.NameObject_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.NameObject[-1])
        elif nodeName_ == 'RUTransportMeans':
            class_obj_ = self.get_class_obj_(child_, TransportMeansBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RUTransportMeans.append(obj_)
            obj_.original_tagname_ = 'RUTransportMeans'
        super(ESADout_CUDepartureArrivalTransportType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADout_CUDepartureArrivalTransportType


class ESADout_CUConsigmentType(CUConsigmentType):
    """ESADout_CUConsigmentType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    е
    р
    е
    в
    о
    з
    к
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 15, 15
    а
    , 17,17
    а
    , 18, 19, 21, 25, 26, 29 -
    Д
    Т
    /
    Г
    р
    . 15, 17, 18, 19, 21, 25, 26, 29 , 53, 55 -
    Т
    Д
    ESADout_CUDepartureArrivalTransport -- Т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    е
    с
    р
    е
    д
    с
    т
    в
    а
    п
    р
    и
    п
    р
    и
    б
    ы
    т
    и
    и
    /
    у
    б
    ы
    т
    и
    и
    .
    Г
    р
    . 18, 26
    ESADout_CUBorderTransport -- Т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    е
    с
    р
    е
    д
    с
    т
    в
    а
    н
    а
    г
    р
    а
    н
    и
    ц
    е
    .
    Г
    р
    . 21, 25
    Д
    Т
    ESADout_CUReloadingInfo -- И
    н
    ф
    о
    р
    м
    а
    ц
    и
    я
    о
    п
    е
    р
    е
    г
    р
    у
    з
    к
    е
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    . 55
    Т
    Д
    DateExpectedArrival -- Д
    а
    т
    а
    о
    ж
    и
    д
    а
    е
    м
    о
    г
    о
    п
    р
    и
    б
    ы
    т
    и
    я
    т
    о
    в
    а
    р
    о
    в
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    в
    п
    о
    г
    р
    а
    н
    и
    ч
    н
    ы
    й
    п
    у
    н
    к
    т
    п
    р
    о
    п
    у
    с
    к
    а
    .
    Т
    Д
    TimeExpectedArrival -- В
    р
    е
    м
    я
    о
    ж
    и
    д
    а
    е
    м
    о
    г
    о
    п
    р
    и
    б
    ы
    т
    и
    я
    т
    о
    в
    а
    р
    о
    в
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    в
    п
    о
    г
    р
    а
    н
    и
    ч
    н
    ы
    й
    п
    у
    н
    к
    т
    п
    р
    о
    п
    у
    с
    к
    а
    .
    Т
    Д
    PPBorderCustoms -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    о
    р
    г
    а
    н
    (
    п
    о
    г
    р
    а
    н
    и
    ч
    н
    ы
    й
    п
    у
    н
    к
    т
    п
    р
    о
    п
    у
    с
    к
    а
    ),
    в
    к
    о
    т
    о
    р
    ы
    й
    о
    ж
    и
    д
    а
    е
    т
    с
    я
    п
    р
    и
    б
    ы
    т
    и
    е
    т
    о
    в
    а
    р
    о
    в
    и
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    TDDeliveryPlace -- М
    е
    с
    т
    о
    н
    а
    з
    н
    а
    ч
    е
    н
    и
    я
    п
    р
    и
    т
    р
    а
    н
    з
    и
    т
    е
    .
    г
    р
    53
    Т
    Д
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CUConsigmentType
    def __init__(self, ContainerIndicator=None, DispatchCountryCode=None, RBDispatchCountryCode=None, DispatchCountryName=None, DestinationCountryCode=None, DestinationCountryName=None, RBDestinationCountryCode=None, BorderCustomsOffice=None, ESADout_CUDepartureArrivalTransport=None, ESADout_CUBorderTransport=None, ESADout_CUReloadingInfo=None, DateExpectedArrival=None, TimeExpectedArrival=None, PPBorderCustoms=None, TDDeliveryPlace=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUConsigmentType"), self).__init__(ContainerIndicator, DispatchCountryCode, RBDispatchCountryCode, DispatchCountryName, DestinationCountryCode, DestinationCountryName, RBDestinationCountryCode, BorderCustomsOffice,  **kwargs_)
        self.ESADout_CUDepartureArrivalTransport = ESADout_CUDepartureArrivalTransport
        self.ESADout_CUDepartureArrivalTransport_nsprefix_ = "ESADout_CU"
        self.ESADout_CUBorderTransport = ESADout_CUBorderTransport
        self.ESADout_CUBorderTransport_nsprefix_ = "ESADout_CU"
        if ESADout_CUReloadingInfo is None:
            self.ESADout_CUReloadingInfo = []
        else:
            self.ESADout_CUReloadingInfo = ESADout_CUReloadingInfo
        self.ESADout_CUReloadingInfo_nsprefix_ = "catESAD_cu"
        if isinstance(DateExpectedArrival, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DateExpectedArrival, '%Y-%m-%d').date()
        else:
            initvalue_ = DateExpectedArrival
        self.DateExpectedArrival = initvalue_
        self.DateExpectedArrival_nsprefix_ = "clt_ru"
        if isinstance(TimeExpectedArrival, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TimeExpectedArrival, '%H:%M:%S').time()
        else:
            initvalue_ = TimeExpectedArrival
        self.TimeExpectedArrival = initvalue_
        self.TimeExpectedArrival_nsprefix_ = "clt_ru"
        self.PPBorderCustoms = PPBorderCustoms
        self.PPBorderCustoms_nsprefix_ = "cat_ru"
        self.TDDeliveryPlace = TDDeliveryPlace
        self.TDDeliveryPlace_nsprefix_ = "ESADout_CU"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUConsigmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUConsigmentType.subclass:
            return ESADout_CUConsigmentType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUConsigmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ESADout_CUDepartureArrivalTransport(self):
        return self.ESADout_CUDepartureArrivalTransport
    def set_ESADout_CUDepartureArrivalTransport(self, ESADout_CUDepartureArrivalTransport):
        self.ESADout_CUDepartureArrivalTransport = ESADout_CUDepartureArrivalTransport
    def get_ESADout_CUBorderTransport(self):
        return self.ESADout_CUBorderTransport
    def set_ESADout_CUBorderTransport(self, ESADout_CUBorderTransport):
        self.ESADout_CUBorderTransport = ESADout_CUBorderTransport
    def get_ESADout_CUReloadingInfo(self):
        return self.ESADout_CUReloadingInfo
    def set_ESADout_CUReloadingInfo(self, ESADout_CUReloadingInfo):
        self.ESADout_CUReloadingInfo = ESADout_CUReloadingInfo
    def add_ESADout_CUReloadingInfo(self, value):
        self.ESADout_CUReloadingInfo.append(value)
    def insert_ESADout_CUReloadingInfo_at(self, index, value):
        self.ESADout_CUReloadingInfo.insert(index, value)
    def replace_ESADout_CUReloadingInfo_at(self, index, value):
        self.ESADout_CUReloadingInfo[index] = value
    def get_DateExpectedArrival(self):
        return self.DateExpectedArrival
    def set_DateExpectedArrival(self, DateExpectedArrival):
        self.DateExpectedArrival = DateExpectedArrival
    def get_TimeExpectedArrival(self):
        return self.TimeExpectedArrival
    def set_TimeExpectedArrival(self, TimeExpectedArrival):
        self.TimeExpectedArrival = TimeExpectedArrival
    def get_PPBorderCustoms(self):
        return self.PPBorderCustoms
    def set_PPBorderCustoms(self, PPBorderCustoms):
        self.PPBorderCustoms = PPBorderCustoms
    def get_TDDeliveryPlace(self):
        return self.TDDeliveryPlace
    def set_TDDeliveryPlace(self, TDDeliveryPlace):
        self.TDDeliveryPlace = TDDeliveryPlace
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_TimeCustType(self, value):
        result = True
        # Validate type TimeCustType, a restriction on CategoryCust:TimeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.time):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.time)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.ESADout_CUDepartureArrivalTransport is not None or
            self.ESADout_CUBorderTransport is not None or
            self.ESADout_CUReloadingInfo or
            self.DateExpectedArrival is not None or
            self.TimeExpectedArrival is not None or
            self.PPBorderCustoms is not None or
            self.TDDeliveryPlace is not None or
            super(ESADout_CUConsigmentType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADout_CUConsigmentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUConsigmentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUConsigmentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUConsigmentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUConsigmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUConsigmentType'):
        super(ESADout_CUConsigmentType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUConsigmentType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADout_CUConsigmentType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUConsigmentType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ESADout_CUDepartureArrivalTransport is not None:
            namespaceprefix_ = self.ESADout_CUDepartureArrivalTransport_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUDepartureArrivalTransport_nsprefix_) else ''
            self.ESADout_CUDepartureArrivalTransport.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUDepartureArrivalTransport', pretty_print=pretty_print)
        if self.ESADout_CUBorderTransport is not None:
            namespaceprefix_ = self.ESADout_CUBorderTransport_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUBorderTransport_nsprefix_) else ''
            self.ESADout_CUBorderTransport.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUBorderTransport', pretty_print=pretty_print)
        for ESADout_CUReloadingInfo_ in self.ESADout_CUReloadingInfo:
            namespaceprefix_ = self.ESADout_CUReloadingInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUReloadingInfo_nsprefix_) else ''
            ESADout_CUReloadingInfo_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUReloadingInfo', pretty_print=pretty_print)
        if self.DateExpectedArrival is not None:
            namespaceprefix_ = self.DateExpectedArrival_nsprefix_ + ':' if (UseCapturedNS_ and self.DateExpectedArrival_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDateExpectedArrival>%s</%sDateExpectedArrival>%s' % (namespaceprefix_ , self.gds_format_date(self.DateExpectedArrival, input_name='DateExpectedArrival'), namespaceprefix_ , eol_))
        if self.TimeExpectedArrival is not None:
            namespaceprefix_ = self.TimeExpectedArrival_nsprefix_ + ':' if (UseCapturedNS_ and self.TimeExpectedArrival_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeExpectedArrival>%s</%sTimeExpectedArrival>%s' % (namespaceprefix_ , self.gds_format_time(self.TimeExpectedArrival, input_name='TimeExpectedArrival'), namespaceprefix_ , eol_))
        if self.PPBorderCustoms is not None:
            namespaceprefix_ = self.PPBorderCustoms_nsprefix_ + ':' if (UseCapturedNS_ and self.PPBorderCustoms_nsprefix_) else ''
            self.PPBorderCustoms.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PPBorderCustoms', pretty_print=pretty_print)
        if self.TDDeliveryPlace is not None:
            namespaceprefix_ = self.TDDeliveryPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.TDDeliveryPlace_nsprefix_) else ''
            self.TDDeliveryPlace.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TDDeliveryPlace', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADout_CUConsigmentType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ESADout_CUDepartureArrivalTransport':
            obj_ = ESADout_CUDepartureArrivalTransportType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUDepartureArrivalTransport = obj_
            obj_.original_tagname_ = 'ESADout_CUDepartureArrivalTransport'
        elif nodeName_ == 'ESADout_CUBorderTransport':
            obj_ = ESADout_CUBorderTransportType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUBorderTransport = obj_
            obj_.original_tagname_ = 'ESADout_CUBorderTransport'
        elif nodeName_ == 'ESADout_CUReloadingInfo':
            obj_ = ESADReloadingInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUReloadingInfo.append(obj_)
            obj_.original_tagname_ = 'ESADout_CUReloadingInfo'
        elif nodeName_ == 'DateExpectedArrival':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DateExpectedArrival = dval_
            self.DateExpectedArrival_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DateExpectedArrival)
        elif nodeName_ == 'TimeExpectedArrival':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.TimeExpectedArrival = dval_
            self.TimeExpectedArrival_nsprefix_ = child_.prefix
            # validate type TimeCustType
            self.validate_TimeCustType(self.TimeExpectedArrival)
        elif nodeName_ == 'PPBorderCustoms':
            obj_ = CUCustomsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PPBorderCustoms = obj_
            obj_.original_tagname_ = 'PPBorderCustoms'
        elif nodeName_ == 'TDDeliveryPlace':
            obj_ = TDDeliveryPlaceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TDDeliveryPlace = obj_
            obj_.original_tagname_ = 'TDDeliveryPlace'
        super(ESADout_CUConsigmentType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADout_CUConsigmentType


class ESADout_CUCarrierType(SubjectDetailsType):
    """ESADout_CUCarrierType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    е
    р
    е
    в
    о
    з
    ч
    и
    к
    е
    ESADout_CUDriverInformation -- С
    в
    е
    д
    е
    н
    и
    я
    о
    л
    и
    ц
    е
    ,
    я
    в
    л
    я
    ю
    щ
    и
    м
    с
    я
    с
    о
    т
    р
    у
    д
    н
    и
    к
    о
    м
    и
    л
    и
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    м
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    е
    м
    п
    е
    р
    е
    в
    о
    з
    ч
    и
    к
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, IdentityCard=None, SubjectAddressDetails=None, CommunicationDetails=None, ESADout_CUDriverInformation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUCarrierType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN, PersonId, IdentityCard, SubjectAddressDetails, CommunicationDetails,  **kwargs_)
        if ESADout_CUDriverInformation is None:
            self.ESADout_CUDriverInformation = []
        else:
            self.ESADout_CUDriverInformation = ESADout_CUDriverInformation
        self.ESADout_CUDriverInformation_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUCarrierType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUCarrierType.subclass:
            return ESADout_CUCarrierType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUCarrierType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ESADout_CUDriverInformation(self):
        return self.ESADout_CUDriverInformation
    def set_ESADout_CUDriverInformation(self, ESADout_CUDriverInformation):
        self.ESADout_CUDriverInformation = ESADout_CUDriverInformation
    def add_ESADout_CUDriverInformation(self, value):
        self.ESADout_CUDriverInformation.append(value)
    def insert_ESADout_CUDriverInformation_at(self, index, value):
        self.ESADout_CUDriverInformation.insert(index, value)
    def replace_ESADout_CUDriverInformation_at(self, index, value):
        self.ESADout_CUDriverInformation[index] = value
    def has__content(self):
        if (
            self.ESADout_CUDriverInformation or
            super(ESADout_CUCarrierType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='ESADout_CUCarrierType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUCarrierType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUCarrierType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUCarrierType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUCarrierType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUCarrierType'):
        super(ESADout_CUCarrierType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUCarrierType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='ESADout_CUCarrierType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUCarrierType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ESADout_CUDriverInformation_ in self.ESADout_CUDriverInformation:
            namespaceprefix_ = self.ESADout_CUDriverInformation_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUDriverInformation_nsprefix_) else ''
            ESADout_CUDriverInformation_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUDriverInformation', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADout_CUCarrierType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ESADout_CUDriverInformation':
            obj_ = CarrierRepresentativeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUDriverInformation.append(obj_)
            obj_.original_tagname_ = 'ESADout_CUDriverInformation'
        super(ESADout_CUCarrierType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADout_CUCarrierType


class ESADout_CUBorderTransportType(CUTransportMeansType):
    """ESADout_CUBorderTransportType -- Т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    е
    с
    р
    е
    д
    с
    т
    в
    а
    н
    а
    г
    р
    а
    н
    и
    ц
    е
    /
    в
    н
    у
    т
    р
    и
    с
    т
    р
    а
    н
    ы
    TransportMeansQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    с
    р
    е
    д
    с
    т
    в
    MethodTransport -- С
    п
    о
    с
    о
    б
    т
    р
    а
    н
    с
    п
    о
    р
    т
    и
    р
    о
    в
    к
    и
    т
    о
    в
    а
    р
    о
    в
    п
    р
    и
    п
    е
    р
    е
    м
    е
    щ
    е
    н
    и
    и
    п
    о
    л
    и
    н
    и
    я
    м
    э
    л
    е
    к
    т
    р
    о
    п
    е
    р
    е
    д
    а
    ч
    и
    и
    л
    и
    т
    р
    у
    б
    о
    п
    р
    о
    в
    о
    д
    н
    ы
    м
    т
    р
    а
    н
    с
    п
    о
    р
    т
    о
    м
    : 1 -
    г
    а
    з
    о
    п
    р
    о
    в
    о
    д
    ; 2 -
    н
    е
    ф
    т
    е
    п
    р
    о
    в
    о
    д
    ; 3 -
    н
    е
    ф
    т
    е
    п
    р
    о
    д
    у
    к
    т
    о
    п
    р
    о
    в
    о
    д
    ; 4 -
    л
    и
    н
    и
    и
    э
    л
    е
    к
    т
    р
    о
    п
    е
    р
    е
    д
    а
    ч
    и
    NameObject -- Н
    а
    и
    м
    е
    н
    о
    в
    а
    н
    и
    е
    о
    б
    ъ
    е
    к
    т
    а
    ,
    н
    а
    к
    о
    т
    о
    р
    о
    м
    у
    с
    т
    а
    н
    о
    в
    л
    е
    н
    ы
    п
    р
    и
    б
    о
    р
    ы
    у
    ч
    е
    т
    а
    т
    о
    в
    а
    р
    о
    в
    ,
    п
    е
    р
    е
    м
    е
    щ
    а
    е
    м
    ы
    х
    п
    о
    л
    и
    н
    и
    я
    м
    э
    л
    е
    к
    т
    р
    о
    п
    е
    р
    е
    д
    а
    ч
    и
    и
    л
    и
    т
    р
    у
    б
    о
    п
    р
    о
    в
    о
    д
    н
    ы
    м
    т
    р
    а
    н
    с
    п
    о
    р
    т
    о
    м
    RUTransportMeans -- О
    п
    и
    с
    а
    н
    и
    е
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    о
    г
    о
    с
    р
    е
    д
    с
    т
    в
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = CUTransportMeansType
    def __init__(self, TransportModeCode=None, TransportNationalityCode=None, TransportMeansQuantity=None, MethodTransport=None, NameObject=None, RUTransportMeans=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUBorderTransportType"), self).__init__(TransportModeCode, TransportNationalityCode,  **kwargs_)
        self.TransportMeansQuantity = TransportMeansQuantity
        self.validate_Count5Type(self.TransportMeansQuantity)
        self.TransportMeansQuantity_nsprefix_ = "clt_ru"
        self.MethodTransport = MethodTransport
        self.validate_Numeric1Type(self.MethodTransport)
        self.MethodTransport_nsprefix_ = "clt_ru"
        if NameObject is None:
            self.NameObject = []
        else:
            self.NameObject = NameObject
        self.NameObject_nsprefix_ = "clt_ru"
        if RUTransportMeans is None:
            self.RUTransportMeans = []
        else:
            self.RUTransportMeans = RUTransportMeans
        self.RUTransportMeans_nsprefix_ = "cat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUBorderTransportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUBorderTransportType.subclass:
            return ESADout_CUBorderTransportType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUBorderTransportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransportMeansQuantity(self):
        return self.TransportMeansQuantity
    def set_TransportMeansQuantity(self, TransportMeansQuantity):
        self.TransportMeansQuantity = TransportMeansQuantity
    def get_MethodTransport(self):
        return self.MethodTransport
    def set_MethodTransport(self, MethodTransport):
        self.MethodTransport = MethodTransport
    def get_NameObject(self):
        return self.NameObject
    def set_NameObject(self, NameObject):
        self.NameObject = NameObject
    def add_NameObject(self, value):
        self.NameObject.append(value)
    def insert_NameObject_at(self, index, value):
        self.NameObject.insert(index, value)
    def replace_NameObject_at(self, index, value):
        self.NameObject[index] = value
    def get_RUTransportMeans(self):
        return self.RUTransportMeans
    def set_RUTransportMeans(self, RUTransportMeans):
        self.RUTransportMeans = RUTransportMeans
    def add_RUTransportMeans(self, value):
        self.RUTransportMeans.append(value)
    def insert_RUTransportMeans_at(self, index, value):
        self.RUTransportMeans.insert(index, value)
    def replace_RUTransportMeans_at(self, index, value):
        self.RUTransportMeans[index] = value
    def validate_Count5Type(self, value):
        result = True
        # Validate type Count5Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Count5Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Numeric1Type(self, value):
        result = True
        # Validate type Numeric1Type, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Numeric1Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText250Type(self, value):
        result = True
        # Validate type FreeText250Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 250:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText250Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText250Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.TransportMeansQuantity is not None or
            self.MethodTransport is not None or
            self.NameObject or
            self.RUTransportMeans or
            super(ESADout_CUBorderTransportType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADout_CUBorderTransportType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUBorderTransportType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUBorderTransportType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUBorderTransportType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUBorderTransportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUBorderTransportType'):
        super(ESADout_CUBorderTransportType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUBorderTransportType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0" ', name_='ESADout_CUBorderTransportType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUBorderTransportType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransportMeansQuantity is not None:
            namespaceprefix_ = self.TransportMeansQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportMeansQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportMeansQuantity>%s</%sTransportMeansQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.TransportMeansQuantity, input_name='TransportMeansQuantity'), namespaceprefix_ , eol_))
        if self.MethodTransport is not None:
            namespaceprefix_ = self.MethodTransport_nsprefix_ + ':' if (UseCapturedNS_ and self.MethodTransport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMethodTransport>%s</%sMethodTransport>%s' % (namespaceprefix_ , self.gds_format_decimal(self.MethodTransport, input_name='MethodTransport'), namespaceprefix_ , eol_))
        for NameObject_ in self.NameObject:
            namespaceprefix_ = self.NameObject_nsprefix_ + ':' if (UseCapturedNS_ and self.NameObject_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameObject>%s</%sNameObject>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(NameObject_), input_name='NameObject')), namespaceprefix_ , eol_))
        for RUTransportMeans_ in self.RUTransportMeans:
            namespaceprefix_ = self.RUTransportMeans_nsprefix_ + ':' if (UseCapturedNS_ and self.RUTransportMeans_nsprefix_) else ''
            RUTransportMeans_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RUTransportMeans', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ESADout_CUBorderTransportType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransportMeansQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TransportMeansQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'TransportMeansQuantity')
            self.TransportMeansQuantity = ival_
            self.TransportMeansQuantity_nsprefix_ = child_.prefix
            # validate type Count5Type
            self.validate_Count5Type(self.TransportMeansQuantity)
        elif nodeName_ == 'MethodTransport' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'MethodTransport')
            fval_ = self.gds_validate_decimal(fval_, node, 'MethodTransport')
            self.MethodTransport = fval_
            self.MethodTransport_nsprefix_ = child_.prefix
            # validate type Numeric1Type
            self.validate_Numeric1Type(self.MethodTransport)
        elif nodeName_ == 'NameObject':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NameObject')
            value_ = self.gds_validate_string(value_, node, 'NameObject')
            self.NameObject.append(value_)
            self.NameObject_nsprefix_ = child_.prefix
            # validate type FreeText250Type
            self.validate_FreeText250Type(self.NameObject[-1])
        elif nodeName_ == 'RUTransportMeans':
            class_obj_ = self.get_class_obj_(child_, TransportMeansBaseType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RUTransportMeans.append(obj_)
            obj_.original_tagname_ = 'RUTransportMeans'
        super(ESADout_CUBorderTransportType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADout_CUBorderTransportType


class CustomsPaymentType(ESADout_CUCustomsPaymentType):
    """CustomsPaymentType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    у
    п
    л
    а
    т
    е
    .
    Г
    р
    .
    В
    PaymentWayCode -- С
    п
    о
    с
    о
    б
    у
    п
    л
    а
    т
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    п
    о
    с
    о
    б
    о
    в
    у
    п
    л
    а
    т
    ы
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    и
    и
    н
    ы
    х
    п
    л
    а
    т
    е
    ж
    е
    й
    ,
    в
    з
    и
    м
    а
    н
    и
    е
    к
    о
    т
    о
    р
    ы
    х
    в
    о
    з
    л
    о
    ж
    е
    н
    о
    н
    а
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    е
    о
    р
    г
    а
    н
    ы
    PaymentDocument -- П
    л
    а
    т
    е
    ж
    н
    ы
    й
    д
    о
    к
    у
    м
    е
    н
    т
    UITN -- Н
    а
    л
    о
    г
    о
    в
    ы
    й
    и
    л
    и
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    ,
    п
    р
    и
    с
    в
    о
    е
    н
    н
    ы
    й
    и
    н
    о
    с
    т
    р
    а
    н
    н
    о
    й
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    в
    с
    т
    р
    а
    н
    е
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    RFOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    о
    с
    с
    и
    й
    с
    к
    о
    й
    Ф
    е
    д
    е
    р
    а
    ц
    и
    и
    RKOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    К
    а
    з
    а
    х
    с
    т
    а
    н
    RBOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    Б
    е
    л
    а
    р
    у
    с
    ь
    RAOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    А
    р
    м
    е
    н
    и
    я
    KGOrganizationFeatures -- С
    в
    е
    д
    е
    н
    и
    я
    о
    б
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    .
    О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    К
    ы
    р
    г
    ы
    з
    с
    к
    о
    й
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    и
    PersonId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    IdentityCard -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    о
    к
    у
    м
    е
    н
    т
    е
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    м
    л
    и
    ч
    н
    о
    с
    т
    ь
    ф
    и
    з
    и
    ч
    е
    с
    к
    о
    г
    о
    л
    и
    ц
    а
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = ESADout_CUCustomsPaymentType
    def __init__(self, PaymentModeCode=None, PaymentAmount=None, PaymentCurrencyCode=None, CurrencyRate=None, PaymentWayCode=None, PaymentDocument=None, UITN=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, PersonId=None, IdentityCard=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("CustomsPaymentType"), self).__init__(PaymentModeCode, PaymentAmount, PaymentCurrencyCode, CurrencyRate,  **kwargs_)
        self.PaymentWayCode = PaymentWayCode
        self.validate_Code2Type(self.PaymentWayCode)
        self.PaymentWayCode_nsprefix_ = "clt_ru"
        self.PaymentDocument = PaymentDocument
        self.PaymentDocument_nsprefix_ = "ESADout_CU"
        self.UITN = UITN
        self.UITN_nsprefix_ = "ESADout_CU"
        self.RFOrganizationFeatures = RFOrganizationFeatures
        self.RFOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RKOrganizationFeatures = RKOrganizationFeatures
        self.RKOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RBOrganizationFeatures = RBOrganizationFeatures
        self.RBOrganizationFeatures_nsprefix_ = "cat_ru"
        self.RAOrganizationFeatures = RAOrganizationFeatures
        self.RAOrganizationFeatures_nsprefix_ = "cat_ru"
        self.KGOrganizationFeatures = KGOrganizationFeatures
        self.KGOrganizationFeatures_nsprefix_ = "cat_ru"
        self.PersonId = PersonId
        self.validate_PersonIdType(self.PersonId)
        self.PersonId_nsprefix_ = "RUSclt_ru"
        self.IdentityCard = IdentityCard
        self.IdentityCard_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CustomsPaymentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CustomsPaymentType.subclass:
            return CustomsPaymentType.subclass(*args_, **kwargs_)
        else:
            return CustomsPaymentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PaymentWayCode(self):
        return self.PaymentWayCode
    def set_PaymentWayCode(self, PaymentWayCode):
        self.PaymentWayCode = PaymentWayCode
    def get_PaymentDocument(self):
        return self.PaymentDocument
    def set_PaymentDocument(self, PaymentDocument):
        self.PaymentDocument = PaymentDocument
    def get_UITN(self):
        return self.UITN
    def set_UITN(self, UITN):
        self.UITN = UITN
    def get_RFOrganizationFeatures(self):
        return self.RFOrganizationFeatures
    def set_RFOrganizationFeatures(self, RFOrganizationFeatures):
        self.RFOrganizationFeatures = RFOrganizationFeatures
    def get_RKOrganizationFeatures(self):
        return self.RKOrganizationFeatures
    def set_RKOrganizationFeatures(self, RKOrganizationFeatures):
        self.RKOrganizationFeatures = RKOrganizationFeatures
    def get_RBOrganizationFeatures(self):
        return self.RBOrganizationFeatures
    def set_RBOrganizationFeatures(self, RBOrganizationFeatures):
        self.RBOrganizationFeatures = RBOrganizationFeatures
    def get_RAOrganizationFeatures(self):
        return self.RAOrganizationFeatures
    def set_RAOrganizationFeatures(self, RAOrganizationFeatures):
        self.RAOrganizationFeatures = RAOrganizationFeatures
    def get_KGOrganizationFeatures(self):
        return self.KGOrganizationFeatures
    def set_KGOrganizationFeatures(self, KGOrganizationFeatures):
        self.KGOrganizationFeatures = KGOrganizationFeatures
    def get_PersonId(self):
        return self.PersonId
    def set_PersonId(self, PersonId):
        self.PersonId = PersonId
    def get_IdentityCard(self):
        return self.IdentityCard
    def set_IdentityCard(self, IdentityCard):
        self.IdentityCard = IdentityCard
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_PersonIdType(self, value):
        result = True
        # Validate type PersonIdType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on PersonIdType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on PersonIdType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PaymentWayCode is not None or
            self.PaymentDocument is not None or
            self.UITN is not None or
            self.RFOrganizationFeatures is not None or
            self.RKOrganizationFeatures is not None or
            self.RBOrganizationFeatures is not None or
            self.RAOrganizationFeatures is not None or
            self.KGOrganizationFeatures is not None or
            self.PersonId is not None or
            self.IdentityCard is not None or
            super(CustomsPaymentType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='CustomsPaymentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CustomsPaymentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CustomsPaymentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsPaymentType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CustomsPaymentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CustomsPaymentType'):
        super(CustomsPaymentType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CustomsPaymentType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cat_ru="urn:customs.ru:CommonAggregateTypes:5.22.0"  xmlns:RUSclt_ru="urn:customs.ru:RUSCommonLeafTypes:5.21.0"  xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='CustomsPaymentType', fromsubclass_=False, pretty_print=True):
        super(CustomsPaymentType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PaymentWayCode is not None:
            namespaceprefix_ = self.PaymentWayCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentWayCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentWayCode>%s</%sPaymentWayCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PaymentWayCode), input_name='PaymentWayCode')), namespaceprefix_ , eol_))
        if self.PaymentDocument is not None:
            namespaceprefix_ = self.PaymentDocument_nsprefix_ + ':' if (UseCapturedNS_ and self.PaymentDocument_nsprefix_) else ''
            self.PaymentDocument.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PaymentDocument', pretty_print=pretty_print)
        if self.UITN is not None:
            namespaceprefix_ = self.UITN_nsprefix_ + ':' if (UseCapturedNS_ and self.UITN_nsprefix_) else ''
            self.UITN.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UITN', pretty_print=pretty_print)
        if self.RFOrganizationFeatures is not None:
            namespaceprefix_ = self.RFOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RFOrganizationFeatures_nsprefix_) else ''
            self.RFOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFOrganizationFeatures', pretty_print=pretty_print)
        if self.RKOrganizationFeatures is not None:
            namespaceprefix_ = self.RKOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RKOrganizationFeatures_nsprefix_) else ''
            self.RKOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RKOrganizationFeatures', pretty_print=pretty_print)
        if self.RBOrganizationFeatures is not None:
            namespaceprefix_ = self.RBOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RBOrganizationFeatures_nsprefix_) else ''
            self.RBOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RBOrganizationFeatures', pretty_print=pretty_print)
        if self.RAOrganizationFeatures is not None:
            namespaceprefix_ = self.RAOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.RAOrganizationFeatures_nsprefix_) else ''
            self.RAOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RAOrganizationFeatures', pretty_print=pretty_print)
        if self.KGOrganizationFeatures is not None:
            namespaceprefix_ = self.KGOrganizationFeatures_nsprefix_ + ':' if (UseCapturedNS_ and self.KGOrganizationFeatures_nsprefix_) else ''
            self.KGOrganizationFeatures.export(outfile, level, namespaceprefix_, namespacedef_='', name_='KGOrganizationFeatures', pretty_print=pretty_print)
        if self.PersonId is not None:
            namespaceprefix_ = self.PersonId_nsprefix_ + ':' if (UseCapturedNS_ and self.PersonId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPersonId>%s</%sPersonId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PersonId), input_name='PersonId')), namespaceprefix_ , eol_))
        if self.IdentityCard is not None:
            namespaceprefix_ = self.IdentityCard_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityCard_nsprefix_) else ''
            self.IdentityCard.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentityCard', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CustomsPaymentType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PaymentWayCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PaymentWayCode')
            value_ = self.gds_validate_string(value_, node, 'PaymentWayCode')
            self.PaymentWayCode = value_
            self.PaymentWayCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.PaymentWayCode)
        elif nodeName_ == 'PaymentDocument':
            obj_ = PaymentDocumentType30.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.PaymentDocument = obj_
            obj_.original_tagname_ = 'PaymentDocument'
        elif nodeName_ == 'UITN':
            obj_ = UITN40Type20.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UITN = obj_
            obj_.original_tagname_ = 'UITN'
        elif nodeName_ == 'RFOrganizationFeatures':
            obj_ = RFOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RFOrganizationFeatures'
        elif nodeName_ == 'RKOrganizationFeatures':
            obj_ = RKOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RKOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RKOrganizationFeatures'
        elif nodeName_ == 'RBOrganizationFeatures':
            obj_ = RBOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RBOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RBOrganizationFeatures'
        elif nodeName_ == 'RAOrganizationFeatures':
            obj_ = RAOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RAOrganizationFeatures = obj_
            obj_.original_tagname_ = 'RAOrganizationFeatures'
        elif nodeName_ == 'KGOrganizationFeatures':
            obj_ = KGOrganizationFeaturesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.KGOrganizationFeatures = obj_
            obj_.original_tagname_ = 'KGOrganizationFeatures'
        elif nodeName_ == 'PersonId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PersonId')
            value_ = self.gds_validate_string(value_, node, 'PersonId')
            self.PersonId = value_
            self.PersonId_nsprefix_ = child_.prefix
            # validate type PersonIdType
            self.validate_PersonIdType(self.PersonId)
        elif nodeName_ == 'IdentityCard':
            class_obj_ = self.get_class_obj_(child_, RUIdentityCardType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.IdentityCard = obj_
            obj_.original_tagname_ = 'IdentityCard'
        super(CustomsPaymentType, self)._buildChildren(child_, node, nodeName_, True)
# end class CustomsPaymentType


class CUWarehousePlaceType29(DocumentBaseType):
    """CUWarehousePlaceType29 -- С
    в
    е
    д
    е
    н
    и
    я
    о
    м
    е
    с
    т
    о
    н
    а
    х
    о
    ж
    д
    е
    н
    и
    и
    т
    о
    в
    а
    р
    о
    в
    :
    р
    а
    з
    р
    е
    ш
    е
    н
    и
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    н
    а
    в
    р
    е
    м
    е
    н
    н
    о
    е
    х
    р
    а
    н
    е
    н
    и
    е
    т
    о
    в
    а
    р
    о
    в
    ,
    с
    к
    л
    а
    д
    в
    р
    е
    м
    е
    н
    н
    о
    г
    о
    х
    р
    а
    н
    е
    н
    и
    я
    ,
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    с
    к
    л
    а
    д
    ,
    с
    в
    о
    б
    о
    д
    н
    ы
    й
    с
    к
    л
    а
    д
    ,
    м
    а
    г
    а
    з
    и
    н
    б
    е
    с
    п
    о
    ш
    л
    и
    н
    н
    о
    й
    т
    о
    р
    г
    о
    в
    л
    и
    ,
    п
    о
    м
    е
    щ
    е
    н
    и
    е
    ,
    о
    т
    к
    р
    ы
    т
    ы
    е
    п
    л
    о
    щ
    а
    д
    к
    и
    и
    и
    н
    ы
    е
    т
    е
    р
    р
    и
    т
    о
    р
    и
    и
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    о
    г
    о
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    о
    г
    о
    о
    п
    е
    р
    а
    т
    о
    р
    а
    ,
    с
    к
    л
    а
    д
    х
    р
    а
    н
    е
    н
    и
    я
    с
    о
    б
    с
    т
    в
    е
    н
    н
    ы
    х
    т
    о
    в
    а
    р
    о
    в
    ,
    с
    к
    л
    а
    д
    п
    о
    л
    у
    ч
    а
    т
    е
    л
    я
    т
    о
    в
    а
    р
    о
    в
    PresentedDocumentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    м
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    DocStartDate -- Д
    а
    т
    а
    н
    а
    ч
    а
    л
    а
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    DocValidityDate -- Д
    а
    т
    а
    о
    к
    о
    н
    ч
    а
    н
    и
    я
    с
    р
    о
    к
    а
    ,
    в
    т
    е
    ч
    е
    н
    и
    е
    к
    о
    т
    о
    р
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    и
    м
    е
    е
    т
    с
    и
    л
    у
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = DocumentBaseType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, PresentedDocumentModeCode=None, DocStartDate=None, DocValidityDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("CUWarehousePlaceType29"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate,  **kwargs_)
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
        self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        self.PresentedDocumentModeCode_nsprefix_ = "clt_ru"
        if isinstance(DocStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocStartDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocStartDate
        self.DocStartDate = initvalue_
        self.DocStartDate_nsprefix_ = "clt_ru"
        if isinstance(DocValidityDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DocValidityDate, '%Y-%m-%d').date()
        else:
            initvalue_ = DocValidityDate
        self.DocValidityDate = initvalue_
        self.DocValidityDate_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUWarehousePlaceType29)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUWarehousePlaceType29.subclass:
            return CUWarehousePlaceType29.subclass(*args_, **kwargs_)
        else:
            return CUWarehousePlaceType29(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PresentedDocumentModeCode(self):
        return self.PresentedDocumentModeCode
    def set_PresentedDocumentModeCode(self, PresentedDocumentModeCode):
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
    def get_DocStartDate(self):
        return self.DocStartDate
    def set_DocStartDate(self, DocStartDate):
        self.DocStartDate = DocStartDate
    def get_DocValidityDate(self):
        return self.DocValidityDate
    def set_DocValidityDate(self, DocValidityDate):
        self.DocValidityDate = DocValidityDate
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def has__content(self):
        if (
            self.PresentedDocumentModeCode is not None or
            self.DocStartDate is not None or
            self.DocValidityDate is not None or
            super(CUWarehousePlaceType29, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUWarehousePlaceType29', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUWarehousePlaceType29')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CUWarehousePlaceType29':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUWarehousePlaceType29')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CUWarehousePlaceType29', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CUWarehousePlaceType29'):
        super(CUWarehousePlaceType29, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CUWarehousePlaceType29')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='CUWarehousePlaceType29', fromsubclass_=False, pretty_print=True):
        super(CUWarehousePlaceType29, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PresentedDocumentModeCode is not None:
            namespaceprefix_ = self.PresentedDocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PresentedDocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPresentedDocumentModeCode>%s</%sPresentedDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PresentedDocumentModeCode), input_name='PresentedDocumentModeCode')), namespaceprefix_ , eol_))
        if self.DocStartDate is not None:
            namespaceprefix_ = self.DocStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocStartDate>%s</%sDocStartDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocStartDate, input_name='DocStartDate'), namespaceprefix_ , eol_))
        if self.DocValidityDate is not None:
            namespaceprefix_ = self.DocValidityDate_nsprefix_ + ':' if (UseCapturedNS_ and self.DocValidityDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocValidityDate>%s</%sDocValidityDate>%s' % (namespaceprefix_ , self.gds_format_date(self.DocValidityDate, input_name='DocValidityDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(CUWarehousePlaceType29, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PresentedDocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PresentedDocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PresentedDocumentModeCode')
            self.PresentedDocumentModeCode = value_
            self.PresentedDocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        elif nodeName_ == 'DocStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocStartDate = dval_
            self.DocStartDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocStartDate)
        elif nodeName_ == 'DocValidityDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DocValidityDate = dval_
            self.DocValidityDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.DocValidityDate)
        super(CUWarehousePlaceType29, self)._buildChildren(child_, node, nodeName_, True)
# end class CUWarehousePlaceType29


class ESADout_CUType(BaseDocType):
    """ESADout_CUType -- «
    Э
    л
    е
    к
    т
    р
    о
    н
    н
    а
    я
    к
    о
    п
    и
    я
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    н
    а
    т
    о
    в
    а
    р
    ы
    и
    т
    р
    а
    н
    з
    и
    т
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    »
    DocumentModeID -- И
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    в
    и
    д
    а
    д
    о
    к
    у
    м
    е
    н
    т
    а
    . (
    К
    о
    д
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    А
    л
    ь
    б
    о
    м
    е
    ф
    о
    р
    м
    а
    т
    о
    в
    д
    л
    я
    Р
    Ф
    )
    EECEDocHeaderAddInfo -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    и
    е
    р
    е
    к
    в
    и
    з
    и
    т
    ы
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    (
    с
    в
    е
    д
    е
    н
    и
    й
    )
    CustomsProcedure -- И
    М
    ,
    Э
    К
    ,
    Т
    Т
    .
    П
    е
    р
    в
    ы
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    г
    р
    .1
    Д
    Т
    /
    Т
    Д
    CustomsModeCode -- К
    о
    д
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    п
    р
    о
    ц
    е
    д
    у
    р
    ы
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    х
    п
    р
    о
    ц
    е
    д
    у
    р
    .
    Г
    р
    . 1.
    В
    т
    о
    р
    о
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    Д
    Т
    .
    П
    е
    р
    в
    ы
    й
    э
    л
    е
    м
    е
    н
    т
    п
    е
    р
    в
    о
    г
    о
    п
    о
    д
    р
    а
    з
    д
    е
    л
    а
    г
    р
    . 37/
    «
    00
    »
    –
    д
    л
    я
    п
    р
    и
    п
    а
    с
    о
    в
    TransitFeature -- О
    с
    о
    б
    е
    н
    н
    о
    с
    т
    ь
    п
    о
    м
    е
    щ
    е
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    п
    о
    д
    п
    р
    о
    ц
    е
    д
    у
    р
    у
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    т
    р
    а
    н
    з
    и
    т
    а
    .
    Г
    р
    . 1.
    В
    т
    о
    р
    о
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    Т
    Д
    .
    М
    П
    О
    -
    м
    е
    ж
    д
    у
    н
    а
    р
    о
    д
    н
    ы
    е
    п
    о
    ч
    т
    о
    в
    ы
    е
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    я
    ,
    Ф
    Л
    -
    т
    о
    в
    а
    р
    ы
    и
    (
    и
    л
    и
    )
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    е
    с
    р
    е
    д
    с
    т
    в
    а
    д
    л
    я
    л
    и
    ч
    н
    о
    г
    о
    п
    о
    л
    ь
    з
    о
    в
    а
    н
    и
    я
    ,
    Ч
    М
    –
    и
    н
    о
    с
    т
    р
    а
    н
    н
    ы
    е
    т
    о
    в
    а
    р
    ы
    ,
    п
    р
    е
    д
    н
    а
    з
    н
    а
    ч
    е
    н
    н
    ы
    е
    д
    л
    я
    и
    с
    п
    о
    л
    ь
    з
    о
    в
    а
    н
    и
    я
    п
    р
    и
    о
    р
    г
    а
    н
    и
    з
    а
    ц
    и
    и
    и
    п
    р
    о
    в
    е
    д
    е
    н
    и
    и
    ч
    е
    м
    п
    и
    о
    н
    а
    т
    а
    м
    и
    р
    а
    п
    о
    ф
    у
    т
    б
    о
    л
    у
    FIFA 2018
    г
    о
    д
    а
    и
    К
    у
    б
    к
    а
    к
    о
    н
    ф
    е
    д
    е
    р
    а
    ц
    и
    й
    FIFA 2017
    г
    о
    д
    а
    ,
    ч
    е
    м
    п
    и
    о
    н
    а
    т
    а
    Е
    в
    р
    о
    п
    ы
    п
    о
    ф
    у
    т
    б
    о
    л
    у
    UEFA 2020
    г
    о
    д
    а
    и
    л
    и
    п
    р
    и
    п
    р
    о
    в
    е
    д
    е
    н
    и
    и
    т
    р
    е
    н
    и
    р
    о
    в
    о
    ч
    н
    ы
    х
    м
    е
    р
    о
    п
    р
    и
    я
    т
    и
    й
    п
    о
    п
    о
    д
    г
    о
    т
    о
    в
    к
    е
    к
    н
    и
    м
    .
    TransitDirectionCode --
    И
    М
    ,
    Э
    К
    ,
    Т
    Р
    ,
    В
    Т
    ,
    Т
    С
    .
    Г
    р
    . 1
    Т
    Д
    .
    Т
    р
    е
    т
    и
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    ElectronicDocumentSign -- П
    р
    и
    з
    н
    а
    к
    и
    с
    п
    о
    л
    ь
    з
    о
    в
    а
    н
    и
    я
    Д
    Т
    в
    ф
    о
    р
    м
    е
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    .
    Э
    Д
    .
    Г
    р
    . 1
    Д
    Т
    .
    Т
    р
    е
    т
    и
    й
    п
    о
    д
    р
    а
    з
    д
    е
    л
    DocUsageCode -- К
    о
    д
    и
    с
    п
    о
    л
    ь
    з
    о
    в
    а
    н
    и
    я
    т
    р
    а
    н
    с
    п
    о
    р
    т
    н
    ы
    х
    (
    п
    е
    р
    е
    в
    о
    з
    о
    ч
    н
    ы
    х
    ),
    к
    о
    м
    м
    е
    р
    ч
    е
    с
    к
    и
    х
    и
    (
    и
    л
    и
    )
    и
    н
    ы
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    в
    к
    а
    ч
    е
    с
    т
    в
    е
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    .
    С
    Д
    .
    DeclarationKind -- К
    о
    д
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    п
    о
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    у
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    е
    й
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    я
    т
    о
    в
    а
    р
    о
    в
    .
    Г
    р
    .7
    Д
    Т
    SubsoilSign -- П
    р
    и
    з
    н
    а
    к
    н
    е
    д
    р
    о
    п
    о
    л
    ь
    з
    о
    в
    а
    т
    е
    л
    я
    .
    Д
    л
    я
    Р
    К
    SealNumber -- Н
    о
    м
    е
    р
    (
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    )
    п
    л
    о
    м
    б
    и
    р
    а
    т
    о
    р
    а
    SealQuantity -- К
    о
    л
    и
    ч
    е
    с
    т
    в
    о
    с
    р
    е
    д
    с
    т
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    ,
    п
    р
    и
    м
    е
    н
    я
    е
    м
    ы
    х
    и
    л
    и
    п
    р
    и
    з
    н
    а
    в
    а
    е
    м
    ы
    х
    т
    а
    м
    о
    ж
    е
    н
    н
    ы
    м
    и
    о
    р
    г
    а
    н
    а
    м
    и
    SealId -- У
    н
    и
    к
    а
    л
    ь
    н
    ы
    й
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    о
    н
    н
    ы
    й
    н
    о
    м
    е
    р
    п
    л
    о
    м
    б
    ы
    SealDescriptionText -- О
    п
    и
    с
    а
    н
    и
    е
    о
    т
    л
    и
    ч
    и
    т
    е
    л
    ь
    н
    ы
    х
    п
    р
    и
    з
    н
    а
    к
    о
    в
    с
    р
    е
    д
    с
    т
    в
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    ц
    и
    и
    RecipientCountryCode -- К
    о
    д
    с
    т
    р
    а
    н
    ы
    ,
    в
    с
    о
    о
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    с
    т
    р
    а
    н
    м
    и
    р
    а
    ,
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    о
    р
    г
    а
    н
    а
    ,
    к
    о
    т
    о
    р
    о
    м
    у
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    т
    с
    я
    д
    о
    к
    у
    м
    е
    н
    т
    MovementCode -- К
    о
    д
    ц
    е
    л
    и
    п
    е
    р
    е
    м
    е
    щ
    е
    н
    и
    я
    в
    Т
    Д
    ExecutionPlace -- М
    е
    с
    т
    о
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    я
    Т
    Д
    RailwayStationCode -- К
    о
    д
    ж
    /
    д
    с
    т
    а
    н
    ц
    и
    и
    .
    Г
    р
    .50
    Т
    Д
    RailwayStampDate -- К
    а
    л
    е
    н
    д
    а
    р
    н
    ы
    й
    ш
    т
    е
    м
    п
    е
    л
    ь
    ж
    /
    д
    с
    т
    а
    н
    ц
    и
    и
    -
    д
    а
    т
    а
    п
    р
    о
    с
    т
    а
    в
    л
    е
    н
    и
    я
    RegNumberDoc -- И
    с
    х
    о
    д
    я
    щ
    и
    й
    н
    о
    м
    е
    р
    р
    е
    г
    и
    с
    т
    р
    а
    ц
    и
    и
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    с
    и
    с
    т
    е
    м
    о
    й
    (
    р
    е
    г
    л
    а
    м
    е
    н
    т
    о
    м
    )
    у
    ч
    е
    т
    а
    и
    с
    х
    о
    д
    я
    щ
    и
    х
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    д
    е
    к
    л
    а
    р
    а
    н
    т
    а
    и
    л
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    г
    о
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    я
    в
    Р
    е
    с
    п
    у
    б
    л
    и
    к
    е
    Б
    е
    л
    а
    р
    у
    с
    ь
    SecurityLabelCode -- К
    о
    д
    з
    а
    щ
    и
    т
    н
    о
    й
    н
    а
    к
    л
    е
    й
    к
    и
    д
    л
    я
    Р
    К
    ESADout_CUGoodsShipment -- С
    в
    е
    д
    е
    н
    и
    я
    о
    т
    о
    в
    а
    р
    н
    о
    й
    п
    а
    р
    т
    и
    и
    RBTechMarK -- Т
    е
    х
    н
    и
    ч
    е
    с
    к
    и
    е
    о
    т
    м
    е
    т
    к
    и
    д
    л
    я
    Р
    Б
    /
    С
    в
    е
    д
    е
    н
    и
    я
    о
    к
    о
    р
    р
    е
    к
    т
    и
    р
    о
    в
    к
    е
    (
    и
    з
    м
    е
    н
    е
    н
    и
    и
    )
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    й
    д
    е
    к
    л
    а
    р
    а
    ц
    и
    и
    FilledPerson -- С
    в
    е
    д
    е
    н
    и
    я
    о
    л
    и
    ц
    е
    ,
    з
    а
    п
    о
    л
    н
    и
    в
    ш
    е
    м
    д
    о
    к
    у
    м
    е
    н
    т
    SignCertifPerson -- С
    в
    е
    д
    е
    н
    и
    я
    и
    з
    с
    е
    р
    т
    и
    ф
    и
    к
    а
    т
    а
    э
    л
    е
    к
    т
    р
    о
    н
    н
    о
    й
    п
    о
    д
    п
    и
    с
    и
    CUESADCustomsRepresentative -- Т
    а
    м
    о
    ж
    е
    н
    н
    ы
    й
    п
    р
    е
    д
    с
    т
    а
    в
    и
    т
    е
    л
    ь
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = BaseDocType
    def __init__(self, DocumentID=None, RefDocumentID=None, INNSign=None, MCD_ID=None, DocumentModeID='1006107E', EECEDocHeaderAddInfo=None, CustomsProcedure=None, CustomsModeCode=None, TransitFeature=None, TransitDirectionCode=None, ElectronicDocumentSign=None, DocUsageCode=None, DeclarationKind=None, SubsoilSign=None, SealNumber=None, SealQuantity=None, SealId=None, SealDescriptionText=None, RecipientCountryCode=None, MovementCode=None, ExecutionPlace=None, RailwayStationCode=None, RailwayStampDate=None, RegNumberDoc=None, SecurityLabelCode=None, ESADout_CUGoodsShipment=None, RBTechMarK=None, FilledPerson=None, SignCertifPerson=None, CUESADCustomsRepresentative=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "ESADout_CU"
        super(globals().get("ESADout_CUType"), self).__init__(DocumentID, RefDocumentID, INNSign, MCD_ID,  **kwargs_)
        self.DocumentModeID = _cast(None, DocumentModeID)
        self.DocumentModeID_nsprefix_ = None
        self.EECEDocHeaderAddInfo = EECEDocHeaderAddInfo
        self.EECEDocHeaderAddInfo_nsprefix_ = "RUScat_ru"
        self.CustomsProcedure = CustomsProcedure
        self.validate_CUCustomsProcedureType(self.CustomsProcedure)
        self.CustomsProcedure_nsprefix_ = "clt_ru"
        self.CustomsModeCode = CustomsModeCode
        self.validate_CustomsModeCodeType(self.CustomsModeCode)
        self.CustomsModeCode_nsprefix_ = "cltESAD_cu"
        self.TransitFeature = TransitFeature
        self.validate_CodeVariable3Type(self.TransitFeature)
        self.TransitFeature_nsprefix_ = "clt_ru"
        self.TransitDirectionCode = TransitDirectionCode
        self.validate_TransitDirectionCodeType(self.TransitDirectionCode)
        self.TransitDirectionCode_nsprefix_ = "clt_ru"
        self.ElectronicDocumentSign = ElectronicDocumentSign
        self.validate_Code2Type(self.ElectronicDocumentSign)
        self.ElectronicDocumentSign_nsprefix_ = "clt_ru"
        self.DocUsageCode = DocUsageCode
        self.validate_CodeVariable3Type(self.DocUsageCode)
        self.DocUsageCode_nsprefix_ = "clt_ru"
        self.DeclarationKind = DeclarationKind
        self.validate_CustomsDeclarationKindType(self.DeclarationKind)
        self.DeclarationKind_nsprefix_ = "cltESAD_cu"
        self.SubsoilSign = SubsoilSign
        self.validate_LetterIndicatorType(self.SubsoilSign)
        self.SubsoilSign_nsprefix_ = "clt_ru"
        if SealNumber is None:
            self.SealNumber = []
        else:
            self.SealNumber = SealNumber
        self.SealNumber_nsprefix_ = "clt_ru"
        self.SealQuantity = SealQuantity
        self.validate_Quantity3Type(self.SealQuantity)
        self.SealQuantity_nsprefix_ = "clt_ru"
        if SealId is None:
            self.SealId = []
        else:
            self.SealId = SealId
        self.SealId_nsprefix_ = "clt_ru"
        if SealDescriptionText is None:
            self.SealDescriptionText = []
        else:
            self.SealDescriptionText = SealDescriptionText
        self.SealDescriptionText_nsprefix_ = "clt_ru"
        self.RecipientCountryCode = RecipientCountryCode
        self.validate_CountryA2CodeType(self.RecipientCountryCode)
        self.RecipientCountryCode_nsprefix_ = "clt_ru"
        self.MovementCode = MovementCode
        self.validate_Code2Type(self.MovementCode)
        self.MovementCode_nsprefix_ = "clt_ru"
        self.ExecutionPlace = ExecutionPlace
        self.validate_CityNameType(self.ExecutionPlace)
        self.ExecutionPlace_nsprefix_ = "clt_ru"
        self.RailwayStationCode = RailwayStationCode
        self.validate_RailwayStationCodeType(self.RailwayStationCode)
        self.RailwayStationCode_nsprefix_ = "clt_ru"
        if isinstance(RailwayStampDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RailwayStampDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RailwayStampDate
        self.RailwayStampDate = initvalue_
        self.RailwayStampDate_nsprefix_ = "clt_ru"
        self.RegNumberDoc = RegNumberDoc
        self.validate_DocumentNumberType(self.RegNumberDoc)
        self.RegNumberDoc_nsprefix_ = "clt_ru"
        self.SecurityLabelCode = SecurityLabelCode
        self.validate_Code6Type(self.SecurityLabelCode)
        self.SecurityLabelCode_nsprefix_ = "clt_ru"
        self.ESADout_CUGoodsShipment = ESADout_CUGoodsShipment
        self.ESADout_CUGoodsShipment_nsprefix_ = "ESADout_CU"
        self.RBTechMarK = RBTechMarK
        self.RBTechMarK_nsprefix_ = "ESADout_CU"
        self.FilledPerson = FilledPerson
        self.FilledPerson_nsprefix_ = "RUDECLcat"
        self.SignCertifPerson = SignCertifPerson
        self.SignCertifPerson_nsprefix_ = "RUDECLcat"
        self.CUESADCustomsRepresentative = CUESADCustomsRepresentative
        self.CUESADCustomsRepresentative_nsprefix_ = "RUDECLcat"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ESADout_CUType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ESADout_CUType.subclass:
            return ESADout_CUType.subclass(*args_, **kwargs_)
        else:
            return ESADout_CUType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_EECEDocHeaderAddInfo(self):
        return self.EECEDocHeaderAddInfo
    def set_EECEDocHeaderAddInfo(self, EECEDocHeaderAddInfo):
        self.EECEDocHeaderAddInfo = EECEDocHeaderAddInfo
    def get_CustomsProcedure(self):
        return self.CustomsProcedure
    def set_CustomsProcedure(self, CustomsProcedure):
        self.CustomsProcedure = CustomsProcedure
    def get_CustomsModeCode(self):
        return self.CustomsModeCode
    def set_CustomsModeCode(self, CustomsModeCode):
        self.CustomsModeCode = CustomsModeCode
    def get_TransitFeature(self):
        return self.TransitFeature
    def set_TransitFeature(self, TransitFeature):
        self.TransitFeature = TransitFeature
    def get_TransitDirectionCode(self):
        return self.TransitDirectionCode
    def set_TransitDirectionCode(self, TransitDirectionCode):
        self.TransitDirectionCode = TransitDirectionCode
    def get_ElectronicDocumentSign(self):
        return self.ElectronicDocumentSign
    def set_ElectronicDocumentSign(self, ElectronicDocumentSign):
        self.ElectronicDocumentSign = ElectronicDocumentSign
    def get_DocUsageCode(self):
        return self.DocUsageCode
    def set_DocUsageCode(self, DocUsageCode):
        self.DocUsageCode = DocUsageCode
    def get_DeclarationKind(self):
        return self.DeclarationKind
    def set_DeclarationKind(self, DeclarationKind):
        self.DeclarationKind = DeclarationKind
    def get_SubsoilSign(self):
        return self.SubsoilSign
    def set_SubsoilSign(self, SubsoilSign):
        self.SubsoilSign = SubsoilSign
    def get_SealNumber(self):
        return self.SealNumber
    def set_SealNumber(self, SealNumber):
        self.SealNumber = SealNumber
    def add_SealNumber(self, value):
        self.SealNumber.append(value)
    def insert_SealNumber_at(self, index, value):
        self.SealNumber.insert(index, value)
    def replace_SealNumber_at(self, index, value):
        self.SealNumber[index] = value
    def get_SealQuantity(self):
        return self.SealQuantity
    def set_SealQuantity(self, SealQuantity):
        self.SealQuantity = SealQuantity
    def get_SealId(self):
        return self.SealId
    def set_SealId(self, SealId):
        self.SealId = SealId
    def add_SealId(self, value):
        self.SealId.append(value)
    def insert_SealId_at(self, index, value):
        self.SealId.insert(index, value)
    def replace_SealId_at(self, index, value):
        self.SealId[index] = value
    def get_SealDescriptionText(self):
        return self.SealDescriptionText
    def set_SealDescriptionText(self, SealDescriptionText):
        self.SealDescriptionText = SealDescriptionText
    def add_SealDescriptionText(self, value):
        self.SealDescriptionText.append(value)
    def insert_SealDescriptionText_at(self, index, value):
        self.SealDescriptionText.insert(index, value)
    def replace_SealDescriptionText_at(self, index, value):
        self.SealDescriptionText[index] = value
    def get_RecipientCountryCode(self):
        return self.RecipientCountryCode
    def set_RecipientCountryCode(self, RecipientCountryCode):
        self.RecipientCountryCode = RecipientCountryCode
    def get_MovementCode(self):
        return self.MovementCode
    def set_MovementCode(self, MovementCode):
        self.MovementCode = MovementCode
    def get_ExecutionPlace(self):
        return self.ExecutionPlace
    def set_ExecutionPlace(self, ExecutionPlace):
        self.ExecutionPlace = ExecutionPlace
    def get_RailwayStationCode(self):
        return self.RailwayStationCode
    def set_RailwayStationCode(self, RailwayStationCode):
        self.RailwayStationCode = RailwayStationCode
    def get_RailwayStampDate(self):
        return self.RailwayStampDate
    def set_RailwayStampDate(self, RailwayStampDate):
        self.RailwayStampDate = RailwayStampDate
    def get_RegNumberDoc(self):
        return self.RegNumberDoc
    def set_RegNumberDoc(self, RegNumberDoc):
        self.RegNumberDoc = RegNumberDoc
    def get_SecurityLabelCode(self):
        return self.SecurityLabelCode
    def set_SecurityLabelCode(self, SecurityLabelCode):
        self.SecurityLabelCode = SecurityLabelCode
    def get_ESADout_CUGoodsShipment(self):
        return self.ESADout_CUGoodsShipment
    def set_ESADout_CUGoodsShipment(self, ESADout_CUGoodsShipment):
        self.ESADout_CUGoodsShipment = ESADout_CUGoodsShipment
    def get_RBTechMarK(self):
        return self.RBTechMarK
    def set_RBTechMarK(self, RBTechMarK):
        self.RBTechMarK = RBTechMarK
    def get_FilledPerson(self):
        return self.FilledPerson
    def set_FilledPerson(self, FilledPerson):
        self.FilledPerson = FilledPerson
    def get_SignCertifPerson(self):
        return self.SignCertifPerson
    def set_SignCertifPerson(self, SignCertifPerson):
        self.SignCertifPerson = SignCertifPerson
    def get_CUESADCustomsRepresentative(self):
        return self.CUESADCustomsRepresentative
    def set_CUESADCustomsRepresentative(self, CUESADCustomsRepresentative):
        self.CUESADCustomsRepresentative = CUESADCustomsRepresentative
    def get_DocumentModeID(self):
        return self.DocumentModeID
    def set_DocumentModeID(self, DocumentModeID):
        self.DocumentModeID = DocumentModeID
    def validate_CUCustomsProcedureType(self, value):
        result = True
        # Validate type CUCustomsProcedureType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CUCustomsProcedureType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsModeCodeType(self, value):
        result = True
        # Validate type CustomsModeCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsModeCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable3Type(self, value):
        result = True
        # Validate type CodeVariable3Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable3Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_TransitDirectionCodeType(self, value):
        result = True
        # Validate type TransitDirectionCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on TransitDirectionCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Code2Type(self, value):
        result = True
        # Validate type Code2Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 2:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code2Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CustomsDeclarationKindType(self, value):
        result = True
        # Validate type CustomsDeclarationKindType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDeclarationKindType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_Text10Type(self, value):
        result = True
        # Validate type Text10Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 10:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on Text10Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on Text10Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Quantity3Type(self, value):
        result = True
        # Validate type Quantity3Type, a restriction on CategoryCust:IntegerCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, int):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (int)' % {"value": value, "lineno": lineno, })
                return False
            if value < 0:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minInclusive restriction on Quantity3Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(str(value)) >= 3:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on Quantity3Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_CodeVariable20Type(self, value):
        result = True
        # Validate type CodeVariable20Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 20:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CodeVariable20Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CodeVariable20Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_FreeText500Type(self, value):
        result = True
        # Validate type FreeText500Type, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 500:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on FreeText500Type' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on FreeText500Type' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_CountryA2CodeType(self, value):
        result = True
        # Validate type CountryA2CodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_CountryA2CodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_CountryA2CodeType_patterns_, ))
                result = False
        return result
    validate_CountryA2CodeType_patterns_ = [['^([A-Z]{2}|[0]{2}|[9]{2})$']]
    def validate_CityNameType(self, value):
        result = True
        # Validate type CityNameType, a restriction on CategoryCust:TextCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 35:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on CityNameType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on CityNameType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_RailwayStationCodeType(self, value):
        result = True
        # Validate type RailwayStationCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if not self.gds_validate_simple_patterns(
                    self.validate_RailwayStationCodeType_patterns_, value):
                self.gds_collector_.add_message('Value "%s" does not match xsd pattern restrictions: %s' % (encode_str_2_3(value), self.validate_RailwayStationCodeType_patterns_, ))
                result = False
        return result
    validate_RailwayStationCodeType_patterns_ = [['^((\\d{5})|(\\d{6}))$']]
    def validate_DateCustType(self, value):
        result = True
        # Validate type DateCustType, a restriction on CategoryCust:DateCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, datetime_.date):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (datetime_.date)' % {"value": value, "lineno": lineno, })
                return False
            pass
        return result
    def validate_DocumentNumberType(self, value):
        result = True
        # Validate type DocumentNumberType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 50:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentNumberType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentNumberType' % {"value" : value, "lineno": lineno} )
                result = False
        return result
    def validate_Code6Type(self, value):
        result = True
        # Validate type Code6Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code6Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DocumentModeIDType(self, value):
        # Validate type clt_ru:DocumentModeIDType, a restriction on CategoryCust:IdentifierCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) > 30:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd maxLength restriction on DocumentModeIDType' % {"value": value, "lineno": lineno} )
                result = False
            if len(value) < 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd minLength restriction on DocumentModeIDType' % {"value" : value, "lineno": lineno} )
                result = False
    def has__content(self):
        if (
            self.EECEDocHeaderAddInfo is not None or
            self.CustomsProcedure is not None or
            self.CustomsModeCode is not None or
            self.TransitFeature is not None or
            self.TransitDirectionCode is not None or
            self.ElectronicDocumentSign is not None or
            self.DocUsageCode is not None or
            self.DeclarationKind is not None or
            self.SubsoilSign is not None or
            self.SealNumber or
            self.SealQuantity is not None or
            self.SealId or
            self.SealDescriptionText or
            self.RecipientCountryCode is not None or
            self.MovementCode is not None or
            self.ExecutionPlace is not None or
            self.RailwayStationCode is not None or
            self.RailwayStampDate is not None or
            self.RegNumberDoc is not None or
            self.SecurityLabelCode is not None or
            self.ESADout_CUGoodsShipment is not None or
            self.RBTechMarK is not None or
            self.FilledPerson is not None or
            self.SignCertifPerson is not None or
            self.CUESADCustomsRepresentative is not None or
            super(ESADout_CUType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" ', name_='ESADout_CUType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ESADout_CUType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ESADout_CUType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ESADout_CUType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ESADout_CUType'):
        super(ESADout_CUType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ESADout_CUType')
        if self.DocumentModeID is not None and 'DocumentModeID' not in already_processed:
            already_processed.add('DocumentModeID')
            outfile.write(' DocumentModeID=%s' % (quote_attrib(self.DocumentModeID), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0"  xmlns:cltESAD_cu="urn:customs.ru:CUESADCommonLeafTypes:5.17.0"  xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" ', name_='ESADout_CUType', fromsubclass_=False, pretty_print=True):
        super(ESADout_CUType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.EECEDocHeaderAddInfo is not None:
            namespaceprefix_ = self.EECEDocHeaderAddInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.EECEDocHeaderAddInfo_nsprefix_) else ''
            self.EECEDocHeaderAddInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='EECEDocHeaderAddInfo', pretty_print=pretty_print)
        if self.CustomsProcedure is not None:
            namespaceprefix_ = self.CustomsProcedure_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsProcedure_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsProcedure>%s</%sCustomsProcedure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsProcedure), input_name='CustomsProcedure')), namespaceprefix_ , eol_))
        if self.CustomsModeCode is not None:
            namespaceprefix_ = self.CustomsModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CustomsModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCustomsModeCode>%s</%sCustomsModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CustomsModeCode), input_name='CustomsModeCode')), namespaceprefix_ , eol_))
        if self.TransitFeature is not None:
            namespaceprefix_ = self.TransitFeature_nsprefix_ + ':' if (UseCapturedNS_ and self.TransitFeature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitFeature>%s</%sTransitFeature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransitFeature), input_name='TransitFeature')), namespaceprefix_ , eol_))
        if self.TransitDirectionCode is not None:
            namespaceprefix_ = self.TransitDirectionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.TransitDirectionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransitDirectionCode>%s</%sTransitDirectionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransitDirectionCode), input_name='TransitDirectionCode')), namespaceprefix_ , eol_))
        if self.ElectronicDocumentSign is not None:
            namespaceprefix_ = self.ElectronicDocumentSign_nsprefix_ + ':' if (UseCapturedNS_ and self.ElectronicDocumentSign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sElectronicDocumentSign>%s</%sElectronicDocumentSign>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ElectronicDocumentSign), input_name='ElectronicDocumentSign')), namespaceprefix_ , eol_))
        if self.DocUsageCode is not None:
            namespaceprefix_ = self.DocUsageCode_nsprefix_ + ':' if (UseCapturedNS_ and self.DocUsageCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocUsageCode>%s</%sDocUsageCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocUsageCode), input_name='DocUsageCode')), namespaceprefix_ , eol_))
        if self.DeclarationKind is not None:
            namespaceprefix_ = self.DeclarationKind_nsprefix_ + ':' if (UseCapturedNS_ and self.DeclarationKind_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDeclarationKind>%s</%sDeclarationKind>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DeclarationKind), input_name='DeclarationKind')), namespaceprefix_ , eol_))
        if self.SubsoilSign is not None:
            namespaceprefix_ = self.SubsoilSign_nsprefix_ + ':' if (UseCapturedNS_ and self.SubsoilSign_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubsoilSign>%s</%sSubsoilSign>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubsoilSign), input_name='SubsoilSign')), namespaceprefix_ , eol_))
        for SealNumber_ in self.SealNumber:
            namespaceprefix_ = self.SealNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SealNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealNumber>%s</%sSealNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SealNumber_), input_name='SealNumber')), namespaceprefix_ , eol_))
        if self.SealQuantity is not None:
            namespaceprefix_ = self.SealQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.SealQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealQuantity>%s</%sSealQuantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.SealQuantity, input_name='SealQuantity'), namespaceprefix_ , eol_))
        for SealId_ in self.SealId:
            namespaceprefix_ = self.SealId_nsprefix_ + ':' if (UseCapturedNS_ and self.SealId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealId>%s</%sSealId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SealId_), input_name='SealId')), namespaceprefix_ , eol_))
        for SealDescriptionText_ in self.SealDescriptionText:
            namespaceprefix_ = self.SealDescriptionText_nsprefix_ + ':' if (UseCapturedNS_ and self.SealDescriptionText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSealDescriptionText>%s</%sSealDescriptionText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(SealDescriptionText_), input_name='SealDescriptionText')), namespaceprefix_ , eol_))
        if self.RecipientCountryCode is not None:
            namespaceprefix_ = self.RecipientCountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RecipientCountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRecipientCountryCode>%s</%sRecipientCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RecipientCountryCode), input_name='RecipientCountryCode')), namespaceprefix_ , eol_))
        if self.MovementCode is not None:
            namespaceprefix_ = self.MovementCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MovementCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMovementCode>%s</%sMovementCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.MovementCode), input_name='MovementCode')), namespaceprefix_ , eol_))
        if self.ExecutionPlace is not None:
            namespaceprefix_ = self.ExecutionPlace_nsprefix_ + ':' if (UseCapturedNS_ and self.ExecutionPlace_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExecutionPlace>%s</%sExecutionPlace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExecutionPlace), input_name='ExecutionPlace')), namespaceprefix_ , eol_))
        if self.RailwayStationCode is not None:
            namespaceprefix_ = self.RailwayStationCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RailwayStationCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRailwayStationCode>%s</%sRailwayStationCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RailwayStationCode), input_name='RailwayStationCode')), namespaceprefix_ , eol_))
        if self.RailwayStampDate is not None:
            namespaceprefix_ = self.RailwayStampDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RailwayStampDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRailwayStampDate>%s</%sRailwayStampDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RailwayStampDate, input_name='RailwayStampDate'), namespaceprefix_ , eol_))
        if self.RegNumberDoc is not None:
            namespaceprefix_ = self.RegNumberDoc_nsprefix_ + ':' if (UseCapturedNS_ and self.RegNumberDoc_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegNumberDoc>%s</%sRegNumberDoc>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegNumberDoc), input_name='RegNumberDoc')), namespaceprefix_ , eol_))
        if self.SecurityLabelCode is not None:
            namespaceprefix_ = self.SecurityLabelCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SecurityLabelCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSecurityLabelCode>%s</%sSecurityLabelCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SecurityLabelCode), input_name='SecurityLabelCode')), namespaceprefix_ , eol_))
        if self.ESADout_CUGoodsShipment is not None:
            namespaceprefix_ = self.ESADout_CUGoodsShipment_nsprefix_ + ':' if (UseCapturedNS_ and self.ESADout_CUGoodsShipment_nsprefix_) else ''
            self.ESADout_CUGoodsShipment.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ESADout_CUGoodsShipment', pretty_print=pretty_print)
        if self.RBTechMarK is not None:
            namespaceprefix_ = self.RBTechMarK_nsprefix_ + ':' if (UseCapturedNS_ and self.RBTechMarK_nsprefix_) else ''
            self.RBTechMarK.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RBTechMarK', pretty_print=pretty_print)
        if self.FilledPerson is not None:
            namespaceprefix_ = self.FilledPerson_nsprefix_ + ':' if (UseCapturedNS_ and self.FilledPerson_nsprefix_) else ''
            self.FilledPerson.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FilledPerson', pretty_print=pretty_print)
        if self.SignCertifPerson is not None:
            namespaceprefix_ = self.SignCertifPerson_nsprefix_ + ':' if (UseCapturedNS_ and self.SignCertifPerson_nsprefix_) else ''
            self.SignCertifPerson.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SignCertifPerson', pretty_print=pretty_print)
        if self.CUESADCustomsRepresentative is not None:
            namespaceprefix_ = self.CUESADCustomsRepresentative_nsprefix_ + ':' if (UseCapturedNS_ and self.CUESADCustomsRepresentative_nsprefix_) else ''
            self.CUESADCustomsRepresentative.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CUESADCustomsRepresentative', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('DocumentModeID', node)
        if value is not None and 'DocumentModeID' not in already_processed:
            already_processed.add('DocumentModeID')
            self.DocumentModeID = value
            self.DocumentModeID = ' '.join(self.DocumentModeID.split())
            self.validate_DocumentModeIDType(self.DocumentModeID)    # validate type DocumentModeIDType
        super(ESADout_CUType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'EECEDocHeaderAddInfo':
            obj_ = EECEDocHeaderAddInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.EECEDocHeaderAddInfo = obj_
            obj_.original_tagname_ = 'EECEDocHeaderAddInfo'
        elif nodeName_ == 'CustomsProcedure':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsProcedure')
            value_ = self.gds_validate_string(value_, node, 'CustomsProcedure')
            self.CustomsProcedure = value_
            self.CustomsProcedure_nsprefix_ = child_.prefix
            # validate type CUCustomsProcedureType
            self.validate_CUCustomsProcedureType(self.CustomsProcedure)
        elif nodeName_ == 'CustomsModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'CustomsModeCode')
            value_ = self.gds_validate_string(value_, node, 'CustomsModeCode')
            self.CustomsModeCode = value_
            self.CustomsModeCode_nsprefix_ = child_.prefix
            # validate type CustomsModeCodeType
            self.validate_CustomsModeCodeType(self.CustomsModeCode)
        elif nodeName_ == 'TransitFeature':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransitFeature')
            value_ = self.gds_validate_string(value_, node, 'TransitFeature')
            self.TransitFeature = value_
            self.TransitFeature_nsprefix_ = child_.prefix
            # validate type CodeVariable3Type
            self.validate_CodeVariable3Type(self.TransitFeature)
        elif nodeName_ == 'TransitDirectionCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'TransitDirectionCode')
            value_ = self.gds_validate_string(value_, node, 'TransitDirectionCode')
            self.TransitDirectionCode = value_
            self.TransitDirectionCode_nsprefix_ = child_.prefix
            # validate type TransitDirectionCodeType
            self.validate_TransitDirectionCodeType(self.TransitDirectionCode)
        elif nodeName_ == 'ElectronicDocumentSign':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ElectronicDocumentSign')
            value_ = self.gds_validate_string(value_, node, 'ElectronicDocumentSign')
            self.ElectronicDocumentSign = value_
            self.ElectronicDocumentSign_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.ElectronicDocumentSign)
        elif nodeName_ == 'DocUsageCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DocUsageCode')
            value_ = self.gds_validate_string(value_, node, 'DocUsageCode')
            self.DocUsageCode = value_
            self.DocUsageCode_nsprefix_ = child_.prefix
            # validate type CodeVariable3Type
            self.validate_CodeVariable3Type(self.DocUsageCode)
        elif nodeName_ == 'DeclarationKind':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'DeclarationKind')
            value_ = self.gds_validate_string(value_, node, 'DeclarationKind')
            self.DeclarationKind = value_
            self.DeclarationKind_nsprefix_ = child_.prefix
            # validate type CustomsDeclarationKindType
            self.validate_CustomsDeclarationKindType(self.DeclarationKind)
        elif nodeName_ == 'SubsoilSign':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SubsoilSign')
            value_ = self.gds_validate_string(value_, node, 'SubsoilSign')
            self.SubsoilSign = value_
            self.SubsoilSign_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.SubsoilSign)
        elif nodeName_ == 'SealNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SealNumber')
            value_ = self.gds_validate_string(value_, node, 'SealNumber')
            self.SealNumber.append(value_)
            self.SealNumber_nsprefix_ = child_.prefix
            # validate type Text10Type
            self.validate_Text10Type(self.SealNumber[-1])
        elif nodeName_ == 'SealQuantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'SealQuantity')
            ival_ = self.gds_validate_integer(ival_, node, 'SealQuantity')
            self.SealQuantity = ival_
            self.SealQuantity_nsprefix_ = child_.prefix
            # validate type Quantity3Type
            self.validate_Quantity3Type(self.SealQuantity)
        elif nodeName_ == 'SealId':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SealId')
            value_ = self.gds_validate_string(value_, node, 'SealId')
            self.SealId.append(value_)
            self.SealId_nsprefix_ = child_.prefix
            # validate type CodeVariable20Type
            self.validate_CodeVariable20Type(self.SealId[-1])
        elif nodeName_ == 'SealDescriptionText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SealDescriptionText')
            value_ = self.gds_validate_string(value_, node, 'SealDescriptionText')
            self.SealDescriptionText.append(value_)
            self.SealDescriptionText_nsprefix_ = child_.prefix
            # validate type FreeText500Type
            self.validate_FreeText500Type(self.SealDescriptionText[-1])
        elif nodeName_ == 'RecipientCountryCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RecipientCountryCode')
            value_ = self.gds_validate_string(value_, node, 'RecipientCountryCode')
            self.RecipientCountryCode = value_
            self.RecipientCountryCode_nsprefix_ = child_.prefix
            # validate type CountryA2CodeType
            self.validate_CountryA2CodeType(self.RecipientCountryCode)
        elif nodeName_ == 'MovementCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'MovementCode')
            value_ = self.gds_validate_string(value_, node, 'MovementCode')
            self.MovementCode = value_
            self.MovementCode_nsprefix_ = child_.prefix
            # validate type Code2Type
            self.validate_Code2Type(self.MovementCode)
        elif nodeName_ == 'ExecutionPlace':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ExecutionPlace')
            value_ = self.gds_validate_string(value_, node, 'ExecutionPlace')
            self.ExecutionPlace = value_
            self.ExecutionPlace_nsprefix_ = child_.prefix
            # validate type CityNameType
            self.validate_CityNameType(self.ExecutionPlace)
        elif nodeName_ == 'RailwayStationCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RailwayStationCode')
            value_ = self.gds_validate_string(value_, node, 'RailwayStationCode')
            self.RailwayStationCode = value_
            self.RailwayStationCode_nsprefix_ = child_.prefix
            # validate type RailwayStationCodeType
            self.validate_RailwayStationCodeType(self.RailwayStationCode)
        elif nodeName_ == 'RailwayStampDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RailwayStampDate = dval_
            self.RailwayStampDate_nsprefix_ = child_.prefix
            # validate type DateCustType
            self.validate_DateCustType(self.RailwayStampDate)
        elif nodeName_ == 'RegNumberDoc':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'RegNumberDoc')
            value_ = self.gds_validate_string(value_, node, 'RegNumberDoc')
            self.RegNumberDoc = value_
            self.RegNumberDoc_nsprefix_ = child_.prefix
            # validate type DocumentNumberType
            self.validate_DocumentNumberType(self.RegNumberDoc)
        elif nodeName_ == 'SecurityLabelCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SecurityLabelCode')
            value_ = self.gds_validate_string(value_, node, 'SecurityLabelCode')
            self.SecurityLabelCode = value_
            self.SecurityLabelCode_nsprefix_ = child_.prefix
            # validate type Code6Type
            self.validate_Code6Type(self.SecurityLabelCode)
        elif nodeName_ == 'ESADout_CUGoodsShipment':
            obj_ = ESADout_CUGoodsShipmentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ESADout_CUGoodsShipment = obj_
            obj_.original_tagname_ = 'ESADout_CUGoodsShipment'
        elif nodeName_ == 'RBTechMarK':
            obj_ = RBTechMarKType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RBTechMarK = obj_
            obj_.original_tagname_ = 'RBTechMarK'
        elif nodeName_ == 'FilledPerson':
            obj_ = SignatoryPersonDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FilledPerson = obj_
            obj_.original_tagname_ = 'FilledPerson'
        elif nodeName_ == 'SignCertifPerson':
            obj_ = SignCertifPersonType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.SignCertifPerson = obj_
            obj_.original_tagname_ = 'SignCertifPerson'
        elif nodeName_ == 'CUESADCustomsRepresentative':
            obj_ = SignatoryRepresentativeDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CUESADCustomsRepresentative = obj_
            obj_.original_tagname_ = 'CUESADCustomsRepresentative'
        super(ESADout_CUType, self)._buildChildren(child_, node, nodeName_, True)
# end class ESADout_CUType


class GoodsShipmentSubjectDetailsType(SubjectBranchDetailsType):
    """GoodsShipmentSubjectDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    п
    о
    л
    у
    ч
    а
    т
    е
    л
    е
    и
    л
    и
    о
    т
    п
    р
    а
    в
    и
    т
    е
    л
    е
    т
    о
    в
    а
    р
    а
    AEORegistryIdDetails -- Н
    о
    м
    е
    р
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    EqualIndicator -- П
    р
    и
    з
    н
    а
    к
    с
    о
    в
    п
    а
    д
    е
    н
    и
    я
    (
    н
    е
    с
    о
    в
    п
    а
    д
    е
    н
    и
    я
    )
    с
    в
    е
    д
    е
    н
    и
    й
    с
    о
    с
    в
    е
    д
    е
    н
    и
    я
    м
    и
    о
    д
    е
    к
    л
    а
    р
    а
    н
    т
    е
    (
    з
    а
    я
    в
    и
    т
    е
    л
    е
    ): 1 -
    с
    в
    е
    д
    е
    н
    и
    я
    с
    о
    в
    п
    а
    д
    а
    ю
    т
    ExchangePostOfficeCode -- К
    о
    д
    у
    ч
    р
    е
    ж
    д
    е
    н
    и
    я
    о
    б
    м
    е
    н
    а
    (
    п
    о
    д
    а
    ч
    и
    )
    м
    е
    ж
    д
    у
    н
    а
    р
    о
    д
    н
    ы
    х
    п
    о
    ч
    т
    о
    в
    ы
    х
    о
    т
    п
    р
    а
    в
    л
    е
    н
    и
    й
    SubjectAdditionalCode -- К
    о
    д
    о
    с
    о
    б
    е
    н
    н
    о
    с
    т
    и
    с
    в
    е
    д
    е
    н
    и
    й
    о
    с
    у
    б
    ъ
    е
    к
    т
    е
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectBranchDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, IdentityCard=None, SubjectAddressDetails=None, CommunicationDetails=None, SubjectBranch=None, AEORegistryIdDetails=None, EqualIndicator=None, ExchangePostOfficeCode=None, SubjectAdditionalCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("GoodsShipmentSubjectDetailsType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN, PersonId, IdentityCard, SubjectAddressDetails, CommunicationDetails, SubjectBranch,  **kwargs_)
        self.AEORegistryIdDetails = AEORegistryIdDetails
        self.AEORegistryIdDetails_nsprefix_ = "catESAD_cu"
        self.EqualIndicator = EqualIndicator
        self.validate_IndicatorType(self.EqualIndicator)
        self.EqualIndicator_nsprefix_ = "clt_ru"
        self.ExchangePostOfficeCode = ExchangePostOfficeCode
        self.validate_Code6Type(self.ExchangePostOfficeCode)
        self.ExchangePostOfficeCode_nsprefix_ = "clt_ru"
        self.SubjectAdditionalCode = SubjectAdditionalCode
        self.validate_LetterIndicatorType(self.SubjectAdditionalCode)
        self.SubjectAdditionalCode_nsprefix_ = "clt_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GoodsShipmentSubjectDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GoodsShipmentSubjectDetailsType.subclass:
            return GoodsShipmentSubjectDetailsType.subclass(*args_, **kwargs_)
        else:
            return GoodsShipmentSubjectDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AEORegistryIdDetails(self):
        return self.AEORegistryIdDetails
    def set_AEORegistryIdDetails(self, AEORegistryIdDetails):
        self.AEORegistryIdDetails = AEORegistryIdDetails
    def get_EqualIndicator(self):
        return self.EqualIndicator
    def set_EqualIndicator(self, EqualIndicator):
        self.EqualIndicator = EqualIndicator
    def get_ExchangePostOfficeCode(self):
        return self.ExchangePostOfficeCode
    def set_ExchangePostOfficeCode(self, ExchangePostOfficeCode):
        self.ExchangePostOfficeCode = ExchangePostOfficeCode
    def get_SubjectAdditionalCode(self):
        return self.SubjectAdditionalCode
    def set_SubjectAdditionalCode(self, SubjectAdditionalCode):
        self.SubjectAdditionalCode = SubjectAdditionalCode
    def validate_IndicatorType(self, value):
        result = True
        # Validate type IndicatorType, a restriction on CategoryCust:IndicatorCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            pass
        return result
    def validate_Code6Type(self, value):
        result = True
        # Validate type Code6Type, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 6:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on Code6Type' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_LetterIndicatorType(self, value):
        result = True
        # Validate type LetterIndicatorType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on LetterIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.AEORegistryIdDetails is not None or
            self.EqualIndicator is not None or
            self.ExchangePostOfficeCode is not None or
            self.SubjectAdditionalCode is not None or
            super(GoodsShipmentSubjectDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsShipmentSubjectDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('GoodsShipmentSubjectDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'GoodsShipmentSubjectDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsShipmentSubjectDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='GoodsShipmentSubjectDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='GoodsShipmentSubjectDetailsType'):
        super(GoodsShipmentSubjectDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='GoodsShipmentSubjectDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0"  xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='GoodsShipmentSubjectDetailsType', fromsubclass_=False, pretty_print=True):
        super(GoodsShipmentSubjectDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AEORegistryIdDetails is not None:
            namespaceprefix_ = self.AEORegistryIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AEORegistryIdDetails_nsprefix_) else ''
            self.AEORegistryIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AEORegistryIdDetails', pretty_print=pretty_print)
        if self.EqualIndicator is not None:
            namespaceprefix_ = self.EqualIndicator_nsprefix_ + ':' if (UseCapturedNS_ and self.EqualIndicator_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEqualIndicator>%s</%sEqualIndicator>%s' % (namespaceprefix_ , self.gds_format_boolean(self.EqualIndicator, input_name='EqualIndicator'), namespaceprefix_ , eol_))
        if self.ExchangePostOfficeCode is not None:
            namespaceprefix_ = self.ExchangePostOfficeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ExchangePostOfficeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangePostOfficeCode>%s</%sExchangePostOfficeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ExchangePostOfficeCode), input_name='ExchangePostOfficeCode')), namespaceprefix_ , eol_))
        if self.SubjectAdditionalCode is not None:
            namespaceprefix_ = self.SubjectAdditionalCode_nsprefix_ + ':' if (UseCapturedNS_ and self.SubjectAdditionalCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubjectAdditionalCode>%s</%sSubjectAdditionalCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SubjectAdditionalCode), input_name='SubjectAdditionalCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(GoodsShipmentSubjectDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AEORegistryIdDetails':
            obj_ = AEORegistryIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AEORegistryIdDetails = obj_
            obj_.original_tagname_ = 'AEORegistryIdDetails'
        elif nodeName_ == 'EqualIndicator':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'EqualIndicator')
            ival_ = self.gds_validate_boolean(ival_, node, 'EqualIndicator')
            self.EqualIndicator = ival_
            self.EqualIndicator_nsprefix_ = child_.prefix
            # validate type IndicatorType
            self.validate_IndicatorType(self.EqualIndicator)
        elif nodeName_ == 'ExchangePostOfficeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'ExchangePostOfficeCode')
            value_ = self.gds_validate_string(value_, node, 'ExchangePostOfficeCode')
            self.ExchangePostOfficeCode = value_
            self.ExchangePostOfficeCode_nsprefix_ = child_.prefix
            # validate type Code6Type
            self.validate_Code6Type(self.ExchangePostOfficeCode)
        elif nodeName_ == 'SubjectAdditionalCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'SubjectAdditionalCode')
            value_ = self.gds_validate_string(value_, node, 'SubjectAdditionalCode')
            self.SubjectAdditionalCode = value_
            self.SubjectAdditionalCode_nsprefix_ = child_.prefix
            # validate type LetterIndicatorType
            self.validate_LetterIndicatorType(self.SubjectAdditionalCode)
        super(GoodsShipmentSubjectDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class GoodsShipmentSubjectDetailsType


class DeclarantDetailsType(SubjectBranchDetailsType):
    """DeclarantDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    д
    е
    к
    л
    а
    р
    а
    н
    т
    е
    (
    з
    а
    я
    в
    и
    т
    е
    л
    е
    )
    RegisterDocumentIdDetails -- С
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    л
    и
    ц
    а
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectBranchDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, IdentityCard=None, SubjectAddressDetails=None, CommunicationDetails=None, SubjectBranch=None, RegisterDocumentIdDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("DeclarantDetailsType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN, PersonId, IdentityCard, SubjectAddressDetails, CommunicationDetails, SubjectBranch,  **kwargs_)
        self.RegisterDocumentIdDetails = RegisterDocumentIdDetails
        self.RegisterDocumentIdDetails_nsprefix_ = "RUScat_ru"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DeclarantDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DeclarantDetailsType.subclass:
            return DeclarantDetailsType.subclass(*args_, **kwargs_)
        else:
            return DeclarantDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegisterDocumentIdDetails(self):
        return self.RegisterDocumentIdDetails
    def set_RegisterDocumentIdDetails(self, RegisterDocumentIdDetails):
        self.RegisterDocumentIdDetails = RegisterDocumentIdDetails
    def has__content(self):
        if (
            self.RegisterDocumentIdDetails is not None or
            super(DeclarantDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='DeclarantDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DeclarantDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DeclarantDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeclarantDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DeclarantDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='DeclarantDetailsType'):
        super(DeclarantDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DeclarantDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:RUScat_ru="urn:customs.ru:RUSCommonAggregateTypes:5.22.0" ', name_='DeclarantDetailsType', fromsubclass_=False, pretty_print=True):
        super(DeclarantDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegisterDocumentIdDetails is not None:
            namespaceprefix_ = self.RegisterDocumentIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.RegisterDocumentIdDetails_nsprefix_) else ''
            self.RegisterDocumentIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RegisterDocumentIdDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(DeclarantDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegisterDocumentIdDetails':
            obj_ = RegisterDocumentIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RegisterDocumentIdDetails = obj_
            obj_.original_tagname_ = 'RegisterDocumentIdDetails'
        super(DeclarantDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class DeclarantDetailsType


class AEODeclarantDetailsType(SubjectBranchDetailsType):
    """AEODeclarantDetailsType -- С
    в
    е
    д
    е
    н
    и
    я
    о
    з
    а
    я
    в
    и
    т
    е
    л
    е
    ,
    в
    к
    л
    ю
    ч
    е
    н
    н
    о
    м
    в
    р
    е
    е
    с
    т
    р
    У
    Э
    О
    AEORegistryIdDetails -- Н
    о
    м
    е
    р
    с
    в
    и
    д
    е
    т
    е
    л
    ь
    с
    т
    в
    а
    о
    в
    к
    л
    ю
    ч
    е
    н
    и
    и
    в
    р
    е
    е
    с
    т
    р
    у
    п
    о
    л
    н
    о
    м
    о
    ч
    е
    н
    н
    ы
    х
    э
    к
    о
    н
    о
    м
    и
    ч
    е
    с
    к
    и
    х
    о
    п
    е
    р
    а
    т
    о
    р
    о
    в
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = SubjectBranchDetailsType
    def __init__(self, OrganizationName=None, ShortName=None, OrganizationLanguage=None, RFOrganizationFeatures=None, RKOrganizationFeatures=None, RBOrganizationFeatures=None, RAOrganizationFeatures=None, KGOrganizationFeatures=None, CountryA2Code=None, BusinessEntityTypeCode=None, BusinessEntityTypeName=None, UITN=None, PersonId=None, IdentityCard=None, SubjectAddressDetails=None, CommunicationDetails=None, SubjectBranch=None, AEORegistryIdDetails=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "RUDECLcat"
        super(globals().get("AEODeclarantDetailsType"), self).__init__(OrganizationName, ShortName, OrganizationLanguage, RFOrganizationFeatures, RKOrganizationFeatures, RBOrganizationFeatures, RAOrganizationFeatures, KGOrganizationFeatures, CountryA2Code, BusinessEntityTypeCode, BusinessEntityTypeName, UITN, PersonId, IdentityCard, SubjectAddressDetails, CommunicationDetails, SubjectBranch,  **kwargs_)
        self.AEORegistryIdDetails = AEORegistryIdDetails
        self.AEORegistryIdDetails_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AEODeclarantDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AEODeclarantDetailsType.subclass:
            return AEODeclarantDetailsType.subclass(*args_, **kwargs_)
        else:
            return AEODeclarantDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AEORegistryIdDetails(self):
        return self.AEORegistryIdDetails
    def set_AEORegistryIdDetails(self, AEORegistryIdDetails):
        self.AEORegistryIdDetails = AEORegistryIdDetails
    def has__content(self):
        if (
            self.AEORegistryIdDetails is not None or
            super(AEODeclarantDetailsType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='AEODeclarantDetailsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AEODeclarantDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AEODeclarantDetailsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AEODeclarantDetailsType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AEODeclarantDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='RUDECLcat:', name_='AEODeclarantDetailsType'):
        super(AEODeclarantDetailsType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AEODeclarantDetailsType')
    def _exportChildren(self, outfile, level, namespaceprefix_='RUDECLcat:', namespacedef_='xmlns:RUDECLcat="urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0" xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" ', name_='AEODeclarantDetailsType', fromsubclass_=False, pretty_print=True):
        super(AEODeclarantDetailsType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AEORegistryIdDetails is not None:
            namespaceprefix_ = self.AEORegistryIdDetails_nsprefix_ + ':' if (UseCapturedNS_ and self.AEORegistryIdDetails_nsprefix_) else ''
            self.AEORegistryIdDetails.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AEORegistryIdDetails', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(AEODeclarantDetailsType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AEORegistryIdDetails':
            obj_ = AEORegistryIdDetailsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AEORegistryIdDetails = obj_
            obj_.original_tagname_ = 'AEORegistryIdDetails'
        super(AEODeclarantDetailsType, self)._buildChildren(child_, node, nodeName_, True)
# end class AEODeclarantDetailsType


class FilledPersonAuthDocType(AuthoritesDocumentType):
    """FilledPersonAuthDocType -- Д
    о
    к
    у
    м
    е
    н
    т
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    и
    й
    п
    о
    л
    н
    о
    м
    о
    ч
    и
    я
    д
    е
    к
    л
    а
    р
    а
    н
    т
    а
    PresentedDocumentModeCode -- К
    о
    д
    в
    и
    д
    а
    п
    р
    е
    д
    с
    т
    а
    в
    л
    я
    е
    м
    о
    г
    о
    д
    о
    к
    у
    м
    е
    н
    т
    а
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    к
    л
    а
    с
    с
    и
    ф
    и
    к
    а
    т
    о
    р
    о
    м
    в
    и
    д
    о
    в
    д
    о
    к
    у
    м
    е
    н
    т
    о
    в
    и
    с
    в
    е
    д
    е
    н
    и
    й
    ,
    и
    с
    п
    о
    л
    ь
    з
    у
    е
    м
    ы
    х
    п
    р
    и
    т
    а
    м
    о
    ж
    е
    н
    н
    о
    м
    д
    е
    к
    л
    а
    р
    и
    р
    о
    в
    а
    н
    и
    и
    ProvidingIndicationMark -- П
    р
    и
    з
    н
    а
    к
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    и
    я
    д
    о
    к
    у
    м
    е
    н
    т
    а
    : 0 -
    д
    о
    к
    у
    м
    е
    н
    т
    н
    е
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    п
    р
    и
    п
    о
    д
    а
    ч
    е
    Д
    Т
    ; 1 -
    д
    о
    к
    у
    м
    е
    н
    т
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    п
    р
    и
    п
    о
    д
    а
    ч
    е
    Д
    Т
    ; 2 -
    д
    о
    к
    у
    м
    е
    н
    т
    н
    е
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    в
    с
    о
    о
    т
    в
    е
    т
    с
    т
    в
    и
    и
    с
    ч
    а
    с
    т
    ь
    ю
    1
    п
    .2
    с
    т
    . 80
    Т
    К
    Е
    А
    Э
    С
    ; 3 -
    д
    о
    к
    у
    м
    е
    н
    т
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    (
    б
    у
    д
    е
    т
    п
    р
    е
    д
    с
    т
    а
    в
    л
    е
    н
    )
    п
    о
    с
    л
    е
    в
    ы
    п
    у
    с
    к
    а
    т
    о
    в
    а
    р
    о
    в
    RFPresentedDocID -- Д
    о
    п
    о
    л
    н
    и
    т
    е
    л
    ь
    н
    ы
    е
    т
    е
    х
    н
    о
    л
    о
    г
    и
    ч
    е
    с
    к
    и
    е
    и
    д
    е
    н
    т
    и
    ф
    и
    к
    а
    т
    о
    р
    ы
    д
    о
    к
    у
    м
    е
    н
    т
    а
    ,
    у
    д
    о
    с
    т
    о
    в
    е
    р
    я
    ю
    щ
    е
    г
    о
    п
    о
    л
    н
    о
    м
    о
    ч
    и
    я
    д
    е
    к
    л
    а
    р
    а
    н
    т
    а
    (
    д
    л
    я
    Р
    Ф
    )
    
    """
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = AuthoritesDocumentType
    def __init__(self, PrDocumentName=None, PrDocumentNumber=None, PrDocumentDate=None, ComplationAuthorityDate=None, PresentedDocumentModeCode=None, ProvidingIndicationMark=None, RFPresentedDocID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = "catESAD_cu"
        super(globals().get("FilledPersonAuthDocType"), self).__init__(PrDocumentName, PrDocumentNumber, PrDocumentDate, ComplationAuthorityDate,  **kwargs_)
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
        self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        self.PresentedDocumentModeCode_nsprefix_ = "clt_ru"
        self.ProvidingIndicationMark = ProvidingIndicationMark
        self.validate_DigitalIndicatorType(self.ProvidingIndicationMark)
        self.ProvidingIndicationMark_nsprefix_ = "clt_ru"
        self.RFPresentedDocID = RFPresentedDocID
        self.RFPresentedDocID_nsprefix_ = "catESAD_cu"
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FilledPersonAuthDocType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FilledPersonAuthDocType.subclass:
            return FilledPersonAuthDocType.subclass(*args_, **kwargs_)
        else:
            return FilledPersonAuthDocType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_PresentedDocumentModeCode(self):
        return self.PresentedDocumentModeCode
    def set_PresentedDocumentModeCode(self, PresentedDocumentModeCode):
        self.PresentedDocumentModeCode = PresentedDocumentModeCode
    def get_ProvidingIndicationMark(self):
        return self.ProvidingIndicationMark
    def set_ProvidingIndicationMark(self, ProvidingIndicationMark):
        self.ProvidingIndicationMark = ProvidingIndicationMark
    def get_RFPresentedDocID(self):
        return self.RFPresentedDocID
    def set_RFPresentedDocID(self, RFPresentedDocID):
        self.RFPresentedDocID = RFPresentedDocID
    def validate_CustomsDocumentCodeType(self, value):
        result = True
        # Validate type CustomsDocumentCodeType, a restriction on CategoryCust:CodeCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            if len(value) != 5:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd length restriction on CustomsDocumentCodeType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def validate_DigitalIndicatorType(self, value):
        result = True
        # Validate type DigitalIndicatorType, a restriction on CategoryCust:NumericCategoriesCust.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, decimal_.Decimal):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (decimal_.Decimal)' % {"value": value, "lineno": lineno, })
                return False
            if len(str(value)) >= 1:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd totalDigits restriction on DigitalIndicatorType' % {"value": value, "lineno": lineno} )
                result = False
        return result
    def has__content(self):
        if (
            self.PresentedDocumentModeCode is not None or
            self.ProvidingIndicationMark is not None or
            self.RFPresentedDocID is not None or
            super(FilledPersonAuthDocType, self).has__content()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='FilledPersonAuthDocType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FilledPersonAuthDocType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FilledPersonAuthDocType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FilledPersonAuthDocType')
        if self.has__content():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FilledPersonAuthDocType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='catESAD_cu:', name_='FilledPersonAuthDocType'):
        super(FilledPersonAuthDocType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FilledPersonAuthDocType')
    def _exportChildren(self, outfile, level, namespaceprefix_='catESAD_cu:', namespacedef_='xmlns:catESAD_cu="urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0" xmlns:clt_ru="urn:customs.ru:CommonLeafTypes:5.10.0" ', name_='FilledPersonAuthDocType', fromsubclass_=False, pretty_print=True):
        super(FilledPersonAuthDocType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PresentedDocumentModeCode is not None:
            namespaceprefix_ = self.PresentedDocumentModeCode_nsprefix_ + ':' if (UseCapturedNS_ and self.PresentedDocumentModeCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPresentedDocumentModeCode>%s</%sPresentedDocumentModeCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PresentedDocumentModeCode), input_name='PresentedDocumentModeCode')), namespaceprefix_ , eol_))
        if self.ProvidingIndicationMark is not None:
            namespaceprefix_ = self.ProvidingIndicationMark_nsprefix_ + ':' if (UseCapturedNS_ and self.ProvidingIndicationMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProvidingIndicationMark>%s</%sProvidingIndicationMark>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ProvidingIndicationMark, input_name='ProvidingIndicationMark'), namespaceprefix_ , eol_))
        if self.RFPresentedDocID is not None:
            namespaceprefix_ = self.RFPresentedDocID_nsprefix_ + ':' if (UseCapturedNS_ and self.RFPresentedDocID_nsprefix_) else ''
            self.RFPresentedDocID.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RFPresentedDocID', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(FilledPersonAuthDocType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'PresentedDocumentModeCode':
            value_ = child_.text
            if value_:
                value_ = re_.sub(String_cleanup_pat_, " ", value_).strip()
            else:
                value_ = ""
            value_ = self.gds_parse_string(value_, node, 'PresentedDocumentModeCode')
            value_ = self.gds_validate_string(value_, node, 'PresentedDocumentModeCode')
            self.PresentedDocumentModeCode = value_
            self.PresentedDocumentModeCode_nsprefix_ = child_.prefix
            # validate type CustomsDocumentCodeType
            self.validate_CustomsDocumentCodeType(self.PresentedDocumentModeCode)
        elif nodeName_ == 'ProvidingIndicationMark' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ProvidingIndicationMark')
            fval_ = self.gds_validate_decimal(fval_, node, 'ProvidingIndicationMark')
            self.ProvidingIndicationMark = fval_
            self.ProvidingIndicationMark_nsprefix_ = child_.prefix
            # validate type DigitalIndicatorType
            self.validate_DigitalIndicatorType(self.ProvidingIndicationMark)
        elif nodeName_ == 'RFPresentedDocID':
            obj_ = RFPresentedDocIDType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RFPresentedDocID = obj_
            obj_.original_tagname_ = 'RFPresentedDocID'
        super(FilledPersonAuthDocType, self)._buildChildren(child_, node, nodeName_, True)
# end class FilledPersonAuthDocType


#
# End data representation classes.
#


GDSClassesMapping = {
    'ESADout_CU': ESADout_CUType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ESADout_CUType'
        rootClass = ESADout_CUType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ESADout_CUType'
        rootClass = ESADout_CUType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ESADout_CUType'
        rootClass = ESADout_CUType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ESADout_CU="urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ESADout_CUType'
        rootClass = ESADout_CUType
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from pi import *\n\n')
        sys.stdout.write('import pi as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
    "{urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0}AutomobileBaseType": "AutomobileBaseType2",
    "{urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0}DeliveryTermsType": "DeliveryTermsType3",
    "{urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0}SupplementaryQuantityType": "SupplementaryQuantityType4",
    "{urn:customs.ru:CUESADCommonLeafTypes:5.17.0}MeasureUnitQualifierCodeType": "MeasureUnitQualifierCodeType5",
    "{urn:customs.ru:CUESADCommonLeafTypes:5.17.0}MeasureUnitQualifierNameType": "MeasureUnitQualifierNameType6",
    "{urn:customs.ru:CommonAggregateTypes:5.22.0}GTDIDType": "GTDIDType1",
    "{urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0}CUWarehousePlaceType": "CUWarehousePlaceType29",
    "{urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0}PaymentDocumentType": "PaymentDocumentType30",
    "{urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0}CUPresentedDocumentsType": "CUPresentedDocumentsType23",
    "{urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0}DTMDocDetailsType": "DTMDocDetailsType24",
    "{urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0}GoodsGroupDescriptionType": "GoodsGroupDescriptionType25",
    "{urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0}RegisterDocumentIdDetailsType": "RegisterDocumentIdDetailsType26",
    "{urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0}TDGuaranteeType": "TDGuaranteeType27",
    "{urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0}TIRIdDetailsType": "TIRIdDetailsType28",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}AEORegistryIdDetailsType": "AEORegistryIdDetailsType11",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}AmountType": "AmountType12",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}CountryDetailsType": "CountryDetailsType13",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}DeliveryTermsType": "DeliveryTermsType14",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}DocBaseType": "DocBaseType15",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}DocumentBaseType": "DocumentBaseType16",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}EECCustomsType": "EECCustomsType17",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}OrganizationType": "OrganizationType18",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}SubjectBaseDetailsType": "SubjectBaseDetailsType19",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}UITN40Type": "UITN40Type20",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}UnifiedCode20Type": "UnifiedCode20Type21",
    "{urn:customs.ru:RUSCommonAggregateTypes:5.22.0}UnifiedPhysicalMeasureType": "UnifiedPhysicalMeasureType22",
    "{urn:customs.ru:RUSCommonLeafTypes:5.21.0}CityNameType": "CityNameType7",
    "{urn:customs.ru:RUSCommonLeafTypes:5.21.0}RegionType": "RegionType8",
    "{urn:customs.ru:RUSCommonLeafTypes:5.21.0}StreetHouseType": "StreetHouseType9",
    "{urn:customs.ru:RUSCommonLeafTypes:5.21.0}TerritoryCodeType": "TerritoryCodeType10",
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {'urn:customs.ru:CUESADCommonAggregateTypesCust:5.22.0': [('AEORegistryIdDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('AutomobileBaseType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('AutomobileType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CarCostInfoType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CIMIdDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CIMListType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CIMRangeType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ComponentDescriptionType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ComponentsListType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ContainerNumberType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ContractCostType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CountryDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CU_ElectricalEnergyType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUConsigmentType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUCustomsPaymentCalculationType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUDelayPaymentsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PaymentSheduleDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUDriverInformationType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUESADCustomsRepresCertificateType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUESADCustomsRepresentativeType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUESADGoodsItemType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUESADGoodsShipmentType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUESADMainContractTermsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUESADPresentedDocumentsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUGoodsLocationPlaceType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUGuaranteeType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUIdentityCardType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUMarkExcisableGoodsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUPrecedingDocumentType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUPreferenciiType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUPresentedDocumentsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUTransportType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUWarehousePlaceType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DeliveryTermsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DimensionType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DocBaseType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DTIdentificationMeansDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DTMDocDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('EECCustomsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADCommonOfficialMarkType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADConsigmentType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADContainerType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADContractDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADContractListType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADCurrencyQuotaType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADCustomsProcedureType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADDecisionType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADExciseListType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADExciseRangeType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADExciseType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADFilledPersonType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADGoodsOfficialMarkType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADGoodsPackagingType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADGoodsQuotaType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADout_CUCustomsPaymentType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADProductQuantityQuotaType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADReloadContainerType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ESADReloadingInfoType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('FilledPersonAuthDocType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('GoodsGroupDescriptionType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('GoodsGroupInformationType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('GoodsItemBaseType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('GoodsSTZType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('GuaranteeTDType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('IdentificationMeansDataUnitDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('IdentificationMeansDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('IdentificationMeansItemDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('IdentificationMeansListDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('IdentificationMeansRangeDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('InvestmentGoodsIdDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('IPObjectRegistryNumType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('LicenseGoodsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('LicenseGroupType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ManufacturerType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ManufacturerAddressType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('MechanismUnitType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('MechUnitPartType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PackagePalleteInformationType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PIRegNumberType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PrecedingDocumentType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ProcessingGoodsCostInfoType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ProcessingGoodsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('RangeMeasureType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('RBGoodsReleaseNumberType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('RFBasePresentedDocIDType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('RFPresentedDocIDType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('RFTechMarkType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SubjectBaseDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SupplementaryQuantityType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SupplyConsigneeType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SupplyConsignorType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SupplyInformationsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('TDGuaranteeType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('TIRIdDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('TransportMeansRegistrationIdDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('UITN40Type',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('UnifiedCode20Type',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('UnifiedPhysicalMeasureType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('WoodDescriptionDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('WoodCodeDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('LabelRangeDetailsType',
                                                           './customs/CUESADCommonAggregateTypesCust.xsd',
                                                           'CT')],
 'urn:customs.ru:CUESADCommonLeafTypes:5.17.0': [('AccessCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('CUIdentityCardCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('AIIdType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('CodeVariable100Type',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('CustomsCostAppraiseMethodType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('CustomsDeclarationKindType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('CustomsModeCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('DealNatureCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('ExciseNumberType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('ExciseSeriesesType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('FormNumberType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('FoundationType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('GoodsArticulType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('GoodsTransferFeatureType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('GRNType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('GuaranteeCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('IPORegistryNumberType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('MeasureUnitQualifierCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('MeasureUnitQualifierNameType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('MilitaryProductCategoryType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('PackageDescriptionType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('IdentifacationMeansCustomsIdType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('PaymentWayCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('PrivelegeDocumentCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('Quantity10Type',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('RateType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('TDocTypes',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('TransportKindCodeType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('WeightingFactorType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('WoodAssortiment',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST'),
                                                 ('WoodKindType',
                                                  './customs/CUESADCommonLeafTypesCust.xsd',
                                                  'ST')],
 'urn:customs.ru:Categories:3.0.0': [('BinaryDataCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('CodeCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('DateCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('DateTimeCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('IdentifierCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('IndicatorCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('IntegerCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('NumericCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('QuantityCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('TextCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('TimeCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST'),
                                     ('YearCategoriesCust',
                                      './customs/CategoriesCust.xsd',
                                      'ST')],
 'urn:customs.ru:CommonAggregateTypes:5.22.0': [('AddressType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('AuthoritesDocumentType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('AutomobileBaseType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('BankInformationType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('BaseDocType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('CUBranchDescriptionType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('CUCustomsType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('CUOrganizationType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('CUTransportMeansType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('CargoBaseType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('ContactType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('CustomsPersonType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('CustomsType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('DeliveryTermsRUType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('DeliveryTermsType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('DimensionsType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('DocumentBaseType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('DriverInformationType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('GTDID5Type',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('GTDID6Type',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('GTDIDType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('GoodsBaseType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('ITNKZType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('IdentityCardType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('KGOrganizationFeaturesType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('OrganizationBackAddrType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('OrganizationBaseType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('OrganizationType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('OrganizationWBankType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('PersonBaseType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('PersonSignatureType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('RAOrganizationFeaturesType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('RBOrganizationFeaturesType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('RFOrganizationFeaturesType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('RKOrganizationFeaturesType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('SupplementaryQuantityType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('TransportGoodsBaseType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('TransportMeansBaseType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT'),
                                                ('TransportMeansPassportType',
                                                 './customs/CommonAggregateTypesCust.xsd',
                                                 'CT')],
 'urn:customs.ru:CommonLeafTypes:5.10.0': [('AccountType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('AmountType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ArchStatusCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ArchiveDeclarantIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ArchiveDocumentIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ArchiveIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('BICIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('BINType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('BankMFOType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CUCustomsPaymentCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CUCustomsProcedureType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CUGoodsNomenclatuerCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CityNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code10Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code13Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code14Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code15Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code2Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code3Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code4Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code5Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code6Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code8Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Code9Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable10Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable11Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable14Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable18Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable20Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable2Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable3Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable4Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable5Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable6Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable7Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CodeVariable8Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ContainerIdentityType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Count10Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Count19Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Count2Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Count3Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Count4Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Count5Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Count6Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Count8Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CountryA2CodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CountryA3CodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CountryN3CodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CountryNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CurrencyA3CodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CurrencyN3CodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CurrencyNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CurrencyRateType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CustomsCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CustomsDocumentCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CustomsOfficeNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('CustomsPaymentCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DateCustType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DateTimeCustType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DateYearCustType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DeliveryTermsNumericCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DigitalIndicatorType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DocumentCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DocumentIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DocumentModeIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DocumentNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('DocumentNumberType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('EngineIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('EnginePowerQuanityType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('EngineVolumeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ForeignAccountType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('FreeText250Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('FreeText500Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('GTDIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('GoodMarkingType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('GoodsNomenclatuerAddCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('GoodsNomenclatureCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('IINType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('INNIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ITNReservType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ITNType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('IdentityCardCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('IdentityCardNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('IdentityCardNumberType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('IdentityCardSeriesType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('IncotermsDeliveryStringCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('IndicatorType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('KGINNIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('KGOKPOIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('KPPCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('LNPIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('LanguageCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('LetterIndicatorType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('MarkCarCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('MarkCarNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('MeasureUnitQualifierCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('MeasureUnitQualifierNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('MonthYearType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('NameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Numeric1Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('OGRNIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('OKATOCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('OKPOIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('OverallDimensionType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('PackageCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('PackagesQuantityType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('PakageNumberType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('PhoneNumberType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('PlaceNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('PostType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('PostalCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('PrecedingDocumentNumberType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ProcentNumericType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity11Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity14point2Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity18point3Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity2Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity3Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity4Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity4point2Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity5Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Quantity8Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('QuantityBasis0Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('QuantityBasisType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('RNNIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('RailwayStationCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('RegionCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('RegionType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('SWIFTIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('SeriesCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ServiceModeCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('SheetNumberType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('ShortNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('SocialServiceCertificateType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('SocialServiceNumberType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('StreetHouseType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TINType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TIRHolderIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TNVEDContractType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TaxOrganIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TerritoryCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Text10Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Text150Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Text3MB',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Text40Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Text4Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Text50Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('Text5Type',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TimeCustType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TransitDirectionCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TransportCategoryCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TransportMeansColorCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TransportMeansIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TransportModeCodeType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TransportNameType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TransportPassportIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('TransportStateSignIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('UNNType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('UNPTtype',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('VINIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('VisualIdentifierCIMType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('WarehouseLicenceIDType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST'),
                                           ('WeighQuantityType',
                                            './customs/CommonLeafTypesCust.xsd',
                                            'ST')],
 'urn:customs.ru:Information:CustomsDocuments:ESADout_CU:5.23.0': [('ESADout_CUType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('AuthoriziedOperatorDetailsType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('CUWarehousePlaceType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('CustomsPaymentType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUBorderTransportType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUCarrierType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUConsigmentType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUDepartureArrivalTransportType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUFinancialAdjustingResponsiblePersonType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUGoodsLocationType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUGoodsShipmentType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUGoodsType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUMainContractTermsType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('ESADout_CUPaymentsType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('PaymentDocumentType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('RBTechMarKType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT'),
                                                                   ('TDDeliveryPlaceType',
                                                                    './customs/ESADout_CU.xsd',
                                                                    'CT')],
 'urn:customs.ru:RUDeclCommonAggregateTypesCust:5.23.0': [('AEODeclarantDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('BasePresentedDocDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('BrokerRegistryDocDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CalculationType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CommodityDescriptionBaseDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CommodityGroupItemDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CUPresentedDocumentsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('CustomDocIDType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DeclarantDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DisassemComponentType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DocumentPresentingDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('DTMDocDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('GoodsGroupDescriptionType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('GoodsLocationDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('GoodsShipmentSubjectDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('InformationSourceDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PaymentDocumentType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PaymentGuaranteeDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PlaceDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PowerOfAttorneyDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PrecedingDocDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PrecedingDocumentCustomsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PrecedingDocumentOtherType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PrecedingGoodsDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('PresentedDocDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ProcessingGoodsDeclarationType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('ProcessingOperationDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('RegisterDocumentDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('RegisterDocumentIdDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('RepresentativeContractDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SignatoryPersonDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SignatoryPersonIdentityDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SignatoryRepresentativeDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SignCertifPersonType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('SimplePresentedDocDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('TDGuaranteeType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT'),
                                                          ('TIRIdDetailsType',
                                                           './customs/RUDeclCommonAggregateTypesCust.xsd',
                                                           'CT')],
 'urn:customs.ru:RUSCommonAggregateTypes:5.22.0': [('AEORegistryIdDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('AmountType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('AmountNType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('BusinessEntityId20Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('CarrierRepresentativeDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('CountryDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('CountryDetailsV3Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('CustomsPersonDetails',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('DeliveryTermsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('DocBaseType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('DocBaseV2Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('DocBaseV4Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('DocNumberType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('DocumentBaseType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('DocumentBaseV1Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('EECCustomsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('EECDTGoodsBaseDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('EECEDocHeaderAddInfoType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('EECGoodsBaseType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('EECGoodsManufacturerDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('ExchangeRateWithCurrencyA3Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('GoodLocationTransportMeansDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('InvoiceValueBaseDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('OrganizationType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('PeriodDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('RegisterDocumentIdDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('RegisterOrganizationDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('ResourceItemStatusDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('RUAddressType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('RUIdentityCardType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('RUOrganizationBaseType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('RUOrganizationNameAddrType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('RUOrganizationType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('SigningDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('SubjectBaseDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('SubjectBranchDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('SubjectDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('SubjectDetailsBankType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('SupplementaryQuantity24point8Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('TradeCountryDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('TransportMeansRegIdType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('UITN40Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('UnifiedCode20Type',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('UnifiedPhysicalMeasureType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT'),
                                                   ('WarehouseDetailsType',
                                                    './customs/RUSCommonAggregateTypes.xsd',
                                                    'CT')],
 'urn:customs.ru:RUSCommonLeafTypes:5.21.0': [('AddressTextType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Amount20point4Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('BankIdType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('CityNameType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('CommunicationChannelIdType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('DistrictType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('DurationType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('EDocCodeType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('FreeText1000Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('FreeText4000Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('HouseType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Id25Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('InfEnvelopeCodeType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('LocationCodeType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Name120Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Name300Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('PersonIdType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Quantity19point2Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Quantity24point8Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('RegionType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('RiskProfileNumType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('RoomType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('RUCurrencyRateType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('RUIdentityCardCodeType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('StreetHouseType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('String2048Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('TaxpayerIdType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('TemperatureMeasureType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('TerritoryCodeType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Text100Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Text10MB',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Text32Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('Text64Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('TownNameType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('TransportMeansRegIdNumberType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('UITNCode40Type',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST'),
                                              ('VehicleEPassportIdType',
                                               './customs/RUSCommonLeafTypes.xsd',
                                               'ST')]}

__all__ = [
    "AEODeclarantDetailsType",
    "AEORegistryIdDetailsType",
    "AEORegistryIdDetailsType11",
    "AddressType",
    "AmountNType",
    "AmountType12",
    "AuthoritesDocumentType",
    "AuthoriziedOperatorDetailsType",
    "AutomobileBaseType",
    "AutomobileBaseType2",
    "AutomobileType",
    "BankInformationType",
    "BaseDocType",
    "BasePresentedDocDetailsType",
    "BrokerRegistryDocDetailsType",
    "BusinessEntityId20Type",
    "CIMIdDetailsType",
    "CIMListType",
    "CIMRangeType",
    "CUBranchDescriptionType",
    "CUConsigmentType",
    "CUCustomsPaymentCalculationType",
    "CUCustomsType",
    "CUDelayPaymentsType",
    "CUDriverInformationType",
    "CUESADCustomsRepresCertificateType",
    "CUESADCustomsRepresentativeType",
    "CUESADGoodsItemType",
    "CUESADGoodsShipmentType",
    "CUESADMainContractTermsType",
    "CUESADPresentedDocumentsType",
    "CUGoodsLocationPlaceType",
    "CUGuaranteeType",
    "CUIdentityCardType",
    "CUMarkExcisableGoodsType",
    "CUOrganizationType",
    "CUPrecedingDocumentType",
    "CUPreferenciiType",
    "CUPresentedDocumentsType",
    "CUPresentedDocumentsType23",
    "CUTransportMeansType",
    "CUTransportType",
    "CUWarehousePlaceType",
    "CUWarehousePlaceType29",
    "CU_ElectricalEnergyType",
    "CalculationType",
    "CarCostInfoType",
    "CargoBaseType",
    "CarrierRepresentativeDetailsType",
    "CommodityDescriptionBaseDetailsType",
    "CommodityGroupItemDetailsType",
    "ComponentDescriptionType",
    "ComponentsListType",
    "ContactType",
    "ContainerNumberType",
    "ContractCostType",
    "CountryDetailsType",
    "CountryDetailsType13",
    "CountryDetailsV3Type",
    "CustomDocIDType",
    "CustomsPaymentType",
    "CustomsPersonDetails",
    "CustomsPersonType",
    "CustomsType",
    "DTIdentificationMeansDetailsType",
    "DTMDocDetailsType",
    "DTMDocDetailsType24",
    "DeclarantDetailsType",
    "DeliveryTermsRUType",
    "DeliveryTermsType",
    "DeliveryTermsType14",
    "DeliveryTermsType3",
    "DimensionType",
    "DimensionsType",
    "DisassemComponentType",
    "DocBaseType",
    "DocBaseType15",
    "DocBaseV2Type",
    "DocBaseV4Type",
    "DocNumberType",
    "DocumentBaseType",
    "DocumentBaseType16",
    "DocumentBaseV1Type",
    "DocumentPresentingDetailsType",
    "DriverInformationType",
    "EECCustomsType",
    "EECCustomsType17",
    "EECDTGoodsBaseDetailsType",
    "EECEDocHeaderAddInfoType",
    "EECGoodsBaseType",
    "EECGoodsManufacturerDetailsType",
    "ESADCommonOfficialMarkType",
    "ESADConsigmentType",
    "ESADContainerType",
    "ESADContractDetailsType",
    "ESADContractListType",
    "ESADCurrencyQuotaType",
    "ESADCustomsProcedureType",
    "ESADDecisionType",
    "ESADExciseListType",
    "ESADExciseRangeType",
    "ESADExciseType",
    "ESADFilledPersonType",
    "ESADGoodsOfficialMarkType",
    "ESADGoodsPackagingType",
    "ESADGoodsQuotaType",
    "ESADProductQuantityQuotaType",
    "ESADReloadContainerType",
    "ESADReloadingInfoType",
    "ESADout_CUBorderTransportType",
    "ESADout_CUCarrierType",
    "ESADout_CUConsigmentType",
    "ESADout_CUCustomsPaymentType",
    "ESADout_CUDepartureArrivalTransportType",
    "ESADout_CUFinancialAdjustingResponsiblePersonType",
    "ESADout_CUGoodsLocationType",
    "ESADout_CUGoodsShipmentType",
    "ESADout_CUGoodsType",
    "ESADout_CUMainContractTermsType",
    "ESADout_CUPaymentsType",
    "ESADout_CUType",
    "ExchangeRateWithCurrencyA3Type",
    "FilledPersonAuthDocType",
    "GTDID5Type",
    "GTDID6Type",
    "GTDIDType1",
    "GoodLocationTransportMeansDetailsType",
    "GoodsBaseType",
    "GoodsGroupDescriptionType",
    "GoodsGroupDescriptionType25",
    "GoodsGroupInformationType",
    "GoodsItemBaseType",
    "GoodsLocationDetailsType",
    "GoodsSTZType",
    "GoodsShipmentSubjectDetailsType",
    "GuaranteeTDType",
    "IPObjectRegistryNumType",
    "ITNKZType",
    "IdentificationMeansDataUnitDetailsType",
    "IdentificationMeansDetailsType",
    "IdentificationMeansItemDetailsType",
    "IdentificationMeansListDetailsType",
    "IdentificationMeansRangeDetailsType",
    "IdentityCardType",
    "InformationSourceDetailsType",
    "InvestmentGoodsIdDetailsType",
    "InvoiceValueBaseDetailsType",
    "KGOrganizationFeaturesType",
    "LabelRangeDetailsType",
    "LicenseGoodsType",
    "LicenseGroupType",
    "ManufacturerAddressType",
    "ManufacturerType",
    "MechUnitPartType",
    "MechanismUnitType",
    "OrganizationBackAddrType",
    "OrganizationBaseType",
    "OrganizationType",
    "OrganizationType18",
    "OrganizationWBankType",
    "PIRegNumberType",
    "PackagePalleteInformationType",
    "PaymentDocumentType",
    "PaymentDocumentType30",
    "PaymentGuaranteeDetailsType",
    "PaymentSheduleDetailsType",
    "PeriodDetailsType",
    "PersonBaseType",
    "PersonSignatureType",
    "PlaceDetailsType",
    "PowerOfAttorneyDetailsType",
    "PrecedingDocDetailsType",
    "PrecedingDocumentCustomsType",
    "PrecedingDocumentOtherType",
    "PrecedingDocumentType",
    "PrecedingGoodsDetailsType",
    "PresentedDocDetailsType",
    "ProcessingGoodsCostInfoType",
    "ProcessingGoodsDeclarationType",
    "ProcessingGoodsType",
    "ProcessingOperationDetailsType",
    "RAOrganizationFeaturesType",
    "RBGoodsReleaseNumberType",
    "RBOrganizationFeaturesType",
    "RBTechMarKType",
    "RFBasePresentedDocIDType",
    "RFOrganizationFeaturesType",
    "RFPresentedDocIDType",
    "RFTechMarkType",
    "RKOrganizationFeaturesType",
    "RUAddressType",
    "RUIdentityCardType",
    "RUOrganizationBaseType",
    "RUOrganizationNameAddrType",
    "RUOrganizationType",
    "RangeMeasureType",
    "RegisterDocumentDetailsType",
    "RegisterDocumentIdDetailsType",
    "RegisterDocumentIdDetailsType26",
    "RegisterOrganizationDetailsType",
    "RepresentativeContractDetailsType",
    "ResourceItemStatusDetailsType",
    "SignCertifPersonType",
    "SignatoryPersonDetailsType",
    "SignatoryPersonIdentityDetailsType",
    "SignatoryRepresentativeDetailsType",
    "SigningDetailsType",
    "SimplePresentedDocDetailsType",
    "SubjectBaseDetailsType",
    "SubjectBaseDetailsType19",
    "SubjectBranchDetailsType",
    "SubjectDetailsBankType",
    "SubjectDetailsType",
    "SupplementaryQuantity24point8Type",
    "SupplementaryQuantityType",
    "SupplementaryQuantityType4",
    "SupplyConsigneeType",
    "SupplyConsignorType",
    "SupplyInformationsType",
    "TDDeliveryPlaceType",
    "TDGuaranteeType",
    "TDGuaranteeType27",
    "TIRIdDetailsType",
    "TIRIdDetailsType28",
    "TradeCountryDetailsType",
    "TransportGoodsBaseType",
    "TransportMeansBaseType",
    "TransportMeansPassportType",
    "TransportMeansRegIdType",
    "TransportMeansRegistrationIdDetailsType",
    "UITN40Type",
    "UITN40Type20",
    "UnifiedCode20Type",
    "UnifiedCode20Type21",
    "UnifiedPhysicalMeasureType",
    "UnifiedPhysicalMeasureType22",
    "WarehouseDetailsType",
    "WoodCodeDetailsType",
    "WoodDescriptionDetailsType"
]
